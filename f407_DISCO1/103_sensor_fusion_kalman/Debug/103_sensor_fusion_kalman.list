
103_sensor_fusion_kalman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08008978  08008978  00009978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b70  08008b70  0000a068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008b70  08008b70  00009b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b78  08008b78  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b78  08008b78  00009b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b7c  08008b7c  00009b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008b80  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a068  2**0
                  CONTENTS
 10 .bss          00000334  20000068  20000068  0000a068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000039c  2000039c  0000a068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010adb  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002369  00000000  00000000  0001ab73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001040  00000000  00000000  0001cee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cd5  00000000  00000000  0001df20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022476  00000000  00000000  0001ebf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012aab  00000000  00000000  0004106b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0132  00000000  00000000  00053b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123c48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005054  00000000  00000000  00123c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00128ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008960 	.word	0x08008960

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08008960 	.word	0x08008960

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <Kalman_Init>:

/**
 * @brief Initializes a Kalman filter instance.
 * @param kf Pointer to the KalmanFilter structure to be initialized.
 */
void Kalman_Init(KalmanFilter *kf) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    kf->angle = 0.0;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
    kf->bias = 0.0;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	605a      	str	r2, [r3, #4]
    // Initialize the error covariance matrix (P).
    kf->P[0][0] = 1.0;  kf->P[0][1] = 0.0;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
    kf->P[1][0] = 0.0;  kf->P[1][1] = 1.0;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000f4a:	619a      	str	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <Kalman_Update>:
 * @param newAngle New angle measurement from the accelerometer (e.g., in degrees).
 * @param newRate New angular rate measurement from the gyroscope (e.g., in deg/s).
 * @param dt Time step since the last update.
 * @return The updated and filtered angle.
 */
float Kalman_Update(KalmanFilter *kf, float newAngle, float newRate, float dt) {
 8000f58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f66:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f6a:	ed87 1a00 	vstr	s2, [r7]
    // 1. Prediction Step
    // Update the state estimate using the gyroscope data.
    kf->rate = newRate - kf->bias;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f74:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->angle += dt * kf->rate;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	ed93 7a00 	vldr	s14, [r3]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f8e:	edd7 7a00 	vldr	s15, [r7]
 8000f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	edc3 7a00 	vstr	s15, [r3]

    // Update the error covariance matrix (P) based on the state transition model.
    // The constants (0.001 and 0.003) represent the process noise Q.
    kf->P[0][0] += dt * (dt * kf->P[1][1] - kf->P[0][1] - kf->P[1][0] + 0.001);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fac7 	bl	8000538 <__aeabi_f2d>
 8000faa:	4604      	mov	r4, r0
 8000fac:	460d      	mov	r5, r1
 8000fae:	6838      	ldr	r0, [r7, #0]
 8000fb0:	f7ff fac2 	bl	8000538 <__aeabi_f2d>
 8000fb4:	4680      	mov	r8, r0
 8000fb6:	4689      	mov	r9, r1
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	ed93 7a06 	vldr	s14, [r3, #24]
 8000fbe:	edd7 7a00 	vldr	s15, [r7]
 8000fc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fda:	ee17 0a90 	vmov	r0, s15
 8000fde:	f7ff faab 	bl	8000538 <__aeabi_f2d>
 8000fe2:	a375      	add	r3, pc, #468	@ (adr r3, 80011b8 <Kalman_Update+0x260>)
 8000fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe8:	f7ff f948 	bl	800027c <__adddf3>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4640      	mov	r0, r8
 8000ff2:	4649      	mov	r1, r9
 8000ff4:	f7ff faf8 	bl	80005e8 <__aeabi_dmul>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	4629      	mov	r1, r5
 8001000:	f7ff f93c 	bl	800027c <__adddf3>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fd9c 	bl	8000b48 <__aeabi_d2f>
 8001010:	4602      	mov	r2, r0
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	60da      	str	r2, [r3, #12]
    kf->P[0][1] -= dt * kf->P[1][1];
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	ed93 7a04 	vldr	s14, [r3, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001022:	edd7 7a00 	vldr	s15, [r7]
 8001026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800102a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][0] -= dt * kf->P[1][1];
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	ed93 7a05 	vldr	s14, [r3, #20]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001040:	edd7 7a00 	vldr	s15, [r7]
 8001044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->P[1][1] += 0.003;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa6e 	bl	8000538 <__aeabi_f2d>
 800105c:	a358      	add	r3, pc, #352	@ (adr r3, 80011c0 <Kalman_Update+0x268>)
 800105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001062:	f7ff f90b 	bl	800027c <__adddf3>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f7ff fd6b 	bl	8000b48 <__aeabi_d2f>
 8001072:	4602      	mov	r2, r0
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	619a      	str	r2, [r3, #24]

    // 2. Correction Step
    // Calculate the innovation covariance (S) using the measurement noise R (0.03).
    kf->S = kf->P[0][0] + 0.03;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa5b 	bl	8000538 <__aeabi_f2d>
 8001082:	a351      	add	r3, pc, #324	@ (adr r3, 80011c8 <Kalman_Update+0x270>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff f8f8 	bl	800027c <__adddf3>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fd58 	bl	8000b48 <__aeabi_d2f>
 8001098:	4602      	mov	r2, r0
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	629a      	str	r2, [r3, #40]	@ 0x28
    // Calculate the Kalman gain (K).
    kf->K[0] = kf->P[0][0] / kf->S;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	edd3 6a03 	vldr	s13, [r3, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80010aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	edc3 7a07 	vstr	s15, [r3, #28]
    kf->K[1] = kf->P[1][0] / kf->S;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	edd3 6a05 	vldr	s13, [r3, #20]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80010c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	edc3 7a08 	vstr	s15, [r3, #32]

    // Calculate the measurement residual (y).
    kf->y = newAngle - kf->angle;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80010d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    // Update the state estimate (angle and bias) using the Kalman gain.
    kf->angle += kf->K[0] * kf->y;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	ed93 7a00 	vldr	s14, [r3]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	edd3 6a07 	vldr	s13, [r3, #28]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80010f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	edc3 7a00 	vstr	s15, [r3]
    kf->bias += kf->K[1] * kf->y;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	ed93 7a01 	vldr	s14, [r3, #4]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	edd3 6a08 	vldr	s13, [r3, #32]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	edc3 7a01 	vstr	s15, [r3, #4]

    // Update the error covariance matrix after the correction.
    float P00_temp = kf->P[0][0];
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	617b      	str	r3, [r7, #20]
    float P01_temp = kf->P[0][1];
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	613b      	str	r3, [r7, #16]

    kf->P[0][0] -= kf->K[0] * P00_temp;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	edd3 6a07 	vldr	s13, [r3, #28]
 8001136:	edd7 7a05 	vldr	s15, [r7, #20]
 800113a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800113e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->P[0][1] -= kf->K[0] * P01_temp;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	ed93 7a04 	vldr	s14, [r3, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 6a07 	vldr	s13, [r3, #28]
 8001154:	edd7 7a04 	vldr	s15, [r7, #16]
 8001158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][0] -= kf->K[1] * P00_temp;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	ed93 7a05 	vldr	s14, [r3, #20]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001172:	edd7 7a05 	vldr	s15, [r7, #20]
 8001176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800117a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->P[1][1] -= kf->K[1] * P01_temp;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	ed93 7a06 	vldr	s14, [r3, #24]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	edd3 6a08 	vldr	s13, [r3, #32]
 8001190:	edd7 7a04 	vldr	s15, [r7, #16]
 8001194:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	edc3 7a06 	vstr	s15, [r3, #24]

    return kf->angle;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	ee07 3a90 	vmov	s15, r3
}
 80011aa:	eeb0 0a67 	vmov.f32	s0, s15
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011b6:	bf00      	nop
 80011b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80011bc:	3f50624d 	.word	0x3f50624d
 80011c0:	bc6a7efa 	.word	0xbc6a7efa
 80011c4:	3f689374 	.word	0x3f689374
 80011c8:	eb851eb8 	.word	0xeb851eb8
 80011cc:	3f9eb851 	.word	0x3f9eb851

080011d0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE BEGIN 0 */
// Redirects printf() to USART2 for debugging
int _write(int file, char *ptr, int len) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	4804      	ldr	r0, [pc, #16]	@ (80011f8 <_write+0x28>)
 80011e8:	f005 f8f8 	bl	80063dc <HAL_UART_Transmit>
    return len;
 80011ec:	687b      	ldr	r3, [r7, #4]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001ec 	.word	0x200001ec

080011fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001200:	f000 feb4 	bl	8001f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001204:	f000 f868 	bl	80012d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001208:	f000 f9e2 	bl	80015d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800120c:	f000 f8ee 	bl	80013ec <MX_I2C1_Init>
  MX_TIM2_Init();
 8001210:	f000 f91a 	bl	8001448 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001214:	f000 f9b2 	bl	800157c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001218:	f000 f962 	bl	80014e0 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800121c:	f000 f8ba 	bl	8001394 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001220:	481c      	ldr	r0, [pc, #112]	@ (8001294 <main+0x98>)
 8001222:	f004 fc6b 	bl	8005afc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001226:	481c      	ldr	r0, [pc, #112]	@ (8001298 <main+0x9c>)
 8001228:	f004 fc68 	bl	8005afc <HAL_TIM_Base_Start_IT>
  MPU6050_Init();
 800122c:	f000 fada 	bl	80017e4 <MPU6050_Init>
  Kalman_Init(&kalman_pitch);
 8001230:	481a      	ldr	r0, [pc, #104]	@ (800129c <main+0xa0>)
 8001232:	f7ff fe6f 	bl	8000f14 <Kalman_Init>
  Kalman_Init(&kalman_roll);
 8001236:	481a      	ldr	r0, [pc, #104]	@ (80012a0 <main+0xa4>)
 8001238:	f7ff fe6c 	bl	8000f14 <Kalman_Init>
  Kalman_Init(&kalman_yaw);
 800123c:	4819      	ldr	r0, [pc, #100]	@ (80012a4 <main+0xa8>)
 800123e:	f7ff fe69 	bl	8000f14 <Kalman_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(f_imu_read == 1){
 8001242:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <main+0xac>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10e      	bne.n	8001268 <main+0x6c>
		   MPU6050_ReadAccel(&ax, &ay, &az);
 800124a:	4a18      	ldr	r2, [pc, #96]	@ (80012ac <main+0xb0>)
 800124c:	4918      	ldr	r1, [pc, #96]	@ (80012b0 <main+0xb4>)
 800124e:	4819      	ldr	r0, [pc, #100]	@ (80012b4 <main+0xb8>)
 8001250:	f000 faf6 	bl	8001840 <MPU6050_ReadAccel>
		   MPU6050_ReadGyro(&gx, &gy, &gz);
 8001254:	4a18      	ldr	r2, [pc, #96]	@ (80012b8 <main+0xbc>)
 8001256:	4919      	ldr	r1, [pc, #100]	@ (80012bc <main+0xc0>)
 8001258:	4819      	ldr	r0, [pc, #100]	@ (80012c0 <main+0xc4>)
 800125a:	f000 fb20 	bl	800189e <MPU6050_ReadGyro>
		   Compute_Orientation_Kalman();
 800125e:	f000 fb4f 	bl	8001900 <Compute_Orientation_Kalman>
		   //printf("Accel X: %d Y: %d Z: %d Gyro: X: %d, Y: %d, Z: %d \r\n", ax, ay, az, gx, gy, gz);
		   //Send_IMU_Data(&ax, &ay, &az, &gx, &gy, &gz);
		   f_imu_read = 0;
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <main+0xac>)
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
	  }
	  if(f_uart_send == 1){
 8001268:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <main+0xc8>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d1e8      	bne.n	8001242 <main+0x46>
		  printf("Pitch %d Roll %d Yaw %d \r\n", pitch, roll, yaw);
 8001270:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <main+0xcc>)
 8001272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001276:	4619      	mov	r1, r3
 8001278:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <main+0xd0>)
 800127a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127e:	461a      	mov	r2, r3
 8001280:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <main+0xd4>)
 8001282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001286:	4813      	ldr	r0, [pc, #76]	@ (80012d4 <main+0xd8>)
 8001288:	f006 f932 	bl	80074f0 <iprintf>
		  //Send_IMU_Data(&ax, &ay, &az, &gx, &gy, &gz, &pitch, &roll, &yaw);
		  f_uart_send = 0;
 800128c:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <main+0xc8>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
	  if(f_imu_read == 1){
 8001292:	e7d6      	b.n	8001242 <main+0x46>
 8001294:	2000015c 	.word	0x2000015c
 8001298:	200001a4 	.word	0x200001a4
 800129c:	20000084 	.word	0x20000084
 80012a0:	200000b0 	.word	0x200000b0
 80012a4:	200000dc 	.word	0x200000dc
 80012a8:	20000234 	.word	0x20000234
 80012ac:	2000023a 	.word	0x2000023a
 80012b0:	20000238 	.word	0x20000238
 80012b4:	20000236 	.word	0x20000236
 80012b8:	20000240 	.word	0x20000240
 80012bc:	2000023e 	.word	0x2000023e
 80012c0:	2000023c 	.word	0x2000023c
 80012c4:	20000235 	.word	0x20000235
 80012c8:	20000242 	.word	0x20000242
 80012cc:	20000244 	.word	0x20000244
 80012d0:	20000246 	.word	0x20000246
 80012d4:	08008978 	.word	0x08008978

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b094      	sub	sp, #80	@ 0x50
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	2230      	movs	r2, #48	@ 0x30
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f006 fa4a 	bl	8007780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	4b22      	ldr	r3, [pc, #136]	@ (800138c <SystemClock_Config+0xb4>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	4a21      	ldr	r2, [pc, #132]	@ (800138c <SystemClock_Config+0xb4>)
 8001306:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800130a:	6413      	str	r3, [r2, #64]	@ 0x40
 800130c:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <SystemClock_Config+0xb4>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <SystemClock_Config+0xb8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a1b      	ldr	r2, [pc, #108]	@ (8001390 <SystemClock_Config+0xb8>)
 8001322:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <SystemClock_Config+0xb8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001334:	2302      	movs	r3, #2
 8001336:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001338:	2301      	movs	r3, #1
 800133a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800133c:	2310      	movs	r3, #16
 800133e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001340:	2300      	movs	r3, #0
 8001342:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001344:	f107 0320 	add.w	r3, r7, #32
 8001348:	4618      	mov	r0, r3
 800134a:	f003 ff2f 	bl	80051ac <HAL_RCC_OscConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001354:	f000 fbf0 	bl	8001b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001358:	230f      	movs	r3, #15
 800135a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001360:	23a0      	movs	r3, #160	@ 0xa0
 8001362:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f004 f992 	bl	800569c <HAL_RCC_ClockConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800137e:	f000 fbdb 	bl	8001b38 <Error_Handler>
  }
}
 8001382:	bf00      	nop
 8001384:	3750      	adds	r7, #80	@ 0x50
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40007000 	.word	0x40007000

08001394 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	2026      	movs	r0, #38	@ 0x26
 800139e:	f000 ff56 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013a2:	2026      	movs	r0, #38	@ 0x26
 80013a4:	f000 ff6f 	bl	8002286 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2100      	movs	r1, #0
 80013ac:	2020      	movs	r0, #32
 80013ae:	f000 ff4e 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80013b2:	2020      	movs	r0, #32
 80013b4:	f000 ff67 	bl	8002286 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	201f      	movs	r0, #31
 80013be:	f000 ff46 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013c2:	201f      	movs	r0, #31
 80013c4:	f000 ff5f 	bl	8002286 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2100      	movs	r1, #0
 80013cc:	201c      	movs	r0, #28
 80013ce:	f000 ff3e 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013d2:	201c      	movs	r0, #28
 80013d4:	f000 ff57 	bl	8002286 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	201d      	movs	r0, #29
 80013de:	f000 ff36 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013e2:	201d      	movs	r0, #29
 80013e4:	f000 ff4f 	bl	8002286 <HAL_NVIC_EnableIRQ>
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <MX_I2C1_Init+0x50>)
 80013f2:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <MX_I2C1_Init+0x54>)
 80013f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <MX_I2C1_Init+0x50>)
 80013f8:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <MX_I2C1_Init+0x58>)
 80013fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <MX_I2C1_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <MX_I2C1_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <MX_I2C1_Init+0x50>)
 800140a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800140e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001410:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <MX_I2C1_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <MX_I2C1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800141c:	4b07      	ldr	r3, [pc, #28]	@ (800143c <MX_I2C1_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <MX_I2C1_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <MX_I2C1_Init+0x50>)
 800142a:	f001 f9b7 	bl	800279c <HAL_I2C_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001434:	f000 fb80 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000108 	.word	0x20000108
 8001440:	40005400 	.word	0x40005400
 8001444:	000186a0 	.word	0x000186a0

08001448 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	463b      	mov	r3, r7
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <MX_TIM2_Init+0x94>)
 8001466:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800146a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 800146c:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <MX_TIM2_Init+0x94>)
 800146e:	2263      	movs	r2, #99	@ 0x63
 8001470:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <MX_TIM2_Init+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001478:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <MX_TIM2_Init+0x94>)
 800147a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800147e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001480:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <MX_TIM2_Init+0x94>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <MX_TIM2_Init+0x94>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800148c:	4813      	ldr	r0, [pc, #76]	@ (80014dc <MX_TIM2_Init+0x94>)
 800148e:	f004 fae5 	bl	8005a5c <HAL_TIM_Base_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001498:	f000 fb4e 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <MX_TIM2_Init+0x94>)
 80014aa:	f004 fc87 	bl	8005dbc <HAL_TIM_ConfigClockSource>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014b4:	f000 fb40 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014c0:	463b      	mov	r3, r7
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	@ (80014dc <MX_TIM2_Init+0x94>)
 80014c6:	f004 fea9 	bl	800621c <HAL_TIMEx_MasterConfigSynchronization>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014d0:	f000 fb32 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000015c 	.word	0x2000015c

080014e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f4:	463b      	mov	r3, r7
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <MX_TIM3_Init+0x94>)
 80014fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001578 <MX_TIM3_Init+0x98>)
 8001500:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001502:	4b1c      	ldr	r3, [pc, #112]	@ (8001574 <MX_TIM3_Init+0x94>)
 8001504:	2263      	movs	r2, #99	@ 0x63
 8001506:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <MX_TIM3_Init+0x94>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800150e:	4b19      	ldr	r3, [pc, #100]	@ (8001574 <MX_TIM3_Init+0x94>)
 8001510:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001514:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001516:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <MX_TIM3_Init+0x94>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <MX_TIM3_Init+0x94>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001522:	4814      	ldr	r0, [pc, #80]	@ (8001574 <MX_TIM3_Init+0x94>)
 8001524:	f004 fa9a 	bl	8005a5c <HAL_TIM_Base_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800152e:	f000 fb03 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001532:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001536:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	4619      	mov	r1, r3
 800153e:	480d      	ldr	r0, [pc, #52]	@ (8001574 <MX_TIM3_Init+0x94>)
 8001540:	f004 fc3c 	bl	8005dbc <HAL_TIM_ConfigClockSource>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800154a:	f000 faf5 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001556:	463b      	mov	r3, r7
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	@ (8001574 <MX_TIM3_Init+0x94>)
 800155c:	f004 fe5e 	bl	800621c <HAL_TIMEx_MasterConfigSynchronization>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001566:	f000 fae7 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200001a4 	.word	0x200001a4
 8001578:	40000400 	.word	0x40000400

0800157c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001580:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 8001582:	4a12      	ldr	r2, [pc, #72]	@ (80015cc <MX_USART2_UART_Init+0x50>)
 8001584:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001586:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 8001588:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800158c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 80015b4:	f004 fec2 	bl	800633c <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015be:	f000 fabb 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200001ec 	.word	0x200001ec
 80015cc:	40004400 	.word	0x40004400

080015d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	4b20      	ldr	r3, [pc, #128]	@ (800166c <MX_GPIO_Init+0x9c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a1f      	ldr	r2, [pc, #124]	@ (800166c <MX_GPIO_Init+0x9c>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <MX_GPIO_Init+0x9c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b19      	ldr	r3, [pc, #100]	@ (800166c <MX_GPIO_Init+0x9c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a18      	ldr	r2, [pc, #96]	@ (800166c <MX_GPIO_Init+0x9c>)
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b16      	ldr	r3, [pc, #88]	@ (800166c <MX_GPIO_Init+0x9c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	4b12      	ldr	r3, [pc, #72]	@ (800166c <MX_GPIO_Init+0x9c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	4a11      	ldr	r2, [pc, #68]	@ (800166c <MX_GPIO_Init+0x9c>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6313      	str	r3, [r2, #48]	@ 0x30
 800162e:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <MX_GPIO_Init+0x9c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001640:	480b      	ldr	r0, [pc, #44]	@ (8001670 <MX_GPIO_Init+0xa0>)
 8001642:	f001 f877 	bl	8002734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001646:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800164a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	4619      	mov	r1, r3
 800165e:	4804      	ldr	r0, [pc, #16]	@ (8001670 <MX_GPIO_Init+0xa0>)
 8001660:	f000 fecc 	bl	80023fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001664:	bf00      	nop
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	40020c00 	.word	0x40020c00

08001674 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback function for TIM2 and TIM3 interrupts
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) { // 25ms interrupt for IMU data reading
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001684:	d108      	bne.n	8001698 <HAL_TIM_PeriodElapsedCallback+0x24>
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001686:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800168a:	4809      	ldr	r0, [pc, #36]	@ (80016b0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800168c:	f001 f86b 	bl	8002766 <HAL_GPIO_TogglePin>
        f_imu_read = 1;
 8001690:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
    }else if(htim->Instance == TIM3){ // 100ms interrupt for UART data sending
    	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
    	f_uart_send = 1;
    }
}
 8001696:	e007      	b.n	80016a8 <HAL_TIM_PeriodElapsedCallback+0x34>
    }else if(htim->Instance == TIM3){ // 100ms interrupt for UART data sending
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d102      	bne.n	80016a8 <HAL_TIM_PeriodElapsedCallback+0x34>
    	f_uart_send = 1;
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40020c00 	.word	0x40020c00
 80016b4:	20000234 	.word	0x20000234
 80016b8:	40000400 	.word	0x40000400
 80016bc:	20000235 	.word	0x20000235

080016c0 <MPU6050_Write>:
	return uga; // Returns an unused variable
}


// Writes a single byte of data to an MPU6050 register
void MPU6050_Write(uint8_t reg, uint8_t data) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	4603      	mov	r3, r0
 80016c8:	460a      	mov	r2, r1
 80016ca:	71fb      	strb	r3, [r7, #7]
 80016cc:	4613      	mov	r3, r2
 80016ce:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg, data}; // Buffer containing register address and data
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	733b      	strb	r3, [r7, #12]
 80016d4:	79bb      	ldrb	r3, [r7, #6]
 80016d6:	737b      	strb	r3, [r7, #13]
    if(HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buffer, 2, 100) != HAL_OK){
 80016d8:	f107 020c 	add.w	r2, r7, #12
 80016dc:	2364      	movs	r3, #100	@ 0x64
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2302      	movs	r3, #2
 80016e2:	21d0      	movs	r1, #208	@ 0xd0
 80016e4:	4806      	ldr	r0, [pc, #24]	@ (8001700 <MPU6050_Write+0x40>)
 80016e6:	f001 f9b3 	bl	8002a50 <HAL_I2C_Master_Transmit>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <MPU6050_Write+0x36>
    	printf("I2C error\n");
 80016f0:	4804      	ldr	r0, [pc, #16]	@ (8001704 <MPU6050_Write+0x44>)
 80016f2:	f005 ff65 	bl	80075c0 <puts>
    }
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000108 	.word	0x20000108
 8001704:	08008994 	.word	0x08008994

08001708 <MPU6050_Read>:

// Reads multiple bytes from a specified MPU6050 register
void MPU6050_Read(uint8_t reg, uint8_t* data, uint8_t length) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af02      	add	r7, sp, #8
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
 8001714:	4613      	mov	r3, r2
 8001716:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;

	// 1. 레지스터 주소 전송
	status = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, &reg, 1, 100);
 8001718:	1dfa      	adds	r2, r7, #7
 800171a:	2364      	movs	r3, #100	@ 0x64
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2301      	movs	r3, #1
 8001720:	21d0      	movs	r1, #208	@ 0xd0
 8001722:	4827      	ldr	r0, [pc, #156]	@ (80017c0 <MPU6050_Read+0xb8>)
 8001724:	f001 f994 	bl	8002a50 <HAL_I2C_Master_Transmit>
 8001728:	4603      	mov	r3, r0
 800172a:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d01a      	beq.n	8001768 <MPU6050_Read+0x60>
		// 전송 에러 종류 확인
		switch (status) {
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d00e      	beq.n	8001756 <MPU6050_Read+0x4e>
 8001738:	2b03      	cmp	r3, #3
 800173a:	dc10      	bgt.n	800175e <MPU6050_Read+0x56>
 800173c:	2b01      	cmp	r3, #1
 800173e:	d002      	beq.n	8001746 <MPU6050_Read+0x3e>
 8001740:	2b02      	cmp	r3, #2
 8001742:	d004      	beq.n	800174e <MPU6050_Read+0x46>
 8001744:	e00b      	b.n	800175e <MPU6050_Read+0x56>
			case HAL_ERROR:
				printf("I2C Transmit Error: HAL_ERROR\r\n");
 8001746:	481f      	ldr	r0, [pc, #124]	@ (80017c4 <MPU6050_Read+0xbc>)
 8001748:	f005 ff3a 	bl	80075c0 <puts>
				break;
 800174c:	e00b      	b.n	8001766 <MPU6050_Read+0x5e>
			case HAL_BUSY:
				printf("I2C Transmit Error: HAL_BUSY\r\n");
 800174e:	481e      	ldr	r0, [pc, #120]	@ (80017c8 <MPU6050_Read+0xc0>)
 8001750:	f005 ff36 	bl	80075c0 <puts>
				break;
 8001754:	e007      	b.n	8001766 <MPU6050_Read+0x5e>
			case HAL_TIMEOUT:
				printf("I2C Transmit Error: HAL_TIMEOUT\r\n");
 8001756:	481d      	ldr	r0, [pc, #116]	@ (80017cc <MPU6050_Read+0xc4>)
 8001758:	f005 ff32 	bl	80075c0 <puts>
				break;
 800175c:	e003      	b.n	8001766 <MPU6050_Read+0x5e>
			default:
				printf("I2C Transmit Error: Unknown\r\n");
 800175e:	481c      	ldr	r0, [pc, #112]	@ (80017d0 <MPU6050_Read+0xc8>)
 8001760:	f005 ff2e 	bl	80075c0 <puts>
				break;
 8001764:	bf00      	nop
		}
		return; // 에러 발생 시 함수 종료
 8001766:	e028      	b.n	80017ba <MPU6050_Read+0xb2>
	}

	// 2. 데이터 수신
	status = HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, data, length, 100);
 8001768:	79bb      	ldrb	r3, [r7, #6]
 800176a:	b29b      	uxth	r3, r3
 800176c:	2264      	movs	r2, #100	@ 0x64
 800176e:	9200      	str	r2, [sp, #0]
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	21d0      	movs	r1, #208	@ 0xd0
 8001774:	4812      	ldr	r0, [pc, #72]	@ (80017c0 <MPU6050_Read+0xb8>)
 8001776:	f001 fa69 	bl	8002c4c <HAL_I2C_Master_Receive>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d01a      	beq.n	80017ba <MPU6050_Read+0xb2>
		// 수신 에러 종류 확인
		switch (status) {
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d00e      	beq.n	80017a8 <MPU6050_Read+0xa0>
 800178a:	2b03      	cmp	r3, #3
 800178c:	dc10      	bgt.n	80017b0 <MPU6050_Read+0xa8>
 800178e:	2b01      	cmp	r3, #1
 8001790:	d002      	beq.n	8001798 <MPU6050_Read+0x90>
 8001792:	2b02      	cmp	r3, #2
 8001794:	d004      	beq.n	80017a0 <MPU6050_Read+0x98>
 8001796:	e00b      	b.n	80017b0 <MPU6050_Read+0xa8>
			case HAL_ERROR:
				printf("I2C Receive Error: HAL_ERROR\r\n");
 8001798:	480e      	ldr	r0, [pc, #56]	@ (80017d4 <MPU6050_Read+0xcc>)
 800179a:	f005 ff11 	bl	80075c0 <puts>
				break;
 800179e:	e00b      	b.n	80017b8 <MPU6050_Read+0xb0>
			case HAL_BUSY:
				printf("I2C Receive Error: HAL_BUSY\r\n");
 80017a0:	480d      	ldr	r0, [pc, #52]	@ (80017d8 <MPU6050_Read+0xd0>)
 80017a2:	f005 ff0d 	bl	80075c0 <puts>
				break;
 80017a6:	e007      	b.n	80017b8 <MPU6050_Read+0xb0>
			case HAL_TIMEOUT:
				printf("I2C Receive Error: HAL_TIMEOUT\r\n");
 80017a8:	480c      	ldr	r0, [pc, #48]	@ (80017dc <MPU6050_Read+0xd4>)
 80017aa:	f005 ff09 	bl	80075c0 <puts>
				break;
 80017ae:	e003      	b.n	80017b8 <MPU6050_Read+0xb0>
			default:
				printf("I2C Receive Error: Unknown\r\n");
 80017b0:	480b      	ldr	r0, [pc, #44]	@ (80017e0 <MPU6050_Read+0xd8>)
 80017b2:	f005 ff05 	bl	80075c0 <puts>
				break;
 80017b6:	bf00      	nop
		}
		return; // 에러 발생 시 함수 종료
 80017b8:	bf00      	nop
	}
}
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000108 	.word	0x20000108
 80017c4:	080089a0 	.word	0x080089a0
 80017c8:	080089c0 	.word	0x080089c0
 80017cc:	080089e0 	.word	0x080089e0
 80017d0:	08008a04 	.word	0x08008a04
 80017d4:	08008a24 	.word	0x08008a24
 80017d8:	08008a44 	.word	0x08008a44
 80017dc:	08008a64 	.word	0x08008a64
 80017e0:	08008a84 	.word	0x08008a84

080017e4 <MPU6050_Init>:
// Initializes the MPU6050 sensor
void MPU6050_Init(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	// Reset the sensor
	MPU6050_Write(PWR_MGMT_1, 0x80);
 80017e8:	2180      	movs	r1, #128	@ 0x80
 80017ea:	206b      	movs	r0, #107	@ 0x6b
 80017ec:	f7ff ff68 	bl	80016c0 <MPU6050_Write>
	HAL_Delay(100);
 80017f0:	2064      	movs	r0, #100	@ 0x64
 80017f2:	f000 fc2d 	bl	8002050 <HAL_Delay>
    // 1. Wake up the sensor (Power Management 1)
    MPU6050_Write(PWR_MGMT_1, 0x00);
 80017f6:	2100      	movs	r1, #0
 80017f8:	206b      	movs	r0, #107	@ 0x6b
 80017fa:	f7ff ff61 	bl	80016c0 <MPU6050_Write>
    HAL_Delay(100);
 80017fe:	2064      	movs	r0, #100	@ 0x64
 8001800:	f000 fc26 	bl	8002050 <HAL_Delay>

    // 2. Set accelerometer range to ±2g
    MPU6050_Write(ACCEL_CONFIG, 0x00);
 8001804:	2100      	movs	r1, #0
 8001806:	201c      	movs	r0, #28
 8001808:	f7ff ff5a 	bl	80016c0 <MPU6050_Write>
    HAL_Delay(10);
 800180c:	200a      	movs	r0, #10
 800180e:	f000 fc1f 	bl	8002050 <HAL_Delay>

    // 2. Set gyroscope range to ±250°/s
    MPU6050_Write(GYRO_CONFIG, 0x00);
 8001812:	2100      	movs	r1, #0
 8001814:	201b      	movs	r0, #27
 8001816:	f7ff ff53 	bl	80016c0 <MPU6050_Write>
    HAL_Delay(10);
 800181a:	200a      	movs	r0, #10
 800181c:	f000 fc18 	bl	8002050 <HAL_Delay>

    // 3. Set sample rate to 125Hz (1kHz / (1+7))
    MPU6050_Write(SMPLRT_DIV, 0x07);
 8001820:	2107      	movs	r1, #7
 8001822:	2019      	movs	r0, #25
 8001824:	f7ff ff4c 	bl	80016c0 <MPU6050_Write>
    HAL_Delay(10);
 8001828:	200a      	movs	r0, #10
 800182a:	f000 fc11 	bl	8002050 <HAL_Delay>

    // 4. Set Digital Low-Pass Filter (DLPF) to 44Hz
    MPU6050_Write(CONFIG, 0x03);
 800182e:	2103      	movs	r1, #3
 8001830:	201a      	movs	r0, #26
 8001832:	f7ff ff45 	bl	80016c0 <MPU6050_Write>
    HAL_Delay(10);
 8001836:	200a      	movs	r0, #10
 8001838:	f000 fc0a 	bl	8002050 <HAL_Delay>
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <MPU6050_ReadAccel>:

// Reads and combines high and low bytes of accelerometer data
void MPU6050_ReadAccel(int16_t* ax, int16_t* ay, int16_t* az) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];  // Buffer for 6 bytes of accelerometer data (X, Y, Z)

    MPU6050_Read(ACCEL_XOUT_H, buffer, 6);
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	2206      	movs	r2, #6
 8001852:	4619      	mov	r1, r3
 8001854:	203b      	movs	r0, #59	@ 0x3b
 8001856:	f7ff ff57 	bl	8001708 <MPU6050_Read>

    *ax = (int16_t)(buffer[0] << 8 | buffer[1]);  // Combine X high and low bytes
 800185a:	7c3b      	ldrb	r3, [r7, #16]
 800185c:	b21b      	sxth	r3, r3
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	b21a      	sxth	r2, r3
 8001862:	7c7b      	ldrb	r3, [r7, #17]
 8001864:	b21b      	sxth	r3, r3
 8001866:	4313      	orrs	r3, r2
 8001868:	b21a      	sxth	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	801a      	strh	r2, [r3, #0]
    *ay = (int16_t)(buffer[2] << 8 | buffer[3]);  // Combine Y high and low bytes
 800186e:	7cbb      	ldrb	r3, [r7, #18]
 8001870:	b21b      	sxth	r3, r3
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	b21a      	sxth	r2, r3
 8001876:	7cfb      	ldrb	r3, [r7, #19]
 8001878:	b21b      	sxth	r3, r3
 800187a:	4313      	orrs	r3, r2
 800187c:	b21a      	sxth	r2, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	801a      	strh	r2, [r3, #0]
    *az = (int16_t)(buffer[4] << 8 | buffer[5]);  // Combine Z high and low bytes
 8001882:	7d3b      	ldrb	r3, [r7, #20]
 8001884:	b21b      	sxth	r3, r3
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	b21a      	sxth	r2, r3
 800188a:	7d7b      	ldrb	r3, [r7, #21]
 800188c:	b21b      	sxth	r3, r3
 800188e:	4313      	orrs	r3, r2
 8001890:	b21a      	sxth	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	801a      	strh	r2, [r3, #0]
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <MPU6050_ReadGyro>:

// Reads and combines high and low bytes of gyroscope data
void MPU6050_ReadGyro(int16_t* gx, int16_t* gy, int16_t* gz) {
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];  // Buffer for 6 bytes of gyroscope data (X, Y, Z)

    MPU6050_Read(GYRO_XOUT_H, buffer, 6);
 80018aa:	f107 0310 	add.w	r3, r7, #16
 80018ae:	2206      	movs	r2, #6
 80018b0:	4619      	mov	r1, r3
 80018b2:	2043      	movs	r0, #67	@ 0x43
 80018b4:	f7ff ff28 	bl	8001708 <MPU6050_Read>

    *gx = (int16_t)(buffer[0] << 8 | buffer[1]);  // Combine X high and low bytes
 80018b8:	7c3b      	ldrb	r3, [r7, #16]
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	b21a      	sxth	r2, r3
 80018c0:	7c7b      	ldrb	r3, [r7, #17]
 80018c2:	b21b      	sxth	r3, r3
 80018c4:	4313      	orrs	r3, r2
 80018c6:	b21a      	sxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	801a      	strh	r2, [r3, #0]
    *gy = (int16_t)(buffer[2] << 8 | buffer[3]);  // Combine Y high and low bytes
 80018cc:	7cbb      	ldrb	r3, [r7, #18]
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	7cfb      	ldrb	r3, [r7, #19]
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	4313      	orrs	r3, r2
 80018da:	b21a      	sxth	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	801a      	strh	r2, [r3, #0]
    *gz = (int16_t)(buffer[4] << 8 | buffer[5]);  // Combine Z high and low bytes
 80018e0:	7d3b      	ldrb	r3, [r7, #20]
 80018e2:	b21b      	sxth	r3, r3
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	b21a      	sxth	r2, r3
 80018e8:	7d7b      	ldrb	r3, [r7, #21]
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b21a      	sxth	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	801a      	strh	r2, [r3, #0]
}
 80018f4:	bf00      	nop
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	0000      	movs	r0, r0
	...

08001900 <Compute_Orientation_Kalman>:
}



// Computes orientation angles using a Kalman filter
void Compute_Orientation_Kalman() {
 8001900:	b5b0      	push	{r4, r5, r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0
    // Calculate pitch and roll from accelerometer data
    float acc_pitch = atan2(-ax, sqrt(ay * ay + az * az)) * 57.2958;
 8001906:	4b7e      	ldr	r3, [pc, #504]	@ (8001b00 <Compute_Orientation_Kalman+0x200>)
 8001908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190c:	425b      	negs	r3, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fe00 	bl	8000514 <__aeabi_i2d>
 8001914:	4604      	mov	r4, r0
 8001916:	460d      	mov	r5, r1
 8001918:	4b7a      	ldr	r3, [pc, #488]	@ (8001b04 <Compute_Orientation_Kalman+0x204>)
 800191a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191e:	461a      	mov	r2, r3
 8001920:	4b78      	ldr	r3, [pc, #480]	@ (8001b04 <Compute_Orientation_Kalman+0x204>)
 8001922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001926:	fb03 f202 	mul.w	r2, r3, r2
 800192a:	4b77      	ldr	r3, [pc, #476]	@ (8001b08 <Compute_Orientation_Kalman+0x208>)
 800192c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001930:	4619      	mov	r1, r3
 8001932:	4b75      	ldr	r3, [pc, #468]	@ (8001b08 <Compute_Orientation_Kalman+0x208>)
 8001934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	4413      	add	r3, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fde8 	bl	8000514 <__aeabi_i2d>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	ec43 2b10 	vmov	d0, r2, r3
 800194c:	f006 fc9c 	bl	8008288 <sqrt>
 8001950:	eeb0 7a40 	vmov.f32	s14, s0
 8001954:	eef0 7a60 	vmov.f32	s15, s1
 8001958:	eeb0 1a47 	vmov.f32	s2, s14
 800195c:	eef0 1a67 	vmov.f32	s3, s15
 8001960:	ec45 4b10 	vmov	d0, r4, r5
 8001964:	f006 fc8e 	bl	8008284 <atan2>
 8001968:	ec51 0b10 	vmov	r0, r1, d0
 800196c:	a360      	add	r3, pc, #384	@ (adr r3, 8001af0 <Compute_Orientation_Kalman+0x1f0>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	f7fe fe39 	bl	80005e8 <__aeabi_dmul>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	f7ff f8e3 	bl	8000b48 <__aeabi_d2f>
 8001982:	4603      	mov	r3, r0
 8001984:	61fb      	str	r3, [r7, #28]
    float acc_roll  = atan2(ay, az) * 57.2958;
 8001986:	4b5f      	ldr	r3, [pc, #380]	@ (8001b04 <Compute_Orientation_Kalman+0x204>)
 8001988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fdc1 	bl	8000514 <__aeabi_i2d>
 8001992:	4604      	mov	r4, r0
 8001994:	460d      	mov	r5, r1
 8001996:	4b5c      	ldr	r3, [pc, #368]	@ (8001b08 <Compute_Orientation_Kalman+0x208>)
 8001998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fdb9 	bl	8000514 <__aeabi_i2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	ec43 2b11 	vmov	d1, r2, r3
 80019aa:	ec45 4b10 	vmov	d0, r4, r5
 80019ae:	f006 fc69 	bl	8008284 <atan2>
 80019b2:	ec51 0b10 	vmov	r0, r1, d0
 80019b6:	a34e      	add	r3, pc, #312	@ (adr r3, 8001af0 <Compute_Orientation_Kalman+0x1f0>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe fe14 	bl	80005e8 <__aeabi_dmul>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f7ff f8be 	bl	8000b48 <__aeabi_d2f>
 80019cc:	4603      	mov	r3, r0
 80019ce:	61bb      	str	r3, [r7, #24]

    // Convert gyroscope raw data to degrees per second
    float gx_dps = gx / 131.0;
 80019d0:	4b4e      	ldr	r3, [pc, #312]	@ (8001b0c <Compute_Orientation_Kalman+0x20c>)
 80019d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fd9c 	bl	8000514 <__aeabi_i2d>
 80019dc:	a346      	add	r3, pc, #280	@ (adr r3, 8001af8 <Compute_Orientation_Kalman+0x1f8>)
 80019de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e2:	f7fe ff2b 	bl	800083c <__aeabi_ddiv>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f7ff f8ab 	bl	8000b48 <__aeabi_d2f>
 80019f2:	4603      	mov	r3, r0
 80019f4:	617b      	str	r3, [r7, #20]
    float gy_dps = gy / 131.0;
 80019f6:	4b46      	ldr	r3, [pc, #280]	@ (8001b10 <Compute_Orientation_Kalman+0x210>)
 80019f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fd89 	bl	8000514 <__aeabi_i2d>
 8001a02:	a33d      	add	r3, pc, #244	@ (adr r3, 8001af8 <Compute_Orientation_Kalman+0x1f8>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe ff18 	bl	800083c <__aeabi_ddiv>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f7ff f898 	bl	8000b48 <__aeabi_d2f>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	613b      	str	r3, [r7, #16]
    float gz_dps = gz / 131.0;
 8001a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b14 <Compute_Orientation_Kalman+0x214>)
 8001a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fd76 	bl	8000514 <__aeabi_i2d>
 8001a28:	a333      	add	r3, pc, #204	@ (adr r3, 8001af8 <Compute_Orientation_Kalman+0x1f8>)
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	f7fe ff05 	bl	800083c <__aeabi_ddiv>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f7ff f885 	bl	8000b48 <__aeabi_d2f>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	60fb      	str	r3, [r7, #12]

    // Apply the Kalman filter to combine accelerometer and gyroscope data
    float pitch_f = Kalman_Update(&kalman_pitch, acc_pitch, gy_dps, dt);
 8001a42:	4b35      	ldr	r3, [pc, #212]	@ (8001b18 <Compute_Orientation_Kalman+0x218>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	eeb0 1a67 	vmov.f32	s2, s15
 8001a4c:	edd7 0a04 	vldr	s1, [r7, #16]
 8001a50:	ed97 0a07 	vldr	s0, [r7, #28]
 8001a54:	4831      	ldr	r0, [pc, #196]	@ (8001b1c <Compute_Orientation_Kalman+0x21c>)
 8001a56:	f7ff fa7f 	bl	8000f58 <Kalman_Update>
 8001a5a:	ed87 0a02 	vstr	s0, [r7, #8]
    float roll_f  = Kalman_Update(&kalman_roll, acc_roll, gx_dps, dt);
 8001a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b18 <Compute_Orientation_Kalman+0x218>)
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	eeb0 1a67 	vmov.f32	s2, s15
 8001a68:	edd7 0a05 	vldr	s1, [r7, #20]
 8001a6c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001a70:	482b      	ldr	r0, [pc, #172]	@ (8001b20 <Compute_Orientation_Kalman+0x220>)
 8001a72:	f7ff fa71 	bl	8000f58 <Kalman_Update>
 8001a76:	ed87 0a01 	vstr	s0, [r7, #4]
    float yaw_f   = Kalman_Update(&kalman_yaw, yaw_f, gz_dps, dt);
 8001a7a:	4b27      	ldr	r3, [pc, #156]	@ (8001b18 <Compute_Orientation_Kalman+0x218>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	eeb0 1a67 	vmov.f32	s2, s15
 8001a84:	edd7 0a03 	vldr	s1, [r7, #12]
 8001a88:	ed97 0a00 	vldr	s0, [r7]
 8001a8c:	4825      	ldr	r0, [pc, #148]	@ (8001b24 <Compute_Orientation_Kalman+0x224>)
 8001a8e:	f7ff fa63 	bl	8000f58 <Kalman_Update>
 8001a92:	ed87 0a00 	vstr	s0, [r7]

    // Convert float angles to integer angles for storage and scaling
    pitch = (int16_t)(pitch_f * 100);
 8001a96:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a9a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001b28 <Compute_Orientation_Kalman+0x228>
 8001a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa6:	ee17 3a90 	vmov	r3, s15
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <Compute_Orientation_Kalman+0x22c>)
 8001aae:	801a      	strh	r2, [r3, #0]
    roll  = (int16_t)(roll_f * 100);
 8001ab0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ab4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001b28 <Compute_Orientation_Kalman+0x228>
 8001ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001abc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac0:	ee17 3a90 	vmov	r3, s15
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b30 <Compute_Orientation_Kalman+0x230>)
 8001ac8:	801a      	strh	r2, [r3, #0]
    yaw   = (int16_t)(yaw_f * 100);
 8001aca:	edd7 7a00 	vldr	s15, [r7]
 8001ace:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001b28 <Compute_Orientation_Kalman+0x228>
 8001ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ada:	ee17 3a90 	vmov	r3, s15
 8001ade:	b21a      	sxth	r2, r3
 8001ae0:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <Compute_Orientation_Kalman+0x234>)
 8001ae2:	801a      	strh	r2, [r3, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bdb0      	pop	{r4, r5, r7, pc}
 8001aec:	f3af 8000 	nop.w
 8001af0:	c63f1412 	.word	0xc63f1412
 8001af4:	404ca5dc 	.word	0x404ca5dc
 8001af8:	00000000 	.word	0x00000000
 8001afc:	40606000 	.word	0x40606000
 8001b00:	20000236 	.word	0x20000236
 8001b04:	20000238 	.word	0x20000238
 8001b08:	2000023a 	.word	0x2000023a
 8001b0c:	2000023c 	.word	0x2000023c
 8001b10:	2000023e 	.word	0x2000023e
 8001b14:	20000240 	.word	0x20000240
 8001b18:	08008aa0 	.word	0x08008aa0
 8001b1c:	20000084 	.word	0x20000084
 8001b20:	200000b0 	.word	0x200000b0
 8001b24:	200000dc 	.word	0x200000dc
 8001b28:	42c80000 	.word	0x42c80000
 8001b2c:	20000242 	.word	0x20000242
 8001b30:	20000244 	.word	0x20000244
 8001b34:	20000246 	.word	0x20000246

08001b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3c:	b672      	cpsid	i
}
 8001b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <Error_Handler+0x8>

08001b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	4a0f      	ldr	r2, [pc, #60]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	4a08      	ldr	r2, [pc, #32]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800

08001b94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	@ 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	@ (8001c18 <HAL_I2C_MspInit+0x84>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d12b      	bne.n	8001c0e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbe:	4a17      	ldr	r2, [pc, #92]	@ (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bd2:	23c0      	movs	r3, #192	@ 0xc0
 8001bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd6:	2312      	movs	r3, #18
 8001bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be2:	2304      	movs	r3, #4
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	480c      	ldr	r0, [pc, #48]	@ (8001c20 <HAL_I2C_MspInit+0x8c>)
 8001bee:	f000 fc05 	bl	80023fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	4a08      	ldr	r2, [pc, #32]	@ (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_I2C_MspInit+0x88>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c0e:	bf00      	nop
 8001c10:	3728      	adds	r7, #40	@ 0x28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40005400 	.word	0x40005400
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40020400 	.word	0x40020400

08001c24 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c34:	d10e      	bne.n	8001c54 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <HAL_TIM_Base_MspInit+0x64>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	4a12      	ldr	r2, [pc, #72]	@ (8001c88 <HAL_TIM_Base_MspInit+0x64>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c46:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <HAL_TIM_Base_MspInit+0x64>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c52:	e012      	b.n	8001c7a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0c      	ldr	r2, [pc, #48]	@ (8001c8c <HAL_TIM_Base_MspInit+0x68>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d10d      	bne.n	8001c7a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <HAL_TIM_Base_MspInit+0x64>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	4a08      	ldr	r2, [pc, #32]	@ (8001c88 <HAL_TIM_Base_MspInit+0x64>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_TIM_Base_MspInit+0x64>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40000400 	.word	0x40000400

08001c90 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	@ 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a19      	ldr	r2, [pc, #100]	@ (8001d14 <HAL_UART_MspInit+0x84>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d12b      	bne.n	8001d0a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <HAL_UART_MspInit+0x88>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	4a17      	ldr	r2, [pc, #92]	@ (8001d18 <HAL_UART_MspInit+0x88>)
 8001cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc2:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <HAL_UART_MspInit+0x88>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <HAL_UART_MspInit+0x88>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	4a10      	ldr	r2, [pc, #64]	@ (8001d18 <HAL_UART_MspInit+0x88>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <HAL_UART_MspInit+0x88>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cea:	230c      	movs	r3, #12
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <HAL_UART_MspInit+0x8c>)
 8001d06:	f000 fb79 	bl	80023fc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	@ 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40004400 	.word	0x40004400
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40020000 	.word	0x40020000

08001d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <NMI_Handler+0x4>

08001d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <HardFault_Handler+0x4>

08001d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <MemManage_Handler+0x4>

08001d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <BusFault_Handler+0x4>

08001d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <UsageFault_Handler+0x4>

08001d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d76:	f000 f94b 	bl	8002010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d84:	4802      	ldr	r0, [pc, #8]	@ (8001d90 <TIM2_IRQHandler+0x10>)
 8001d86:	f003 ff29 	bl	8005bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000015c 	.word	0x2000015c

08001d94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d98:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <TIM3_IRQHandler+0x10>)
 8001d9a:	f003 ff1f 	bl	8005bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200001a4 	.word	0x200001a4

08001da8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001dac:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <I2C1_EV_IRQHandler+0x10>)
 8001dae:	f001 f97f 	bl	80030b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000108 	.word	0x20000108

08001dbc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001dc0:	4802      	ldr	r0, [pc, #8]	@ (8001dcc <I2C1_ER_IRQHandler+0x10>)
 8001dc2:	f001 fae6 	bl	8003392 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000108 	.word	0x20000108

08001dd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dd4:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <USART2_IRQHandler+0x10>)
 8001dd6:	f004 fb8d 	bl	80064f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200001ec 	.word	0x200001ec

08001de4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	e00a      	b.n	8001e0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001df6:	f3af 8000 	nop.w
 8001dfa:	4601      	mov	r1, r0
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	60ba      	str	r2, [r7, #8]
 8001e02:	b2ca      	uxtb	r2, r1
 8001e04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	dbf0      	blt.n	8001df6 <_read+0x12>
  }

  return len;
 8001e14:	687b      	ldr	r3, [r7, #4]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e46:	605a      	str	r2, [r3, #4]
  return 0;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_isatty>:

int _isatty(int file)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e90:	4a14      	ldr	r2, [pc, #80]	@ (8001ee4 <_sbrk+0x5c>)
 8001e92:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <_sbrk+0x60>)
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e9c:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <_sbrk+0x64>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	@ (8001ef0 <_sbrk+0x68>)
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eaa:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d207      	bcs.n	8001ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb8:	f005 fcb0 	bl	800781c <__errno>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	e009      	b.n	8001edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	@ (8001eec <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ece:	4b07      	ldr	r3, [pc, #28]	@ (8001eec <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4a05      	ldr	r2, [pc, #20]	@ (8001eec <_sbrk+0x64>)
 8001ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20020000 	.word	0x20020000
 8001ee8:	00000400 	.word	0x00000400
 8001eec:	20000248 	.word	0x20000248
 8001ef0:	200003a0 	.word	0x200003a0

08001ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef8:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <SystemInit+0x20>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001efe:	4a05      	ldr	r2, [pc, #20]	@ (8001f14 <SystemInit+0x20>)
 8001f00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f1c:	f7ff ffea 	bl	8001ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f20:	480c      	ldr	r0, [pc, #48]	@ (8001f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f22:	490d      	ldr	r1, [pc, #52]	@ (8001f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f24:	4a0d      	ldr	r2, [pc, #52]	@ (8001f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f28:	e002      	b.n	8001f30 <LoopCopyDataInit>

08001f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2e:	3304      	adds	r3, #4

08001f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f34:	d3f9      	bcc.n	8001f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f36:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f38:	4c0a      	ldr	r4, [pc, #40]	@ (8001f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f3c:	e001      	b.n	8001f42 <LoopFillZerobss>

08001f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f40:	3204      	adds	r2, #4

08001f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f44:	d3fb      	bcc.n	8001f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f46:	f005 fc6f 	bl	8007828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f4a:	f7ff f957 	bl	80011fc <main>
  bx  lr    
 8001f4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f58:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001f5c:	08008b80 	.word	0x08008b80
  ldr r2, =_sbss
 8001f60:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001f64:	2000039c 	.word	0x2000039c

08001f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f68:	e7fe      	b.n	8001f68 <ADC_IRQHandler>
	...

08001f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f70:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <HAL_Init+0x40>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	@ (8001fac <HAL_Init+0x40>)
 8001f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <HAL_Init+0x40>)
 8001f82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f88:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a07      	ldr	r2, [pc, #28]	@ (8001fac <HAL_Init+0x40>)
 8001f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f94:	2003      	movs	r0, #3
 8001f96:	f000 f94f 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9a:	200f      	movs	r0, #15
 8001f9c:	f000 f808 	bl	8001fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa0:	f7ff fdd0 	bl	8001b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023c00 	.word	0x40023c00

08001fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <HAL_InitTick+0x54>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <HAL_InitTick+0x58>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f967 	bl	80022a2 <HAL_SYSTICK_Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00e      	b.n	8001ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b0f      	cmp	r3, #15
 8001fe2:	d80a      	bhi.n	8001ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f000 f92f 	bl	800224e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff0:	4a06      	ldr	r2, [pc, #24]	@ (800200c <HAL_InitTick+0x5c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e000      	b.n	8001ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000000 	.word	0x20000000
 8002008:	20000008 	.word	0x20000008
 800200c:	20000004 	.word	0x20000004

08002010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <HAL_IncTick+0x20>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <HAL_IncTick+0x24>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	4a04      	ldr	r2, [pc, #16]	@ (8002034 <HAL_IncTick+0x24>)
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000008 	.word	0x20000008
 8002034:	2000024c 	.word	0x2000024c

08002038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return uwTick;
 800203c:	4b03      	ldr	r3, [pc, #12]	@ (800204c <HAL_GetTick+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	2000024c 	.word	0x2000024c

08002050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002058:	f7ff ffee 	bl	8002038 <HAL_GetTick>
 800205c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002068:	d005      	beq.n	8002076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <HAL_Delay+0x44>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002076:	bf00      	nop
 8002078:	f7ff ffde 	bl	8002038 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	429a      	cmp	r2, r3
 8002086:	d8f7      	bhi.n	8002078 <HAL_Delay+0x28>
  {
  }
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000008 	.word	0x20000008

08002098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020b4:	4013      	ands	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ca:	4a04      	ldr	r2, [pc, #16]	@ (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	60d3      	str	r3, [r2, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e4:	4b04      	ldr	r3, [pc, #16]	@ (80020f8 <__NVIC_GetPriorityGrouping+0x18>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	f003 0307 	and.w	r3, r3, #7
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	2b00      	cmp	r3, #0
 800210c:	db0b      	blt.n	8002126 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4907      	ldr	r1, [pc, #28]	@ (8002134 <__NVIC_EnableIRQ+0x38>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2001      	movs	r0, #1
 800211e:	fa00 f202 	lsl.w	r2, r0, r2
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e100 	.word	0xe000e100

08002138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	db0a      	blt.n	8002162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	490c      	ldr	r1, [pc, #48]	@ (8002184 <__NVIC_SetPriority+0x4c>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002160:	e00a      	b.n	8002178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4908      	ldr	r1, [pc, #32]	@ (8002188 <__NVIC_SetPriority+0x50>)
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	3b04      	subs	r3, #4
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	440b      	add	r3, r1
 8002176:	761a      	strb	r2, [r3, #24]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	@ 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f1c3 0307 	rsb	r3, r3, #7
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	bf28      	it	cs
 80021aa:	2304      	movcs	r3, #4
 80021ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3304      	adds	r3, #4
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d902      	bls.n	80021bc <NVIC_EncodePriority+0x30>
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3b03      	subs	r3, #3
 80021ba:	e000      	b.n	80021be <NVIC_EncodePriority+0x32>
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43d9      	mvns	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	4313      	orrs	r3, r2
         );
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3724      	adds	r7, #36	@ 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002204:	d301      	bcc.n	800220a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220a:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <SysTick_Config+0x40>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002212:	210f      	movs	r1, #15
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f7ff ff8e 	bl	8002138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <SysTick_Config+0x40>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002222:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <SysTick_Config+0x40>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff29 	bl	8002098 <__NVIC_SetPriorityGrouping>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002260:	f7ff ff3e 	bl	80020e0 <__NVIC_GetPriorityGrouping>
 8002264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f7ff ff8e 	bl	800218c <NVIC_EncodePriority>
 8002270:	4602      	mov	r2, r0
 8002272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff5d 	bl	8002138 <__NVIC_SetPriority>
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff31 	bl	80020fc <__NVIC_EnableIRQ>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff ffa2 	bl	80021f4 <SysTick_Config>
 80022b0:	4603      	mov	r3, r0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b084      	sub	sp, #16
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022c8:	f7ff feb6 	bl	8002038 <HAL_GetTick>
 80022cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d008      	beq.n	80022ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2280      	movs	r2, #128	@ 0x80
 80022de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e052      	b.n	8002392 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0216 	bic.w	r2, r2, #22
 80022fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800230a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d103      	bne.n	800231c <HAL_DMA_Abort+0x62>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0208 	bic.w	r2, r2, #8
 800232a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800233c:	e013      	b.n	8002366 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800233e:	f7ff fe7b 	bl	8002038 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b05      	cmp	r3, #5
 800234a:	d90c      	bls.n	8002366 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2203      	movs	r2, #3
 8002356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e015      	b.n	8002392 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1e4      	bne.n	800233e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002378:	223f      	movs	r2, #63	@ 0x3f
 800237a:	409a      	lsls	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d004      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2280      	movs	r2, #128	@ 0x80
 80023b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e00c      	b.n	80023d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2205      	movs	r2, #5
 80023bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0201 	bic.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023ec:	b2db      	uxtb	r3, r3
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	@ 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	e16b      	b.n	80026f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002418:	2201      	movs	r2, #1
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	429a      	cmp	r2, r3
 8002432:	f040 815a 	bne.w	80026ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d005      	beq.n	800244e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244a:	2b02      	cmp	r3, #2
 800244c:	d130      	bne.n	80024b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002484:	2201      	movs	r2, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 0201 	and.w	r2, r3, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d017      	beq.n	80024ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	2203      	movs	r2, #3
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d123      	bne.n	8002540 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	08da      	lsrs	r2, r3, #3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3208      	adds	r2, #8
 8002500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	220f      	movs	r2, #15
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	08da      	lsrs	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3208      	adds	r2, #8
 800253a:	69b9      	ldr	r1, [r7, #24]
 800253c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	2203      	movs	r2, #3
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0203 	and.w	r2, r3, #3
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80b4 	beq.w	80026ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b60      	ldr	r3, [pc, #384]	@ (8002708 <HAL_GPIO_Init+0x30c>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258a:	4a5f      	ldr	r2, [pc, #380]	@ (8002708 <HAL_GPIO_Init+0x30c>)
 800258c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002590:	6453      	str	r3, [r2, #68]	@ 0x44
 8002592:	4b5d      	ldr	r3, [pc, #372]	@ (8002708 <HAL_GPIO_Init+0x30c>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800259e:	4a5b      	ldr	r2, [pc, #364]	@ (800270c <HAL_GPIO_Init+0x310>)
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	3302      	adds	r3, #2
 80025a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	220f      	movs	r2, #15
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a52      	ldr	r2, [pc, #328]	@ (8002710 <HAL_GPIO_Init+0x314>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d02b      	beq.n	8002622 <HAL_GPIO_Init+0x226>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a51      	ldr	r2, [pc, #324]	@ (8002714 <HAL_GPIO_Init+0x318>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d025      	beq.n	800261e <HAL_GPIO_Init+0x222>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a50      	ldr	r2, [pc, #320]	@ (8002718 <HAL_GPIO_Init+0x31c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01f      	beq.n	800261a <HAL_GPIO_Init+0x21e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4f      	ldr	r2, [pc, #316]	@ (800271c <HAL_GPIO_Init+0x320>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x21a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002720 <HAL_GPIO_Init+0x324>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x216>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002724 <HAL_GPIO_Init+0x328>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x212>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002728 <HAL_GPIO_Init+0x32c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x20e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4b      	ldr	r2, [pc, #300]	@ (800272c <HAL_GPIO_Init+0x330>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x20a>
 8002602:	2307      	movs	r3, #7
 8002604:	e00e      	b.n	8002624 <HAL_GPIO_Init+0x228>
 8002606:	2308      	movs	r3, #8
 8002608:	e00c      	b.n	8002624 <HAL_GPIO_Init+0x228>
 800260a:	2306      	movs	r3, #6
 800260c:	e00a      	b.n	8002624 <HAL_GPIO_Init+0x228>
 800260e:	2305      	movs	r3, #5
 8002610:	e008      	b.n	8002624 <HAL_GPIO_Init+0x228>
 8002612:	2304      	movs	r3, #4
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x228>
 8002616:	2303      	movs	r3, #3
 8002618:	e004      	b.n	8002624 <HAL_GPIO_Init+0x228>
 800261a:	2302      	movs	r3, #2
 800261c:	e002      	b.n	8002624 <HAL_GPIO_Init+0x228>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_GPIO_Init+0x228>
 8002622:	2300      	movs	r3, #0
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	f002 0203 	and.w	r2, r2, #3
 800262a:	0092      	lsls	r2, r2, #2
 800262c:	4093      	lsls	r3, r2
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002634:	4935      	ldr	r1, [pc, #212]	@ (800270c <HAL_GPIO_Init+0x310>)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	3302      	adds	r3, #2
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002642:	4b3b      	ldr	r3, [pc, #236]	@ (8002730 <HAL_GPIO_Init+0x334>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002666:	4a32      	ldr	r2, [pc, #200]	@ (8002730 <HAL_GPIO_Init+0x334>)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800266c:	4b30      	ldr	r3, [pc, #192]	@ (8002730 <HAL_GPIO_Init+0x334>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002690:	4a27      	ldr	r2, [pc, #156]	@ (8002730 <HAL_GPIO_Init+0x334>)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002696:	4b26      	ldr	r3, [pc, #152]	@ (8002730 <HAL_GPIO_Init+0x334>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002730 <HAL_GPIO_Init+0x334>)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <HAL_GPIO_Init+0x334>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e4:	4a12      	ldr	r2, [pc, #72]	@ (8002730 <HAL_GPIO_Init+0x334>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3301      	adds	r3, #1
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	2b0f      	cmp	r3, #15
 80026f4:	f67f ae90 	bls.w	8002418 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3724      	adds	r7, #36	@ 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800
 800270c:	40013800 	.word	0x40013800
 8002710:	40020000 	.word	0x40020000
 8002714:	40020400 	.word	0x40020400
 8002718:	40020800 	.word	0x40020800
 800271c:	40020c00 	.word	0x40020c00
 8002720:	40021000 	.word	0x40021000
 8002724:	40021400 	.word	0x40021400
 8002728:	40021800 	.word	0x40021800
 800272c:	40021c00 	.word	0x40021c00
 8002730:	40013c00 	.word	0x40013c00

08002734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	807b      	strh	r3, [r7, #2]
 8002740:	4613      	mov	r3, r2
 8002742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002744:	787b      	ldrb	r3, [r7, #1]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800274a:	887a      	ldrh	r2, [r7, #2]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002750:	e003      	b.n	800275a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002752:	887b      	ldrh	r3, [r7, #2]
 8002754:	041a      	lsls	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	619a      	str	r2, [r3, #24]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002766:	b480      	push	{r7}
 8002768:	b085      	sub	sp, #20
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002778:	887a      	ldrh	r2, [r7, #2]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4013      	ands	r3, r2
 800277e:	041a      	lsls	r2, r3, #16
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	43d9      	mvns	r1, r3
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	400b      	ands	r3, r1
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	619a      	str	r2, [r3, #24]
}
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e12b      	b.n	8002a06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff f9e6 	bl	8001b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2224      	movs	r2, #36	@ 0x24
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002800:	f003 f904 	bl	8005a0c <HAL_RCC_GetPCLK1Freq>
 8002804:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4a81      	ldr	r2, [pc, #516]	@ (8002a10 <HAL_I2C_Init+0x274>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d807      	bhi.n	8002820 <HAL_I2C_Init+0x84>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4a80      	ldr	r2, [pc, #512]	@ (8002a14 <HAL_I2C_Init+0x278>)
 8002814:	4293      	cmp	r3, r2
 8002816:	bf94      	ite	ls
 8002818:	2301      	movls	r3, #1
 800281a:	2300      	movhi	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	e006      	b.n	800282e <HAL_I2C_Init+0x92>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4a7d      	ldr	r2, [pc, #500]	@ (8002a18 <HAL_I2C_Init+0x27c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	bf94      	ite	ls
 8002828:	2301      	movls	r3, #1
 800282a:	2300      	movhi	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e0e7      	b.n	8002a06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4a78      	ldr	r2, [pc, #480]	@ (8002a1c <HAL_I2C_Init+0x280>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	0c9b      	lsrs	r3, r3, #18
 8002840:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a6a      	ldr	r2, [pc, #424]	@ (8002a10 <HAL_I2C_Init+0x274>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d802      	bhi.n	8002870 <HAL_I2C_Init+0xd4>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	3301      	adds	r3, #1
 800286e:	e009      	b.n	8002884 <HAL_I2C_Init+0xe8>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	4a69      	ldr	r2, [pc, #420]	@ (8002a20 <HAL_I2C_Init+0x284>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	3301      	adds	r3, #1
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	430b      	orrs	r3, r1
 800288a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002896:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	495c      	ldr	r1, [pc, #368]	@ (8002a10 <HAL_I2C_Init+0x274>)
 80028a0:	428b      	cmp	r3, r1
 80028a2:	d819      	bhi.n	80028d8 <HAL_I2C_Init+0x13c>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1e59      	subs	r1, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80028b2:	1c59      	adds	r1, r3, #1
 80028b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028b8:	400b      	ands	r3, r1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_I2C_Init+0x138>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1e59      	subs	r1, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80028cc:	3301      	adds	r3, #1
 80028ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d2:	e051      	b.n	8002978 <HAL_I2C_Init+0x1dc>
 80028d4:	2304      	movs	r3, #4
 80028d6:	e04f      	b.n	8002978 <HAL_I2C_Init+0x1dc>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d111      	bne.n	8002904 <HAL_I2C_Init+0x168>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1e58      	subs	r0, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	440b      	add	r3, r1
 80028ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	e012      	b.n	800292a <HAL_I2C_Init+0x18e>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1e58      	subs	r0, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	0099      	lsls	r1, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	fbb0 f3f3 	udiv	r3, r0, r3
 800291a:	3301      	adds	r3, #1
 800291c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Init+0x196>
 800292e:	2301      	movs	r3, #1
 8002930:	e022      	b.n	8002978 <HAL_I2C_Init+0x1dc>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10e      	bne.n	8002958 <HAL_I2C_Init+0x1bc>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1e58      	subs	r0, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6859      	ldr	r1, [r3, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	440b      	add	r3, r1
 8002948:	fbb0 f3f3 	udiv	r3, r0, r3
 800294c:	3301      	adds	r3, #1
 800294e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002956:	e00f      	b.n	8002978 <HAL_I2C_Init+0x1dc>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1e58      	subs	r0, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	0099      	lsls	r1, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	fbb0 f3f3 	udiv	r3, r0, r3
 800296e:	3301      	adds	r3, #1
 8002970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002974:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	6809      	ldr	r1, [r1, #0]
 800297c:	4313      	orrs	r3, r2
 800297e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6911      	ldr	r1, [r2, #16]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68d2      	ldr	r2, [r2, #12]
 80029b2:	4311      	orrs	r1, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	430b      	orrs	r3, r1
 80029ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	000186a0 	.word	0x000186a0
 8002a14:	001e847f 	.word	0x001e847f
 8002a18:	003d08ff 	.word	0x003d08ff
 8002a1c:	431bde83 	.word	0x431bde83
 8002a20:	10624dd3 	.word	0x10624dd3

08002a24 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a36:	2b80      	cmp	r3, #128	@ 0x80
 8002a38:	d103      	bne.n	8002a42 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
  }
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	817b      	strh	r3, [r7, #10]
 8002a60:	4613      	mov	r3, r2
 8002a62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a64:	f7ff fae8 	bl	8002038 <HAL_GetTick>
 8002a68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	f040 80e0 	bne.w	8002c38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	2319      	movs	r3, #25
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4970      	ldr	r1, [pc, #448]	@ (8002c44 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f002 f90e 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e0d3      	b.n	8002c3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_I2C_Master_Transmit+0x50>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e0cc      	b.n	8002c3a <HAL_I2C_Master_Transmit+0x1ea>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d007      	beq.n	8002ac6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0201 	orr.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ad4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2221      	movs	r2, #33	@ 0x21
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	893a      	ldrh	r2, [r7, #8]
 8002af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a50      	ldr	r2, [pc, #320]	@ (8002c48 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b08:	8979      	ldrh	r1, [r7, #10]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	6a3a      	ldr	r2, [r7, #32]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f001 fed0 	bl	80048b4 <I2C_MasterRequestWrite>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e08d      	b.n	8002c3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1e:	2300      	movs	r3, #0
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b34:	e066      	b.n	8002c04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	6a39      	ldr	r1, [r7, #32]
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f002 f9cc 	bl	8004ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d107      	bne.n	8002b5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e06b      	b.n	8002c3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	781a      	ldrb	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d11b      	bne.n	8002bd8 <HAL_I2C_Master_Transmit+0x188>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d017      	beq.n	8002bd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	781a      	ldrb	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	6a39      	ldr	r1, [r7, #32]
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f002 f9c3 	bl	8004f68 <I2C_WaitOnBTFFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00d      	beq.n	8002c04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d107      	bne.n	8002c00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bfe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e01a      	b.n	8002c3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d194      	bne.n	8002b36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e000      	b.n	8002c3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	00100002 	.word	0x00100002
 8002c48:	ffff0000 	.word	0xffff0000

08002c4c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08c      	sub	sp, #48	@ 0x30
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	461a      	mov	r2, r3
 8002c58:	460b      	mov	r3, r1
 8002c5a:	817b      	strh	r3, [r7, #10]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c60:	f7ff f9ea 	bl	8002038 <HAL_GetTick>
 8002c64:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b20      	cmp	r3, #32
 8002c70:	f040 8217 	bne.w	80030a2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	2319      	movs	r3, #25
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	497c      	ldr	r1, [pc, #496]	@ (8002e70 <HAL_I2C_Master_Receive+0x224>)
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f002 f810 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e20a      	b.n	80030a4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_I2C_Master_Receive+0x50>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e203      	b.n	80030a4 <HAL_I2C_Master_Receive+0x458>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d007      	beq.n	8002cc2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2222      	movs	r2, #34	@ 0x22
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2210      	movs	r2, #16
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	893a      	ldrh	r2, [r7, #8]
 8002cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4a5c      	ldr	r2, [pc, #368]	@ (8002e74 <HAL_I2C_Master_Receive+0x228>)
 8002d02:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d04:	8979      	ldrh	r1, [r7, #10]
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f001 fe54 	bl	80049b8 <I2C_MasterRequestRead>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e1c4      	b.n	80030a4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d113      	bne.n	8002d4a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d22:	2300      	movs	r3, #0
 8002d24:	623b      	str	r3, [r7, #32]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	623b      	str	r3, [r7, #32]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	623b      	str	r3, [r7, #32]
 8002d36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e198      	b.n	800307c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d11b      	bne.n	8002d8a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	61fb      	str	r3, [r7, #28]
 8002d76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	e178      	b.n	800307c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d11b      	bne.n	8002dca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002da0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002db0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	e158      	b.n	800307c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002dd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002df0:	e144      	b.n	800307c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	f200 80f1 	bhi.w	8002fde <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d123      	bne.n	8002e4c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f002 f927 	bl	800505c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e145      	b.n	80030a4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e4a:	e117      	b.n	800307c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d14e      	bne.n	8002ef2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	4906      	ldr	r1, [pc, #24]	@ (8002e78 <HAL_I2C_Master_Receive+0x22c>)
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f001 ff20 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e11a      	b.n	80030a4 <HAL_I2C_Master_Receive+0x458>
 8002e6e:	bf00      	nop
 8002e70:	00100002 	.word	0x00100002
 8002e74:	ffff0000 	.word	0xffff0000
 8002e78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ef0:	e0c4      	b.n	800307c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef8:	2200      	movs	r2, #0
 8002efa:	496c      	ldr	r1, [pc, #432]	@ (80030ac <HAL_I2C_Master_Receive+0x460>)
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f001 fed1 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0cb      	b.n	80030a4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f54:	2200      	movs	r2, #0
 8002f56:	4955      	ldr	r1, [pc, #340]	@ (80030ac <HAL_I2C_Master_Receive+0x460>)
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f001 fea3 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e09d      	b.n	80030a4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691a      	ldr	r2, [r3, #16]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fdc:	e04e      	b.n	800307c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f002 f83a 	bl	800505c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e058      	b.n	80030a4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b04      	cmp	r3, #4
 8003030:	d124      	bne.n	800307c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003036:	2b03      	cmp	r3, #3
 8003038:	d107      	bne.n	800304a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003048:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003080:	2b00      	cmp	r3, #0
 8003082:	f47f aeb6 	bne.w	8002df2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	e000      	b.n	80030a4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
  }
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3728      	adds	r7, #40	@ 0x28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	00010004 	.word	0x00010004

080030b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d003      	beq.n	80030e8 <HAL_I2C_EV_IRQHandler+0x38>
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	2b40      	cmp	r3, #64	@ 0x40
 80030e4:	f040 80c1 	bne.w	800326a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10d      	bne.n	800311e <HAL_I2C_EV_IRQHandler+0x6e>
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003108:	d003      	beq.n	8003112 <HAL_I2C_EV_IRQHandler+0x62>
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003110:	d101      	bne.n	8003116 <HAL_I2C_EV_IRQHandler+0x66>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_I2C_EV_IRQHandler+0x68>
 8003116:	2300      	movs	r3, #0
 8003118:	2b01      	cmp	r3, #1
 800311a:	f000 8132 	beq.w	8003382 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00c      	beq.n	8003142 <HAL_I2C_EV_IRQHandler+0x92>
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	0a5b      	lsrs	r3, r3, #9
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d006      	beq.n	8003142 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f002 f81d 	bl	8005174 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fd9b 	bl	8003c76 <I2C_Master_SB>
 8003140:	e092      	b.n	8003268 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	08db      	lsrs	r3, r3, #3
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d009      	beq.n	8003162 <HAL_I2C_EV_IRQHandler+0xb2>
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	0a5b      	lsrs	r3, r3, #9
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fe11 	bl	8003d82 <I2C_Master_ADD10>
 8003160:	e082      	b.n	8003268 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d009      	beq.n	8003182 <HAL_I2C_EV_IRQHandler+0xd2>
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	0a5b      	lsrs	r3, r3, #9
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fe2b 	bl	8003dd6 <I2C_Master_ADDR>
 8003180:	e072      	b.n	8003268 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d03b      	beq.n	8003206 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800319c:	f000 80f3 	beq.w	8003386 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	09db      	lsrs	r3, r3, #7
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00f      	beq.n	80031cc <HAL_I2C_EV_IRQHandler+0x11c>
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	0a9b      	lsrs	r3, r3, #10
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d009      	beq.n	80031cc <HAL_I2C_EV_IRQHandler+0x11c>
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	089b      	lsrs	r3, r3, #2
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d103      	bne.n	80031cc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f9f3 	bl	80035b0 <I2C_MasterTransmit_TXE>
 80031ca:	e04d      	b.n	8003268 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	089b      	lsrs	r3, r3, #2
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80d6 	beq.w	8003386 <HAL_I2C_EV_IRQHandler+0x2d6>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	0a5b      	lsrs	r3, r3, #9
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80cf 	beq.w	8003386 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80031e8:	7bbb      	ldrb	r3, [r7, #14]
 80031ea:	2b21      	cmp	r3, #33	@ 0x21
 80031ec:	d103      	bne.n	80031f6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fa7a 	bl	80036e8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031f4:	e0c7      	b.n	8003386 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	2b40      	cmp	r3, #64	@ 0x40
 80031fa:	f040 80c4 	bne.w	8003386 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fae8 	bl	80037d4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003204:	e0bf      	b.n	8003386 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003214:	f000 80b7 	beq.w	8003386 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	099b      	lsrs	r3, r3, #6
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00f      	beq.n	8003244 <HAL_I2C_EV_IRQHandler+0x194>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	0a9b      	lsrs	r3, r3, #10
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d009      	beq.n	8003244 <HAL_I2C_EV_IRQHandler+0x194>
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	089b      	lsrs	r3, r3, #2
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d103      	bne.n	8003244 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fb61 	bl	8003904 <I2C_MasterReceive_RXNE>
 8003242:	e011      	b.n	8003268 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	089b      	lsrs	r3, r3, #2
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 809a 	beq.w	8003386 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	0a5b      	lsrs	r3, r3, #9
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8093 	beq.w	8003386 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fc17 	bl	8003a94 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003266:	e08e      	b.n	8003386 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003268:	e08d      	b.n	8003386 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d004      	beq.n	800327c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	e007      	b.n	800328c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	085b      	lsrs	r3, r3, #1
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d012      	beq.n	80032be <HAL_I2C_EV_IRQHandler+0x20e>
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	0a5b      	lsrs	r3, r3, #9
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00c      	beq.n	80032be <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80032b4:	69b9      	ldr	r1, [r7, #24]
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 ffdc 	bl	8004274 <I2C_Slave_ADDR>
 80032bc:	e066      	b.n	800338c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_I2C_EV_IRQHandler+0x22e>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	0a5b      	lsrs	r3, r3, #9
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f001 f816 	bl	8004308 <I2C_Slave_STOPF>
 80032dc:	e056      	b.n	800338c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032de:	7bbb      	ldrb	r3, [r7, #14]
 80032e0:	2b21      	cmp	r3, #33	@ 0x21
 80032e2:	d002      	beq.n	80032ea <HAL_I2C_EV_IRQHandler+0x23a>
 80032e4:	7bbb      	ldrb	r3, [r7, #14]
 80032e6:	2b29      	cmp	r3, #41	@ 0x29
 80032e8:	d125      	bne.n	8003336 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	09db      	lsrs	r3, r3, #7
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00f      	beq.n	8003316 <HAL_I2C_EV_IRQHandler+0x266>
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	0a9b      	lsrs	r3, r3, #10
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HAL_I2C_EV_IRQHandler+0x266>
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	089b      	lsrs	r3, r3, #2
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d103      	bne.n	8003316 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fef2 	bl	80040f8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003314:	e039      	b.n	800338a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	089b      	lsrs	r3, r3, #2
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d033      	beq.n	800338a <HAL_I2C_EV_IRQHandler+0x2da>
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	0a5b      	lsrs	r3, r3, #9
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d02d      	beq.n	800338a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 ff1f 	bl	8004172 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003334:	e029      	b.n	800338a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	099b      	lsrs	r3, r3, #6
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00f      	beq.n	8003362 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	0a9b      	lsrs	r3, r3, #10
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_I2C_EV_IRQHandler+0x2b2>
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	089b      	lsrs	r3, r3, #2
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 ff2a 	bl	80041b4 <I2C_SlaveReceive_RXNE>
 8003360:	e014      	b.n	800338c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	089b      	lsrs	r3, r3, #2
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00e      	beq.n	800338c <HAL_I2C_EV_IRQHandler+0x2dc>
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	0a5b      	lsrs	r3, r3, #9
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 ff58 	bl	8004230 <I2C_SlaveReceive_BTF>
 8003380:	e004      	b.n	800338c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003382:	bf00      	nop
 8003384:	e002      	b.n	800338c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003386:	bf00      	nop
 8003388:	e000      	b.n	800338c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800338a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b08a      	sub	sp, #40	@ 0x28
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033b4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	0a1b      	lsrs	r3, r3, #8
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00e      	beq.n	80033e0 <HAL_I2C_ER_IRQHandler+0x4e>
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80033ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80033de:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	0a5b      	lsrs	r3, r3, #9
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <HAL_I2C_ER_IRQHandler+0x78>
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80033f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fa:	f043 0302 	orr.w	r3, r3, #2
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003408:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	0a9b      	lsrs	r3, r3, #10
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d03f      	beq.n	8003496 <HAL_I2C_ER_IRQHandler+0x104>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d039      	beq.n	8003496 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003422:	7efb      	ldrb	r3, [r7, #27]
 8003424:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342a:	b29b      	uxth	r3, r3
 800342c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003434:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800343c:	7ebb      	ldrb	r3, [r7, #26]
 800343e:	2b20      	cmp	r3, #32
 8003440:	d112      	bne.n	8003468 <HAL_I2C_ER_IRQHandler+0xd6>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10f      	bne.n	8003468 <HAL_I2C_ER_IRQHandler+0xd6>
 8003448:	7cfb      	ldrb	r3, [r7, #19]
 800344a:	2b21      	cmp	r3, #33	@ 0x21
 800344c:	d008      	beq.n	8003460 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800344e:	7cfb      	ldrb	r3, [r7, #19]
 8003450:	2b29      	cmp	r3, #41	@ 0x29
 8003452:	d005      	beq.n	8003460 <HAL_I2C_ER_IRQHandler+0xce>
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	2b28      	cmp	r3, #40	@ 0x28
 8003458:	d106      	bne.n	8003468 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2b21      	cmp	r3, #33	@ 0x21
 800345e:	d103      	bne.n	8003468 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f001 f881 	bl	8004568 <I2C_Slave_AF>
 8003466:	e016      	b.n	8003496 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003470:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	f043 0304 	orr.w	r3, r3, #4
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800347a:	7efb      	ldrb	r3, [r7, #27]
 800347c:	2b10      	cmp	r3, #16
 800347e:	d002      	beq.n	8003486 <HAL_I2C_ER_IRQHandler+0xf4>
 8003480:	7efb      	ldrb	r3, [r7, #27]
 8003482:	2b40      	cmp	r3, #64	@ 0x40
 8003484:	d107      	bne.n	8003496 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003494:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	0adb      	lsrs	r3, r3, #11
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00e      	beq.n	80034c0 <HAL_I2C_ER_IRQHandler+0x12e>
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	0a1b      	lsrs	r3, r3, #8
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d008      	beq.n	80034c0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80034ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b0:	f043 0308 	orr.w	r3, r3, #8
 80034b4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80034be:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80034c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f001 f8bc 	bl	8004650 <I2C_ITError>
  }
}
 80034d8:	bf00      	nop
 80034da:	3728      	adds	r7, #40	@ 0x28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	70fb      	strb	r3, [r7, #3]
 800353c:	4613      	mov	r3, r2
 800353e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035cc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d150      	bne.n	8003678 <I2C_MasterTransmit_TXE+0xc8>
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	2b21      	cmp	r3, #33	@ 0x21
 80035da:	d14d      	bne.n	8003678 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d01d      	beq.n	800361e <I2C_MasterTransmit_TXE+0x6e>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d01a      	beq.n	800361e <I2C_MasterTransmit_TXE+0x6e>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035ee:	d016      	beq.n	800361e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035fe:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2211      	movs	r2, #17
 8003604:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff ff62 	bl	80034e0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800361c:	e060      	b.n	80036e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800362c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800363c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b40      	cmp	r3, #64	@ 0x40
 8003656:	d107      	bne.n	8003668 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ff7d 	bl	8003560 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003666:	e03b      	b.n	80036e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff ff35 	bl	80034e0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003676:	e033      	b.n	80036e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	2b21      	cmp	r3, #33	@ 0x21
 800367c:	d005      	beq.n	800368a <I2C_MasterTransmit_TXE+0xda>
 800367e:	7bbb      	ldrb	r3, [r7, #14]
 8003680:	2b40      	cmp	r3, #64	@ 0x40
 8003682:	d12d      	bne.n	80036e0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b22      	cmp	r3, #34	@ 0x22
 8003688:	d12a      	bne.n	80036e0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d108      	bne.n	80036a6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036a2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80036a4:	e01c      	b.n	80036e0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b40      	cmp	r3, #64	@ 0x40
 80036b0:	d103      	bne.n	80036ba <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f88e 	bl	80037d4 <I2C_MemoryTransmit_TXE_BTF>
}
 80036b8:	e012      	b.n	80036e0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	781a      	ldrb	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80036de:	e7ff      	b.n	80036e0 <I2C_MasterTransmit_TXE+0x130>
 80036e0:	bf00      	nop
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b21      	cmp	r3, #33	@ 0x21
 8003700:	d164      	bne.n	80037cc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d012      	beq.n	8003732 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	781a      	ldrb	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003730:	e04c      	b.n	80037cc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b08      	cmp	r3, #8
 8003736:	d01d      	beq.n	8003774 <I2C_MasterTransmit_BTF+0x8c>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b20      	cmp	r3, #32
 800373c:	d01a      	beq.n	8003774 <I2C_MasterTransmit_BTF+0x8c>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003744:	d016      	beq.n	8003774 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003754:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2211      	movs	r2, #17
 800375a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff feb7 	bl	80034e0 <HAL_I2C_MasterTxCpltCallback>
}
 8003772:	e02b      	b.n	80037cc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003782:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003792:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b40      	cmp	r3, #64	@ 0x40
 80037ac:	d107      	bne.n	80037be <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff fed2 	bl	8003560 <HAL_I2C_MemTxCpltCallback>
}
 80037bc:	e006      	b.n	80037cc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff fe8a 	bl	80034e0 <HAL_I2C_MasterTxCpltCallback>
}
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d11d      	bne.n	8003828 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d10b      	bne.n	800380c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003804:	1c9a      	adds	r2, r3, #2
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800380a:	e077      	b.n	80038fc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003810:	b29b      	uxth	r3, r3
 8003812:	121b      	asrs	r3, r3, #8
 8003814:	b2da      	uxtb	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003826:	e069      	b.n	80038fc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800382c:	2b01      	cmp	r3, #1
 800382e:	d10b      	bne.n	8003848 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003834:	b2da      	uxtb	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003846:	e059      	b.n	80038fc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800384c:	2b02      	cmp	r3, #2
 800384e:	d152      	bne.n	80038f6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b22      	cmp	r3, #34	@ 0x22
 8003854:	d10d      	bne.n	8003872 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003864:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003870:	e044      	b.n	80038fc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d015      	beq.n	80038a8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	2b21      	cmp	r3, #33	@ 0x21
 8003880:	d112      	bne.n	80038a8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	781a      	ldrb	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80038a6:	e029      	b.n	80038fc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d124      	bne.n	80038fc <I2C_MemoryTransmit_TXE_BTF+0x128>
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	2b21      	cmp	r3, #33	@ 0x21
 80038b6:	d121      	bne.n	80038fc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038c6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff fe36 	bl	8003560 <HAL_I2C_MemTxCpltCallback>
}
 80038f4:	e002      	b.n	80038fc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff f894 	bl	8002a24 <I2C_Flush_DR>
}
 80038fc:	bf00      	nop
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b22      	cmp	r3, #34	@ 0x22
 8003916:	f040 80b9 	bne.w	8003a8c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b03      	cmp	r3, #3
 800392c:	d921      	bls.n	8003972 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b03      	cmp	r3, #3
 800395c:	f040 8096 	bne.w	8003a8c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800396e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003970:	e08c      	b.n	8003a8c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003976:	2b02      	cmp	r3, #2
 8003978:	d07f      	beq.n	8003a7a <I2C_MasterReceive_RXNE+0x176>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d002      	beq.n	8003986 <I2C_MasterReceive_RXNE+0x82>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d179      	bne.n	8003a7a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f001 fb36 	bl	8004ff8 <I2C_WaitOnSTOPRequestThroughIT>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d14c      	bne.n	8003a2c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039a0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b40      	cmp	r3, #64	@ 0x40
 80039ea:	d10a      	bne.n	8003a02 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff fdba 	bl	8003574 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a00:	e044      	b.n	8003a8c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d002      	beq.n	8003a16 <I2C_MasterReceive_RXNE+0x112>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d103      	bne.n	8003a1e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a1c:	e002      	b.n	8003a24 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2212      	movs	r2, #18
 8003a22:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fd65 	bl	80034f4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a2a:	e02f      	b.n	8003a8c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a3a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fd88 	bl	8003588 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a78:	e008      	b.n	8003a8c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a88:	605a      	str	r2, [r3, #4]
}
 8003a8a:	e7ff      	b.n	8003a8c <I2C_MasterReceive_RXNE+0x188>
 8003a8c:	bf00      	nop
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d11b      	bne.n	8003ae4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aba:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003ae2:	e0c4      	b.n	8003c6e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d129      	bne.n	8003b42 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003afc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d00a      	beq.n	8003b1a <I2C_MasterReceive_BTF+0x86>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d007      	beq.n	8003b1a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b18:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b40:	e095      	b.n	8003c6e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d17d      	bne.n	8003c48 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d002      	beq.n	8003b58 <I2C_MasterReceive_BTF+0xc4>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d108      	bne.n	8003b6a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	e016      	b.n	8003b98 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d002      	beq.n	8003b76 <I2C_MasterReceive_BTF+0xe2>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d108      	bne.n	8003b88 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	e007      	b.n	8003b98 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b96:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691a      	ldr	r2, [r3, #16]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003bf2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b40      	cmp	r3, #64	@ 0x40
 8003c06:	d10a      	bne.n	8003c1e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff fcac 	bl	8003574 <HAL_I2C_MemRxCpltCallback>
}
 8003c1c:	e027      	b.n	8003c6e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d002      	beq.n	8003c32 <I2C_MasterReceive_BTF+0x19e>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	d103      	bne.n	8003c3a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c38:	e002      	b.n	8003c40 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2212      	movs	r2, #18
 8003c3e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff fc57 	bl	80034f4 <HAL_I2C_MasterRxCpltCallback>
}
 8003c46:	e012      	b.n	8003c6e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003c6e:	bf00      	nop
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b40      	cmp	r3, #64	@ 0x40
 8003c88:	d117      	bne.n	8003cba <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ca2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003ca4:	e067      	b.n	8003d76 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	611a      	str	r2, [r3, #16]
}
 8003cb8:	e05d      	b.n	8003d76 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cc2:	d133      	bne.n	8003d2c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b21      	cmp	r3, #33	@ 0x21
 8003cce:	d109      	bne.n	8003ce4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ce0:	611a      	str	r2, [r3, #16]
 8003ce2:	e008      	b.n	8003cf6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d004      	beq.n	8003d08 <I2C_Master_SB+0x92>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d108      	bne.n	8003d1a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d032      	beq.n	8003d76 <I2C_Master_SB+0x100>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d02d      	beq.n	8003d76 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d28:	605a      	str	r2, [r3, #4]
}
 8003d2a:	e024      	b.n	8003d76 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10e      	bne.n	8003d52 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	11db      	asrs	r3, r3, #7
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f003 0306 	and.w	r3, r3, #6
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f063 030f 	orn	r3, r3, #15
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	611a      	str	r2, [r3, #16]
}
 8003d50:	e011      	b.n	8003d76 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d10d      	bne.n	8003d76 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	11db      	asrs	r3, r3, #7
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f003 0306 	and.w	r3, r3, #6
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f063 030e 	orn	r3, r3, #14
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	611a      	str	r2, [r3, #16]
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d004      	beq.n	8003da8 <I2C_Master_ADD10+0x26>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d108      	bne.n	8003dba <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00c      	beq.n	8003dca <I2C_Master_ADD10+0x48>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dc8:	605a      	str	r2, [r3, #4]
  }
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b091      	sub	sp, #68	@ 0x44
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003de4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dec:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b22      	cmp	r3, #34	@ 0x22
 8003dfe:	f040 8169 	bne.w	80040d4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10f      	bne.n	8003e2a <I2C_Master_ADDR+0x54>
 8003e0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003e0e:	2b40      	cmp	r3, #64	@ 0x40
 8003e10:	d10b      	bne.n	8003e2a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e12:	2300      	movs	r3, #0
 8003e14:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e28:	e160      	b.n	80040ec <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d11d      	bne.n	8003e6e <I2C_Master_ADDR+0x98>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e3a:	d118      	bne.n	8003e6e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e60:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	651a      	str	r2, [r3, #80]	@ 0x50
 8003e6c:	e13e      	b.n	80040ec <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d113      	bne.n	8003ea0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e78:	2300      	movs	r3, #0
 8003e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	e115      	b.n	80040cc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	f040 808a 	bne.w	8003fc0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003eb2:	d137      	bne.n	8003f24 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ec2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ece:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ed2:	d113      	bne.n	8003efc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ee2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efa:	e0e7      	b.n	80040cc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efc:	2300      	movs	r3, #0
 8003efe:	623b      	str	r3, [r7, #32]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	623b      	str	r3, [r7, #32]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	623b      	str	r3, [r7, #32]
 8003f10:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	e0d3      	b.n	80040cc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d02e      	beq.n	8003f88 <I2C_Master_ADDR+0x1b2>
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d02b      	beq.n	8003f88 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f32:	2b12      	cmp	r3, #18
 8003f34:	d102      	bne.n	8003f3c <I2C_Master_ADDR+0x166>
 8003f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d125      	bne.n	8003f88 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d00e      	beq.n	8003f60 <I2C_Master_ADDR+0x18a>
 8003f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d00b      	beq.n	8003f60 <I2C_Master_ADDR+0x18a>
 8003f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d008      	beq.n	8003f60 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	e007      	b.n	8003f70 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f6e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f70:	2300      	movs	r3, #0
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	61fb      	str	r3, [r7, #28]
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	e0a1      	b.n	80040cc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f96:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61bb      	str	r3, [r7, #24]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	61bb      	str	r3, [r7, #24]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	61bb      	str	r3, [r7, #24]
 8003fac:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	e085      	b.n	80040cc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d14d      	bne.n	8004066 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d016      	beq.n	8003ffe <I2C_Master_ADDR+0x228>
 8003fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d013      	beq.n	8003ffe <I2C_Master_ADDR+0x228>
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd8:	2b10      	cmp	r3, #16
 8003fda:	d010      	beq.n	8003ffe <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fea:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	e007      	b.n	800400e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800400c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800401c:	d117      	bne.n	800404e <I2C_Master_ADDR+0x278>
 800401e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004020:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004024:	d00b      	beq.n	800403e <I2C_Master_ADDR+0x268>
 8004026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004028:	2b01      	cmp	r3, #1
 800402a:	d008      	beq.n	800403e <I2C_Master_ADDR+0x268>
 800402c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402e:	2b08      	cmp	r3, #8
 8004030:	d005      	beq.n	800403e <I2C_Master_ADDR+0x268>
 8004032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004034:	2b10      	cmp	r3, #16
 8004036:	d002      	beq.n	800403e <I2C_Master_ADDR+0x268>
 8004038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403a:	2b20      	cmp	r3, #32
 800403c:	d107      	bne.n	800404e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800404c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	e032      	b.n	80040cc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004074:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004080:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004084:	d117      	bne.n	80040b6 <I2C_Master_ADDR+0x2e0>
 8004086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004088:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800408c:	d00b      	beq.n	80040a6 <I2C_Master_ADDR+0x2d0>
 800408e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004090:	2b01      	cmp	r3, #1
 8004092:	d008      	beq.n	80040a6 <I2C_Master_ADDR+0x2d0>
 8004094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004096:	2b08      	cmp	r3, #8
 8004098:	d005      	beq.n	80040a6 <I2C_Master_ADDR+0x2d0>
 800409a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409c:	2b10      	cmp	r3, #16
 800409e:	d002      	beq.n	80040a6 <I2C_Master_ADDR+0x2d0>
 80040a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	d107      	bne.n	80040b6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80040b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80040d2:	e00b      	b.n	80040ec <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
}
 80040ea:	e7ff      	b.n	80040ec <I2C_Master_ADDR+0x316>
 80040ec:	bf00      	nop
 80040ee:	3744      	adds	r7, #68	@ 0x44
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004106:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d02b      	beq.n	800416a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004116:	781a      	ldrb	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d114      	bne.n	800416a <I2C_SlaveTransmit_TXE+0x72>
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	2b29      	cmp	r3, #41	@ 0x29
 8004144:	d111      	bne.n	800416a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004154:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2221      	movs	r2, #33	@ 0x21
 800415a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2228      	movs	r2, #40	@ 0x28
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff f9cf 	bl	8003508 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800416a:	bf00      	nop
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d011      	beq.n	80041a8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	781a      	ldrb	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d02c      	beq.n	8004228 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d114      	bne.n	8004228 <I2C_SlaveReceive_RXNE+0x74>
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	2b2a      	cmp	r3, #42	@ 0x2a
 8004202:	d111      	bne.n	8004228 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004212:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2222      	movs	r2, #34	@ 0x22
 8004218:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2228      	movs	r2, #40	@ 0x28
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff f97a 	bl	800351c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004228:	bf00      	nop
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d012      	beq.n	8004268 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800427e:	2300      	movs	r3, #0
 8004280:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800428e:	2b28      	cmp	r3, #40	@ 0x28
 8004290:	d127      	bne.n	80042e2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	089b      	lsrs	r3, r3, #2
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80042ae:	2301      	movs	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	09db      	lsrs	r3, r3, #7
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d103      	bne.n	80042c6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	81bb      	strh	r3, [r7, #12]
 80042c4:	e002      	b.n	80042cc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80042d4:	89ba      	ldrh	r2, [r7, #12]
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
 80042d8:	4619      	mov	r1, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff f928 	bl	8003530 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80042e0:	e00e      	b.n	8004300 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e2:	2300      	movs	r3, #0
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004300:	bf00      	nop
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004316:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004326:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004328:	2300      	movs	r3, #0
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004354:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004360:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004364:	d172      	bne.n	800444c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b22      	cmp	r3, #34	@ 0x22
 800436a:	d002      	beq.n	8004372 <I2C_Slave_STOPF+0x6a>
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004370:	d135      	bne.n	80043de <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	b29a      	uxth	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	f043 0204 	orr.w	r2, r3, #4
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fe f817 	bl	80023de <HAL_DMA_GetState>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d049      	beq.n	800444a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ba:	4a69      	ldr	r2, [pc, #420]	@ (8004560 <I2C_Slave_STOPF+0x258>)
 80043bc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fd ffe9 	bl	800239a <HAL_DMA_Abort_IT>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d03d      	beq.n	800444a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043d8:	4610      	mov	r0, r2
 80043da:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043dc:	e035      	b.n	800444a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fa:	f043 0204 	orr.w	r2, r3, #4
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004410:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004416:	4618      	mov	r0, r3
 8004418:	f7fd ffe1 	bl	80023de <HAL_DMA_GetState>
 800441c:	4603      	mov	r3, r0
 800441e:	2b01      	cmp	r3, #1
 8004420:	d014      	beq.n	800444c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004426:	4a4e      	ldr	r2, [pc, #312]	@ (8004560 <I2C_Slave_STOPF+0x258>)
 8004428:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800442e:	4618      	mov	r0, r3
 8004430:	f7fd ffb3 	bl	800239a <HAL_DMA_Abort_IT>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004444:	4610      	mov	r0, r2
 8004446:	4798      	blx	r3
 8004448:	e000      	b.n	800444c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800444a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d03e      	beq.n	80044d4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b04      	cmp	r3, #4
 8004462:	d112      	bne.n	800448a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004494:	2b40      	cmp	r3, #64	@ 0x40
 8004496:	d112      	bne.n	80044be <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044cc:	f043 0204 	orr.w	r2, r3, #4
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f8b7 	bl	8004650 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80044e2:	e039      	b.n	8004558 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80044e8:	d109      	bne.n	80044fe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2228      	movs	r2, #40	@ 0x28
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff f80f 	bl	800351c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b28      	cmp	r3, #40	@ 0x28
 8004508:	d111      	bne.n	800452e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a15      	ldr	r2, [pc, #84]	@ (8004564 <I2C_Slave_STOPF+0x25c>)
 800450e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff f810 	bl	800354c <HAL_I2C_ListenCpltCallback>
}
 800452c:	e014      	b.n	8004558 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004532:	2b22      	cmp	r3, #34	@ 0x22
 8004534:	d002      	beq.n	800453c <I2C_Slave_STOPF+0x234>
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	2b22      	cmp	r3, #34	@ 0x22
 800453a:	d10d      	bne.n	8004558 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fe ffe2 	bl	800351c <HAL_I2C_SlaveRxCpltCallback>
}
 8004558:	bf00      	nop
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	08004b55 	.word	0x08004b55
 8004564:	ffff0000 	.word	0xffff0000

08004568 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004576:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b08      	cmp	r3, #8
 8004582:	d002      	beq.n	800458a <I2C_Slave_AF+0x22>
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b20      	cmp	r3, #32
 8004588:	d129      	bne.n	80045de <I2C_Slave_AF+0x76>
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	2b28      	cmp	r3, #40	@ 0x28
 800458e:	d126      	bne.n	80045de <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a2e      	ldr	r2, [pc, #184]	@ (800464c <I2C_Slave_AF+0xe4>)
 8004594:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045a4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045ae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045be:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fe ffb8 	bl	800354c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80045dc:	e031      	b.n	8004642 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	2b21      	cmp	r3, #33	@ 0x21
 80045e2:	d129      	bne.n	8004638 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a19      	ldr	r2, [pc, #100]	@ (800464c <I2C_Slave_AF+0xe4>)
 80045e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2221      	movs	r2, #33	@ 0x21
 80045ee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800460e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004618:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004628:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fe f9fa 	bl	8002a24 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7fe ff69 	bl	8003508 <HAL_I2C_SlaveTxCpltCallback>
}
 8004636:	e004      	b.n	8004642 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004640:	615a      	str	r2, [r3, #20]
}
 8004642:	bf00      	nop
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	ffff0000 	.word	0xffff0000

08004650 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800465e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004666:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004668:	7bbb      	ldrb	r3, [r7, #14]
 800466a:	2b10      	cmp	r3, #16
 800466c:	d002      	beq.n	8004674 <I2C_ITError+0x24>
 800466e:	7bbb      	ldrb	r3, [r7, #14]
 8004670:	2b40      	cmp	r3, #64	@ 0x40
 8004672:	d10a      	bne.n	800468a <I2C_ITError+0x3a>
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	2b22      	cmp	r3, #34	@ 0x22
 8004678:	d107      	bne.n	800468a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004688:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004690:	2b28      	cmp	r3, #40	@ 0x28
 8004692:	d107      	bne.n	80046a4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2228      	movs	r2, #40	@ 0x28
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80046a2:	e015      	b.n	80046d0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046b2:	d00a      	beq.n	80046ca <I2C_ITError+0x7a>
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b60      	cmp	r3, #96	@ 0x60
 80046b8:	d007      	beq.n	80046ca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046de:	d162      	bne.n	80047a6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046ee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d020      	beq.n	8004740 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004702:	4a6a      	ldr	r2, [pc, #424]	@ (80048ac <I2C_ITError+0x25c>)
 8004704:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800470a:	4618      	mov	r0, r3
 800470c:	f7fd fe45 	bl	800239a <HAL_DMA_Abort_IT>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 8089 	beq.w	800482a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0201 	bic.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800473a:	4610      	mov	r0, r2
 800473c:	4798      	blx	r3
 800473e:	e074      	b.n	800482a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004744:	4a59      	ldr	r2, [pc, #356]	@ (80048ac <I2C_ITError+0x25c>)
 8004746:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474c:	4618      	mov	r0, r3
 800474e:	f7fd fe24 	bl	800239a <HAL_DMA_Abort_IT>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d068      	beq.n	800482a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004762:	2b40      	cmp	r3, #64	@ 0x40
 8004764:	d10b      	bne.n	800477e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80047a0:	4610      	mov	r0, r2
 80047a2:	4798      	blx	r3
 80047a4:	e041      	b.n	800482a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b60      	cmp	r3, #96	@ 0x60
 80047b0:	d125      	bne.n	80047fe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ca:	2b40      	cmp	r3, #64	@ 0x40
 80047cc:	d10b      	bne.n	80047e6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fe fed0 	bl	800359c <HAL_I2C_AbortCpltCallback>
 80047fc:	e015      	b.n	800482a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004808:	2b40      	cmp	r3, #64	@ 0x40
 800480a:	d10b      	bne.n	8004824 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7fe feaf 	bl	8003588 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10e      	bne.n	8004858 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004840:	2b00      	cmp	r3, #0
 8004842:	d109      	bne.n	8004858 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004854:	2b00      	cmp	r3, #0
 8004856:	d007      	beq.n	8004868 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004866:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800486e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b04      	cmp	r3, #4
 800487a:	d113      	bne.n	80048a4 <I2C_ITError+0x254>
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b28      	cmp	r3, #40	@ 0x28
 8004880:	d110      	bne.n	80048a4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a0a      	ldr	r2, [pc, #40]	@ (80048b0 <I2C_ITError+0x260>)
 8004886:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fe fe54 	bl	800354c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048a4:	bf00      	nop
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	08004b55 	.word	0x08004b55
 80048b0:	ffff0000 	.word	0xffff0000

080048b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	607a      	str	r2, [r7, #4]
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	460b      	mov	r3, r1
 80048c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d006      	beq.n	80048de <I2C_MasterRequestWrite+0x2a>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d003      	beq.n	80048de <I2C_MasterRequestWrite+0x2a>
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048dc:	d108      	bne.n	80048f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	e00b      	b.n	8004908 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f4:	2b12      	cmp	r3, #18
 80048f6:	d107      	bne.n	8004908 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004906:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f9c5 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00d      	beq.n	800493c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800492a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800492e:	d103      	bne.n	8004938 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004936:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e035      	b.n	80049a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004944:	d108      	bne.n	8004958 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004946:	897b      	ldrh	r3, [r7, #10]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004954:	611a      	str	r2, [r3, #16]
 8004956:	e01b      	b.n	8004990 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004958:	897b      	ldrh	r3, [r7, #10]
 800495a:	11db      	asrs	r3, r3, #7
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f003 0306 	and.w	r3, r3, #6
 8004962:	b2db      	uxtb	r3, r3
 8004964:	f063 030f 	orn	r3, r3, #15
 8004968:	b2da      	uxtb	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	490e      	ldr	r1, [pc, #56]	@ (80049b0 <I2C_MasterRequestWrite+0xfc>)
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 fa0e 	bl	8004d98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e010      	b.n	80049a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004986:	897b      	ldrh	r3, [r7, #10]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	4907      	ldr	r1, [pc, #28]	@ (80049b4 <I2C_MasterRequestWrite+0x100>)
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f9fe 	bl	8004d98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	00010008 	.word	0x00010008
 80049b4:	00010002 	.word	0x00010002

080049b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	460b      	mov	r3, r1
 80049c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d006      	beq.n	80049f2 <I2C_MasterRequestRead+0x3a>
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d003      	beq.n	80049f2 <I2C_MasterRequestRead+0x3a>
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049f0:	d108      	bne.n	8004a04 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e00b      	b.n	8004a1c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a08:	2b11      	cmp	r3, #17
 8004a0a:	d107      	bne.n	8004a1c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f93b 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00d      	beq.n	8004a50 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a42:	d103      	bne.n	8004a4c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e079      	b.n	8004b44 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a58:	d108      	bne.n	8004a6c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a5a:	897b      	ldrh	r3, [r7, #10]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f043 0301 	orr.w	r3, r3, #1
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	611a      	str	r2, [r3, #16]
 8004a6a:	e05f      	b.n	8004b2c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a6c:	897b      	ldrh	r3, [r7, #10]
 8004a6e:	11db      	asrs	r3, r3, #7
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	f003 0306 	and.w	r3, r3, #6
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f063 030f 	orn	r3, r3, #15
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	4930      	ldr	r1, [pc, #192]	@ (8004b4c <I2C_MasterRequestRead+0x194>)
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 f984 	bl	8004d98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e054      	b.n	8004b44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a9a:	897b      	ldrh	r3, [r7, #10]
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	4929      	ldr	r1, [pc, #164]	@ (8004b50 <I2C_MasterRequestRead+0x198>)
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f974 	bl	8004d98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e044      	b.n	8004b44 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aba:	2300      	movs	r3, #0
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ade:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f8d9 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00d      	beq.n	8004b14 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b06:	d103      	bne.n	8004b10 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b0e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e017      	b.n	8004b44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b14:	897b      	ldrh	r3, [r7, #10]
 8004b16:	11db      	asrs	r3, r3, #7
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	f003 0306 	and.w	r3, r3, #6
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f063 030e 	orn	r3, r3, #14
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	4907      	ldr	r1, [pc, #28]	@ (8004b50 <I2C_MasterRequestRead+0x198>)
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f930 	bl	8004d98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	00010008 	.word	0x00010008
 8004b50:	00010002 	.word	0x00010002

08004b54 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b64:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b6c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b6e:	4b4b      	ldr	r3, [pc, #300]	@ (8004c9c <I2C_DMAAbort+0x148>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	08db      	lsrs	r3, r3, #3
 8004b74:	4a4a      	ldr	r2, [pc, #296]	@ (8004ca0 <I2C_DMAAbort+0x14c>)
 8004b76:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7a:	0a1a      	lsrs	r2, r3, #8
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	00da      	lsls	r2, r3, #3
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	f043 0220 	orr.w	r2, r3, #32
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004b9a:	e00a      	b.n	8004bb2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bb0:	d0ea      	beq.n	8004b88 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bce:	2200      	movs	r2, #0
 8004bd0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004be0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2200      	movs	r2, #0
 8004be6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c04:	2200      	movs	r2, #0
 8004c06:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0201 	bic.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b60      	cmp	r3, #96	@ 0x60
 8004c22:	d10e      	bne.n	8004c42 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2200      	movs	r2, #0
 8004c38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c3a:	6978      	ldr	r0, [r7, #20]
 8004c3c:	f7fe fcae 	bl	800359c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c40:	e027      	b.n	8004c92 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c42:	7cfb      	ldrb	r3, [r7, #19]
 8004c44:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c48:	2b28      	cmp	r3, #40	@ 0x28
 8004c4a:	d117      	bne.n	8004c7c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c6a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2228      	movs	r2, #40	@ 0x28
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004c7a:	e007      	b.n	8004c8c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004c8c:	6978      	ldr	r0, [r7, #20]
 8004c8e:	f7fe fc7b 	bl	8003588 <HAL_I2C_ErrorCallback>
}
 8004c92:	bf00      	nop
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000000 	.word	0x20000000
 8004ca0:	14f8b589 	.word	0x14f8b589

08004ca4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb4:	e048      	b.n	8004d48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbc:	d044      	beq.n	8004d48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cbe:	f7fd f9bb 	bl	8002038 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d302      	bcc.n	8004cd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d139      	bne.n	8004d48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	0c1b      	lsrs	r3, r3, #16
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d10d      	bne.n	8004cfa <I2C_WaitOnFlagUntilTimeout+0x56>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	43da      	mvns	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	bf0c      	ite	eq
 8004cf0:	2301      	moveq	r3, #1
 8004cf2:	2300      	movne	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	e00c      	b.n	8004d14 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	43da      	mvns	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4013      	ands	r3, r2
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf0c      	ite	eq
 8004d0c:	2301      	moveq	r3, #1
 8004d0e:	2300      	movne	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d116      	bne.n	8004d48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	f043 0220 	orr.w	r2, r3, #32
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e023      	b.n	8004d90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	0c1b      	lsrs	r3, r3, #16
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d10d      	bne.n	8004d6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	43da      	mvns	r2, r3
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	bf0c      	ite	eq
 8004d64:	2301      	moveq	r3, #1
 8004d66:	2300      	movne	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	e00c      	b.n	8004d88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	43da      	mvns	r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d093      	beq.n	8004cb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004da6:	e071      	b.n	8004e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004db6:	d123      	bne.n	8004e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dc6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004dd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dec:	f043 0204 	orr.w	r2, r3, #4
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e067      	b.n	8004ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e06:	d041      	beq.n	8004e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e08:	f7fd f916 	bl	8002038 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d302      	bcc.n	8004e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d136      	bne.n	8004e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	0c1b      	lsrs	r3, r3, #16
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d10c      	bne.n	8004e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	43da      	mvns	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4013      	ands	r3, r2
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bf14      	ite	ne
 8004e3a:	2301      	movne	r3, #1
 8004e3c:	2300      	moveq	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	e00b      	b.n	8004e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	43da      	mvns	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	bf14      	ite	ne
 8004e54:	2301      	movne	r3, #1
 8004e56:	2300      	moveq	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d016      	beq.n	8004e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e78:	f043 0220 	orr.w	r2, r3, #32
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e021      	b.n	8004ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	0c1b      	lsrs	r3, r3, #16
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d10c      	bne.n	8004eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	43da      	mvns	r2, r3
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	bf14      	ite	ne
 8004ea8:	2301      	movne	r3, #1
 8004eaa:	2300      	moveq	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	e00b      	b.n	8004ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	43da      	mvns	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bf14      	ite	ne
 8004ec2:	2301      	movne	r3, #1
 8004ec4:	2300      	moveq	r3, #0
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f47f af6d 	bne.w	8004da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ee4:	e034      	b.n	8004f50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f915 	bl	8005116 <I2C_IsAcknowledgeFailed>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e034      	b.n	8004f60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efc:	d028      	beq.n	8004f50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efe:	f7fd f89b 	bl	8002038 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d302      	bcc.n	8004f14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d11d      	bne.n	8004f50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f1e:	2b80      	cmp	r3, #128	@ 0x80
 8004f20:	d016      	beq.n	8004f50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3c:	f043 0220 	orr.w	r2, r3, #32
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e007      	b.n	8004f60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f5a:	2b80      	cmp	r3, #128	@ 0x80
 8004f5c:	d1c3      	bne.n	8004ee6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f74:	e034      	b.n	8004fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 f8cd 	bl	8005116 <I2C_IsAcknowledgeFailed>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e034      	b.n	8004ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8c:	d028      	beq.n	8004fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f8e:	f7fd f853 	bl	8002038 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d302      	bcc.n	8004fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d11d      	bne.n	8004fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d016      	beq.n	8004fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fcc:	f043 0220 	orr.w	r2, r3, #32
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e007      	b.n	8004ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d1c3      	bne.n	8004f76 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005004:	4b13      	ldr	r3, [pc, #76]	@ (8005054 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	08db      	lsrs	r3, r3, #3
 800500a:	4a13      	ldr	r2, [pc, #76]	@ (8005058 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	0a1a      	lsrs	r2, r3, #8
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3b01      	subs	r3, #1
 800501e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d107      	bne.n	8005036 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	f043 0220 	orr.w	r2, r3, #32
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e008      	b.n	8005048 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005044:	d0e9      	beq.n	800501a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	20000000 	.word	0x20000000
 8005058:	14f8b589 	.word	0x14f8b589

0800505c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005068:	e049      	b.n	80050fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f003 0310 	and.w	r3, r3, #16
 8005074:	2b10      	cmp	r3, #16
 8005076:	d119      	bne.n	80050ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f06f 0210 	mvn.w	r2, #16
 8005080:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e030      	b.n	800510e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ac:	f7fc ffc4 	bl	8002038 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d302      	bcc.n	80050c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d11d      	bne.n	80050fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050cc:	2b40      	cmp	r3, #64	@ 0x40
 80050ce:	d016      	beq.n	80050fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ea:	f043 0220 	orr.w	r2, r3, #32
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e007      	b.n	800510e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005108:	2b40      	cmp	r3, #64	@ 0x40
 800510a:	d1ae      	bne.n	800506a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800512c:	d11b      	bne.n	8005166 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005136:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	f043 0204 	orr.w	r2, r3, #4
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005180:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005184:	d103      	bne.n	800518e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800518c:	e007      	b.n	800519e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005192:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005196:	d102      	bne.n	800519e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2208      	movs	r2, #8
 800519c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e267      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d075      	beq.n	80052b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051ca:	4b88      	ldr	r3, [pc, #544]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 030c 	and.w	r3, r3, #12
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d00c      	beq.n	80051f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051d6:	4b85      	ldr	r3, [pc, #532]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d112      	bne.n	8005208 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051e2:	4b82      	ldr	r3, [pc, #520]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051ee:	d10b      	bne.n	8005208 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f0:	4b7e      	ldr	r3, [pc, #504]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d05b      	beq.n	80052b4 <HAL_RCC_OscConfig+0x108>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d157      	bne.n	80052b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e242      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005210:	d106      	bne.n	8005220 <HAL_RCC_OscConfig+0x74>
 8005212:	4b76      	ldr	r3, [pc, #472]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a75      	ldr	r2, [pc, #468]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 8005218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	e01d      	b.n	800525c <HAL_RCC_OscConfig+0xb0>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005228:	d10c      	bne.n	8005244 <HAL_RCC_OscConfig+0x98>
 800522a:	4b70      	ldr	r3, [pc, #448]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a6f      	ldr	r2, [pc, #444]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 8005230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	4b6d      	ldr	r3, [pc, #436]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a6c      	ldr	r2, [pc, #432]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 800523c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	e00b      	b.n	800525c <HAL_RCC_OscConfig+0xb0>
 8005244:	4b69      	ldr	r3, [pc, #420]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a68      	ldr	r2, [pc, #416]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 800524a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	4b66      	ldr	r3, [pc, #408]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a65      	ldr	r2, [pc, #404]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 8005256:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800525a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d013      	beq.n	800528c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005264:	f7fc fee8 	bl	8002038 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800526c:	f7fc fee4 	bl	8002038 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b64      	cmp	r3, #100	@ 0x64
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e207      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527e:	4b5b      	ldr	r3, [pc, #364]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0f0      	beq.n	800526c <HAL_RCC_OscConfig+0xc0>
 800528a:	e014      	b.n	80052b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528c:	f7fc fed4 	bl	8002038 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005294:	f7fc fed0 	bl	8002038 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b64      	cmp	r3, #100	@ 0x64
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e1f3      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052a6:	4b51      	ldr	r3, [pc, #324]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f0      	bne.n	8005294 <HAL_RCC_OscConfig+0xe8>
 80052b2:	e000      	b.n	80052b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d063      	beq.n	800538a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80052c2:	4b4a      	ldr	r3, [pc, #296]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 030c 	and.w	r3, r3, #12
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00b      	beq.n	80052e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ce:	4b47      	ldr	r3, [pc, #284]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d11c      	bne.n	8005314 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052da:	4b44      	ldr	r3, [pc, #272]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d116      	bne.n	8005314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052e6:	4b41      	ldr	r3, [pc, #260]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <HAL_RCC_OscConfig+0x152>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d001      	beq.n	80052fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e1c7      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fe:	4b3b      	ldr	r3, [pc, #236]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	4937      	ldr	r1, [pc, #220]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 800530e:	4313      	orrs	r3, r2
 8005310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005312:	e03a      	b.n	800538a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d020      	beq.n	800535e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800531c:	4b34      	ldr	r3, [pc, #208]	@ (80053f0 <HAL_RCC_OscConfig+0x244>)
 800531e:	2201      	movs	r2, #1
 8005320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005322:	f7fc fe89 	bl	8002038 <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800532a:	f7fc fe85 	bl	8002038 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e1a8      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800533c:	4b2b      	ldr	r3, [pc, #172]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0f0      	beq.n	800532a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005348:	4b28      	ldr	r3, [pc, #160]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	4925      	ldr	r1, [pc, #148]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 8005358:	4313      	orrs	r3, r2
 800535a:	600b      	str	r3, [r1, #0]
 800535c:	e015      	b.n	800538a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800535e:	4b24      	ldr	r3, [pc, #144]	@ (80053f0 <HAL_RCC_OscConfig+0x244>)
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005364:	f7fc fe68 	bl	8002038 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800536c:	f7fc fe64 	bl	8002038 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e187      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800537e:	4b1b      	ldr	r3, [pc, #108]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d036      	beq.n	8005404 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d016      	beq.n	80053cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800539e:	4b15      	ldr	r3, [pc, #84]	@ (80053f4 <HAL_RCC_OscConfig+0x248>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a4:	f7fc fe48 	bl	8002038 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ac:	f7fc fe44 	bl	8002038 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e167      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053be:	4b0b      	ldr	r3, [pc, #44]	@ (80053ec <HAL_RCC_OscConfig+0x240>)
 80053c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0f0      	beq.n	80053ac <HAL_RCC_OscConfig+0x200>
 80053ca:	e01b      	b.n	8005404 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053cc:	4b09      	ldr	r3, [pc, #36]	@ (80053f4 <HAL_RCC_OscConfig+0x248>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d2:	f7fc fe31 	bl	8002038 <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053d8:	e00e      	b.n	80053f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053da:	f7fc fe2d 	bl	8002038 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d907      	bls.n	80053f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e150      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
 80053ec:	40023800 	.word	0x40023800
 80053f0:	42470000 	.word	0x42470000
 80053f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053f8:	4b88      	ldr	r3, [pc, #544]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 80053fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1ea      	bne.n	80053da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 8097 	beq.w	8005540 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005412:	2300      	movs	r3, #0
 8005414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005416:	4b81      	ldr	r3, [pc, #516]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 8005418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10f      	bne.n	8005442 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005422:	2300      	movs	r3, #0
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	4b7d      	ldr	r3, [pc, #500]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 8005428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542a:	4a7c      	ldr	r2, [pc, #496]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 800542c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005430:	6413      	str	r3, [r2, #64]	@ 0x40
 8005432:	4b7a      	ldr	r3, [pc, #488]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 8005434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800543a:	60bb      	str	r3, [r7, #8]
 800543c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800543e:	2301      	movs	r3, #1
 8005440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005442:	4b77      	ldr	r3, [pc, #476]	@ (8005620 <HAL_RCC_OscConfig+0x474>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544a:	2b00      	cmp	r3, #0
 800544c:	d118      	bne.n	8005480 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800544e:	4b74      	ldr	r3, [pc, #464]	@ (8005620 <HAL_RCC_OscConfig+0x474>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a73      	ldr	r2, [pc, #460]	@ (8005620 <HAL_RCC_OscConfig+0x474>)
 8005454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800545a:	f7fc fded 	bl	8002038 <HAL_GetTick>
 800545e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005460:	e008      	b.n	8005474 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005462:	f7fc fde9 	bl	8002038 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e10c      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005474:	4b6a      	ldr	r3, [pc, #424]	@ (8005620 <HAL_RCC_OscConfig+0x474>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0f0      	beq.n	8005462 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d106      	bne.n	8005496 <HAL_RCC_OscConfig+0x2ea>
 8005488:	4b64      	ldr	r3, [pc, #400]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 800548a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800548c:	4a63      	ldr	r2, [pc, #396]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 800548e:	f043 0301 	orr.w	r3, r3, #1
 8005492:	6713      	str	r3, [r2, #112]	@ 0x70
 8005494:	e01c      	b.n	80054d0 <HAL_RCC_OscConfig+0x324>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2b05      	cmp	r3, #5
 800549c:	d10c      	bne.n	80054b8 <HAL_RCC_OscConfig+0x30c>
 800549e:	4b5f      	ldr	r3, [pc, #380]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 80054a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a2:	4a5e      	ldr	r2, [pc, #376]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 80054a4:	f043 0304 	orr.w	r3, r3, #4
 80054a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80054aa:	4b5c      	ldr	r3, [pc, #368]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 80054ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ae:	4a5b      	ldr	r2, [pc, #364]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 80054b0:	f043 0301 	orr.w	r3, r3, #1
 80054b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80054b6:	e00b      	b.n	80054d0 <HAL_RCC_OscConfig+0x324>
 80054b8:	4b58      	ldr	r3, [pc, #352]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 80054ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054bc:	4a57      	ldr	r2, [pc, #348]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 80054be:	f023 0301 	bic.w	r3, r3, #1
 80054c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80054c4:	4b55      	ldr	r3, [pc, #340]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 80054c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c8:	4a54      	ldr	r2, [pc, #336]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 80054ca:	f023 0304 	bic.w	r3, r3, #4
 80054ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d015      	beq.n	8005504 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d8:	f7fc fdae 	bl	8002038 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054de:	e00a      	b.n	80054f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e0:	f7fc fdaa 	bl	8002038 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e0cb      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f6:	4b49      	ldr	r3, [pc, #292]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0ee      	beq.n	80054e0 <HAL_RCC_OscConfig+0x334>
 8005502:	e014      	b.n	800552e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005504:	f7fc fd98 	bl	8002038 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800550a:	e00a      	b.n	8005522 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800550c:	f7fc fd94 	bl	8002038 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800551a:	4293      	cmp	r3, r2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e0b5      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005522:	4b3e      	ldr	r3, [pc, #248]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 8005524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1ee      	bne.n	800550c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800552e:	7dfb      	ldrb	r3, [r7, #23]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d105      	bne.n	8005540 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005534:	4b39      	ldr	r3, [pc, #228]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 8005536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005538:	4a38      	ldr	r2, [pc, #224]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 800553a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800553e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80a1 	beq.w	800568c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800554a:	4b34      	ldr	r3, [pc, #208]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 030c 	and.w	r3, r3, #12
 8005552:	2b08      	cmp	r3, #8
 8005554:	d05c      	beq.n	8005610 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d141      	bne.n	80055e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800555e:	4b31      	ldr	r3, [pc, #196]	@ (8005624 <HAL_RCC_OscConfig+0x478>)
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005564:	f7fc fd68 	bl	8002038 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800556c:	f7fc fd64 	bl	8002038 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e087      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800557e:	4b27      	ldr	r3, [pc, #156]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f0      	bne.n	800556c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69da      	ldr	r2, [r3, #28]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005598:	019b      	lsls	r3, r3, #6
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a0:	085b      	lsrs	r3, r3, #1
 80055a2:	3b01      	subs	r3, #1
 80055a4:	041b      	lsls	r3, r3, #16
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ac:	061b      	lsls	r3, r3, #24
 80055ae:	491b      	ldr	r1, [pc, #108]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005624 <HAL_RCC_OscConfig+0x478>)
 80055b6:	2201      	movs	r2, #1
 80055b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ba:	f7fc fd3d 	bl	8002038 <HAL_GetTick>
 80055be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055c2:	f7fc fd39 	bl	8002038 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e05c      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055d4:	4b11      	ldr	r3, [pc, #68]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0f0      	beq.n	80055c2 <HAL_RCC_OscConfig+0x416>
 80055e0:	e054      	b.n	800568c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055e2:	4b10      	ldr	r3, [pc, #64]	@ (8005624 <HAL_RCC_OscConfig+0x478>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e8:	f7fc fd26 	bl	8002038 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f0:	f7fc fd22 	bl	8002038 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e045      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005602:	4b06      	ldr	r3, [pc, #24]	@ (800561c <HAL_RCC_OscConfig+0x470>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1f0      	bne.n	80055f0 <HAL_RCC_OscConfig+0x444>
 800560e:	e03d      	b.n	800568c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d107      	bne.n	8005628 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e038      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
 800561c:	40023800 	.word	0x40023800
 8005620:	40007000 	.word	0x40007000
 8005624:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005628:	4b1b      	ldr	r3, [pc, #108]	@ (8005698 <HAL_RCC_OscConfig+0x4ec>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d028      	beq.n	8005688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005640:	429a      	cmp	r2, r3
 8005642:	d121      	bne.n	8005688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800564e:	429a      	cmp	r2, r3
 8005650:	d11a      	bne.n	8005688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005658:	4013      	ands	r3, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800565e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005660:	4293      	cmp	r3, r2
 8005662:	d111      	bne.n	8005688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566e:	085b      	lsrs	r3, r3, #1
 8005670:	3b01      	subs	r3, #1
 8005672:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005674:	429a      	cmp	r2, r3
 8005676:	d107      	bne.n	8005688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005682:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005684:	429a      	cmp	r2, r3
 8005686:	d001      	beq.n	800568c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e000      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40023800 	.word	0x40023800

0800569c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e0cc      	b.n	800584a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056b0:	4b68      	ldr	r3, [pc, #416]	@ (8005854 <HAL_RCC_ClockConfig+0x1b8>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d90c      	bls.n	80056d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056be:	4b65      	ldr	r3, [pc, #404]	@ (8005854 <HAL_RCC_ClockConfig+0x1b8>)
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c6:	4b63      	ldr	r3, [pc, #396]	@ (8005854 <HAL_RCC_ClockConfig+0x1b8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d001      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e0b8      	b.n	800584a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d020      	beq.n	8005726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056f0:	4b59      	ldr	r3, [pc, #356]	@ (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	4a58      	ldr	r2, [pc, #352]	@ (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80056fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0308 	and.w	r3, r3, #8
 8005704:	2b00      	cmp	r3, #0
 8005706:	d005      	beq.n	8005714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005708:	4b53      	ldr	r3, [pc, #332]	@ (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	4a52      	ldr	r2, [pc, #328]	@ (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 800570e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005714:	4b50      	ldr	r3, [pc, #320]	@ (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	494d      	ldr	r1, [pc, #308]	@ (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 8005722:	4313      	orrs	r3, r2
 8005724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d044      	beq.n	80057bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d107      	bne.n	800574a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800573a:	4b47      	ldr	r3, [pc, #284]	@ (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d119      	bne.n	800577a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e07f      	b.n	800584a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b02      	cmp	r3, #2
 8005750:	d003      	beq.n	800575a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005756:	2b03      	cmp	r3, #3
 8005758:	d107      	bne.n	800576a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800575a:	4b3f      	ldr	r3, [pc, #252]	@ (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e06f      	b.n	800584a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800576a:	4b3b      	ldr	r3, [pc, #236]	@ (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e067      	b.n	800584a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800577a:	4b37      	ldr	r3, [pc, #220]	@ (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f023 0203 	bic.w	r2, r3, #3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	4934      	ldr	r1, [pc, #208]	@ (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 8005788:	4313      	orrs	r3, r2
 800578a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800578c:	f7fc fc54 	bl	8002038 <HAL_GetTick>
 8005790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005792:	e00a      	b.n	80057aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005794:	f7fc fc50 	bl	8002038 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e04f      	b.n	800584a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 020c 	and.w	r2, r3, #12
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d1eb      	bne.n	8005794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057bc:	4b25      	ldr	r3, [pc, #148]	@ (8005854 <HAL_RCC_ClockConfig+0x1b8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d20c      	bcs.n	80057e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ca:	4b22      	ldr	r3, [pc, #136]	@ (8005854 <HAL_RCC_ClockConfig+0x1b8>)
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057d2:	4b20      	ldr	r3, [pc, #128]	@ (8005854 <HAL_RCC_ClockConfig+0x1b8>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d001      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e032      	b.n	800584a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d008      	beq.n	8005802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057f0:	4b19      	ldr	r3, [pc, #100]	@ (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	4916      	ldr	r1, [pc, #88]	@ (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	2b00      	cmp	r3, #0
 800580c:	d009      	beq.n	8005822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800580e:	4b12      	ldr	r3, [pc, #72]	@ (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	490e      	ldr	r1, [pc, #56]	@ (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	4313      	orrs	r3, r2
 8005820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005822:	f000 f821 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8005826:	4602      	mov	r2, r0
 8005828:	4b0b      	ldr	r3, [pc, #44]	@ (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	091b      	lsrs	r3, r3, #4
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	490a      	ldr	r1, [pc, #40]	@ (800585c <HAL_RCC_ClockConfig+0x1c0>)
 8005834:	5ccb      	ldrb	r3, [r1, r3]
 8005836:	fa22 f303 	lsr.w	r3, r2, r3
 800583a:	4a09      	ldr	r2, [pc, #36]	@ (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 800583c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800583e:	4b09      	ldr	r3, [pc, #36]	@ (8005864 <HAL_RCC_ClockConfig+0x1c8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f7fc fbb4 	bl	8001fb0 <HAL_InitTick>

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40023c00 	.word	0x40023c00
 8005858:	40023800 	.word	0x40023800
 800585c:	08008aa4 	.word	0x08008aa4
 8005860:	20000000 	.word	0x20000000
 8005864:	20000004 	.word	0x20000004

08005868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800586c:	b090      	sub	sp, #64	@ 0x40
 800586e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005880:	4b59      	ldr	r3, [pc, #356]	@ (80059e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f003 030c 	and.w	r3, r3, #12
 8005888:	2b08      	cmp	r3, #8
 800588a:	d00d      	beq.n	80058a8 <HAL_RCC_GetSysClockFreq+0x40>
 800588c:	2b08      	cmp	r3, #8
 800588e:	f200 80a1 	bhi.w	80059d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_RCC_GetSysClockFreq+0x34>
 8005896:	2b04      	cmp	r3, #4
 8005898:	d003      	beq.n	80058a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800589a:	e09b      	b.n	80059d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800589c:	4b53      	ldr	r3, [pc, #332]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x184>)
 800589e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80058a0:	e09b      	b.n	80059da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058a2:	4b53      	ldr	r3, [pc, #332]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80058a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80058a6:	e098      	b.n	80059da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058a8:	4b4f      	ldr	r3, [pc, #316]	@ (80059e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058b2:	4b4d      	ldr	r3, [pc, #308]	@ (80059e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d028      	beq.n	8005910 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058be:	4b4a      	ldr	r3, [pc, #296]	@ (80059e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	099b      	lsrs	r3, r3, #6
 80058c4:	2200      	movs	r2, #0
 80058c6:	623b      	str	r3, [r7, #32]
 80058c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80058d0:	2100      	movs	r1, #0
 80058d2:	4b47      	ldr	r3, [pc, #284]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80058d4:	fb03 f201 	mul.w	r2, r3, r1
 80058d8:	2300      	movs	r3, #0
 80058da:	fb00 f303 	mul.w	r3, r0, r3
 80058de:	4413      	add	r3, r2
 80058e0:	4a43      	ldr	r2, [pc, #268]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80058e2:	fba0 1202 	umull	r1, r2, r0, r2
 80058e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058e8:	460a      	mov	r2, r1
 80058ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 80058ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058ee:	4413      	add	r3, r2
 80058f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f4:	2200      	movs	r2, #0
 80058f6:	61bb      	str	r3, [r7, #24]
 80058f8:	61fa      	str	r2, [r7, #28]
 80058fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005902:	f7fb f971 	bl	8000be8 <__aeabi_uldivmod>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4613      	mov	r3, r2
 800590c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800590e:	e053      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005910:	4b35      	ldr	r3, [pc, #212]	@ (80059e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	099b      	lsrs	r3, r3, #6
 8005916:	2200      	movs	r2, #0
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	617a      	str	r2, [r7, #20]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005922:	f04f 0b00 	mov.w	fp, #0
 8005926:	4652      	mov	r2, sl
 8005928:	465b      	mov	r3, fp
 800592a:	f04f 0000 	mov.w	r0, #0
 800592e:	f04f 0100 	mov.w	r1, #0
 8005932:	0159      	lsls	r1, r3, #5
 8005934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005938:	0150      	lsls	r0, r2, #5
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	ebb2 080a 	subs.w	r8, r2, sl
 8005942:	eb63 090b 	sbc.w	r9, r3, fp
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005952:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005956:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800595a:	ebb2 0408 	subs.w	r4, r2, r8
 800595e:	eb63 0509 	sbc.w	r5, r3, r9
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	f04f 0300 	mov.w	r3, #0
 800596a:	00eb      	lsls	r3, r5, #3
 800596c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005970:	00e2      	lsls	r2, r4, #3
 8005972:	4614      	mov	r4, r2
 8005974:	461d      	mov	r5, r3
 8005976:	eb14 030a 	adds.w	r3, r4, sl
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	eb45 030b 	adc.w	r3, r5, fp
 8005980:	607b      	str	r3, [r7, #4]
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800598e:	4629      	mov	r1, r5
 8005990:	028b      	lsls	r3, r1, #10
 8005992:	4621      	mov	r1, r4
 8005994:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005998:	4621      	mov	r1, r4
 800599a:	028a      	lsls	r2, r1, #10
 800599c:	4610      	mov	r0, r2
 800599e:	4619      	mov	r1, r3
 80059a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a2:	2200      	movs	r2, #0
 80059a4:	60bb      	str	r3, [r7, #8]
 80059a6:	60fa      	str	r2, [r7, #12]
 80059a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059ac:	f7fb f91c 	bl	8000be8 <__aeabi_uldivmod>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4613      	mov	r3, r2
 80059b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80059b8:	4b0b      	ldr	r3, [pc, #44]	@ (80059e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	0c1b      	lsrs	r3, r3, #16
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	3301      	adds	r3, #1
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80059c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80059ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80059d2:	e002      	b.n	80059da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059d4:	4b05      	ldr	r3, [pc, #20]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x184>)
 80059d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80059d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3740      	adds	r7, #64	@ 0x40
 80059e0:	46bd      	mov	sp, r7
 80059e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059e6:	bf00      	nop
 80059e8:	40023800 	.word	0x40023800
 80059ec:	00f42400 	.word	0x00f42400
 80059f0:	017d7840 	.word	0x017d7840

080059f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059f8:	4b03      	ldr	r3, [pc, #12]	@ (8005a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80059fa:	681b      	ldr	r3, [r3, #0]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	20000000 	.word	0x20000000

08005a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a10:	f7ff fff0 	bl	80059f4 <HAL_RCC_GetHCLKFreq>
 8005a14:	4602      	mov	r2, r0
 8005a16:	4b05      	ldr	r3, [pc, #20]	@ (8005a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	0a9b      	lsrs	r3, r3, #10
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	4903      	ldr	r1, [pc, #12]	@ (8005a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a22:	5ccb      	ldrb	r3, [r1, r3]
 8005a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	08008ab4 	.word	0x08008ab4

08005a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a38:	f7ff ffdc 	bl	80059f4 <HAL_RCC_GetHCLKFreq>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4b05      	ldr	r3, [pc, #20]	@ (8005a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	0b5b      	lsrs	r3, r3, #13
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	4903      	ldr	r1, [pc, #12]	@ (8005a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a4a:	5ccb      	ldrb	r3, [r1, r3]
 8005a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40023800 	.word	0x40023800
 8005a58:	08008ab4 	.word	0x08008ab4

08005a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e041      	b.n	8005af2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7fc f8ce 	bl	8001c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3304      	adds	r3, #4
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	f000 fa7e 	bl	8005f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d001      	beq.n	8005b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e04e      	b.n	8005bb2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a23      	ldr	r2, [pc, #140]	@ (8005bc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d022      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x80>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b3e:	d01d      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x80>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d018      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x80>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8005bc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d013      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x80>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a1c      	ldr	r2, [pc, #112]	@ (8005bcc <HAL_TIM_Base_Start_IT+0xd0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00e      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x80>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d009      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x80>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a19      	ldr	r2, [pc, #100]	@ (8005bd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d004      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x80>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a18      	ldr	r2, [pc, #96]	@ (8005bd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d111      	bne.n	8005ba0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b06      	cmp	r3, #6
 8005b8c:	d010      	beq.n	8005bb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b9e:	e007      	b.n	8005bb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0201 	orr.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	40010000 	.word	0x40010000
 8005bc4:	40000400 	.word	0x40000400
 8005bc8:	40000800 	.word	0x40000800
 8005bcc:	40000c00 	.word	0x40000c00
 8005bd0:	40010400 	.word	0x40010400
 8005bd4:	40014000 	.word	0x40014000
 8005bd8:	40001800 	.word	0x40001800

08005bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d020      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01b      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0202 	mvn.w	r2, #2
 8005c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f999 	bl	8005f5e <HAL_TIM_IC_CaptureCallback>
 8005c2c:	e005      	b.n	8005c3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f98b 	bl	8005f4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f99c 	bl	8005f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d020      	beq.n	8005c8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01b      	beq.n	8005c8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0204 	mvn.w	r2, #4
 8005c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2202      	movs	r2, #2
 8005c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f973 	bl	8005f5e <HAL_TIM_IC_CaptureCallback>
 8005c78:	e005      	b.n	8005c86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f965 	bl	8005f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f976 	bl	8005f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d020      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01b      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0208 	mvn.w	r2, #8
 8005ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2204      	movs	r2, #4
 8005cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f94d 	bl	8005f5e <HAL_TIM_IC_CaptureCallback>
 8005cc4:	e005      	b.n	8005cd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f93f 	bl	8005f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f950 	bl	8005f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d020      	beq.n	8005d24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01b      	beq.n	8005d24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f06f 0210 	mvn.w	r2, #16
 8005cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2208      	movs	r2, #8
 8005cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f927 	bl	8005f5e <HAL_TIM_IC_CaptureCallback>
 8005d10:	e005      	b.n	8005d1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f919 	bl	8005f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f92a 	bl	8005f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00c      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d007      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0201 	mvn.w	r2, #1
 8005d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7fb fc96 	bl	8001674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00c      	beq.n	8005d6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fade 	bl	8006328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00c      	beq.n	8005d90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f8fb 	bl	8005f86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00c      	beq.n	8005db4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0220 	mvn.w	r2, #32
 8005dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fab0 	bl	8006314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005db4:	bf00      	nop
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_TIM_ConfigClockSource+0x1c>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e0b4      	b.n	8005f42 <HAL_TIM_ConfigClockSource+0x186>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e10:	d03e      	beq.n	8005e90 <HAL_TIM_ConfigClockSource+0xd4>
 8005e12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e16:	f200 8087 	bhi.w	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e1e:	f000 8086 	beq.w	8005f2e <HAL_TIM_ConfigClockSource+0x172>
 8005e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e26:	d87f      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e28:	2b70      	cmp	r3, #112	@ 0x70
 8005e2a:	d01a      	beq.n	8005e62 <HAL_TIM_ConfigClockSource+0xa6>
 8005e2c:	2b70      	cmp	r3, #112	@ 0x70
 8005e2e:	d87b      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e30:	2b60      	cmp	r3, #96	@ 0x60
 8005e32:	d050      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0x11a>
 8005e34:	2b60      	cmp	r3, #96	@ 0x60
 8005e36:	d877      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e38:	2b50      	cmp	r3, #80	@ 0x50
 8005e3a:	d03c      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0xfa>
 8005e3c:	2b50      	cmp	r3, #80	@ 0x50
 8005e3e:	d873      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e40:	2b40      	cmp	r3, #64	@ 0x40
 8005e42:	d058      	beq.n	8005ef6 <HAL_TIM_ConfigClockSource+0x13a>
 8005e44:	2b40      	cmp	r3, #64	@ 0x40
 8005e46:	d86f      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e48:	2b30      	cmp	r3, #48	@ 0x30
 8005e4a:	d064      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0x15a>
 8005e4c:	2b30      	cmp	r3, #48	@ 0x30
 8005e4e:	d86b      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	d060      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0x15a>
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d867      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d05c      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0x15a>
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d05a      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0x15a>
 8005e60:	e062      	b.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e72:	f000 f9b3 	bl	80061dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	609a      	str	r2, [r3, #8]
      break;
 8005e8e:	e04f      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ea0:	f000 f99c 	bl	80061dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005eb2:	609a      	str	r2, [r3, #8]
      break;
 8005eb4:	e03c      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f000 f910 	bl	80060e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2150      	movs	r1, #80	@ 0x50
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 f969 	bl	80061a6 <TIM_ITRx_SetConfig>
      break;
 8005ed4:	e02c      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f000 f92f 	bl	8006146 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2160      	movs	r1, #96	@ 0x60
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f959 	bl	80061a6 <TIM_ITRx_SetConfig>
      break;
 8005ef4:	e01c      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f02:	461a      	mov	r2, r3
 8005f04:	f000 f8f0 	bl	80060e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2140      	movs	r1, #64	@ 0x40
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 f949 	bl	80061a6 <TIM_ITRx_SetConfig>
      break;
 8005f14:	e00c      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4610      	mov	r0, r2
 8005f22:	f000 f940 	bl	80061a6 <TIM_ITRx_SetConfig>
      break;
 8005f26:	e003      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f2c:	e000      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f66:	bf00      	nop
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
	...

08005f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a43      	ldr	r2, [pc, #268]	@ (80060bc <TIM_Base_SetConfig+0x120>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d013      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fba:	d00f      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a40      	ldr	r2, [pc, #256]	@ (80060c0 <TIM_Base_SetConfig+0x124>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00b      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80060c4 <TIM_Base_SetConfig+0x128>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d007      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a3e      	ldr	r2, [pc, #248]	@ (80060c8 <TIM_Base_SetConfig+0x12c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a3d      	ldr	r2, [pc, #244]	@ (80060cc <TIM_Base_SetConfig+0x130>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d108      	bne.n	8005fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a32      	ldr	r2, [pc, #200]	@ (80060bc <TIM_Base_SetConfig+0x120>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d02b      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ffc:	d027      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a2f      	ldr	r2, [pc, #188]	@ (80060c0 <TIM_Base_SetConfig+0x124>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d023      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a2e      	ldr	r2, [pc, #184]	@ (80060c4 <TIM_Base_SetConfig+0x128>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01f      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2d      	ldr	r2, [pc, #180]	@ (80060c8 <TIM_Base_SetConfig+0x12c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d01b      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a2c      	ldr	r2, [pc, #176]	@ (80060cc <TIM_Base_SetConfig+0x130>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d017      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a2b      	ldr	r2, [pc, #172]	@ (80060d0 <TIM_Base_SetConfig+0x134>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d013      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2a      	ldr	r2, [pc, #168]	@ (80060d4 <TIM_Base_SetConfig+0x138>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00f      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a29      	ldr	r2, [pc, #164]	@ (80060d8 <TIM_Base_SetConfig+0x13c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00b      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a28      	ldr	r2, [pc, #160]	@ (80060dc <TIM_Base_SetConfig+0x140>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d007      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a27      	ldr	r2, [pc, #156]	@ (80060e0 <TIM_Base_SetConfig+0x144>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d003      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a26      	ldr	r2, [pc, #152]	@ (80060e4 <TIM_Base_SetConfig+0x148>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d108      	bne.n	8006060 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a0e      	ldr	r2, [pc, #56]	@ (80060bc <TIM_Base_SetConfig+0x120>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d003      	beq.n	800608e <TIM_Base_SetConfig+0xf2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a10      	ldr	r2, [pc, #64]	@ (80060cc <TIM_Base_SetConfig+0x130>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d103      	bne.n	8006096 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	691a      	ldr	r2, [r3, #16]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f043 0204 	orr.w	r2, r3, #4
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	601a      	str	r2, [r3, #0]
}
 80060ae:	bf00      	nop
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40000400 	.word	0x40000400
 80060c4:	40000800 	.word	0x40000800
 80060c8:	40000c00 	.word	0x40000c00
 80060cc:	40010400 	.word	0x40010400
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40014400 	.word	0x40014400
 80060d8:	40014800 	.word	0x40014800
 80060dc:	40001800 	.word	0x40001800
 80060e0:	40001c00 	.word	0x40001c00
 80060e4:	40002000 	.word	0x40002000

080060e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	f023 0201 	bic.w	r2, r3, #1
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	4313      	orrs	r3, r2
 800611c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f023 030a 	bic.w	r3, r3, #10
 8006124:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006146:	b480      	push	{r7}
 8006148:	b087      	sub	sp, #28
 800614a:	af00      	add	r7, sp, #0
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	f023 0210 	bic.w	r2, r3, #16
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006170:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	031b      	lsls	r3, r3, #12
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006182:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	621a      	str	r2, [r3, #32]
}
 800619a:	bf00      	nop
 800619c:	371c      	adds	r7, #28
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b085      	sub	sp, #20
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f043 0307 	orr.w	r3, r3, #7
 80061c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	609a      	str	r2, [r3, #8]
}
 80061d0:	bf00      	nop
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	021a      	lsls	r2, r3, #8
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	431a      	orrs	r2, r3
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	4313      	orrs	r3, r2
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	609a      	str	r2, [r3, #8]
}
 8006210:	bf00      	nop
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006230:	2302      	movs	r3, #2
 8006232:	e05a      	b.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800625a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a21      	ldr	r2, [pc, #132]	@ (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d022      	beq.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006280:	d01d      	beq.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a1d      	ldr	r2, [pc, #116]	@ (80062fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d018      	beq.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a1b      	ldr	r2, [pc, #108]	@ (8006300 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d013      	beq.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a1a      	ldr	r2, [pc, #104]	@ (8006304 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00e      	beq.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a18      	ldr	r2, [pc, #96]	@ (8006308 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d009      	beq.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a17      	ldr	r2, [pc, #92]	@ (800630c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d004      	beq.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a15      	ldr	r2, [pc, #84]	@ (8006310 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d10c      	bne.n	80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	40010000 	.word	0x40010000
 80062fc:	40000400 	.word	0x40000400
 8006300:	40000800 	.word	0x40000800
 8006304:	40000c00 	.word	0x40000c00
 8006308:	40010400 	.word	0x40010400
 800630c:	40014000 	.word	0x40014000
 8006310:	40001800 	.word	0x40001800

08006314 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e042      	b.n	80063d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d106      	bne.n	8006368 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fb fc94 	bl	8001c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2224      	movs	r2, #36	@ 0x24
 800636c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800637e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fd7f 	bl	8006e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006394:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	695a      	ldr	r2, [r3, #20]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	@ 0x28
 80063e0:	af02      	add	r7, sp, #8
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	4613      	mov	r3, r2
 80063ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	d175      	bne.n	80064e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <HAL_UART_Transmit+0x2c>
 8006402:	88fb      	ldrh	r3, [r7, #6]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e06e      	b.n	80064ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2221      	movs	r2, #33	@ 0x21
 8006416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800641a:	f7fb fe0d 	bl	8002038 <HAL_GetTick>
 800641e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	88fa      	ldrh	r2, [r7, #6]
 8006424:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	88fa      	ldrh	r2, [r7, #6]
 800642a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006434:	d108      	bne.n	8006448 <HAL_UART_Transmit+0x6c>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d104      	bne.n	8006448 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800643e:	2300      	movs	r3, #0
 8006440:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	61bb      	str	r3, [r7, #24]
 8006446:	e003      	b.n	8006450 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800644c:	2300      	movs	r3, #0
 800644e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006450:	e02e      	b.n	80064b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2200      	movs	r2, #0
 800645a:	2180      	movs	r1, #128	@ 0x80
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 fb1d 	bl	8006a9c <UART_WaitOnFlagUntilTimeout>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d005      	beq.n	8006474 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2220      	movs	r2, #32
 800646c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e03a      	b.n	80064ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10b      	bne.n	8006492 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006488:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	3302      	adds	r3, #2
 800648e:	61bb      	str	r3, [r7, #24]
 8006490:	e007      	b.n	80064a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	781a      	ldrb	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	3301      	adds	r3, #1
 80064a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1cb      	bne.n	8006452 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2200      	movs	r2, #0
 80064c2:	2140      	movs	r1, #64	@ 0x40
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 fae9 	bl	8006a9c <UART_WaitOnFlagUntilTimeout>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e006      	b.n	80064ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	e000      	b.n	80064ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80064e8:	2302      	movs	r3, #2
  }
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3720      	adds	r7, #32
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b0ba      	sub	sp, #232	@ 0xe8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800651a:	2300      	movs	r3, #0
 800651c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006520:	2300      	movs	r3, #0
 8006522:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10f      	bne.n	800655a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800653a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b00      	cmp	r3, #0
 8006544:	d009      	beq.n	800655a <HAL_UART_IRQHandler+0x66>
 8006546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fbd7 	bl	8006d06 <UART_Receive_IT>
      return;
 8006558:	e273      	b.n	8006a42 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800655a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 80de 	beq.w	8006720 <HAL_UART_IRQHandler+0x22c>
 8006564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d106      	bne.n	800657e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006574:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 80d1 	beq.w	8006720 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800657e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00b      	beq.n	80065a2 <HAL_UART_IRQHandler+0xae>
 800658a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800658e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006592:	2b00      	cmp	r3, #0
 8006594:	d005      	beq.n	80065a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800659a:	f043 0201 	orr.w	r2, r3, #1
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065a6:	f003 0304 	and.w	r3, r3, #4
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00b      	beq.n	80065c6 <HAL_UART_IRQHandler+0xd2>
 80065ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d005      	beq.n	80065c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065be:	f043 0202 	orr.w	r2, r3, #2
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <HAL_UART_IRQHandler+0xf6>
 80065d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e2:	f043 0204 	orr.w	r2, r3, #4
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d011      	beq.n	800661a <HAL_UART_IRQHandler+0x126>
 80065f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d105      	bne.n	800660e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006612:	f043 0208 	orr.w	r2, r3, #8
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 820a 	beq.w	8006a38 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b00      	cmp	r3, #0
 800662e:	d008      	beq.n	8006642 <HAL_UART_IRQHandler+0x14e>
 8006630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fb62 	bl	8006d06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800664c:	2b40      	cmp	r3, #64	@ 0x40
 800664e:	bf0c      	ite	eq
 8006650:	2301      	moveq	r3, #1
 8006652:	2300      	movne	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800665e:	f003 0308 	and.w	r3, r3, #8
 8006662:	2b00      	cmp	r3, #0
 8006664:	d103      	bne.n	800666e <HAL_UART_IRQHandler+0x17a>
 8006666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800666a:	2b00      	cmp	r3, #0
 800666c:	d04f      	beq.n	800670e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fa6d 	bl	8006b4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800667e:	2b40      	cmp	r3, #64	@ 0x40
 8006680:	d141      	bne.n	8006706 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3314      	adds	r3, #20
 8006688:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006698:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800669c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3314      	adds	r3, #20
 80066aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80066ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80066b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80066ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80066c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1d9      	bne.n	8006682 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d013      	beq.n	80066fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066da:	4a8a      	ldr	r2, [pc, #552]	@ (8006904 <HAL_UART_IRQHandler+0x410>)
 80066dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fb fe59 	bl	800239a <HAL_DMA_Abort_IT>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d016      	beq.n	800671c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80066f8:	4610      	mov	r0, r2
 80066fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fc:	e00e      	b.n	800671c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f9b6 	bl	8006a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006704:	e00a      	b.n	800671c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f9b2 	bl	8006a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670c:	e006      	b.n	800671c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f9ae 	bl	8006a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800671a:	e18d      	b.n	8006a38 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671c:	bf00      	nop
    return;
 800671e:	e18b      	b.n	8006a38 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006724:	2b01      	cmp	r3, #1
 8006726:	f040 8167 	bne.w	80069f8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800672a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800672e:	f003 0310 	and.w	r3, r3, #16
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 8160 	beq.w	80069f8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 8159 	beq.w	80069f8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006746:	2300      	movs	r3, #0
 8006748:	60bb      	str	r3, [r7, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	60bb      	str	r3, [r7, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	60bb      	str	r3, [r7, #8]
 800675a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006766:	2b40      	cmp	r3, #64	@ 0x40
 8006768:	f040 80ce 	bne.w	8006908 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006778:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 80a9 	beq.w	80068d4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800678a:	429a      	cmp	r2, r3
 800678c:	f080 80a2 	bcs.w	80068d4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006796:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067a2:	f000 8088 	beq.w	80068b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	330c      	adds	r3, #12
 80067ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80067bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	330c      	adds	r3, #12
 80067ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80067d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80067d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80067de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80067ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1d9      	bne.n	80067a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3314      	adds	r3, #20
 80067f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006802:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006804:	f023 0301 	bic.w	r3, r3, #1
 8006808:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3314      	adds	r3, #20
 8006812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006816:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800681a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800681e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006828:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e1      	bne.n	80067f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3314      	adds	r3, #20
 8006834:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006836:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800683e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006844:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3314      	adds	r3, #20
 800684e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006852:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006854:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006858:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006860:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e3      	bne.n	800682e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2220      	movs	r2, #32
 800686a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	330c      	adds	r3, #12
 800687a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800687e:	e853 3f00 	ldrex	r3, [r3]
 8006882:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006886:	f023 0310 	bic.w	r3, r3, #16
 800688a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	330c      	adds	r3, #12
 8006894:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006898:	65ba      	str	r2, [r7, #88]	@ 0x58
 800689a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800689e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e3      	bne.n	8006874 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fb fd02 	bl	80022ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2202      	movs	r2, #2
 80068ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f8d9 	bl	8006a84 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80068d2:	e0b3      	b.n	8006a3c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068dc:	429a      	cmp	r2, r3
 80068de:	f040 80ad 	bne.w	8006a3c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ec:	f040 80a6 	bne.w	8006a3c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f8c1 	bl	8006a84 <HAL_UARTEx_RxEventCallback>
      return;
 8006902:	e09b      	b.n	8006a3c <HAL_UART_IRQHandler+0x548>
 8006904:	08006c15 	.word	0x08006c15
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006910:	b29b      	uxth	r3, r3
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 808e 	beq.w	8006a40 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 8089 	beq.w	8006a40 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	330c      	adds	r3, #12
 8006934:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800693e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006940:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006944:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	330c      	adds	r3, #12
 800694e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006952:	647a      	str	r2, [r7, #68]	@ 0x44
 8006954:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006958:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e3      	bne.n	800692e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3314      	adds	r3, #20
 800696c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	623b      	str	r3, [r7, #32]
   return(result);
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	f023 0301 	bic.w	r3, r3, #1
 800697c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3314      	adds	r3, #20
 8006986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800698a:	633a      	str	r2, [r7, #48]	@ 0x30
 800698c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e3      	bne.n	8006966 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	330c      	adds	r3, #12
 80069b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0310 	bic.w	r3, r3, #16
 80069c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	330c      	adds	r3, #12
 80069cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80069d0:	61fa      	str	r2, [r7, #28]
 80069d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	69b9      	ldr	r1, [r7, #24]
 80069d6:	69fa      	ldr	r2, [r7, #28]
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	617b      	str	r3, [r7, #20]
   return(result);
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e3      	bne.n	80069ac <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f847 	bl	8006a84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069f6:	e023      	b.n	8006a40 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d009      	beq.n	8006a18 <HAL_UART_IRQHandler+0x524>
 8006a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d003      	beq.n	8006a18 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f910 	bl	8006c36 <UART_Transmit_IT>
    return;
 8006a16:	e014      	b.n	8006a42 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00e      	beq.n	8006a42 <HAL_UART_IRQHandler+0x54e>
 8006a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d008      	beq.n	8006a42 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f950 	bl	8006cd6 <UART_EndTransmit_IT>
    return;
 8006a36:	e004      	b.n	8006a42 <HAL_UART_IRQHandler+0x54e>
    return;
 8006a38:	bf00      	nop
 8006a3a:	e002      	b.n	8006a42 <HAL_UART_IRQHandler+0x54e>
      return;
 8006a3c:	bf00      	nop
 8006a3e:	e000      	b.n	8006a42 <HAL_UART_IRQHandler+0x54e>
      return;
 8006a40:	bf00      	nop
  }
}
 8006a42:	37e8      	adds	r7, #232	@ 0xe8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	603b      	str	r3, [r7, #0]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aac:	e03b      	b.n	8006b26 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab4:	d037      	beq.n	8006b26 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab6:	f7fb fabf 	bl	8002038 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	6a3a      	ldr	r2, [r7, #32]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d302      	bcc.n	8006acc <UART_WaitOnFlagUntilTimeout+0x30>
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e03a      	b.n	8006b46 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	f003 0304 	and.w	r3, r3, #4
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d023      	beq.n	8006b26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b80      	cmp	r3, #128	@ 0x80
 8006ae2:	d020      	beq.n	8006b26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b40      	cmp	r3, #64	@ 0x40
 8006ae8:	d01d      	beq.n	8006b26 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0308 	and.w	r3, r3, #8
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d116      	bne.n	8006b26 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	617b      	str	r3, [r7, #20]
 8006b0c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 f81d 	bl	8006b4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2208      	movs	r2, #8
 8006b18:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e00f      	b.n	8006b46 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	4013      	ands	r3, r2
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	bf0c      	ite	eq
 8006b36:	2301      	moveq	r3, #1
 8006b38:	2300      	movne	r3, #0
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	79fb      	ldrb	r3, [r7, #7]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d0b4      	beq.n	8006aae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b095      	sub	sp, #84	@ 0x54
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	330c      	adds	r3, #12
 8006b5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	330c      	adds	r3, #12
 8006b74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b76:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e5      	bne.n	8006b56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3314      	adds	r3, #20
 8006b90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	f023 0301 	bic.w	r3, r3, #1
 8006ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3314      	adds	r3, #20
 8006ba8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006baa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e5      	bne.n	8006b8a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d119      	bne.n	8006bfa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	330c      	adds	r3, #12
 8006bcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f023 0310 	bic.w	r3, r3, #16
 8006bdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	330c      	adds	r3, #12
 8006be4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006be6:	61ba      	str	r2, [r7, #24]
 8006be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6979      	ldr	r1, [r7, #20]
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e5      	bne.n	8006bc6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006c08:	bf00      	nop
 8006c0a:	3754      	adds	r7, #84	@ 0x54
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f7ff ff21 	bl	8006a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c2e:	bf00      	nop
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b21      	cmp	r3, #33	@ 0x21
 8006c48:	d13e      	bne.n	8006cc8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c52:	d114      	bne.n	8006c7e <UART_Transmit_IT+0x48>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d110      	bne.n	8006c7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	1c9a      	adds	r2, r3, #2
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	621a      	str	r2, [r3, #32]
 8006c7c:	e008      	b.n	8006c90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	1c59      	adds	r1, r3, #1
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	6211      	str	r1, [r2, #32]
 8006c88:	781a      	ldrb	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10f      	bne.n	8006cc4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006cb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cc2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e000      	b.n	8006cca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006cc8:	2302      	movs	r3, #2
  }
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b082      	sub	sp, #8
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68da      	ldr	r2, [r3, #12]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff fea6 	bl	8006a48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b08c      	sub	sp, #48	@ 0x30
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b22      	cmp	r3, #34	@ 0x22
 8006d20:	f040 80aa 	bne.w	8006e78 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d2c:	d115      	bne.n	8006d5a <UART_Receive_IT+0x54>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d111      	bne.n	8006d5a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d52:	1c9a      	adds	r2, r3, #2
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d58:	e024      	b.n	8006da4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d68:	d007      	beq.n	8006d7a <UART_Receive_IT+0x74>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10a      	bne.n	8006d88 <UART_Receive_IT+0x82>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d106      	bne.n	8006d88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d84:	701a      	strb	r2, [r3, #0]
 8006d86:	e008      	b.n	8006d9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9e:	1c5a      	adds	r2, r3, #1
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	3b01      	subs	r3, #1
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	4619      	mov	r1, r3
 8006db2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d15d      	bne.n	8006e74 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68da      	ldr	r2, [r3, #12]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0220 	bic.w	r2, r2, #32
 8006dc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006dd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	695a      	ldr	r2, [r3, #20]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0201 	bic.w	r2, r2, #1
 8006de6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d135      	bne.n	8006e6a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	330c      	adds	r3, #12
 8006e0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	613b      	str	r3, [r7, #16]
   return(result);
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f023 0310 	bic.w	r3, r3, #16
 8006e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	330c      	adds	r3, #12
 8006e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e24:	623a      	str	r2, [r7, #32]
 8006e26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	69f9      	ldr	r1, [r7, #28]
 8006e2a:	6a3a      	ldr	r2, [r7, #32]
 8006e2c:	e841 2300 	strex	r3, r2, [r1]
 8006e30:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e5      	bne.n	8006e04 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0310 	and.w	r3, r3, #16
 8006e42:	2b10      	cmp	r3, #16
 8006e44:	d10a      	bne.n	8006e5c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7ff fe0e 	bl	8006a84 <HAL_UARTEx_RxEventCallback>
 8006e68:	e002      	b.n	8006e70 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff fdf6 	bl	8006a5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	e002      	b.n	8006e7a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	e000      	b.n	8006e7a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006e78:	2302      	movs	r3, #2
  }
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3730      	adds	r7, #48	@ 0x30
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
	...

08006e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e88:	b0c0      	sub	sp, #256	@ 0x100
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea0:	68d9      	ldr	r1, [r3, #12]
 8006ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	ea40 0301 	orr.w	r3, r0, r1
 8006eac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006edc:	f021 010c 	bic.w	r1, r1, #12
 8006ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006eea:	430b      	orrs	r3, r1
 8006eec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efe:	6999      	ldr	r1, [r3, #24]
 8006f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	ea40 0301 	orr.w	r3, r0, r1
 8006f0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	4b8f      	ldr	r3, [pc, #572]	@ (8007150 <UART_SetConfig+0x2cc>)
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d005      	beq.n	8006f24 <UART_SetConfig+0xa0>
 8006f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	4b8d      	ldr	r3, [pc, #564]	@ (8007154 <UART_SetConfig+0x2d0>)
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d104      	bne.n	8006f2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f24:	f7fe fd86 	bl	8005a34 <HAL_RCC_GetPCLK2Freq>
 8006f28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f2c:	e003      	b.n	8006f36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f2e:	f7fe fd6d 	bl	8005a0c <HAL_RCC_GetPCLK1Freq>
 8006f32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f3a:	69db      	ldr	r3, [r3, #28]
 8006f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f40:	f040 810c 	bne.w	800715c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f56:	4622      	mov	r2, r4
 8006f58:	462b      	mov	r3, r5
 8006f5a:	1891      	adds	r1, r2, r2
 8006f5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f5e:	415b      	adcs	r3, r3
 8006f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f66:	4621      	mov	r1, r4
 8006f68:	eb12 0801 	adds.w	r8, r2, r1
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	eb43 0901 	adc.w	r9, r3, r1
 8006f72:	f04f 0200 	mov.w	r2, #0
 8006f76:	f04f 0300 	mov.w	r3, #0
 8006f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f86:	4690      	mov	r8, r2
 8006f88:	4699      	mov	r9, r3
 8006f8a:	4623      	mov	r3, r4
 8006f8c:	eb18 0303 	adds.w	r3, r8, r3
 8006f90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f94:	462b      	mov	r3, r5
 8006f96:	eb49 0303 	adc.w	r3, r9, r3
 8006f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006faa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006fae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	18db      	adds	r3, r3, r3
 8006fb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fb8:	4613      	mov	r3, r2
 8006fba:	eb42 0303 	adc.w	r3, r2, r3
 8006fbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006fc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006fc8:	f7f9 fe0e 	bl	8000be8 <__aeabi_uldivmod>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4b61      	ldr	r3, [pc, #388]	@ (8007158 <UART_SetConfig+0x2d4>)
 8006fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8006fd6:	095b      	lsrs	r3, r3, #5
 8006fd8:	011c      	lsls	r4, r3, #4
 8006fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fe4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006fe8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006fec:	4642      	mov	r2, r8
 8006fee:	464b      	mov	r3, r9
 8006ff0:	1891      	adds	r1, r2, r2
 8006ff2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ff4:	415b      	adcs	r3, r3
 8006ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ff8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006ffc:	4641      	mov	r1, r8
 8006ffe:	eb12 0a01 	adds.w	sl, r2, r1
 8007002:	4649      	mov	r1, r9
 8007004:	eb43 0b01 	adc.w	fp, r3, r1
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	f04f 0300 	mov.w	r3, #0
 8007010:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007014:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007018:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800701c:	4692      	mov	sl, r2
 800701e:	469b      	mov	fp, r3
 8007020:	4643      	mov	r3, r8
 8007022:	eb1a 0303 	adds.w	r3, sl, r3
 8007026:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800702a:	464b      	mov	r3, r9
 800702c:	eb4b 0303 	adc.w	r3, fp, r3
 8007030:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007040:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007044:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007048:	460b      	mov	r3, r1
 800704a:	18db      	adds	r3, r3, r3
 800704c:	643b      	str	r3, [r7, #64]	@ 0x40
 800704e:	4613      	mov	r3, r2
 8007050:	eb42 0303 	adc.w	r3, r2, r3
 8007054:	647b      	str	r3, [r7, #68]	@ 0x44
 8007056:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800705a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800705e:	f7f9 fdc3 	bl	8000be8 <__aeabi_uldivmod>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4611      	mov	r1, r2
 8007068:	4b3b      	ldr	r3, [pc, #236]	@ (8007158 <UART_SetConfig+0x2d4>)
 800706a:	fba3 2301 	umull	r2, r3, r3, r1
 800706e:	095b      	lsrs	r3, r3, #5
 8007070:	2264      	movs	r2, #100	@ 0x64
 8007072:	fb02 f303 	mul.w	r3, r2, r3
 8007076:	1acb      	subs	r3, r1, r3
 8007078:	00db      	lsls	r3, r3, #3
 800707a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800707e:	4b36      	ldr	r3, [pc, #216]	@ (8007158 <UART_SetConfig+0x2d4>)
 8007080:	fba3 2302 	umull	r2, r3, r3, r2
 8007084:	095b      	lsrs	r3, r3, #5
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800708c:	441c      	add	r4, r3
 800708e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007092:	2200      	movs	r2, #0
 8007094:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007098:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800709c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070a0:	4642      	mov	r2, r8
 80070a2:	464b      	mov	r3, r9
 80070a4:	1891      	adds	r1, r2, r2
 80070a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070a8:	415b      	adcs	r3, r3
 80070aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80070b0:	4641      	mov	r1, r8
 80070b2:	1851      	adds	r1, r2, r1
 80070b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80070b6:	4649      	mov	r1, r9
 80070b8:	414b      	adcs	r3, r1
 80070ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80070bc:	f04f 0200 	mov.w	r2, #0
 80070c0:	f04f 0300 	mov.w	r3, #0
 80070c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80070c8:	4659      	mov	r1, fp
 80070ca:	00cb      	lsls	r3, r1, #3
 80070cc:	4651      	mov	r1, sl
 80070ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070d2:	4651      	mov	r1, sl
 80070d4:	00ca      	lsls	r2, r1, #3
 80070d6:	4610      	mov	r0, r2
 80070d8:	4619      	mov	r1, r3
 80070da:	4603      	mov	r3, r0
 80070dc:	4642      	mov	r2, r8
 80070de:	189b      	adds	r3, r3, r2
 80070e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070e4:	464b      	mov	r3, r9
 80070e6:	460a      	mov	r2, r1
 80070e8:	eb42 0303 	adc.w	r3, r2, r3
 80070ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80070fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007100:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007104:	460b      	mov	r3, r1
 8007106:	18db      	adds	r3, r3, r3
 8007108:	62bb      	str	r3, [r7, #40]	@ 0x28
 800710a:	4613      	mov	r3, r2
 800710c:	eb42 0303 	adc.w	r3, r2, r3
 8007110:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007112:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007116:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800711a:	f7f9 fd65 	bl	8000be8 <__aeabi_uldivmod>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	4b0d      	ldr	r3, [pc, #52]	@ (8007158 <UART_SetConfig+0x2d4>)
 8007124:	fba3 1302 	umull	r1, r3, r3, r2
 8007128:	095b      	lsrs	r3, r3, #5
 800712a:	2164      	movs	r1, #100	@ 0x64
 800712c:	fb01 f303 	mul.w	r3, r1, r3
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	3332      	adds	r3, #50	@ 0x32
 8007136:	4a08      	ldr	r2, [pc, #32]	@ (8007158 <UART_SetConfig+0x2d4>)
 8007138:	fba2 2303 	umull	r2, r3, r2, r3
 800713c:	095b      	lsrs	r3, r3, #5
 800713e:	f003 0207 	and.w	r2, r3, #7
 8007142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4422      	add	r2, r4
 800714a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800714c:	e106      	b.n	800735c <UART_SetConfig+0x4d8>
 800714e:	bf00      	nop
 8007150:	40011000 	.word	0x40011000
 8007154:	40011400 	.word	0x40011400
 8007158:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800715c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007160:	2200      	movs	r2, #0
 8007162:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007166:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800716a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800716e:	4642      	mov	r2, r8
 8007170:	464b      	mov	r3, r9
 8007172:	1891      	adds	r1, r2, r2
 8007174:	6239      	str	r1, [r7, #32]
 8007176:	415b      	adcs	r3, r3
 8007178:	627b      	str	r3, [r7, #36]	@ 0x24
 800717a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800717e:	4641      	mov	r1, r8
 8007180:	1854      	adds	r4, r2, r1
 8007182:	4649      	mov	r1, r9
 8007184:	eb43 0501 	adc.w	r5, r3, r1
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	00eb      	lsls	r3, r5, #3
 8007192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007196:	00e2      	lsls	r2, r4, #3
 8007198:	4614      	mov	r4, r2
 800719a:	461d      	mov	r5, r3
 800719c:	4643      	mov	r3, r8
 800719e:	18e3      	adds	r3, r4, r3
 80071a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071a4:	464b      	mov	r3, r9
 80071a6:	eb45 0303 	adc.w	r3, r5, r3
 80071aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071be:	f04f 0200 	mov.w	r2, #0
 80071c2:	f04f 0300 	mov.w	r3, #0
 80071c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80071ca:	4629      	mov	r1, r5
 80071cc:	008b      	lsls	r3, r1, #2
 80071ce:	4621      	mov	r1, r4
 80071d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071d4:	4621      	mov	r1, r4
 80071d6:	008a      	lsls	r2, r1, #2
 80071d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80071dc:	f7f9 fd04 	bl	8000be8 <__aeabi_uldivmod>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4b60      	ldr	r3, [pc, #384]	@ (8007368 <UART_SetConfig+0x4e4>)
 80071e6:	fba3 2302 	umull	r2, r3, r3, r2
 80071ea:	095b      	lsrs	r3, r3, #5
 80071ec:	011c      	lsls	r4, r3, #4
 80071ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071f2:	2200      	movs	r2, #0
 80071f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80071fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007200:	4642      	mov	r2, r8
 8007202:	464b      	mov	r3, r9
 8007204:	1891      	adds	r1, r2, r2
 8007206:	61b9      	str	r1, [r7, #24]
 8007208:	415b      	adcs	r3, r3
 800720a:	61fb      	str	r3, [r7, #28]
 800720c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007210:	4641      	mov	r1, r8
 8007212:	1851      	adds	r1, r2, r1
 8007214:	6139      	str	r1, [r7, #16]
 8007216:	4649      	mov	r1, r9
 8007218:	414b      	adcs	r3, r1
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	f04f 0200 	mov.w	r2, #0
 8007220:	f04f 0300 	mov.w	r3, #0
 8007224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007228:	4659      	mov	r1, fp
 800722a:	00cb      	lsls	r3, r1, #3
 800722c:	4651      	mov	r1, sl
 800722e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007232:	4651      	mov	r1, sl
 8007234:	00ca      	lsls	r2, r1, #3
 8007236:	4610      	mov	r0, r2
 8007238:	4619      	mov	r1, r3
 800723a:	4603      	mov	r3, r0
 800723c:	4642      	mov	r2, r8
 800723e:	189b      	adds	r3, r3, r2
 8007240:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007244:	464b      	mov	r3, r9
 8007246:	460a      	mov	r2, r1
 8007248:	eb42 0303 	adc.w	r3, r2, r3
 800724c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	67bb      	str	r3, [r7, #120]	@ 0x78
 800725a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800725c:	f04f 0200 	mov.w	r2, #0
 8007260:	f04f 0300 	mov.w	r3, #0
 8007264:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007268:	4649      	mov	r1, r9
 800726a:	008b      	lsls	r3, r1, #2
 800726c:	4641      	mov	r1, r8
 800726e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007272:	4641      	mov	r1, r8
 8007274:	008a      	lsls	r2, r1, #2
 8007276:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800727a:	f7f9 fcb5 	bl	8000be8 <__aeabi_uldivmod>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4611      	mov	r1, r2
 8007284:	4b38      	ldr	r3, [pc, #224]	@ (8007368 <UART_SetConfig+0x4e4>)
 8007286:	fba3 2301 	umull	r2, r3, r3, r1
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	2264      	movs	r2, #100	@ 0x64
 800728e:	fb02 f303 	mul.w	r3, r2, r3
 8007292:	1acb      	subs	r3, r1, r3
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	3332      	adds	r3, #50	@ 0x32
 8007298:	4a33      	ldr	r2, [pc, #204]	@ (8007368 <UART_SetConfig+0x4e4>)
 800729a:	fba2 2303 	umull	r2, r3, r2, r3
 800729e:	095b      	lsrs	r3, r3, #5
 80072a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072a4:	441c      	add	r4, r3
 80072a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072aa:	2200      	movs	r2, #0
 80072ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80072ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80072b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80072b4:	4642      	mov	r2, r8
 80072b6:	464b      	mov	r3, r9
 80072b8:	1891      	adds	r1, r2, r2
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	415b      	adcs	r3, r3
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072c4:	4641      	mov	r1, r8
 80072c6:	1851      	adds	r1, r2, r1
 80072c8:	6039      	str	r1, [r7, #0]
 80072ca:	4649      	mov	r1, r9
 80072cc:	414b      	adcs	r3, r1
 80072ce:	607b      	str	r3, [r7, #4]
 80072d0:	f04f 0200 	mov.w	r2, #0
 80072d4:	f04f 0300 	mov.w	r3, #0
 80072d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072dc:	4659      	mov	r1, fp
 80072de:	00cb      	lsls	r3, r1, #3
 80072e0:	4651      	mov	r1, sl
 80072e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072e6:	4651      	mov	r1, sl
 80072e8:	00ca      	lsls	r2, r1, #3
 80072ea:	4610      	mov	r0, r2
 80072ec:	4619      	mov	r1, r3
 80072ee:	4603      	mov	r3, r0
 80072f0:	4642      	mov	r2, r8
 80072f2:	189b      	adds	r3, r3, r2
 80072f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072f6:	464b      	mov	r3, r9
 80072f8:	460a      	mov	r2, r1
 80072fa:	eb42 0303 	adc.w	r3, r2, r3
 80072fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	663b      	str	r3, [r7, #96]	@ 0x60
 800730a:	667a      	str	r2, [r7, #100]	@ 0x64
 800730c:	f04f 0200 	mov.w	r2, #0
 8007310:	f04f 0300 	mov.w	r3, #0
 8007314:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007318:	4649      	mov	r1, r9
 800731a:	008b      	lsls	r3, r1, #2
 800731c:	4641      	mov	r1, r8
 800731e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007322:	4641      	mov	r1, r8
 8007324:	008a      	lsls	r2, r1, #2
 8007326:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800732a:	f7f9 fc5d 	bl	8000be8 <__aeabi_uldivmod>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	4b0d      	ldr	r3, [pc, #52]	@ (8007368 <UART_SetConfig+0x4e4>)
 8007334:	fba3 1302 	umull	r1, r3, r3, r2
 8007338:	095b      	lsrs	r3, r3, #5
 800733a:	2164      	movs	r1, #100	@ 0x64
 800733c:	fb01 f303 	mul.w	r3, r1, r3
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	011b      	lsls	r3, r3, #4
 8007344:	3332      	adds	r3, #50	@ 0x32
 8007346:	4a08      	ldr	r2, [pc, #32]	@ (8007368 <UART_SetConfig+0x4e4>)
 8007348:	fba2 2303 	umull	r2, r3, r2, r3
 800734c:	095b      	lsrs	r3, r3, #5
 800734e:	f003 020f 	and.w	r2, r3, #15
 8007352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4422      	add	r2, r4
 800735a:	609a      	str	r2, [r3, #8]
}
 800735c:	bf00      	nop
 800735e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007362:	46bd      	mov	sp, r7
 8007364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007368:	51eb851f 	.word	0x51eb851f

0800736c <std>:
 800736c:	2300      	movs	r3, #0
 800736e:	b510      	push	{r4, lr}
 8007370:	4604      	mov	r4, r0
 8007372:	e9c0 3300 	strd	r3, r3, [r0]
 8007376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800737a:	6083      	str	r3, [r0, #8]
 800737c:	8181      	strh	r1, [r0, #12]
 800737e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007380:	81c2      	strh	r2, [r0, #14]
 8007382:	6183      	str	r3, [r0, #24]
 8007384:	4619      	mov	r1, r3
 8007386:	2208      	movs	r2, #8
 8007388:	305c      	adds	r0, #92	@ 0x5c
 800738a:	f000 f9f9 	bl	8007780 <memset>
 800738e:	4b0d      	ldr	r3, [pc, #52]	@ (80073c4 <std+0x58>)
 8007390:	6263      	str	r3, [r4, #36]	@ 0x24
 8007392:	4b0d      	ldr	r3, [pc, #52]	@ (80073c8 <std+0x5c>)
 8007394:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007396:	4b0d      	ldr	r3, [pc, #52]	@ (80073cc <std+0x60>)
 8007398:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800739a:	4b0d      	ldr	r3, [pc, #52]	@ (80073d0 <std+0x64>)
 800739c:	6323      	str	r3, [r4, #48]	@ 0x30
 800739e:	4b0d      	ldr	r3, [pc, #52]	@ (80073d4 <std+0x68>)
 80073a0:	6224      	str	r4, [r4, #32]
 80073a2:	429c      	cmp	r4, r3
 80073a4:	d006      	beq.n	80073b4 <std+0x48>
 80073a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80073aa:	4294      	cmp	r4, r2
 80073ac:	d002      	beq.n	80073b4 <std+0x48>
 80073ae:	33d0      	adds	r3, #208	@ 0xd0
 80073b0:	429c      	cmp	r4, r3
 80073b2:	d105      	bne.n	80073c0 <std+0x54>
 80073b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80073b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073bc:	f000 ba58 	b.w	8007870 <__retarget_lock_init_recursive>
 80073c0:	bd10      	pop	{r4, pc}
 80073c2:	bf00      	nop
 80073c4:	080075d1 	.word	0x080075d1
 80073c8:	080075f3 	.word	0x080075f3
 80073cc:	0800762b 	.word	0x0800762b
 80073d0:	0800764f 	.word	0x0800764f
 80073d4:	20000250 	.word	0x20000250

080073d8 <stdio_exit_handler>:
 80073d8:	4a02      	ldr	r2, [pc, #8]	@ (80073e4 <stdio_exit_handler+0xc>)
 80073da:	4903      	ldr	r1, [pc, #12]	@ (80073e8 <stdio_exit_handler+0x10>)
 80073dc:	4803      	ldr	r0, [pc, #12]	@ (80073ec <stdio_exit_handler+0x14>)
 80073de:	f000 b869 	b.w	80074b4 <_fwalk_sglue>
 80073e2:	bf00      	nop
 80073e4:	2000000c 	.word	0x2000000c
 80073e8:	0800810d 	.word	0x0800810d
 80073ec:	2000001c 	.word	0x2000001c

080073f0 <cleanup_stdio>:
 80073f0:	6841      	ldr	r1, [r0, #4]
 80073f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007424 <cleanup_stdio+0x34>)
 80073f4:	4299      	cmp	r1, r3
 80073f6:	b510      	push	{r4, lr}
 80073f8:	4604      	mov	r4, r0
 80073fa:	d001      	beq.n	8007400 <cleanup_stdio+0x10>
 80073fc:	f000 fe86 	bl	800810c <_fflush_r>
 8007400:	68a1      	ldr	r1, [r4, #8]
 8007402:	4b09      	ldr	r3, [pc, #36]	@ (8007428 <cleanup_stdio+0x38>)
 8007404:	4299      	cmp	r1, r3
 8007406:	d002      	beq.n	800740e <cleanup_stdio+0x1e>
 8007408:	4620      	mov	r0, r4
 800740a:	f000 fe7f 	bl	800810c <_fflush_r>
 800740e:	68e1      	ldr	r1, [r4, #12]
 8007410:	4b06      	ldr	r3, [pc, #24]	@ (800742c <cleanup_stdio+0x3c>)
 8007412:	4299      	cmp	r1, r3
 8007414:	d004      	beq.n	8007420 <cleanup_stdio+0x30>
 8007416:	4620      	mov	r0, r4
 8007418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800741c:	f000 be76 	b.w	800810c <_fflush_r>
 8007420:	bd10      	pop	{r4, pc}
 8007422:	bf00      	nop
 8007424:	20000250 	.word	0x20000250
 8007428:	200002b8 	.word	0x200002b8
 800742c:	20000320 	.word	0x20000320

08007430 <global_stdio_init.part.0>:
 8007430:	b510      	push	{r4, lr}
 8007432:	4b0b      	ldr	r3, [pc, #44]	@ (8007460 <global_stdio_init.part.0+0x30>)
 8007434:	4c0b      	ldr	r4, [pc, #44]	@ (8007464 <global_stdio_init.part.0+0x34>)
 8007436:	4a0c      	ldr	r2, [pc, #48]	@ (8007468 <global_stdio_init.part.0+0x38>)
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	4620      	mov	r0, r4
 800743c:	2200      	movs	r2, #0
 800743e:	2104      	movs	r1, #4
 8007440:	f7ff ff94 	bl	800736c <std>
 8007444:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007448:	2201      	movs	r2, #1
 800744a:	2109      	movs	r1, #9
 800744c:	f7ff ff8e 	bl	800736c <std>
 8007450:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007454:	2202      	movs	r2, #2
 8007456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800745a:	2112      	movs	r1, #18
 800745c:	f7ff bf86 	b.w	800736c <std>
 8007460:	20000388 	.word	0x20000388
 8007464:	20000250 	.word	0x20000250
 8007468:	080073d9 	.word	0x080073d9

0800746c <__sfp_lock_acquire>:
 800746c:	4801      	ldr	r0, [pc, #4]	@ (8007474 <__sfp_lock_acquire+0x8>)
 800746e:	f000 ba00 	b.w	8007872 <__retarget_lock_acquire_recursive>
 8007472:	bf00      	nop
 8007474:	20000391 	.word	0x20000391

08007478 <__sfp_lock_release>:
 8007478:	4801      	ldr	r0, [pc, #4]	@ (8007480 <__sfp_lock_release+0x8>)
 800747a:	f000 b9fb 	b.w	8007874 <__retarget_lock_release_recursive>
 800747e:	bf00      	nop
 8007480:	20000391 	.word	0x20000391

08007484 <__sinit>:
 8007484:	b510      	push	{r4, lr}
 8007486:	4604      	mov	r4, r0
 8007488:	f7ff fff0 	bl	800746c <__sfp_lock_acquire>
 800748c:	6a23      	ldr	r3, [r4, #32]
 800748e:	b11b      	cbz	r3, 8007498 <__sinit+0x14>
 8007490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007494:	f7ff bff0 	b.w	8007478 <__sfp_lock_release>
 8007498:	4b04      	ldr	r3, [pc, #16]	@ (80074ac <__sinit+0x28>)
 800749a:	6223      	str	r3, [r4, #32]
 800749c:	4b04      	ldr	r3, [pc, #16]	@ (80074b0 <__sinit+0x2c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1f5      	bne.n	8007490 <__sinit+0xc>
 80074a4:	f7ff ffc4 	bl	8007430 <global_stdio_init.part.0>
 80074a8:	e7f2      	b.n	8007490 <__sinit+0xc>
 80074aa:	bf00      	nop
 80074ac:	080073f1 	.word	0x080073f1
 80074b0:	20000388 	.word	0x20000388

080074b4 <_fwalk_sglue>:
 80074b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b8:	4607      	mov	r7, r0
 80074ba:	4688      	mov	r8, r1
 80074bc:	4614      	mov	r4, r2
 80074be:	2600      	movs	r6, #0
 80074c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074c4:	f1b9 0901 	subs.w	r9, r9, #1
 80074c8:	d505      	bpl.n	80074d6 <_fwalk_sglue+0x22>
 80074ca:	6824      	ldr	r4, [r4, #0]
 80074cc:	2c00      	cmp	r4, #0
 80074ce:	d1f7      	bne.n	80074c0 <_fwalk_sglue+0xc>
 80074d0:	4630      	mov	r0, r6
 80074d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074d6:	89ab      	ldrh	r3, [r5, #12]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d907      	bls.n	80074ec <_fwalk_sglue+0x38>
 80074dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074e0:	3301      	adds	r3, #1
 80074e2:	d003      	beq.n	80074ec <_fwalk_sglue+0x38>
 80074e4:	4629      	mov	r1, r5
 80074e6:	4638      	mov	r0, r7
 80074e8:	47c0      	blx	r8
 80074ea:	4306      	orrs	r6, r0
 80074ec:	3568      	adds	r5, #104	@ 0x68
 80074ee:	e7e9      	b.n	80074c4 <_fwalk_sglue+0x10>

080074f0 <iprintf>:
 80074f0:	b40f      	push	{r0, r1, r2, r3}
 80074f2:	b507      	push	{r0, r1, r2, lr}
 80074f4:	4906      	ldr	r1, [pc, #24]	@ (8007510 <iprintf+0x20>)
 80074f6:	ab04      	add	r3, sp, #16
 80074f8:	6808      	ldr	r0, [r1, #0]
 80074fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80074fe:	6881      	ldr	r1, [r0, #8]
 8007500:	9301      	str	r3, [sp, #4]
 8007502:	f000 fadb 	bl	8007abc <_vfiprintf_r>
 8007506:	b003      	add	sp, #12
 8007508:	f85d eb04 	ldr.w	lr, [sp], #4
 800750c:	b004      	add	sp, #16
 800750e:	4770      	bx	lr
 8007510:	20000018 	.word	0x20000018

08007514 <_puts_r>:
 8007514:	6a03      	ldr	r3, [r0, #32]
 8007516:	b570      	push	{r4, r5, r6, lr}
 8007518:	6884      	ldr	r4, [r0, #8]
 800751a:	4605      	mov	r5, r0
 800751c:	460e      	mov	r6, r1
 800751e:	b90b      	cbnz	r3, 8007524 <_puts_r+0x10>
 8007520:	f7ff ffb0 	bl	8007484 <__sinit>
 8007524:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007526:	07db      	lsls	r3, r3, #31
 8007528:	d405      	bmi.n	8007536 <_puts_r+0x22>
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	0598      	lsls	r0, r3, #22
 800752e:	d402      	bmi.n	8007536 <_puts_r+0x22>
 8007530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007532:	f000 f99e 	bl	8007872 <__retarget_lock_acquire_recursive>
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	0719      	lsls	r1, r3, #28
 800753a:	d502      	bpl.n	8007542 <_puts_r+0x2e>
 800753c:	6923      	ldr	r3, [r4, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d135      	bne.n	80075ae <_puts_r+0x9a>
 8007542:	4621      	mov	r1, r4
 8007544:	4628      	mov	r0, r5
 8007546:	f000 f8c5 	bl	80076d4 <__swsetup_r>
 800754a:	b380      	cbz	r0, 80075ae <_puts_r+0x9a>
 800754c:	f04f 35ff 	mov.w	r5, #4294967295
 8007550:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007552:	07da      	lsls	r2, r3, #31
 8007554:	d405      	bmi.n	8007562 <_puts_r+0x4e>
 8007556:	89a3      	ldrh	r3, [r4, #12]
 8007558:	059b      	lsls	r3, r3, #22
 800755a:	d402      	bmi.n	8007562 <_puts_r+0x4e>
 800755c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800755e:	f000 f989 	bl	8007874 <__retarget_lock_release_recursive>
 8007562:	4628      	mov	r0, r5
 8007564:	bd70      	pop	{r4, r5, r6, pc}
 8007566:	2b00      	cmp	r3, #0
 8007568:	da04      	bge.n	8007574 <_puts_r+0x60>
 800756a:	69a2      	ldr	r2, [r4, #24]
 800756c:	429a      	cmp	r2, r3
 800756e:	dc17      	bgt.n	80075a0 <_puts_r+0x8c>
 8007570:	290a      	cmp	r1, #10
 8007572:	d015      	beq.n	80075a0 <_puts_r+0x8c>
 8007574:	6823      	ldr	r3, [r4, #0]
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	6022      	str	r2, [r4, #0]
 800757a:	7019      	strb	r1, [r3, #0]
 800757c:	68a3      	ldr	r3, [r4, #8]
 800757e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007582:	3b01      	subs	r3, #1
 8007584:	60a3      	str	r3, [r4, #8]
 8007586:	2900      	cmp	r1, #0
 8007588:	d1ed      	bne.n	8007566 <_puts_r+0x52>
 800758a:	2b00      	cmp	r3, #0
 800758c:	da11      	bge.n	80075b2 <_puts_r+0x9e>
 800758e:	4622      	mov	r2, r4
 8007590:	210a      	movs	r1, #10
 8007592:	4628      	mov	r0, r5
 8007594:	f000 f85f 	bl	8007656 <__swbuf_r>
 8007598:	3001      	adds	r0, #1
 800759a:	d0d7      	beq.n	800754c <_puts_r+0x38>
 800759c:	250a      	movs	r5, #10
 800759e:	e7d7      	b.n	8007550 <_puts_r+0x3c>
 80075a0:	4622      	mov	r2, r4
 80075a2:	4628      	mov	r0, r5
 80075a4:	f000 f857 	bl	8007656 <__swbuf_r>
 80075a8:	3001      	adds	r0, #1
 80075aa:	d1e7      	bne.n	800757c <_puts_r+0x68>
 80075ac:	e7ce      	b.n	800754c <_puts_r+0x38>
 80075ae:	3e01      	subs	r6, #1
 80075b0:	e7e4      	b.n	800757c <_puts_r+0x68>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	6022      	str	r2, [r4, #0]
 80075b8:	220a      	movs	r2, #10
 80075ba:	701a      	strb	r2, [r3, #0]
 80075bc:	e7ee      	b.n	800759c <_puts_r+0x88>
	...

080075c0 <puts>:
 80075c0:	4b02      	ldr	r3, [pc, #8]	@ (80075cc <puts+0xc>)
 80075c2:	4601      	mov	r1, r0
 80075c4:	6818      	ldr	r0, [r3, #0]
 80075c6:	f7ff bfa5 	b.w	8007514 <_puts_r>
 80075ca:	bf00      	nop
 80075cc:	20000018 	.word	0x20000018

080075d0 <__sread>:
 80075d0:	b510      	push	{r4, lr}
 80075d2:	460c      	mov	r4, r1
 80075d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075d8:	f000 f8fc 	bl	80077d4 <_read_r>
 80075dc:	2800      	cmp	r0, #0
 80075de:	bfab      	itete	ge
 80075e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80075e2:	89a3      	ldrhlt	r3, [r4, #12]
 80075e4:	181b      	addge	r3, r3, r0
 80075e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80075ea:	bfac      	ite	ge
 80075ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80075ee:	81a3      	strhlt	r3, [r4, #12]
 80075f0:	bd10      	pop	{r4, pc}

080075f2 <__swrite>:
 80075f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f6:	461f      	mov	r7, r3
 80075f8:	898b      	ldrh	r3, [r1, #12]
 80075fa:	05db      	lsls	r3, r3, #23
 80075fc:	4605      	mov	r5, r0
 80075fe:	460c      	mov	r4, r1
 8007600:	4616      	mov	r6, r2
 8007602:	d505      	bpl.n	8007610 <__swrite+0x1e>
 8007604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007608:	2302      	movs	r3, #2
 800760a:	2200      	movs	r2, #0
 800760c:	f000 f8d0 	bl	80077b0 <_lseek_r>
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007616:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800761a:	81a3      	strh	r3, [r4, #12]
 800761c:	4632      	mov	r2, r6
 800761e:	463b      	mov	r3, r7
 8007620:	4628      	mov	r0, r5
 8007622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007626:	f000 b8e7 	b.w	80077f8 <_write_r>

0800762a <__sseek>:
 800762a:	b510      	push	{r4, lr}
 800762c:	460c      	mov	r4, r1
 800762e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007632:	f000 f8bd 	bl	80077b0 <_lseek_r>
 8007636:	1c43      	adds	r3, r0, #1
 8007638:	89a3      	ldrh	r3, [r4, #12]
 800763a:	bf15      	itete	ne
 800763c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800763e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007642:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007646:	81a3      	strheq	r3, [r4, #12]
 8007648:	bf18      	it	ne
 800764a:	81a3      	strhne	r3, [r4, #12]
 800764c:	bd10      	pop	{r4, pc}

0800764e <__sclose>:
 800764e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007652:	f000 b89d 	b.w	8007790 <_close_r>

08007656 <__swbuf_r>:
 8007656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007658:	460e      	mov	r6, r1
 800765a:	4614      	mov	r4, r2
 800765c:	4605      	mov	r5, r0
 800765e:	b118      	cbz	r0, 8007668 <__swbuf_r+0x12>
 8007660:	6a03      	ldr	r3, [r0, #32]
 8007662:	b90b      	cbnz	r3, 8007668 <__swbuf_r+0x12>
 8007664:	f7ff ff0e 	bl	8007484 <__sinit>
 8007668:	69a3      	ldr	r3, [r4, #24]
 800766a:	60a3      	str	r3, [r4, #8]
 800766c:	89a3      	ldrh	r3, [r4, #12]
 800766e:	071a      	lsls	r2, r3, #28
 8007670:	d501      	bpl.n	8007676 <__swbuf_r+0x20>
 8007672:	6923      	ldr	r3, [r4, #16]
 8007674:	b943      	cbnz	r3, 8007688 <__swbuf_r+0x32>
 8007676:	4621      	mov	r1, r4
 8007678:	4628      	mov	r0, r5
 800767a:	f000 f82b 	bl	80076d4 <__swsetup_r>
 800767e:	b118      	cbz	r0, 8007688 <__swbuf_r+0x32>
 8007680:	f04f 37ff 	mov.w	r7, #4294967295
 8007684:	4638      	mov	r0, r7
 8007686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007688:	6823      	ldr	r3, [r4, #0]
 800768a:	6922      	ldr	r2, [r4, #16]
 800768c:	1a98      	subs	r0, r3, r2
 800768e:	6963      	ldr	r3, [r4, #20]
 8007690:	b2f6      	uxtb	r6, r6
 8007692:	4283      	cmp	r3, r0
 8007694:	4637      	mov	r7, r6
 8007696:	dc05      	bgt.n	80076a4 <__swbuf_r+0x4e>
 8007698:	4621      	mov	r1, r4
 800769a:	4628      	mov	r0, r5
 800769c:	f000 fd36 	bl	800810c <_fflush_r>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d1ed      	bne.n	8007680 <__swbuf_r+0x2a>
 80076a4:	68a3      	ldr	r3, [r4, #8]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	60a3      	str	r3, [r4, #8]
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	1c5a      	adds	r2, r3, #1
 80076ae:	6022      	str	r2, [r4, #0]
 80076b0:	701e      	strb	r6, [r3, #0]
 80076b2:	6962      	ldr	r2, [r4, #20]
 80076b4:	1c43      	adds	r3, r0, #1
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d004      	beq.n	80076c4 <__swbuf_r+0x6e>
 80076ba:	89a3      	ldrh	r3, [r4, #12]
 80076bc:	07db      	lsls	r3, r3, #31
 80076be:	d5e1      	bpl.n	8007684 <__swbuf_r+0x2e>
 80076c0:	2e0a      	cmp	r6, #10
 80076c2:	d1df      	bne.n	8007684 <__swbuf_r+0x2e>
 80076c4:	4621      	mov	r1, r4
 80076c6:	4628      	mov	r0, r5
 80076c8:	f000 fd20 	bl	800810c <_fflush_r>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	d0d9      	beq.n	8007684 <__swbuf_r+0x2e>
 80076d0:	e7d6      	b.n	8007680 <__swbuf_r+0x2a>
	...

080076d4 <__swsetup_r>:
 80076d4:	b538      	push	{r3, r4, r5, lr}
 80076d6:	4b29      	ldr	r3, [pc, #164]	@ (800777c <__swsetup_r+0xa8>)
 80076d8:	4605      	mov	r5, r0
 80076da:	6818      	ldr	r0, [r3, #0]
 80076dc:	460c      	mov	r4, r1
 80076de:	b118      	cbz	r0, 80076e8 <__swsetup_r+0x14>
 80076e0:	6a03      	ldr	r3, [r0, #32]
 80076e2:	b90b      	cbnz	r3, 80076e8 <__swsetup_r+0x14>
 80076e4:	f7ff fece 	bl	8007484 <__sinit>
 80076e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ec:	0719      	lsls	r1, r3, #28
 80076ee:	d422      	bmi.n	8007736 <__swsetup_r+0x62>
 80076f0:	06da      	lsls	r2, r3, #27
 80076f2:	d407      	bmi.n	8007704 <__swsetup_r+0x30>
 80076f4:	2209      	movs	r2, #9
 80076f6:	602a      	str	r2, [r5, #0]
 80076f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076fc:	81a3      	strh	r3, [r4, #12]
 80076fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007702:	e033      	b.n	800776c <__swsetup_r+0x98>
 8007704:	0758      	lsls	r0, r3, #29
 8007706:	d512      	bpl.n	800772e <__swsetup_r+0x5a>
 8007708:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800770a:	b141      	cbz	r1, 800771e <__swsetup_r+0x4a>
 800770c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007710:	4299      	cmp	r1, r3
 8007712:	d002      	beq.n	800771a <__swsetup_r+0x46>
 8007714:	4628      	mov	r0, r5
 8007716:	f000 f8af 	bl	8007878 <_free_r>
 800771a:	2300      	movs	r3, #0
 800771c:	6363      	str	r3, [r4, #52]	@ 0x34
 800771e:	89a3      	ldrh	r3, [r4, #12]
 8007720:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007724:	81a3      	strh	r3, [r4, #12]
 8007726:	2300      	movs	r3, #0
 8007728:	6063      	str	r3, [r4, #4]
 800772a:	6923      	ldr	r3, [r4, #16]
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	89a3      	ldrh	r3, [r4, #12]
 8007730:	f043 0308 	orr.w	r3, r3, #8
 8007734:	81a3      	strh	r3, [r4, #12]
 8007736:	6923      	ldr	r3, [r4, #16]
 8007738:	b94b      	cbnz	r3, 800774e <__swsetup_r+0x7a>
 800773a:	89a3      	ldrh	r3, [r4, #12]
 800773c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007744:	d003      	beq.n	800774e <__swsetup_r+0x7a>
 8007746:	4621      	mov	r1, r4
 8007748:	4628      	mov	r0, r5
 800774a:	f000 fd2d 	bl	80081a8 <__smakebuf_r>
 800774e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007752:	f013 0201 	ands.w	r2, r3, #1
 8007756:	d00a      	beq.n	800776e <__swsetup_r+0x9a>
 8007758:	2200      	movs	r2, #0
 800775a:	60a2      	str	r2, [r4, #8]
 800775c:	6962      	ldr	r2, [r4, #20]
 800775e:	4252      	negs	r2, r2
 8007760:	61a2      	str	r2, [r4, #24]
 8007762:	6922      	ldr	r2, [r4, #16]
 8007764:	b942      	cbnz	r2, 8007778 <__swsetup_r+0xa4>
 8007766:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800776a:	d1c5      	bne.n	80076f8 <__swsetup_r+0x24>
 800776c:	bd38      	pop	{r3, r4, r5, pc}
 800776e:	0799      	lsls	r1, r3, #30
 8007770:	bf58      	it	pl
 8007772:	6962      	ldrpl	r2, [r4, #20]
 8007774:	60a2      	str	r2, [r4, #8]
 8007776:	e7f4      	b.n	8007762 <__swsetup_r+0x8e>
 8007778:	2000      	movs	r0, #0
 800777a:	e7f7      	b.n	800776c <__swsetup_r+0x98>
 800777c:	20000018 	.word	0x20000018

08007780 <memset>:
 8007780:	4402      	add	r2, r0
 8007782:	4603      	mov	r3, r0
 8007784:	4293      	cmp	r3, r2
 8007786:	d100      	bne.n	800778a <memset+0xa>
 8007788:	4770      	bx	lr
 800778a:	f803 1b01 	strb.w	r1, [r3], #1
 800778e:	e7f9      	b.n	8007784 <memset+0x4>

08007790 <_close_r>:
 8007790:	b538      	push	{r3, r4, r5, lr}
 8007792:	4d06      	ldr	r5, [pc, #24]	@ (80077ac <_close_r+0x1c>)
 8007794:	2300      	movs	r3, #0
 8007796:	4604      	mov	r4, r0
 8007798:	4608      	mov	r0, r1
 800779a:	602b      	str	r3, [r5, #0]
 800779c:	f7fa fb3f 	bl	8001e1e <_close>
 80077a0:	1c43      	adds	r3, r0, #1
 80077a2:	d102      	bne.n	80077aa <_close_r+0x1a>
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	b103      	cbz	r3, 80077aa <_close_r+0x1a>
 80077a8:	6023      	str	r3, [r4, #0]
 80077aa:	bd38      	pop	{r3, r4, r5, pc}
 80077ac:	2000038c 	.word	0x2000038c

080077b0 <_lseek_r>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	4d07      	ldr	r5, [pc, #28]	@ (80077d0 <_lseek_r+0x20>)
 80077b4:	4604      	mov	r4, r0
 80077b6:	4608      	mov	r0, r1
 80077b8:	4611      	mov	r1, r2
 80077ba:	2200      	movs	r2, #0
 80077bc:	602a      	str	r2, [r5, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	f7fa fb54 	bl	8001e6c <_lseek>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_lseek_r+0x1e>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_lseek_r+0x1e>
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	2000038c 	.word	0x2000038c

080077d4 <_read_r>:
 80077d4:	b538      	push	{r3, r4, r5, lr}
 80077d6:	4d07      	ldr	r5, [pc, #28]	@ (80077f4 <_read_r+0x20>)
 80077d8:	4604      	mov	r4, r0
 80077da:	4608      	mov	r0, r1
 80077dc:	4611      	mov	r1, r2
 80077de:	2200      	movs	r2, #0
 80077e0:	602a      	str	r2, [r5, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	f7fa fafe 	bl	8001de4 <_read>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d102      	bne.n	80077f2 <_read_r+0x1e>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	b103      	cbz	r3, 80077f2 <_read_r+0x1e>
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	2000038c 	.word	0x2000038c

080077f8 <_write_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4d07      	ldr	r5, [pc, #28]	@ (8007818 <_write_r+0x20>)
 80077fc:	4604      	mov	r4, r0
 80077fe:	4608      	mov	r0, r1
 8007800:	4611      	mov	r1, r2
 8007802:	2200      	movs	r2, #0
 8007804:	602a      	str	r2, [r5, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	f7f9 fce2 	bl	80011d0 <_write>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_write_r+0x1e>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b103      	cbz	r3, 8007816 <_write_r+0x1e>
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	2000038c 	.word	0x2000038c

0800781c <__errno>:
 800781c:	4b01      	ldr	r3, [pc, #4]	@ (8007824 <__errno+0x8>)
 800781e:	6818      	ldr	r0, [r3, #0]
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	20000018 	.word	0x20000018

08007828 <__libc_init_array>:
 8007828:	b570      	push	{r4, r5, r6, lr}
 800782a:	4d0d      	ldr	r5, [pc, #52]	@ (8007860 <__libc_init_array+0x38>)
 800782c:	4c0d      	ldr	r4, [pc, #52]	@ (8007864 <__libc_init_array+0x3c>)
 800782e:	1b64      	subs	r4, r4, r5
 8007830:	10a4      	asrs	r4, r4, #2
 8007832:	2600      	movs	r6, #0
 8007834:	42a6      	cmp	r6, r4
 8007836:	d109      	bne.n	800784c <__libc_init_array+0x24>
 8007838:	4d0b      	ldr	r5, [pc, #44]	@ (8007868 <__libc_init_array+0x40>)
 800783a:	4c0c      	ldr	r4, [pc, #48]	@ (800786c <__libc_init_array+0x44>)
 800783c:	f001 f890 	bl	8008960 <_init>
 8007840:	1b64      	subs	r4, r4, r5
 8007842:	10a4      	asrs	r4, r4, #2
 8007844:	2600      	movs	r6, #0
 8007846:	42a6      	cmp	r6, r4
 8007848:	d105      	bne.n	8007856 <__libc_init_array+0x2e>
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007850:	4798      	blx	r3
 8007852:	3601      	adds	r6, #1
 8007854:	e7ee      	b.n	8007834 <__libc_init_array+0xc>
 8007856:	f855 3b04 	ldr.w	r3, [r5], #4
 800785a:	4798      	blx	r3
 800785c:	3601      	adds	r6, #1
 800785e:	e7f2      	b.n	8007846 <__libc_init_array+0x1e>
 8007860:	08008b78 	.word	0x08008b78
 8007864:	08008b78 	.word	0x08008b78
 8007868:	08008b78 	.word	0x08008b78
 800786c:	08008b7c 	.word	0x08008b7c

08007870 <__retarget_lock_init_recursive>:
 8007870:	4770      	bx	lr

08007872 <__retarget_lock_acquire_recursive>:
 8007872:	4770      	bx	lr

08007874 <__retarget_lock_release_recursive>:
 8007874:	4770      	bx	lr
	...

08007878 <_free_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4605      	mov	r5, r0
 800787c:	2900      	cmp	r1, #0
 800787e:	d041      	beq.n	8007904 <_free_r+0x8c>
 8007880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007884:	1f0c      	subs	r4, r1, #4
 8007886:	2b00      	cmp	r3, #0
 8007888:	bfb8      	it	lt
 800788a:	18e4      	addlt	r4, r4, r3
 800788c:	f000 f8e0 	bl	8007a50 <__malloc_lock>
 8007890:	4a1d      	ldr	r2, [pc, #116]	@ (8007908 <_free_r+0x90>)
 8007892:	6813      	ldr	r3, [r2, #0]
 8007894:	b933      	cbnz	r3, 80078a4 <_free_r+0x2c>
 8007896:	6063      	str	r3, [r4, #4]
 8007898:	6014      	str	r4, [r2, #0]
 800789a:	4628      	mov	r0, r5
 800789c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078a0:	f000 b8dc 	b.w	8007a5c <__malloc_unlock>
 80078a4:	42a3      	cmp	r3, r4
 80078a6:	d908      	bls.n	80078ba <_free_r+0x42>
 80078a8:	6820      	ldr	r0, [r4, #0]
 80078aa:	1821      	adds	r1, r4, r0
 80078ac:	428b      	cmp	r3, r1
 80078ae:	bf01      	itttt	eq
 80078b0:	6819      	ldreq	r1, [r3, #0]
 80078b2:	685b      	ldreq	r3, [r3, #4]
 80078b4:	1809      	addeq	r1, r1, r0
 80078b6:	6021      	streq	r1, [r4, #0]
 80078b8:	e7ed      	b.n	8007896 <_free_r+0x1e>
 80078ba:	461a      	mov	r2, r3
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	b10b      	cbz	r3, 80078c4 <_free_r+0x4c>
 80078c0:	42a3      	cmp	r3, r4
 80078c2:	d9fa      	bls.n	80078ba <_free_r+0x42>
 80078c4:	6811      	ldr	r1, [r2, #0]
 80078c6:	1850      	adds	r0, r2, r1
 80078c8:	42a0      	cmp	r0, r4
 80078ca:	d10b      	bne.n	80078e4 <_free_r+0x6c>
 80078cc:	6820      	ldr	r0, [r4, #0]
 80078ce:	4401      	add	r1, r0
 80078d0:	1850      	adds	r0, r2, r1
 80078d2:	4283      	cmp	r3, r0
 80078d4:	6011      	str	r1, [r2, #0]
 80078d6:	d1e0      	bne.n	800789a <_free_r+0x22>
 80078d8:	6818      	ldr	r0, [r3, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	6053      	str	r3, [r2, #4]
 80078de:	4408      	add	r0, r1
 80078e0:	6010      	str	r0, [r2, #0]
 80078e2:	e7da      	b.n	800789a <_free_r+0x22>
 80078e4:	d902      	bls.n	80078ec <_free_r+0x74>
 80078e6:	230c      	movs	r3, #12
 80078e8:	602b      	str	r3, [r5, #0]
 80078ea:	e7d6      	b.n	800789a <_free_r+0x22>
 80078ec:	6820      	ldr	r0, [r4, #0]
 80078ee:	1821      	adds	r1, r4, r0
 80078f0:	428b      	cmp	r3, r1
 80078f2:	bf04      	itt	eq
 80078f4:	6819      	ldreq	r1, [r3, #0]
 80078f6:	685b      	ldreq	r3, [r3, #4]
 80078f8:	6063      	str	r3, [r4, #4]
 80078fa:	bf04      	itt	eq
 80078fc:	1809      	addeq	r1, r1, r0
 80078fe:	6021      	streq	r1, [r4, #0]
 8007900:	6054      	str	r4, [r2, #4]
 8007902:	e7ca      	b.n	800789a <_free_r+0x22>
 8007904:	bd38      	pop	{r3, r4, r5, pc}
 8007906:	bf00      	nop
 8007908:	20000398 	.word	0x20000398

0800790c <sbrk_aligned>:
 800790c:	b570      	push	{r4, r5, r6, lr}
 800790e:	4e0f      	ldr	r6, [pc, #60]	@ (800794c <sbrk_aligned+0x40>)
 8007910:	460c      	mov	r4, r1
 8007912:	6831      	ldr	r1, [r6, #0]
 8007914:	4605      	mov	r5, r0
 8007916:	b911      	cbnz	r1, 800791e <sbrk_aligned+0x12>
 8007918:	f000 fca4 	bl	8008264 <_sbrk_r>
 800791c:	6030      	str	r0, [r6, #0]
 800791e:	4621      	mov	r1, r4
 8007920:	4628      	mov	r0, r5
 8007922:	f000 fc9f 	bl	8008264 <_sbrk_r>
 8007926:	1c43      	adds	r3, r0, #1
 8007928:	d103      	bne.n	8007932 <sbrk_aligned+0x26>
 800792a:	f04f 34ff 	mov.w	r4, #4294967295
 800792e:	4620      	mov	r0, r4
 8007930:	bd70      	pop	{r4, r5, r6, pc}
 8007932:	1cc4      	adds	r4, r0, #3
 8007934:	f024 0403 	bic.w	r4, r4, #3
 8007938:	42a0      	cmp	r0, r4
 800793a:	d0f8      	beq.n	800792e <sbrk_aligned+0x22>
 800793c:	1a21      	subs	r1, r4, r0
 800793e:	4628      	mov	r0, r5
 8007940:	f000 fc90 	bl	8008264 <_sbrk_r>
 8007944:	3001      	adds	r0, #1
 8007946:	d1f2      	bne.n	800792e <sbrk_aligned+0x22>
 8007948:	e7ef      	b.n	800792a <sbrk_aligned+0x1e>
 800794a:	bf00      	nop
 800794c:	20000394 	.word	0x20000394

08007950 <_malloc_r>:
 8007950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007954:	1ccd      	adds	r5, r1, #3
 8007956:	f025 0503 	bic.w	r5, r5, #3
 800795a:	3508      	adds	r5, #8
 800795c:	2d0c      	cmp	r5, #12
 800795e:	bf38      	it	cc
 8007960:	250c      	movcc	r5, #12
 8007962:	2d00      	cmp	r5, #0
 8007964:	4606      	mov	r6, r0
 8007966:	db01      	blt.n	800796c <_malloc_r+0x1c>
 8007968:	42a9      	cmp	r1, r5
 800796a:	d904      	bls.n	8007976 <_malloc_r+0x26>
 800796c:	230c      	movs	r3, #12
 800796e:	6033      	str	r3, [r6, #0]
 8007970:	2000      	movs	r0, #0
 8007972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007976:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a4c <_malloc_r+0xfc>
 800797a:	f000 f869 	bl	8007a50 <__malloc_lock>
 800797e:	f8d8 3000 	ldr.w	r3, [r8]
 8007982:	461c      	mov	r4, r3
 8007984:	bb44      	cbnz	r4, 80079d8 <_malloc_r+0x88>
 8007986:	4629      	mov	r1, r5
 8007988:	4630      	mov	r0, r6
 800798a:	f7ff ffbf 	bl	800790c <sbrk_aligned>
 800798e:	1c43      	adds	r3, r0, #1
 8007990:	4604      	mov	r4, r0
 8007992:	d158      	bne.n	8007a46 <_malloc_r+0xf6>
 8007994:	f8d8 4000 	ldr.w	r4, [r8]
 8007998:	4627      	mov	r7, r4
 800799a:	2f00      	cmp	r7, #0
 800799c:	d143      	bne.n	8007a26 <_malloc_r+0xd6>
 800799e:	2c00      	cmp	r4, #0
 80079a0:	d04b      	beq.n	8007a3a <_malloc_r+0xea>
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	4639      	mov	r1, r7
 80079a6:	4630      	mov	r0, r6
 80079a8:	eb04 0903 	add.w	r9, r4, r3
 80079ac:	f000 fc5a 	bl	8008264 <_sbrk_r>
 80079b0:	4581      	cmp	r9, r0
 80079b2:	d142      	bne.n	8007a3a <_malloc_r+0xea>
 80079b4:	6821      	ldr	r1, [r4, #0]
 80079b6:	1a6d      	subs	r5, r5, r1
 80079b8:	4629      	mov	r1, r5
 80079ba:	4630      	mov	r0, r6
 80079bc:	f7ff ffa6 	bl	800790c <sbrk_aligned>
 80079c0:	3001      	adds	r0, #1
 80079c2:	d03a      	beq.n	8007a3a <_malloc_r+0xea>
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	442b      	add	r3, r5
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	f8d8 3000 	ldr.w	r3, [r8]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	bb62      	cbnz	r2, 8007a2c <_malloc_r+0xdc>
 80079d2:	f8c8 7000 	str.w	r7, [r8]
 80079d6:	e00f      	b.n	80079f8 <_malloc_r+0xa8>
 80079d8:	6822      	ldr	r2, [r4, #0]
 80079da:	1b52      	subs	r2, r2, r5
 80079dc:	d420      	bmi.n	8007a20 <_malloc_r+0xd0>
 80079de:	2a0b      	cmp	r2, #11
 80079e0:	d917      	bls.n	8007a12 <_malloc_r+0xc2>
 80079e2:	1961      	adds	r1, r4, r5
 80079e4:	42a3      	cmp	r3, r4
 80079e6:	6025      	str	r5, [r4, #0]
 80079e8:	bf18      	it	ne
 80079ea:	6059      	strne	r1, [r3, #4]
 80079ec:	6863      	ldr	r3, [r4, #4]
 80079ee:	bf08      	it	eq
 80079f0:	f8c8 1000 	streq.w	r1, [r8]
 80079f4:	5162      	str	r2, [r4, r5]
 80079f6:	604b      	str	r3, [r1, #4]
 80079f8:	4630      	mov	r0, r6
 80079fa:	f000 f82f 	bl	8007a5c <__malloc_unlock>
 80079fe:	f104 000b 	add.w	r0, r4, #11
 8007a02:	1d23      	adds	r3, r4, #4
 8007a04:	f020 0007 	bic.w	r0, r0, #7
 8007a08:	1ac2      	subs	r2, r0, r3
 8007a0a:	bf1c      	itt	ne
 8007a0c:	1a1b      	subne	r3, r3, r0
 8007a0e:	50a3      	strne	r3, [r4, r2]
 8007a10:	e7af      	b.n	8007972 <_malloc_r+0x22>
 8007a12:	6862      	ldr	r2, [r4, #4]
 8007a14:	42a3      	cmp	r3, r4
 8007a16:	bf0c      	ite	eq
 8007a18:	f8c8 2000 	streq.w	r2, [r8]
 8007a1c:	605a      	strne	r2, [r3, #4]
 8007a1e:	e7eb      	b.n	80079f8 <_malloc_r+0xa8>
 8007a20:	4623      	mov	r3, r4
 8007a22:	6864      	ldr	r4, [r4, #4]
 8007a24:	e7ae      	b.n	8007984 <_malloc_r+0x34>
 8007a26:	463c      	mov	r4, r7
 8007a28:	687f      	ldr	r7, [r7, #4]
 8007a2a:	e7b6      	b.n	800799a <_malloc_r+0x4a>
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	42a3      	cmp	r3, r4
 8007a32:	d1fb      	bne.n	8007a2c <_malloc_r+0xdc>
 8007a34:	2300      	movs	r3, #0
 8007a36:	6053      	str	r3, [r2, #4]
 8007a38:	e7de      	b.n	80079f8 <_malloc_r+0xa8>
 8007a3a:	230c      	movs	r3, #12
 8007a3c:	6033      	str	r3, [r6, #0]
 8007a3e:	4630      	mov	r0, r6
 8007a40:	f000 f80c 	bl	8007a5c <__malloc_unlock>
 8007a44:	e794      	b.n	8007970 <_malloc_r+0x20>
 8007a46:	6005      	str	r5, [r0, #0]
 8007a48:	e7d6      	b.n	80079f8 <_malloc_r+0xa8>
 8007a4a:	bf00      	nop
 8007a4c:	20000398 	.word	0x20000398

08007a50 <__malloc_lock>:
 8007a50:	4801      	ldr	r0, [pc, #4]	@ (8007a58 <__malloc_lock+0x8>)
 8007a52:	f7ff bf0e 	b.w	8007872 <__retarget_lock_acquire_recursive>
 8007a56:	bf00      	nop
 8007a58:	20000390 	.word	0x20000390

08007a5c <__malloc_unlock>:
 8007a5c:	4801      	ldr	r0, [pc, #4]	@ (8007a64 <__malloc_unlock+0x8>)
 8007a5e:	f7ff bf09 	b.w	8007874 <__retarget_lock_release_recursive>
 8007a62:	bf00      	nop
 8007a64:	20000390 	.word	0x20000390

08007a68 <__sfputc_r>:
 8007a68:	6893      	ldr	r3, [r2, #8]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	b410      	push	{r4}
 8007a70:	6093      	str	r3, [r2, #8]
 8007a72:	da08      	bge.n	8007a86 <__sfputc_r+0x1e>
 8007a74:	6994      	ldr	r4, [r2, #24]
 8007a76:	42a3      	cmp	r3, r4
 8007a78:	db01      	blt.n	8007a7e <__sfputc_r+0x16>
 8007a7a:	290a      	cmp	r1, #10
 8007a7c:	d103      	bne.n	8007a86 <__sfputc_r+0x1e>
 8007a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a82:	f7ff bde8 	b.w	8007656 <__swbuf_r>
 8007a86:	6813      	ldr	r3, [r2, #0]
 8007a88:	1c58      	adds	r0, r3, #1
 8007a8a:	6010      	str	r0, [r2, #0]
 8007a8c:	7019      	strb	r1, [r3, #0]
 8007a8e:	4608      	mov	r0, r1
 8007a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <__sfputs_r>:
 8007a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a98:	4606      	mov	r6, r0
 8007a9a:	460f      	mov	r7, r1
 8007a9c:	4614      	mov	r4, r2
 8007a9e:	18d5      	adds	r5, r2, r3
 8007aa0:	42ac      	cmp	r4, r5
 8007aa2:	d101      	bne.n	8007aa8 <__sfputs_r+0x12>
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	e007      	b.n	8007ab8 <__sfputs_r+0x22>
 8007aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aac:	463a      	mov	r2, r7
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f7ff ffda 	bl	8007a68 <__sfputc_r>
 8007ab4:	1c43      	adds	r3, r0, #1
 8007ab6:	d1f3      	bne.n	8007aa0 <__sfputs_r+0xa>
 8007ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007abc <_vfiprintf_r>:
 8007abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac0:	460d      	mov	r5, r1
 8007ac2:	b09d      	sub	sp, #116	@ 0x74
 8007ac4:	4614      	mov	r4, r2
 8007ac6:	4698      	mov	r8, r3
 8007ac8:	4606      	mov	r6, r0
 8007aca:	b118      	cbz	r0, 8007ad4 <_vfiprintf_r+0x18>
 8007acc:	6a03      	ldr	r3, [r0, #32]
 8007ace:	b90b      	cbnz	r3, 8007ad4 <_vfiprintf_r+0x18>
 8007ad0:	f7ff fcd8 	bl	8007484 <__sinit>
 8007ad4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ad6:	07d9      	lsls	r1, r3, #31
 8007ad8:	d405      	bmi.n	8007ae6 <_vfiprintf_r+0x2a>
 8007ada:	89ab      	ldrh	r3, [r5, #12]
 8007adc:	059a      	lsls	r2, r3, #22
 8007ade:	d402      	bmi.n	8007ae6 <_vfiprintf_r+0x2a>
 8007ae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ae2:	f7ff fec6 	bl	8007872 <__retarget_lock_acquire_recursive>
 8007ae6:	89ab      	ldrh	r3, [r5, #12]
 8007ae8:	071b      	lsls	r3, r3, #28
 8007aea:	d501      	bpl.n	8007af0 <_vfiprintf_r+0x34>
 8007aec:	692b      	ldr	r3, [r5, #16]
 8007aee:	b99b      	cbnz	r3, 8007b18 <_vfiprintf_r+0x5c>
 8007af0:	4629      	mov	r1, r5
 8007af2:	4630      	mov	r0, r6
 8007af4:	f7ff fdee 	bl	80076d4 <__swsetup_r>
 8007af8:	b170      	cbz	r0, 8007b18 <_vfiprintf_r+0x5c>
 8007afa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007afc:	07dc      	lsls	r4, r3, #31
 8007afe:	d504      	bpl.n	8007b0a <_vfiprintf_r+0x4e>
 8007b00:	f04f 30ff 	mov.w	r0, #4294967295
 8007b04:	b01d      	add	sp, #116	@ 0x74
 8007b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0a:	89ab      	ldrh	r3, [r5, #12]
 8007b0c:	0598      	lsls	r0, r3, #22
 8007b0e:	d4f7      	bmi.n	8007b00 <_vfiprintf_r+0x44>
 8007b10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b12:	f7ff feaf 	bl	8007874 <__retarget_lock_release_recursive>
 8007b16:	e7f3      	b.n	8007b00 <_vfiprintf_r+0x44>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b1c:	2320      	movs	r3, #32
 8007b1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b22:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b26:	2330      	movs	r3, #48	@ 0x30
 8007b28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007cd8 <_vfiprintf_r+0x21c>
 8007b2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b30:	f04f 0901 	mov.w	r9, #1
 8007b34:	4623      	mov	r3, r4
 8007b36:	469a      	mov	sl, r3
 8007b38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b3c:	b10a      	cbz	r2, 8007b42 <_vfiprintf_r+0x86>
 8007b3e:	2a25      	cmp	r2, #37	@ 0x25
 8007b40:	d1f9      	bne.n	8007b36 <_vfiprintf_r+0x7a>
 8007b42:	ebba 0b04 	subs.w	fp, sl, r4
 8007b46:	d00b      	beq.n	8007b60 <_vfiprintf_r+0xa4>
 8007b48:	465b      	mov	r3, fp
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	4630      	mov	r0, r6
 8007b50:	f7ff ffa1 	bl	8007a96 <__sfputs_r>
 8007b54:	3001      	adds	r0, #1
 8007b56:	f000 80a7 	beq.w	8007ca8 <_vfiprintf_r+0x1ec>
 8007b5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b5c:	445a      	add	r2, fp
 8007b5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b60:	f89a 3000 	ldrb.w	r3, [sl]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 809f 	beq.w	8007ca8 <_vfiprintf_r+0x1ec>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b74:	f10a 0a01 	add.w	sl, sl, #1
 8007b78:	9304      	str	r3, [sp, #16]
 8007b7a:	9307      	str	r3, [sp, #28]
 8007b7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b80:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b82:	4654      	mov	r4, sl
 8007b84:	2205      	movs	r2, #5
 8007b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b8a:	4853      	ldr	r0, [pc, #332]	@ (8007cd8 <_vfiprintf_r+0x21c>)
 8007b8c:	f7f8 fb20 	bl	80001d0 <memchr>
 8007b90:	9a04      	ldr	r2, [sp, #16]
 8007b92:	b9d8      	cbnz	r0, 8007bcc <_vfiprintf_r+0x110>
 8007b94:	06d1      	lsls	r1, r2, #27
 8007b96:	bf44      	itt	mi
 8007b98:	2320      	movmi	r3, #32
 8007b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b9e:	0713      	lsls	r3, r2, #28
 8007ba0:	bf44      	itt	mi
 8007ba2:	232b      	movmi	r3, #43	@ 0x2b
 8007ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8007bac:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bae:	d015      	beq.n	8007bdc <_vfiprintf_r+0x120>
 8007bb0:	9a07      	ldr	r2, [sp, #28]
 8007bb2:	4654      	mov	r4, sl
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	f04f 0c0a 	mov.w	ip, #10
 8007bba:	4621      	mov	r1, r4
 8007bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bc0:	3b30      	subs	r3, #48	@ 0x30
 8007bc2:	2b09      	cmp	r3, #9
 8007bc4:	d94b      	bls.n	8007c5e <_vfiprintf_r+0x1a2>
 8007bc6:	b1b0      	cbz	r0, 8007bf6 <_vfiprintf_r+0x13a>
 8007bc8:	9207      	str	r2, [sp, #28]
 8007bca:	e014      	b.n	8007bf6 <_vfiprintf_r+0x13a>
 8007bcc:	eba0 0308 	sub.w	r3, r0, r8
 8007bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	9304      	str	r3, [sp, #16]
 8007bd8:	46a2      	mov	sl, r4
 8007bda:	e7d2      	b.n	8007b82 <_vfiprintf_r+0xc6>
 8007bdc:	9b03      	ldr	r3, [sp, #12]
 8007bde:	1d19      	adds	r1, r3, #4
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	9103      	str	r1, [sp, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	bfbb      	ittet	lt
 8007be8:	425b      	neglt	r3, r3
 8007bea:	f042 0202 	orrlt.w	r2, r2, #2
 8007bee:	9307      	strge	r3, [sp, #28]
 8007bf0:	9307      	strlt	r3, [sp, #28]
 8007bf2:	bfb8      	it	lt
 8007bf4:	9204      	strlt	r2, [sp, #16]
 8007bf6:	7823      	ldrb	r3, [r4, #0]
 8007bf8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bfa:	d10a      	bne.n	8007c12 <_vfiprintf_r+0x156>
 8007bfc:	7863      	ldrb	r3, [r4, #1]
 8007bfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c00:	d132      	bne.n	8007c68 <_vfiprintf_r+0x1ac>
 8007c02:	9b03      	ldr	r3, [sp, #12]
 8007c04:	1d1a      	adds	r2, r3, #4
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	9203      	str	r2, [sp, #12]
 8007c0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c0e:	3402      	adds	r4, #2
 8007c10:	9305      	str	r3, [sp, #20]
 8007c12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ce8 <_vfiprintf_r+0x22c>
 8007c16:	7821      	ldrb	r1, [r4, #0]
 8007c18:	2203      	movs	r2, #3
 8007c1a:	4650      	mov	r0, sl
 8007c1c:	f7f8 fad8 	bl	80001d0 <memchr>
 8007c20:	b138      	cbz	r0, 8007c32 <_vfiprintf_r+0x176>
 8007c22:	9b04      	ldr	r3, [sp, #16]
 8007c24:	eba0 000a 	sub.w	r0, r0, sl
 8007c28:	2240      	movs	r2, #64	@ 0x40
 8007c2a:	4082      	lsls	r2, r0
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	3401      	adds	r4, #1
 8007c30:	9304      	str	r3, [sp, #16]
 8007c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c36:	4829      	ldr	r0, [pc, #164]	@ (8007cdc <_vfiprintf_r+0x220>)
 8007c38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c3c:	2206      	movs	r2, #6
 8007c3e:	f7f8 fac7 	bl	80001d0 <memchr>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d03f      	beq.n	8007cc6 <_vfiprintf_r+0x20a>
 8007c46:	4b26      	ldr	r3, [pc, #152]	@ (8007ce0 <_vfiprintf_r+0x224>)
 8007c48:	bb1b      	cbnz	r3, 8007c92 <_vfiprintf_r+0x1d6>
 8007c4a:	9b03      	ldr	r3, [sp, #12]
 8007c4c:	3307      	adds	r3, #7
 8007c4e:	f023 0307 	bic.w	r3, r3, #7
 8007c52:	3308      	adds	r3, #8
 8007c54:	9303      	str	r3, [sp, #12]
 8007c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c58:	443b      	add	r3, r7
 8007c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c5c:	e76a      	b.n	8007b34 <_vfiprintf_r+0x78>
 8007c5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c62:	460c      	mov	r4, r1
 8007c64:	2001      	movs	r0, #1
 8007c66:	e7a8      	b.n	8007bba <_vfiprintf_r+0xfe>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	3401      	adds	r4, #1
 8007c6c:	9305      	str	r3, [sp, #20]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	f04f 0c0a 	mov.w	ip, #10
 8007c74:	4620      	mov	r0, r4
 8007c76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c7a:	3a30      	subs	r2, #48	@ 0x30
 8007c7c:	2a09      	cmp	r2, #9
 8007c7e:	d903      	bls.n	8007c88 <_vfiprintf_r+0x1cc>
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d0c6      	beq.n	8007c12 <_vfiprintf_r+0x156>
 8007c84:	9105      	str	r1, [sp, #20]
 8007c86:	e7c4      	b.n	8007c12 <_vfiprintf_r+0x156>
 8007c88:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e7f0      	b.n	8007c74 <_vfiprintf_r+0x1b8>
 8007c92:	ab03      	add	r3, sp, #12
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	462a      	mov	r2, r5
 8007c98:	4b12      	ldr	r3, [pc, #72]	@ (8007ce4 <_vfiprintf_r+0x228>)
 8007c9a:	a904      	add	r1, sp, #16
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f3af 8000 	nop.w
 8007ca2:	4607      	mov	r7, r0
 8007ca4:	1c78      	adds	r0, r7, #1
 8007ca6:	d1d6      	bne.n	8007c56 <_vfiprintf_r+0x19a>
 8007ca8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007caa:	07d9      	lsls	r1, r3, #31
 8007cac:	d405      	bmi.n	8007cba <_vfiprintf_r+0x1fe>
 8007cae:	89ab      	ldrh	r3, [r5, #12]
 8007cb0:	059a      	lsls	r2, r3, #22
 8007cb2:	d402      	bmi.n	8007cba <_vfiprintf_r+0x1fe>
 8007cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cb6:	f7ff fddd 	bl	8007874 <__retarget_lock_release_recursive>
 8007cba:	89ab      	ldrh	r3, [r5, #12]
 8007cbc:	065b      	lsls	r3, r3, #25
 8007cbe:	f53f af1f 	bmi.w	8007b00 <_vfiprintf_r+0x44>
 8007cc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cc4:	e71e      	b.n	8007b04 <_vfiprintf_r+0x48>
 8007cc6:	ab03      	add	r3, sp, #12
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	462a      	mov	r2, r5
 8007ccc:	4b05      	ldr	r3, [pc, #20]	@ (8007ce4 <_vfiprintf_r+0x228>)
 8007cce:	a904      	add	r1, sp, #16
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f000 f879 	bl	8007dc8 <_printf_i>
 8007cd6:	e7e4      	b.n	8007ca2 <_vfiprintf_r+0x1e6>
 8007cd8:	08008abc 	.word	0x08008abc
 8007cdc:	08008ac6 	.word	0x08008ac6
 8007ce0:	00000000 	.word	0x00000000
 8007ce4:	08007a97 	.word	0x08007a97
 8007ce8:	08008ac2 	.word	0x08008ac2

08007cec <_printf_common>:
 8007cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf0:	4616      	mov	r6, r2
 8007cf2:	4698      	mov	r8, r3
 8007cf4:	688a      	ldr	r2, [r1, #8]
 8007cf6:	690b      	ldr	r3, [r1, #16]
 8007cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	bfb8      	it	lt
 8007d00:	4613      	movlt	r3, r2
 8007d02:	6033      	str	r3, [r6, #0]
 8007d04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d08:	4607      	mov	r7, r0
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	b10a      	cbz	r2, 8007d12 <_printf_common+0x26>
 8007d0e:	3301      	adds	r3, #1
 8007d10:	6033      	str	r3, [r6, #0]
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	0699      	lsls	r1, r3, #26
 8007d16:	bf42      	ittt	mi
 8007d18:	6833      	ldrmi	r3, [r6, #0]
 8007d1a:	3302      	addmi	r3, #2
 8007d1c:	6033      	strmi	r3, [r6, #0]
 8007d1e:	6825      	ldr	r5, [r4, #0]
 8007d20:	f015 0506 	ands.w	r5, r5, #6
 8007d24:	d106      	bne.n	8007d34 <_printf_common+0x48>
 8007d26:	f104 0a19 	add.w	sl, r4, #25
 8007d2a:	68e3      	ldr	r3, [r4, #12]
 8007d2c:	6832      	ldr	r2, [r6, #0]
 8007d2e:	1a9b      	subs	r3, r3, r2
 8007d30:	42ab      	cmp	r3, r5
 8007d32:	dc26      	bgt.n	8007d82 <_printf_common+0x96>
 8007d34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d38:	6822      	ldr	r2, [r4, #0]
 8007d3a:	3b00      	subs	r3, #0
 8007d3c:	bf18      	it	ne
 8007d3e:	2301      	movne	r3, #1
 8007d40:	0692      	lsls	r2, r2, #26
 8007d42:	d42b      	bmi.n	8007d9c <_printf_common+0xb0>
 8007d44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d48:	4641      	mov	r1, r8
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	47c8      	blx	r9
 8007d4e:	3001      	adds	r0, #1
 8007d50:	d01e      	beq.n	8007d90 <_printf_common+0xa4>
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	6922      	ldr	r2, [r4, #16]
 8007d56:	f003 0306 	and.w	r3, r3, #6
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	bf02      	ittt	eq
 8007d5e:	68e5      	ldreq	r5, [r4, #12]
 8007d60:	6833      	ldreq	r3, [r6, #0]
 8007d62:	1aed      	subeq	r5, r5, r3
 8007d64:	68a3      	ldr	r3, [r4, #8]
 8007d66:	bf0c      	ite	eq
 8007d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d6c:	2500      	movne	r5, #0
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	bfc4      	itt	gt
 8007d72:	1a9b      	subgt	r3, r3, r2
 8007d74:	18ed      	addgt	r5, r5, r3
 8007d76:	2600      	movs	r6, #0
 8007d78:	341a      	adds	r4, #26
 8007d7a:	42b5      	cmp	r5, r6
 8007d7c:	d11a      	bne.n	8007db4 <_printf_common+0xc8>
 8007d7e:	2000      	movs	r0, #0
 8007d80:	e008      	b.n	8007d94 <_printf_common+0xa8>
 8007d82:	2301      	movs	r3, #1
 8007d84:	4652      	mov	r2, sl
 8007d86:	4641      	mov	r1, r8
 8007d88:	4638      	mov	r0, r7
 8007d8a:	47c8      	blx	r9
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d103      	bne.n	8007d98 <_printf_common+0xac>
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295
 8007d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d98:	3501      	adds	r5, #1
 8007d9a:	e7c6      	b.n	8007d2a <_printf_common+0x3e>
 8007d9c:	18e1      	adds	r1, r4, r3
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	2030      	movs	r0, #48	@ 0x30
 8007da2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007da6:	4422      	add	r2, r4
 8007da8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007dac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007db0:	3302      	adds	r3, #2
 8007db2:	e7c7      	b.n	8007d44 <_printf_common+0x58>
 8007db4:	2301      	movs	r3, #1
 8007db6:	4622      	mov	r2, r4
 8007db8:	4641      	mov	r1, r8
 8007dba:	4638      	mov	r0, r7
 8007dbc:	47c8      	blx	r9
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	d0e6      	beq.n	8007d90 <_printf_common+0xa4>
 8007dc2:	3601      	adds	r6, #1
 8007dc4:	e7d9      	b.n	8007d7a <_printf_common+0x8e>
	...

08007dc8 <_printf_i>:
 8007dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dcc:	7e0f      	ldrb	r7, [r1, #24]
 8007dce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007dd0:	2f78      	cmp	r7, #120	@ 0x78
 8007dd2:	4691      	mov	r9, r2
 8007dd4:	4680      	mov	r8, r0
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	469a      	mov	sl, r3
 8007dda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007dde:	d807      	bhi.n	8007df0 <_printf_i+0x28>
 8007de0:	2f62      	cmp	r7, #98	@ 0x62
 8007de2:	d80a      	bhi.n	8007dfa <_printf_i+0x32>
 8007de4:	2f00      	cmp	r7, #0
 8007de6:	f000 80d1 	beq.w	8007f8c <_printf_i+0x1c4>
 8007dea:	2f58      	cmp	r7, #88	@ 0x58
 8007dec:	f000 80b8 	beq.w	8007f60 <_printf_i+0x198>
 8007df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007df4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007df8:	e03a      	b.n	8007e70 <_printf_i+0xa8>
 8007dfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007dfe:	2b15      	cmp	r3, #21
 8007e00:	d8f6      	bhi.n	8007df0 <_printf_i+0x28>
 8007e02:	a101      	add	r1, pc, #4	@ (adr r1, 8007e08 <_printf_i+0x40>)
 8007e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e08:	08007e61 	.word	0x08007e61
 8007e0c:	08007e75 	.word	0x08007e75
 8007e10:	08007df1 	.word	0x08007df1
 8007e14:	08007df1 	.word	0x08007df1
 8007e18:	08007df1 	.word	0x08007df1
 8007e1c:	08007df1 	.word	0x08007df1
 8007e20:	08007e75 	.word	0x08007e75
 8007e24:	08007df1 	.word	0x08007df1
 8007e28:	08007df1 	.word	0x08007df1
 8007e2c:	08007df1 	.word	0x08007df1
 8007e30:	08007df1 	.word	0x08007df1
 8007e34:	08007f73 	.word	0x08007f73
 8007e38:	08007e9f 	.word	0x08007e9f
 8007e3c:	08007f2d 	.word	0x08007f2d
 8007e40:	08007df1 	.word	0x08007df1
 8007e44:	08007df1 	.word	0x08007df1
 8007e48:	08007f95 	.word	0x08007f95
 8007e4c:	08007df1 	.word	0x08007df1
 8007e50:	08007e9f 	.word	0x08007e9f
 8007e54:	08007df1 	.word	0x08007df1
 8007e58:	08007df1 	.word	0x08007df1
 8007e5c:	08007f35 	.word	0x08007f35
 8007e60:	6833      	ldr	r3, [r6, #0]
 8007e62:	1d1a      	adds	r2, r3, #4
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6032      	str	r2, [r6, #0]
 8007e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e70:	2301      	movs	r3, #1
 8007e72:	e09c      	b.n	8007fae <_printf_i+0x1e6>
 8007e74:	6833      	ldr	r3, [r6, #0]
 8007e76:	6820      	ldr	r0, [r4, #0]
 8007e78:	1d19      	adds	r1, r3, #4
 8007e7a:	6031      	str	r1, [r6, #0]
 8007e7c:	0606      	lsls	r6, r0, #24
 8007e7e:	d501      	bpl.n	8007e84 <_printf_i+0xbc>
 8007e80:	681d      	ldr	r5, [r3, #0]
 8007e82:	e003      	b.n	8007e8c <_printf_i+0xc4>
 8007e84:	0645      	lsls	r5, r0, #25
 8007e86:	d5fb      	bpl.n	8007e80 <_printf_i+0xb8>
 8007e88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e8c:	2d00      	cmp	r5, #0
 8007e8e:	da03      	bge.n	8007e98 <_printf_i+0xd0>
 8007e90:	232d      	movs	r3, #45	@ 0x2d
 8007e92:	426d      	negs	r5, r5
 8007e94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e98:	4858      	ldr	r0, [pc, #352]	@ (8007ffc <_printf_i+0x234>)
 8007e9a:	230a      	movs	r3, #10
 8007e9c:	e011      	b.n	8007ec2 <_printf_i+0xfa>
 8007e9e:	6821      	ldr	r1, [r4, #0]
 8007ea0:	6833      	ldr	r3, [r6, #0]
 8007ea2:	0608      	lsls	r0, r1, #24
 8007ea4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ea8:	d402      	bmi.n	8007eb0 <_printf_i+0xe8>
 8007eaa:	0649      	lsls	r1, r1, #25
 8007eac:	bf48      	it	mi
 8007eae:	b2ad      	uxthmi	r5, r5
 8007eb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007eb2:	4852      	ldr	r0, [pc, #328]	@ (8007ffc <_printf_i+0x234>)
 8007eb4:	6033      	str	r3, [r6, #0]
 8007eb6:	bf14      	ite	ne
 8007eb8:	230a      	movne	r3, #10
 8007eba:	2308      	moveq	r3, #8
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ec2:	6866      	ldr	r6, [r4, #4]
 8007ec4:	60a6      	str	r6, [r4, #8]
 8007ec6:	2e00      	cmp	r6, #0
 8007ec8:	db05      	blt.n	8007ed6 <_printf_i+0x10e>
 8007eca:	6821      	ldr	r1, [r4, #0]
 8007ecc:	432e      	orrs	r6, r5
 8007ece:	f021 0104 	bic.w	r1, r1, #4
 8007ed2:	6021      	str	r1, [r4, #0]
 8007ed4:	d04b      	beq.n	8007f6e <_printf_i+0x1a6>
 8007ed6:	4616      	mov	r6, r2
 8007ed8:	fbb5 f1f3 	udiv	r1, r5, r3
 8007edc:	fb03 5711 	mls	r7, r3, r1, r5
 8007ee0:	5dc7      	ldrb	r7, [r0, r7]
 8007ee2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ee6:	462f      	mov	r7, r5
 8007ee8:	42bb      	cmp	r3, r7
 8007eea:	460d      	mov	r5, r1
 8007eec:	d9f4      	bls.n	8007ed8 <_printf_i+0x110>
 8007eee:	2b08      	cmp	r3, #8
 8007ef0:	d10b      	bne.n	8007f0a <_printf_i+0x142>
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	07df      	lsls	r7, r3, #31
 8007ef6:	d508      	bpl.n	8007f0a <_printf_i+0x142>
 8007ef8:	6923      	ldr	r3, [r4, #16]
 8007efa:	6861      	ldr	r1, [r4, #4]
 8007efc:	4299      	cmp	r1, r3
 8007efe:	bfde      	ittt	le
 8007f00:	2330      	movle	r3, #48	@ 0x30
 8007f02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f0a:	1b92      	subs	r2, r2, r6
 8007f0c:	6122      	str	r2, [r4, #16]
 8007f0e:	f8cd a000 	str.w	sl, [sp]
 8007f12:	464b      	mov	r3, r9
 8007f14:	aa03      	add	r2, sp, #12
 8007f16:	4621      	mov	r1, r4
 8007f18:	4640      	mov	r0, r8
 8007f1a:	f7ff fee7 	bl	8007cec <_printf_common>
 8007f1e:	3001      	adds	r0, #1
 8007f20:	d14a      	bne.n	8007fb8 <_printf_i+0x1f0>
 8007f22:	f04f 30ff 	mov.w	r0, #4294967295
 8007f26:	b004      	add	sp, #16
 8007f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	f043 0320 	orr.w	r3, r3, #32
 8007f32:	6023      	str	r3, [r4, #0]
 8007f34:	4832      	ldr	r0, [pc, #200]	@ (8008000 <_printf_i+0x238>)
 8007f36:	2778      	movs	r7, #120	@ 0x78
 8007f38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	6831      	ldr	r1, [r6, #0]
 8007f40:	061f      	lsls	r7, r3, #24
 8007f42:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f46:	d402      	bmi.n	8007f4e <_printf_i+0x186>
 8007f48:	065f      	lsls	r7, r3, #25
 8007f4a:	bf48      	it	mi
 8007f4c:	b2ad      	uxthmi	r5, r5
 8007f4e:	6031      	str	r1, [r6, #0]
 8007f50:	07d9      	lsls	r1, r3, #31
 8007f52:	bf44      	itt	mi
 8007f54:	f043 0320 	orrmi.w	r3, r3, #32
 8007f58:	6023      	strmi	r3, [r4, #0]
 8007f5a:	b11d      	cbz	r5, 8007f64 <_printf_i+0x19c>
 8007f5c:	2310      	movs	r3, #16
 8007f5e:	e7ad      	b.n	8007ebc <_printf_i+0xf4>
 8007f60:	4826      	ldr	r0, [pc, #152]	@ (8007ffc <_printf_i+0x234>)
 8007f62:	e7e9      	b.n	8007f38 <_printf_i+0x170>
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	f023 0320 	bic.w	r3, r3, #32
 8007f6a:	6023      	str	r3, [r4, #0]
 8007f6c:	e7f6      	b.n	8007f5c <_printf_i+0x194>
 8007f6e:	4616      	mov	r6, r2
 8007f70:	e7bd      	b.n	8007eee <_printf_i+0x126>
 8007f72:	6833      	ldr	r3, [r6, #0]
 8007f74:	6825      	ldr	r5, [r4, #0]
 8007f76:	6961      	ldr	r1, [r4, #20]
 8007f78:	1d18      	adds	r0, r3, #4
 8007f7a:	6030      	str	r0, [r6, #0]
 8007f7c:	062e      	lsls	r6, r5, #24
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	d501      	bpl.n	8007f86 <_printf_i+0x1be>
 8007f82:	6019      	str	r1, [r3, #0]
 8007f84:	e002      	b.n	8007f8c <_printf_i+0x1c4>
 8007f86:	0668      	lsls	r0, r5, #25
 8007f88:	d5fb      	bpl.n	8007f82 <_printf_i+0x1ba>
 8007f8a:	8019      	strh	r1, [r3, #0]
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	6123      	str	r3, [r4, #16]
 8007f90:	4616      	mov	r6, r2
 8007f92:	e7bc      	b.n	8007f0e <_printf_i+0x146>
 8007f94:	6833      	ldr	r3, [r6, #0]
 8007f96:	1d1a      	adds	r2, r3, #4
 8007f98:	6032      	str	r2, [r6, #0]
 8007f9a:	681e      	ldr	r6, [r3, #0]
 8007f9c:	6862      	ldr	r2, [r4, #4]
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f7f8 f915 	bl	80001d0 <memchr>
 8007fa6:	b108      	cbz	r0, 8007fac <_printf_i+0x1e4>
 8007fa8:	1b80      	subs	r0, r0, r6
 8007faa:	6060      	str	r0, [r4, #4]
 8007fac:	6863      	ldr	r3, [r4, #4]
 8007fae:	6123      	str	r3, [r4, #16]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fb6:	e7aa      	b.n	8007f0e <_printf_i+0x146>
 8007fb8:	6923      	ldr	r3, [r4, #16]
 8007fba:	4632      	mov	r2, r6
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	4640      	mov	r0, r8
 8007fc0:	47d0      	blx	sl
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	d0ad      	beq.n	8007f22 <_printf_i+0x15a>
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	079b      	lsls	r3, r3, #30
 8007fca:	d413      	bmi.n	8007ff4 <_printf_i+0x22c>
 8007fcc:	68e0      	ldr	r0, [r4, #12]
 8007fce:	9b03      	ldr	r3, [sp, #12]
 8007fd0:	4298      	cmp	r0, r3
 8007fd2:	bfb8      	it	lt
 8007fd4:	4618      	movlt	r0, r3
 8007fd6:	e7a6      	b.n	8007f26 <_printf_i+0x15e>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	4632      	mov	r2, r6
 8007fdc:	4649      	mov	r1, r9
 8007fde:	4640      	mov	r0, r8
 8007fe0:	47d0      	blx	sl
 8007fe2:	3001      	adds	r0, #1
 8007fe4:	d09d      	beq.n	8007f22 <_printf_i+0x15a>
 8007fe6:	3501      	adds	r5, #1
 8007fe8:	68e3      	ldr	r3, [r4, #12]
 8007fea:	9903      	ldr	r1, [sp, #12]
 8007fec:	1a5b      	subs	r3, r3, r1
 8007fee:	42ab      	cmp	r3, r5
 8007ff0:	dcf2      	bgt.n	8007fd8 <_printf_i+0x210>
 8007ff2:	e7eb      	b.n	8007fcc <_printf_i+0x204>
 8007ff4:	2500      	movs	r5, #0
 8007ff6:	f104 0619 	add.w	r6, r4, #25
 8007ffa:	e7f5      	b.n	8007fe8 <_printf_i+0x220>
 8007ffc:	08008acd 	.word	0x08008acd
 8008000:	08008ade 	.word	0x08008ade

08008004 <__sflush_r>:
 8008004:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800c:	0716      	lsls	r6, r2, #28
 800800e:	4605      	mov	r5, r0
 8008010:	460c      	mov	r4, r1
 8008012:	d454      	bmi.n	80080be <__sflush_r+0xba>
 8008014:	684b      	ldr	r3, [r1, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	dc02      	bgt.n	8008020 <__sflush_r+0x1c>
 800801a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800801c:	2b00      	cmp	r3, #0
 800801e:	dd48      	ble.n	80080b2 <__sflush_r+0xae>
 8008020:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008022:	2e00      	cmp	r6, #0
 8008024:	d045      	beq.n	80080b2 <__sflush_r+0xae>
 8008026:	2300      	movs	r3, #0
 8008028:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800802c:	682f      	ldr	r7, [r5, #0]
 800802e:	6a21      	ldr	r1, [r4, #32]
 8008030:	602b      	str	r3, [r5, #0]
 8008032:	d030      	beq.n	8008096 <__sflush_r+0x92>
 8008034:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008036:	89a3      	ldrh	r3, [r4, #12]
 8008038:	0759      	lsls	r1, r3, #29
 800803a:	d505      	bpl.n	8008048 <__sflush_r+0x44>
 800803c:	6863      	ldr	r3, [r4, #4]
 800803e:	1ad2      	subs	r2, r2, r3
 8008040:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008042:	b10b      	cbz	r3, 8008048 <__sflush_r+0x44>
 8008044:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008046:	1ad2      	subs	r2, r2, r3
 8008048:	2300      	movs	r3, #0
 800804a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800804c:	6a21      	ldr	r1, [r4, #32]
 800804e:	4628      	mov	r0, r5
 8008050:	47b0      	blx	r6
 8008052:	1c43      	adds	r3, r0, #1
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	d106      	bne.n	8008066 <__sflush_r+0x62>
 8008058:	6829      	ldr	r1, [r5, #0]
 800805a:	291d      	cmp	r1, #29
 800805c:	d82b      	bhi.n	80080b6 <__sflush_r+0xb2>
 800805e:	4a2a      	ldr	r2, [pc, #168]	@ (8008108 <__sflush_r+0x104>)
 8008060:	40ca      	lsrs	r2, r1
 8008062:	07d6      	lsls	r6, r2, #31
 8008064:	d527      	bpl.n	80080b6 <__sflush_r+0xb2>
 8008066:	2200      	movs	r2, #0
 8008068:	6062      	str	r2, [r4, #4]
 800806a:	04d9      	lsls	r1, r3, #19
 800806c:	6922      	ldr	r2, [r4, #16]
 800806e:	6022      	str	r2, [r4, #0]
 8008070:	d504      	bpl.n	800807c <__sflush_r+0x78>
 8008072:	1c42      	adds	r2, r0, #1
 8008074:	d101      	bne.n	800807a <__sflush_r+0x76>
 8008076:	682b      	ldr	r3, [r5, #0]
 8008078:	b903      	cbnz	r3, 800807c <__sflush_r+0x78>
 800807a:	6560      	str	r0, [r4, #84]	@ 0x54
 800807c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800807e:	602f      	str	r7, [r5, #0]
 8008080:	b1b9      	cbz	r1, 80080b2 <__sflush_r+0xae>
 8008082:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008086:	4299      	cmp	r1, r3
 8008088:	d002      	beq.n	8008090 <__sflush_r+0x8c>
 800808a:	4628      	mov	r0, r5
 800808c:	f7ff fbf4 	bl	8007878 <_free_r>
 8008090:	2300      	movs	r3, #0
 8008092:	6363      	str	r3, [r4, #52]	@ 0x34
 8008094:	e00d      	b.n	80080b2 <__sflush_r+0xae>
 8008096:	2301      	movs	r3, #1
 8008098:	4628      	mov	r0, r5
 800809a:	47b0      	blx	r6
 800809c:	4602      	mov	r2, r0
 800809e:	1c50      	adds	r0, r2, #1
 80080a0:	d1c9      	bne.n	8008036 <__sflush_r+0x32>
 80080a2:	682b      	ldr	r3, [r5, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d0c6      	beq.n	8008036 <__sflush_r+0x32>
 80080a8:	2b1d      	cmp	r3, #29
 80080aa:	d001      	beq.n	80080b0 <__sflush_r+0xac>
 80080ac:	2b16      	cmp	r3, #22
 80080ae:	d11e      	bne.n	80080ee <__sflush_r+0xea>
 80080b0:	602f      	str	r7, [r5, #0]
 80080b2:	2000      	movs	r0, #0
 80080b4:	e022      	b.n	80080fc <__sflush_r+0xf8>
 80080b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ba:	b21b      	sxth	r3, r3
 80080bc:	e01b      	b.n	80080f6 <__sflush_r+0xf2>
 80080be:	690f      	ldr	r7, [r1, #16]
 80080c0:	2f00      	cmp	r7, #0
 80080c2:	d0f6      	beq.n	80080b2 <__sflush_r+0xae>
 80080c4:	0793      	lsls	r3, r2, #30
 80080c6:	680e      	ldr	r6, [r1, #0]
 80080c8:	bf08      	it	eq
 80080ca:	694b      	ldreq	r3, [r1, #20]
 80080cc:	600f      	str	r7, [r1, #0]
 80080ce:	bf18      	it	ne
 80080d0:	2300      	movne	r3, #0
 80080d2:	eba6 0807 	sub.w	r8, r6, r7
 80080d6:	608b      	str	r3, [r1, #8]
 80080d8:	f1b8 0f00 	cmp.w	r8, #0
 80080dc:	dde9      	ble.n	80080b2 <__sflush_r+0xae>
 80080de:	6a21      	ldr	r1, [r4, #32]
 80080e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80080e2:	4643      	mov	r3, r8
 80080e4:	463a      	mov	r2, r7
 80080e6:	4628      	mov	r0, r5
 80080e8:	47b0      	blx	r6
 80080ea:	2800      	cmp	r0, #0
 80080ec:	dc08      	bgt.n	8008100 <__sflush_r+0xfc>
 80080ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080f6:	81a3      	strh	r3, [r4, #12]
 80080f8:	f04f 30ff 	mov.w	r0, #4294967295
 80080fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008100:	4407      	add	r7, r0
 8008102:	eba8 0800 	sub.w	r8, r8, r0
 8008106:	e7e7      	b.n	80080d8 <__sflush_r+0xd4>
 8008108:	20400001 	.word	0x20400001

0800810c <_fflush_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	690b      	ldr	r3, [r1, #16]
 8008110:	4605      	mov	r5, r0
 8008112:	460c      	mov	r4, r1
 8008114:	b913      	cbnz	r3, 800811c <_fflush_r+0x10>
 8008116:	2500      	movs	r5, #0
 8008118:	4628      	mov	r0, r5
 800811a:	bd38      	pop	{r3, r4, r5, pc}
 800811c:	b118      	cbz	r0, 8008126 <_fflush_r+0x1a>
 800811e:	6a03      	ldr	r3, [r0, #32]
 8008120:	b90b      	cbnz	r3, 8008126 <_fflush_r+0x1a>
 8008122:	f7ff f9af 	bl	8007484 <__sinit>
 8008126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0f3      	beq.n	8008116 <_fflush_r+0xa>
 800812e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008130:	07d0      	lsls	r0, r2, #31
 8008132:	d404      	bmi.n	800813e <_fflush_r+0x32>
 8008134:	0599      	lsls	r1, r3, #22
 8008136:	d402      	bmi.n	800813e <_fflush_r+0x32>
 8008138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800813a:	f7ff fb9a 	bl	8007872 <__retarget_lock_acquire_recursive>
 800813e:	4628      	mov	r0, r5
 8008140:	4621      	mov	r1, r4
 8008142:	f7ff ff5f 	bl	8008004 <__sflush_r>
 8008146:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008148:	07da      	lsls	r2, r3, #31
 800814a:	4605      	mov	r5, r0
 800814c:	d4e4      	bmi.n	8008118 <_fflush_r+0xc>
 800814e:	89a3      	ldrh	r3, [r4, #12]
 8008150:	059b      	lsls	r3, r3, #22
 8008152:	d4e1      	bmi.n	8008118 <_fflush_r+0xc>
 8008154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008156:	f7ff fb8d 	bl	8007874 <__retarget_lock_release_recursive>
 800815a:	e7dd      	b.n	8008118 <_fflush_r+0xc>

0800815c <__swhatbuf_r>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	460c      	mov	r4, r1
 8008160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008164:	2900      	cmp	r1, #0
 8008166:	b096      	sub	sp, #88	@ 0x58
 8008168:	4615      	mov	r5, r2
 800816a:	461e      	mov	r6, r3
 800816c:	da0d      	bge.n	800818a <__swhatbuf_r+0x2e>
 800816e:	89a3      	ldrh	r3, [r4, #12]
 8008170:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008174:	f04f 0100 	mov.w	r1, #0
 8008178:	bf14      	ite	ne
 800817a:	2340      	movne	r3, #64	@ 0x40
 800817c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008180:	2000      	movs	r0, #0
 8008182:	6031      	str	r1, [r6, #0]
 8008184:	602b      	str	r3, [r5, #0]
 8008186:	b016      	add	sp, #88	@ 0x58
 8008188:	bd70      	pop	{r4, r5, r6, pc}
 800818a:	466a      	mov	r2, sp
 800818c:	f000 f848 	bl	8008220 <_fstat_r>
 8008190:	2800      	cmp	r0, #0
 8008192:	dbec      	blt.n	800816e <__swhatbuf_r+0x12>
 8008194:	9901      	ldr	r1, [sp, #4]
 8008196:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800819a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800819e:	4259      	negs	r1, r3
 80081a0:	4159      	adcs	r1, r3
 80081a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081a6:	e7eb      	b.n	8008180 <__swhatbuf_r+0x24>

080081a8 <__smakebuf_r>:
 80081a8:	898b      	ldrh	r3, [r1, #12]
 80081aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ac:	079d      	lsls	r5, r3, #30
 80081ae:	4606      	mov	r6, r0
 80081b0:	460c      	mov	r4, r1
 80081b2:	d507      	bpl.n	80081c4 <__smakebuf_r+0x1c>
 80081b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	6123      	str	r3, [r4, #16]
 80081bc:	2301      	movs	r3, #1
 80081be:	6163      	str	r3, [r4, #20]
 80081c0:	b003      	add	sp, #12
 80081c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081c4:	ab01      	add	r3, sp, #4
 80081c6:	466a      	mov	r2, sp
 80081c8:	f7ff ffc8 	bl	800815c <__swhatbuf_r>
 80081cc:	9f00      	ldr	r7, [sp, #0]
 80081ce:	4605      	mov	r5, r0
 80081d0:	4639      	mov	r1, r7
 80081d2:	4630      	mov	r0, r6
 80081d4:	f7ff fbbc 	bl	8007950 <_malloc_r>
 80081d8:	b948      	cbnz	r0, 80081ee <__smakebuf_r+0x46>
 80081da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081de:	059a      	lsls	r2, r3, #22
 80081e0:	d4ee      	bmi.n	80081c0 <__smakebuf_r+0x18>
 80081e2:	f023 0303 	bic.w	r3, r3, #3
 80081e6:	f043 0302 	orr.w	r3, r3, #2
 80081ea:	81a3      	strh	r3, [r4, #12]
 80081ec:	e7e2      	b.n	80081b4 <__smakebuf_r+0xc>
 80081ee:	89a3      	ldrh	r3, [r4, #12]
 80081f0:	6020      	str	r0, [r4, #0]
 80081f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081f6:	81a3      	strh	r3, [r4, #12]
 80081f8:	9b01      	ldr	r3, [sp, #4]
 80081fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80081fe:	b15b      	cbz	r3, 8008218 <__smakebuf_r+0x70>
 8008200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008204:	4630      	mov	r0, r6
 8008206:	f000 f81d 	bl	8008244 <_isatty_r>
 800820a:	b128      	cbz	r0, 8008218 <__smakebuf_r+0x70>
 800820c:	89a3      	ldrh	r3, [r4, #12]
 800820e:	f023 0303 	bic.w	r3, r3, #3
 8008212:	f043 0301 	orr.w	r3, r3, #1
 8008216:	81a3      	strh	r3, [r4, #12]
 8008218:	89a3      	ldrh	r3, [r4, #12]
 800821a:	431d      	orrs	r5, r3
 800821c:	81a5      	strh	r5, [r4, #12]
 800821e:	e7cf      	b.n	80081c0 <__smakebuf_r+0x18>

08008220 <_fstat_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	4d07      	ldr	r5, [pc, #28]	@ (8008240 <_fstat_r+0x20>)
 8008224:	2300      	movs	r3, #0
 8008226:	4604      	mov	r4, r0
 8008228:	4608      	mov	r0, r1
 800822a:	4611      	mov	r1, r2
 800822c:	602b      	str	r3, [r5, #0]
 800822e:	f7f9 fe02 	bl	8001e36 <_fstat>
 8008232:	1c43      	adds	r3, r0, #1
 8008234:	d102      	bne.n	800823c <_fstat_r+0x1c>
 8008236:	682b      	ldr	r3, [r5, #0]
 8008238:	b103      	cbz	r3, 800823c <_fstat_r+0x1c>
 800823a:	6023      	str	r3, [r4, #0]
 800823c:	bd38      	pop	{r3, r4, r5, pc}
 800823e:	bf00      	nop
 8008240:	2000038c 	.word	0x2000038c

08008244 <_isatty_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4d06      	ldr	r5, [pc, #24]	@ (8008260 <_isatty_r+0x1c>)
 8008248:	2300      	movs	r3, #0
 800824a:	4604      	mov	r4, r0
 800824c:	4608      	mov	r0, r1
 800824e:	602b      	str	r3, [r5, #0]
 8008250:	f7f9 fe01 	bl	8001e56 <_isatty>
 8008254:	1c43      	adds	r3, r0, #1
 8008256:	d102      	bne.n	800825e <_isatty_r+0x1a>
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	b103      	cbz	r3, 800825e <_isatty_r+0x1a>
 800825c:	6023      	str	r3, [r4, #0]
 800825e:	bd38      	pop	{r3, r4, r5, pc}
 8008260:	2000038c 	.word	0x2000038c

08008264 <_sbrk_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	4d06      	ldr	r5, [pc, #24]	@ (8008280 <_sbrk_r+0x1c>)
 8008268:	2300      	movs	r3, #0
 800826a:	4604      	mov	r4, r0
 800826c:	4608      	mov	r0, r1
 800826e:	602b      	str	r3, [r5, #0]
 8008270:	f7f9 fe0a 	bl	8001e88 <_sbrk>
 8008274:	1c43      	adds	r3, r0, #1
 8008276:	d102      	bne.n	800827e <_sbrk_r+0x1a>
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	b103      	cbz	r3, 800827e <_sbrk_r+0x1a>
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	2000038c 	.word	0x2000038c

08008284 <atan2>:
 8008284:	f000 b904 	b.w	8008490 <__ieee754_atan2>

08008288 <sqrt>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	ed2d 8b02 	vpush	{d8}
 800828e:	ec55 4b10 	vmov	r4, r5, d0
 8008292:	f000 f825 	bl	80082e0 <__ieee754_sqrt>
 8008296:	4622      	mov	r2, r4
 8008298:	462b      	mov	r3, r5
 800829a:	4620      	mov	r0, r4
 800829c:	4629      	mov	r1, r5
 800829e:	eeb0 8a40 	vmov.f32	s16, s0
 80082a2:	eef0 8a60 	vmov.f32	s17, s1
 80082a6:	f7f8 fc39 	bl	8000b1c <__aeabi_dcmpun>
 80082aa:	b990      	cbnz	r0, 80082d2 <sqrt+0x4a>
 80082ac:	2200      	movs	r2, #0
 80082ae:	2300      	movs	r3, #0
 80082b0:	4620      	mov	r0, r4
 80082b2:	4629      	mov	r1, r5
 80082b4:	f7f8 fc0a 	bl	8000acc <__aeabi_dcmplt>
 80082b8:	b158      	cbz	r0, 80082d2 <sqrt+0x4a>
 80082ba:	f7ff faaf 	bl	800781c <__errno>
 80082be:	2321      	movs	r3, #33	@ 0x21
 80082c0:	6003      	str	r3, [r0, #0]
 80082c2:	2200      	movs	r2, #0
 80082c4:	2300      	movs	r3, #0
 80082c6:	4610      	mov	r0, r2
 80082c8:	4619      	mov	r1, r3
 80082ca:	f7f8 fab7 	bl	800083c <__aeabi_ddiv>
 80082ce:	ec41 0b18 	vmov	d8, r0, r1
 80082d2:	eeb0 0a48 	vmov.f32	s0, s16
 80082d6:	eef0 0a68 	vmov.f32	s1, s17
 80082da:	ecbd 8b02 	vpop	{d8}
 80082de:	bd38      	pop	{r3, r4, r5, pc}

080082e0 <__ieee754_sqrt>:
 80082e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e4:	4a66      	ldr	r2, [pc, #408]	@ (8008480 <__ieee754_sqrt+0x1a0>)
 80082e6:	ec55 4b10 	vmov	r4, r5, d0
 80082ea:	43aa      	bics	r2, r5
 80082ec:	462b      	mov	r3, r5
 80082ee:	4621      	mov	r1, r4
 80082f0:	d110      	bne.n	8008314 <__ieee754_sqrt+0x34>
 80082f2:	4622      	mov	r2, r4
 80082f4:	4620      	mov	r0, r4
 80082f6:	4629      	mov	r1, r5
 80082f8:	f7f8 f976 	bl	80005e8 <__aeabi_dmul>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4620      	mov	r0, r4
 8008302:	4629      	mov	r1, r5
 8008304:	f7f7 ffba 	bl	800027c <__adddf3>
 8008308:	4604      	mov	r4, r0
 800830a:	460d      	mov	r5, r1
 800830c:	ec45 4b10 	vmov	d0, r4, r5
 8008310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008314:	2d00      	cmp	r5, #0
 8008316:	dc0e      	bgt.n	8008336 <__ieee754_sqrt+0x56>
 8008318:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800831c:	4322      	orrs	r2, r4
 800831e:	d0f5      	beq.n	800830c <__ieee754_sqrt+0x2c>
 8008320:	b19d      	cbz	r5, 800834a <__ieee754_sqrt+0x6a>
 8008322:	4622      	mov	r2, r4
 8008324:	4620      	mov	r0, r4
 8008326:	4629      	mov	r1, r5
 8008328:	f7f7 ffa6 	bl	8000278 <__aeabi_dsub>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	f7f8 fa84 	bl	800083c <__aeabi_ddiv>
 8008334:	e7e8      	b.n	8008308 <__ieee754_sqrt+0x28>
 8008336:	152a      	asrs	r2, r5, #20
 8008338:	d115      	bne.n	8008366 <__ieee754_sqrt+0x86>
 800833a:	2000      	movs	r0, #0
 800833c:	e009      	b.n	8008352 <__ieee754_sqrt+0x72>
 800833e:	0acb      	lsrs	r3, r1, #11
 8008340:	3a15      	subs	r2, #21
 8008342:	0549      	lsls	r1, r1, #21
 8008344:	2b00      	cmp	r3, #0
 8008346:	d0fa      	beq.n	800833e <__ieee754_sqrt+0x5e>
 8008348:	e7f7      	b.n	800833a <__ieee754_sqrt+0x5a>
 800834a:	462a      	mov	r2, r5
 800834c:	e7fa      	b.n	8008344 <__ieee754_sqrt+0x64>
 800834e:	005b      	lsls	r3, r3, #1
 8008350:	3001      	adds	r0, #1
 8008352:	02dc      	lsls	r4, r3, #11
 8008354:	d5fb      	bpl.n	800834e <__ieee754_sqrt+0x6e>
 8008356:	1e44      	subs	r4, r0, #1
 8008358:	1b12      	subs	r2, r2, r4
 800835a:	f1c0 0420 	rsb	r4, r0, #32
 800835e:	fa21 f404 	lsr.w	r4, r1, r4
 8008362:	4323      	orrs	r3, r4
 8008364:	4081      	lsls	r1, r0
 8008366:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800836a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800836e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008372:	07d2      	lsls	r2, r2, #31
 8008374:	bf5c      	itt	pl
 8008376:	005b      	lslpl	r3, r3, #1
 8008378:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800837c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008380:	bf58      	it	pl
 8008382:	0049      	lslpl	r1, r1, #1
 8008384:	2600      	movs	r6, #0
 8008386:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800838a:	107f      	asrs	r7, r7, #1
 800838c:	0049      	lsls	r1, r1, #1
 800838e:	2016      	movs	r0, #22
 8008390:	4632      	mov	r2, r6
 8008392:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008396:	1915      	adds	r5, r2, r4
 8008398:	429d      	cmp	r5, r3
 800839a:	bfde      	ittt	le
 800839c:	192a      	addle	r2, r5, r4
 800839e:	1b5b      	suble	r3, r3, r5
 80083a0:	1936      	addle	r6, r6, r4
 80083a2:	0fcd      	lsrs	r5, r1, #31
 80083a4:	3801      	subs	r0, #1
 80083a6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80083aa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80083ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80083b2:	d1f0      	bne.n	8008396 <__ieee754_sqrt+0xb6>
 80083b4:	4605      	mov	r5, r0
 80083b6:	2420      	movs	r4, #32
 80083b8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80083bc:	4293      	cmp	r3, r2
 80083be:	eb0c 0e00 	add.w	lr, ip, r0
 80083c2:	dc02      	bgt.n	80083ca <__ieee754_sqrt+0xea>
 80083c4:	d113      	bne.n	80083ee <__ieee754_sqrt+0x10e>
 80083c6:	458e      	cmp	lr, r1
 80083c8:	d811      	bhi.n	80083ee <__ieee754_sqrt+0x10e>
 80083ca:	f1be 0f00 	cmp.w	lr, #0
 80083ce:	eb0e 000c 	add.w	r0, lr, ip
 80083d2:	da3f      	bge.n	8008454 <__ieee754_sqrt+0x174>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	db3d      	blt.n	8008454 <__ieee754_sqrt+0x174>
 80083d8:	f102 0801 	add.w	r8, r2, #1
 80083dc:	1a9b      	subs	r3, r3, r2
 80083de:	458e      	cmp	lr, r1
 80083e0:	bf88      	it	hi
 80083e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80083e6:	eba1 010e 	sub.w	r1, r1, lr
 80083ea:	4465      	add	r5, ip
 80083ec:	4642      	mov	r2, r8
 80083ee:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80083f2:	3c01      	subs	r4, #1
 80083f4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80083f8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80083fc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008400:	d1dc      	bne.n	80083bc <__ieee754_sqrt+0xdc>
 8008402:	4319      	orrs	r1, r3
 8008404:	d01b      	beq.n	800843e <__ieee754_sqrt+0x15e>
 8008406:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8008484 <__ieee754_sqrt+0x1a4>
 800840a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8008488 <__ieee754_sqrt+0x1a8>
 800840e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008412:	e9db 2300 	ldrd	r2, r3, [fp]
 8008416:	f7f7 ff2f 	bl	8000278 <__aeabi_dsub>
 800841a:	e9da 8900 	ldrd	r8, r9, [sl]
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4640      	mov	r0, r8
 8008424:	4649      	mov	r1, r9
 8008426:	f7f8 fb5b 	bl	8000ae0 <__aeabi_dcmple>
 800842a:	b140      	cbz	r0, 800843e <__ieee754_sqrt+0x15e>
 800842c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008430:	e9da 0100 	ldrd	r0, r1, [sl]
 8008434:	e9db 2300 	ldrd	r2, r3, [fp]
 8008438:	d10e      	bne.n	8008458 <__ieee754_sqrt+0x178>
 800843a:	3601      	adds	r6, #1
 800843c:	4625      	mov	r5, r4
 800843e:	1073      	asrs	r3, r6, #1
 8008440:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8008444:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8008448:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800844c:	086b      	lsrs	r3, r5, #1
 800844e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8008452:	e759      	b.n	8008308 <__ieee754_sqrt+0x28>
 8008454:	4690      	mov	r8, r2
 8008456:	e7c1      	b.n	80083dc <__ieee754_sqrt+0xfc>
 8008458:	f7f7 ff10 	bl	800027c <__adddf3>
 800845c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4640      	mov	r0, r8
 8008466:	4649      	mov	r1, r9
 8008468:	f7f8 fb30 	bl	8000acc <__aeabi_dcmplt>
 800846c:	b120      	cbz	r0, 8008478 <__ieee754_sqrt+0x198>
 800846e:	1cab      	adds	r3, r5, #2
 8008470:	bf08      	it	eq
 8008472:	3601      	addeq	r6, #1
 8008474:	3502      	adds	r5, #2
 8008476:	e7e2      	b.n	800843e <__ieee754_sqrt+0x15e>
 8008478:	1c6b      	adds	r3, r5, #1
 800847a:	f023 0501 	bic.w	r5, r3, #1
 800847e:	e7de      	b.n	800843e <__ieee754_sqrt+0x15e>
 8008480:	7ff00000 	.word	0x7ff00000
 8008484:	08008af8 	.word	0x08008af8
 8008488:	08008af0 	.word	0x08008af0
 800848c:	00000000 	.word	0x00000000

08008490 <__ieee754_atan2>:
 8008490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008494:	ec57 6b11 	vmov	r6, r7, d1
 8008498:	4273      	negs	r3, r6
 800849a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8008618 <__ieee754_atan2+0x188>
 800849e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80084a2:	4333      	orrs	r3, r6
 80084a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80084a8:	4543      	cmp	r3, r8
 80084aa:	ec51 0b10 	vmov	r0, r1, d0
 80084ae:	4635      	mov	r5, r6
 80084b0:	d809      	bhi.n	80084c6 <__ieee754_atan2+0x36>
 80084b2:	4244      	negs	r4, r0
 80084b4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80084b8:	4304      	orrs	r4, r0
 80084ba:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80084be:	4544      	cmp	r4, r8
 80084c0:	468e      	mov	lr, r1
 80084c2:	4681      	mov	r9, r0
 80084c4:	d907      	bls.n	80084d6 <__ieee754_atan2+0x46>
 80084c6:	4632      	mov	r2, r6
 80084c8:	463b      	mov	r3, r7
 80084ca:	f7f7 fed7 	bl	800027c <__adddf3>
 80084ce:	ec41 0b10 	vmov	d0, r0, r1
 80084d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084d6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80084da:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80084de:	4334      	orrs	r4, r6
 80084e0:	d103      	bne.n	80084ea <__ieee754_atan2+0x5a>
 80084e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084e6:	f000 b89b 	b.w	8008620 <atan>
 80084ea:	17bc      	asrs	r4, r7, #30
 80084ec:	f004 0402 	and.w	r4, r4, #2
 80084f0:	ea53 0909 	orrs.w	r9, r3, r9
 80084f4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80084f8:	d107      	bne.n	800850a <__ieee754_atan2+0x7a>
 80084fa:	2c02      	cmp	r4, #2
 80084fc:	d05f      	beq.n	80085be <__ieee754_atan2+0x12e>
 80084fe:	2c03      	cmp	r4, #3
 8008500:	d1e5      	bne.n	80084ce <__ieee754_atan2+0x3e>
 8008502:	a143      	add	r1, pc, #268	@ (adr r1, 8008610 <__ieee754_atan2+0x180>)
 8008504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008508:	e7e1      	b.n	80084ce <__ieee754_atan2+0x3e>
 800850a:	4315      	orrs	r5, r2
 800850c:	d106      	bne.n	800851c <__ieee754_atan2+0x8c>
 800850e:	f1be 0f00 	cmp.w	lr, #0
 8008512:	db5f      	blt.n	80085d4 <__ieee754_atan2+0x144>
 8008514:	a136      	add	r1, pc, #216	@ (adr r1, 80085f0 <__ieee754_atan2+0x160>)
 8008516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800851a:	e7d8      	b.n	80084ce <__ieee754_atan2+0x3e>
 800851c:	4542      	cmp	r2, r8
 800851e:	d10f      	bne.n	8008540 <__ieee754_atan2+0xb0>
 8008520:	4293      	cmp	r3, r2
 8008522:	f104 34ff 	add.w	r4, r4, #4294967295
 8008526:	d107      	bne.n	8008538 <__ieee754_atan2+0xa8>
 8008528:	2c02      	cmp	r4, #2
 800852a:	d84c      	bhi.n	80085c6 <__ieee754_atan2+0x136>
 800852c:	4b36      	ldr	r3, [pc, #216]	@ (8008608 <__ieee754_atan2+0x178>)
 800852e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008532:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008536:	e7ca      	b.n	80084ce <__ieee754_atan2+0x3e>
 8008538:	2c02      	cmp	r4, #2
 800853a:	d848      	bhi.n	80085ce <__ieee754_atan2+0x13e>
 800853c:	4b33      	ldr	r3, [pc, #204]	@ (800860c <__ieee754_atan2+0x17c>)
 800853e:	e7f6      	b.n	800852e <__ieee754_atan2+0x9e>
 8008540:	4543      	cmp	r3, r8
 8008542:	d0e4      	beq.n	800850e <__ieee754_atan2+0x7e>
 8008544:	1a9b      	subs	r3, r3, r2
 8008546:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800854a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800854e:	da1e      	bge.n	800858e <__ieee754_atan2+0xfe>
 8008550:	2f00      	cmp	r7, #0
 8008552:	da01      	bge.n	8008558 <__ieee754_atan2+0xc8>
 8008554:	323c      	adds	r2, #60	@ 0x3c
 8008556:	db1e      	blt.n	8008596 <__ieee754_atan2+0x106>
 8008558:	4632      	mov	r2, r6
 800855a:	463b      	mov	r3, r7
 800855c:	f7f8 f96e 	bl	800083c <__aeabi_ddiv>
 8008560:	ec41 0b10 	vmov	d0, r0, r1
 8008564:	f000 f9f4 	bl	8008950 <fabs>
 8008568:	f000 f85a 	bl	8008620 <atan>
 800856c:	ec51 0b10 	vmov	r0, r1, d0
 8008570:	2c01      	cmp	r4, #1
 8008572:	d013      	beq.n	800859c <__ieee754_atan2+0x10c>
 8008574:	2c02      	cmp	r4, #2
 8008576:	d015      	beq.n	80085a4 <__ieee754_atan2+0x114>
 8008578:	2c00      	cmp	r4, #0
 800857a:	d0a8      	beq.n	80084ce <__ieee754_atan2+0x3e>
 800857c:	a318      	add	r3, pc, #96	@ (adr r3, 80085e0 <__ieee754_atan2+0x150>)
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	f7f7 fe79 	bl	8000278 <__aeabi_dsub>
 8008586:	a318      	add	r3, pc, #96	@ (adr r3, 80085e8 <__ieee754_atan2+0x158>)
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	e014      	b.n	80085b8 <__ieee754_atan2+0x128>
 800858e:	a118      	add	r1, pc, #96	@ (adr r1, 80085f0 <__ieee754_atan2+0x160>)
 8008590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008594:	e7ec      	b.n	8008570 <__ieee754_atan2+0xe0>
 8008596:	2000      	movs	r0, #0
 8008598:	2100      	movs	r1, #0
 800859a:	e7e9      	b.n	8008570 <__ieee754_atan2+0xe0>
 800859c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80085a0:	4619      	mov	r1, r3
 80085a2:	e794      	b.n	80084ce <__ieee754_atan2+0x3e>
 80085a4:	a30e      	add	r3, pc, #56	@ (adr r3, 80085e0 <__ieee754_atan2+0x150>)
 80085a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085aa:	f7f7 fe65 	bl	8000278 <__aeabi_dsub>
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	a10d      	add	r1, pc, #52	@ (adr r1, 80085e8 <__ieee754_atan2+0x158>)
 80085b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085b8:	f7f7 fe5e 	bl	8000278 <__aeabi_dsub>
 80085bc:	e787      	b.n	80084ce <__ieee754_atan2+0x3e>
 80085be:	a10a      	add	r1, pc, #40	@ (adr r1, 80085e8 <__ieee754_atan2+0x158>)
 80085c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085c4:	e783      	b.n	80084ce <__ieee754_atan2+0x3e>
 80085c6:	a10c      	add	r1, pc, #48	@ (adr r1, 80085f8 <__ieee754_atan2+0x168>)
 80085c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085cc:	e77f      	b.n	80084ce <__ieee754_atan2+0x3e>
 80085ce:	2000      	movs	r0, #0
 80085d0:	2100      	movs	r1, #0
 80085d2:	e77c      	b.n	80084ce <__ieee754_atan2+0x3e>
 80085d4:	a10a      	add	r1, pc, #40	@ (adr r1, 8008600 <__ieee754_atan2+0x170>)
 80085d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085da:	e778      	b.n	80084ce <__ieee754_atan2+0x3e>
 80085dc:	f3af 8000 	nop.w
 80085e0:	33145c07 	.word	0x33145c07
 80085e4:	3ca1a626 	.word	0x3ca1a626
 80085e8:	54442d18 	.word	0x54442d18
 80085ec:	400921fb 	.word	0x400921fb
 80085f0:	54442d18 	.word	0x54442d18
 80085f4:	3ff921fb 	.word	0x3ff921fb
 80085f8:	54442d18 	.word	0x54442d18
 80085fc:	3fe921fb 	.word	0x3fe921fb
 8008600:	54442d18 	.word	0x54442d18
 8008604:	bff921fb 	.word	0xbff921fb
 8008608:	08008b18 	.word	0x08008b18
 800860c:	08008b00 	.word	0x08008b00
 8008610:	54442d18 	.word	0x54442d18
 8008614:	c00921fb 	.word	0xc00921fb
 8008618:	7ff00000 	.word	0x7ff00000
 800861c:	00000000 	.word	0x00000000

08008620 <atan>:
 8008620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008624:	ec55 4b10 	vmov	r4, r5, d0
 8008628:	4bbf      	ldr	r3, [pc, #764]	@ (8008928 <atan+0x308>)
 800862a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800862e:	429e      	cmp	r6, r3
 8008630:	46ab      	mov	fp, r5
 8008632:	d918      	bls.n	8008666 <atan+0x46>
 8008634:	4bbd      	ldr	r3, [pc, #756]	@ (800892c <atan+0x30c>)
 8008636:	429e      	cmp	r6, r3
 8008638:	d801      	bhi.n	800863e <atan+0x1e>
 800863a:	d109      	bne.n	8008650 <atan+0x30>
 800863c:	b144      	cbz	r4, 8008650 <atan+0x30>
 800863e:	4622      	mov	r2, r4
 8008640:	462b      	mov	r3, r5
 8008642:	4620      	mov	r0, r4
 8008644:	4629      	mov	r1, r5
 8008646:	f7f7 fe19 	bl	800027c <__adddf3>
 800864a:	4604      	mov	r4, r0
 800864c:	460d      	mov	r5, r1
 800864e:	e006      	b.n	800865e <atan+0x3e>
 8008650:	f1bb 0f00 	cmp.w	fp, #0
 8008654:	f340 812b 	ble.w	80088ae <atan+0x28e>
 8008658:	a597      	add	r5, pc, #604	@ (adr r5, 80088b8 <atan+0x298>)
 800865a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800865e:	ec45 4b10 	vmov	d0, r4, r5
 8008662:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008666:	4bb2      	ldr	r3, [pc, #712]	@ (8008930 <atan+0x310>)
 8008668:	429e      	cmp	r6, r3
 800866a:	d813      	bhi.n	8008694 <atan+0x74>
 800866c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8008670:	429e      	cmp	r6, r3
 8008672:	d80c      	bhi.n	800868e <atan+0x6e>
 8008674:	a392      	add	r3, pc, #584	@ (adr r3, 80088c0 <atan+0x2a0>)
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	4620      	mov	r0, r4
 800867c:	4629      	mov	r1, r5
 800867e:	f7f7 fdfd 	bl	800027c <__adddf3>
 8008682:	4bac      	ldr	r3, [pc, #688]	@ (8008934 <atan+0x314>)
 8008684:	2200      	movs	r2, #0
 8008686:	f7f8 fa3f 	bl	8000b08 <__aeabi_dcmpgt>
 800868a:	2800      	cmp	r0, #0
 800868c:	d1e7      	bne.n	800865e <atan+0x3e>
 800868e:	f04f 3aff 	mov.w	sl, #4294967295
 8008692:	e029      	b.n	80086e8 <atan+0xc8>
 8008694:	f000 f95c 	bl	8008950 <fabs>
 8008698:	4ba7      	ldr	r3, [pc, #668]	@ (8008938 <atan+0x318>)
 800869a:	429e      	cmp	r6, r3
 800869c:	ec55 4b10 	vmov	r4, r5, d0
 80086a0:	f200 80bc 	bhi.w	800881c <atan+0x1fc>
 80086a4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80086a8:	429e      	cmp	r6, r3
 80086aa:	f200 809e 	bhi.w	80087ea <atan+0x1ca>
 80086ae:	4622      	mov	r2, r4
 80086b0:	462b      	mov	r3, r5
 80086b2:	4620      	mov	r0, r4
 80086b4:	4629      	mov	r1, r5
 80086b6:	f7f7 fde1 	bl	800027c <__adddf3>
 80086ba:	4b9e      	ldr	r3, [pc, #632]	@ (8008934 <atan+0x314>)
 80086bc:	2200      	movs	r2, #0
 80086be:	f7f7 fddb 	bl	8000278 <__aeabi_dsub>
 80086c2:	2200      	movs	r2, #0
 80086c4:	4606      	mov	r6, r0
 80086c6:	460f      	mov	r7, r1
 80086c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80086cc:	4620      	mov	r0, r4
 80086ce:	4629      	mov	r1, r5
 80086d0:	f7f7 fdd4 	bl	800027c <__adddf3>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	4630      	mov	r0, r6
 80086da:	4639      	mov	r1, r7
 80086dc:	f7f8 f8ae 	bl	800083c <__aeabi_ddiv>
 80086e0:	f04f 0a00 	mov.w	sl, #0
 80086e4:	4604      	mov	r4, r0
 80086e6:	460d      	mov	r5, r1
 80086e8:	4622      	mov	r2, r4
 80086ea:	462b      	mov	r3, r5
 80086ec:	4620      	mov	r0, r4
 80086ee:	4629      	mov	r1, r5
 80086f0:	f7f7 ff7a 	bl	80005e8 <__aeabi_dmul>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	4680      	mov	r8, r0
 80086fa:	4689      	mov	r9, r1
 80086fc:	f7f7 ff74 	bl	80005e8 <__aeabi_dmul>
 8008700:	a371      	add	r3, pc, #452	@ (adr r3, 80088c8 <atan+0x2a8>)
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	4606      	mov	r6, r0
 8008708:	460f      	mov	r7, r1
 800870a:	f7f7 ff6d 	bl	80005e8 <__aeabi_dmul>
 800870e:	a370      	add	r3, pc, #448	@ (adr r3, 80088d0 <atan+0x2b0>)
 8008710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008714:	f7f7 fdb2 	bl	800027c <__adddf3>
 8008718:	4632      	mov	r2, r6
 800871a:	463b      	mov	r3, r7
 800871c:	f7f7 ff64 	bl	80005e8 <__aeabi_dmul>
 8008720:	a36d      	add	r3, pc, #436	@ (adr r3, 80088d8 <atan+0x2b8>)
 8008722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008726:	f7f7 fda9 	bl	800027c <__adddf3>
 800872a:	4632      	mov	r2, r6
 800872c:	463b      	mov	r3, r7
 800872e:	f7f7 ff5b 	bl	80005e8 <__aeabi_dmul>
 8008732:	a36b      	add	r3, pc, #428	@ (adr r3, 80088e0 <atan+0x2c0>)
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	f7f7 fda0 	bl	800027c <__adddf3>
 800873c:	4632      	mov	r2, r6
 800873e:	463b      	mov	r3, r7
 8008740:	f7f7 ff52 	bl	80005e8 <__aeabi_dmul>
 8008744:	a368      	add	r3, pc, #416	@ (adr r3, 80088e8 <atan+0x2c8>)
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	f7f7 fd97 	bl	800027c <__adddf3>
 800874e:	4632      	mov	r2, r6
 8008750:	463b      	mov	r3, r7
 8008752:	f7f7 ff49 	bl	80005e8 <__aeabi_dmul>
 8008756:	a366      	add	r3, pc, #408	@ (adr r3, 80088f0 <atan+0x2d0>)
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f7f7 fd8e 	bl	800027c <__adddf3>
 8008760:	4642      	mov	r2, r8
 8008762:	464b      	mov	r3, r9
 8008764:	f7f7 ff40 	bl	80005e8 <__aeabi_dmul>
 8008768:	a363      	add	r3, pc, #396	@ (adr r3, 80088f8 <atan+0x2d8>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	4680      	mov	r8, r0
 8008770:	4689      	mov	r9, r1
 8008772:	4630      	mov	r0, r6
 8008774:	4639      	mov	r1, r7
 8008776:	f7f7 ff37 	bl	80005e8 <__aeabi_dmul>
 800877a:	a361      	add	r3, pc, #388	@ (adr r3, 8008900 <atan+0x2e0>)
 800877c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008780:	f7f7 fd7a 	bl	8000278 <__aeabi_dsub>
 8008784:	4632      	mov	r2, r6
 8008786:	463b      	mov	r3, r7
 8008788:	f7f7 ff2e 	bl	80005e8 <__aeabi_dmul>
 800878c:	a35e      	add	r3, pc, #376	@ (adr r3, 8008908 <atan+0x2e8>)
 800878e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008792:	f7f7 fd71 	bl	8000278 <__aeabi_dsub>
 8008796:	4632      	mov	r2, r6
 8008798:	463b      	mov	r3, r7
 800879a:	f7f7 ff25 	bl	80005e8 <__aeabi_dmul>
 800879e:	a35c      	add	r3, pc, #368	@ (adr r3, 8008910 <atan+0x2f0>)
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	f7f7 fd68 	bl	8000278 <__aeabi_dsub>
 80087a8:	4632      	mov	r2, r6
 80087aa:	463b      	mov	r3, r7
 80087ac:	f7f7 ff1c 	bl	80005e8 <__aeabi_dmul>
 80087b0:	a359      	add	r3, pc, #356	@ (adr r3, 8008918 <atan+0x2f8>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	f7f7 fd5f 	bl	8000278 <__aeabi_dsub>
 80087ba:	4632      	mov	r2, r6
 80087bc:	463b      	mov	r3, r7
 80087be:	f7f7 ff13 	bl	80005e8 <__aeabi_dmul>
 80087c2:	4602      	mov	r2, r0
 80087c4:	460b      	mov	r3, r1
 80087c6:	4640      	mov	r0, r8
 80087c8:	4649      	mov	r1, r9
 80087ca:	f7f7 fd57 	bl	800027c <__adddf3>
 80087ce:	4622      	mov	r2, r4
 80087d0:	462b      	mov	r3, r5
 80087d2:	f7f7 ff09 	bl	80005e8 <__aeabi_dmul>
 80087d6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	d148      	bne.n	8008872 <atan+0x252>
 80087e0:	4620      	mov	r0, r4
 80087e2:	4629      	mov	r1, r5
 80087e4:	f7f7 fd48 	bl	8000278 <__aeabi_dsub>
 80087e8:	e72f      	b.n	800864a <atan+0x2a>
 80087ea:	4b52      	ldr	r3, [pc, #328]	@ (8008934 <atan+0x314>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	4620      	mov	r0, r4
 80087f0:	4629      	mov	r1, r5
 80087f2:	f7f7 fd41 	bl	8000278 <__aeabi_dsub>
 80087f6:	4b4f      	ldr	r3, [pc, #316]	@ (8008934 <atan+0x314>)
 80087f8:	4606      	mov	r6, r0
 80087fa:	460f      	mov	r7, r1
 80087fc:	2200      	movs	r2, #0
 80087fe:	4620      	mov	r0, r4
 8008800:	4629      	mov	r1, r5
 8008802:	f7f7 fd3b 	bl	800027c <__adddf3>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4630      	mov	r0, r6
 800880c:	4639      	mov	r1, r7
 800880e:	f7f8 f815 	bl	800083c <__aeabi_ddiv>
 8008812:	f04f 0a01 	mov.w	sl, #1
 8008816:	4604      	mov	r4, r0
 8008818:	460d      	mov	r5, r1
 800881a:	e765      	b.n	80086e8 <atan+0xc8>
 800881c:	4b47      	ldr	r3, [pc, #284]	@ (800893c <atan+0x31c>)
 800881e:	429e      	cmp	r6, r3
 8008820:	d21c      	bcs.n	800885c <atan+0x23c>
 8008822:	4b47      	ldr	r3, [pc, #284]	@ (8008940 <atan+0x320>)
 8008824:	2200      	movs	r2, #0
 8008826:	4620      	mov	r0, r4
 8008828:	4629      	mov	r1, r5
 800882a:	f7f7 fd25 	bl	8000278 <__aeabi_dsub>
 800882e:	4b44      	ldr	r3, [pc, #272]	@ (8008940 <atan+0x320>)
 8008830:	4606      	mov	r6, r0
 8008832:	460f      	mov	r7, r1
 8008834:	2200      	movs	r2, #0
 8008836:	4620      	mov	r0, r4
 8008838:	4629      	mov	r1, r5
 800883a:	f7f7 fed5 	bl	80005e8 <__aeabi_dmul>
 800883e:	4b3d      	ldr	r3, [pc, #244]	@ (8008934 <atan+0x314>)
 8008840:	2200      	movs	r2, #0
 8008842:	f7f7 fd1b 	bl	800027c <__adddf3>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4630      	mov	r0, r6
 800884c:	4639      	mov	r1, r7
 800884e:	f7f7 fff5 	bl	800083c <__aeabi_ddiv>
 8008852:	f04f 0a02 	mov.w	sl, #2
 8008856:	4604      	mov	r4, r0
 8008858:	460d      	mov	r5, r1
 800885a:	e745      	b.n	80086e8 <atan+0xc8>
 800885c:	4622      	mov	r2, r4
 800885e:	462b      	mov	r3, r5
 8008860:	4938      	ldr	r1, [pc, #224]	@ (8008944 <atan+0x324>)
 8008862:	2000      	movs	r0, #0
 8008864:	f7f7 ffea 	bl	800083c <__aeabi_ddiv>
 8008868:	f04f 0a03 	mov.w	sl, #3
 800886c:	4604      	mov	r4, r0
 800886e:	460d      	mov	r5, r1
 8008870:	e73a      	b.n	80086e8 <atan+0xc8>
 8008872:	4b35      	ldr	r3, [pc, #212]	@ (8008948 <atan+0x328>)
 8008874:	4e35      	ldr	r6, [pc, #212]	@ (800894c <atan+0x32c>)
 8008876:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800887a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887e:	f7f7 fcfb 	bl	8000278 <__aeabi_dsub>
 8008882:	4622      	mov	r2, r4
 8008884:	462b      	mov	r3, r5
 8008886:	f7f7 fcf7 	bl	8000278 <__aeabi_dsub>
 800888a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008896:	f7f7 fcef 	bl	8000278 <__aeabi_dsub>
 800889a:	f1bb 0f00 	cmp.w	fp, #0
 800889e:	4604      	mov	r4, r0
 80088a0:	460d      	mov	r5, r1
 80088a2:	f6bf aedc 	bge.w	800865e <atan+0x3e>
 80088a6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80088aa:	461d      	mov	r5, r3
 80088ac:	e6d7      	b.n	800865e <atan+0x3e>
 80088ae:	a51c      	add	r5, pc, #112	@ (adr r5, 8008920 <atan+0x300>)
 80088b0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80088b4:	e6d3      	b.n	800865e <atan+0x3e>
 80088b6:	bf00      	nop
 80088b8:	54442d18 	.word	0x54442d18
 80088bc:	3ff921fb 	.word	0x3ff921fb
 80088c0:	8800759c 	.word	0x8800759c
 80088c4:	7e37e43c 	.word	0x7e37e43c
 80088c8:	e322da11 	.word	0xe322da11
 80088cc:	3f90ad3a 	.word	0x3f90ad3a
 80088d0:	24760deb 	.word	0x24760deb
 80088d4:	3fa97b4b 	.word	0x3fa97b4b
 80088d8:	a0d03d51 	.word	0xa0d03d51
 80088dc:	3fb10d66 	.word	0x3fb10d66
 80088e0:	c54c206e 	.word	0xc54c206e
 80088e4:	3fb745cd 	.word	0x3fb745cd
 80088e8:	920083ff 	.word	0x920083ff
 80088ec:	3fc24924 	.word	0x3fc24924
 80088f0:	5555550d 	.word	0x5555550d
 80088f4:	3fd55555 	.word	0x3fd55555
 80088f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80088fc:	bfa2b444 	.word	0xbfa2b444
 8008900:	52defd9a 	.word	0x52defd9a
 8008904:	3fadde2d 	.word	0x3fadde2d
 8008908:	af749a6d 	.word	0xaf749a6d
 800890c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008910:	fe231671 	.word	0xfe231671
 8008914:	3fbc71c6 	.word	0x3fbc71c6
 8008918:	9998ebc4 	.word	0x9998ebc4
 800891c:	3fc99999 	.word	0x3fc99999
 8008920:	54442d18 	.word	0x54442d18
 8008924:	bff921fb 	.word	0xbff921fb
 8008928:	440fffff 	.word	0x440fffff
 800892c:	7ff00000 	.word	0x7ff00000
 8008930:	3fdbffff 	.word	0x3fdbffff
 8008934:	3ff00000 	.word	0x3ff00000
 8008938:	3ff2ffff 	.word	0x3ff2ffff
 800893c:	40038000 	.word	0x40038000
 8008940:	3ff80000 	.word	0x3ff80000
 8008944:	bff00000 	.word	0xbff00000
 8008948:	08008b30 	.word	0x08008b30
 800894c:	08008b50 	.word	0x08008b50

08008950 <fabs>:
 8008950:	ec51 0b10 	vmov	r0, r1, d0
 8008954:	4602      	mov	r2, r0
 8008956:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800895a:	ec43 2b10 	vmov	d0, r2, r3
 800895e:	4770      	bx	lr

08008960 <_init>:
 8008960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008962:	bf00      	nop
 8008964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008966:	bc08      	pop	{r3}
 8008968:	469e      	mov	lr, r3
 800896a:	4770      	bx	lr

0800896c <_fini>:
 800896c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896e:	bf00      	nop
 8008970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008972:	bc08      	pop	{r3}
 8008974:	469e      	mov	lr, r3
 8008976:	4770      	bx	lr
