
102_read_accel_gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08006c68  08006c68  00007c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e78  08006e78  00008070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006e78  08006e78  00007e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e80  08006e80  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e80  08006e80  00007e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e84  08006e84  00007e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006e88  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008070  2**0
                  CONTENTS
 10 .bss          000002bc  20000070  20000070  00008070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000032c  2000032c  00008070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001057e  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021f9  00000000  00000000  0001861e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001008  00000000  00000000  0001a818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000caf  00000000  00000000  0001b820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022451  00000000  00000000  0001c4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001292b  00000000  00000000  0003e920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d00b7  00000000  00000000  0005124b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121302  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fc0  00000000  00000000  00121348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00126308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c50 	.word	0x08006c50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006c50 	.word	0x08006c50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <_write>:
void Compute_Orientation(); // Computes pitch, roll, and yaw using a complementary filter
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	4804      	ldr	r0, [pc, #16]	@ (8000f3c <_write+0x28>)
 8000f2c:	f003 fbd0 	bl	80046d0 <HAL_UART_Transmit>
    return len;
 8000f30:	687b      	ldr	r3, [r7, #4]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000170 	.word	0x20000170

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f46:	f000 fea7 	bl	8001c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4a:	f000 f865 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4e:	f000 f9cf 	bl	80012f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f52:	f000 f8db 	bl	800110c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000f56:	f000 f9a1 	bl	800129c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f5a:	f000 f905 	bl	8001168 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f5e:	f000 f94f 	bl	8001200 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000f62:	f000 f8b7 	bl	80010d4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // Starts the timers in interrupt mode
  HAL_TIM_Base_Start_IT(&htim2);
 8000f66:	4821      	ldr	r0, [pc, #132]	@ (8000fec <main+0xac>)
 8000f68:	f002 ff42 	bl	8003df0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000f6c:	4820      	ldr	r0, [pc, #128]	@ (8000ff0 <main+0xb0>)
 8000f6e:	f002 ff3f 	bl	8003df0 <HAL_TIM_Base_Start_IT>
  // Initializes the MPU6050 sensor
  MPU6050_Init();
 8000f72:	f000 fac7 	bl	8001504 <MPU6050_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Checks for IMU read flag set by TIM2 interrupt
	  if(f_imu_read == 1){
 8000f76:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <main+0xb4>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d10e      	bne.n	8000f9c <main+0x5c>
		   MPU6050_ReadAccel(&ax, &ay, &az); // Read accelerometer data
 8000f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff8 <main+0xb8>)
 8000f80:	491e      	ldr	r1, [pc, #120]	@ (8000ffc <main+0xbc>)
 8000f82:	481f      	ldr	r0, [pc, #124]	@ (8001000 <main+0xc0>)
 8000f84:	f000 fade 	bl	8001544 <MPU6050_ReadAccel>
		   MPU6050_ReadGyro(&gx, &gy, &gz);   // Read gyroscope data
 8000f88:	4a1e      	ldr	r2, [pc, #120]	@ (8001004 <main+0xc4>)
 8000f8a:	491f      	ldr	r1, [pc, #124]	@ (8001008 <main+0xc8>)
 8000f8c:	481f      	ldr	r0, [pc, #124]	@ (800100c <main+0xcc>)
 8000f8e:	f000 fb08 	bl	80015a2 <MPU6050_ReadGyro>
		   Compute_Orientation();            // Calculate orientation
 8000f92:	f000 fb35 	bl	8001600 <Compute_Orientation>
		   f_imu_read = 0; // Reset flag
 8000f96:	4b17      	ldr	r3, [pc, #92]	@ (8000ff4 <main+0xb4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
	  }
	  // Checks for UART send flag set by TIM3 interrupt
	  if(f_uart_send == 1){
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <main+0xd0>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d1e8      	bne.n	8000f76 <main+0x36>
		  printf("Accel X: %d Y: %d Z: %d Gyro: X: %d, Y: %d, Z: %d \r\n", ax, ay, az, gx, gy, gz);
 8000fa4:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <main+0xc0>)
 8000fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000faa:	4618      	mov	r0, r3
 8000fac:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <main+0xbc>)
 8000fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb2:	461c      	mov	r4, r3
 8000fb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <main+0xb8>)
 8000fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fba:	461d      	mov	r5, r3
 8000fbc:	4b13      	ldr	r3, [pc, #76]	@ (800100c <main+0xcc>)
 8000fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <main+0xc8>)
 8000fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <main+0xc4>)
 8000fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	9101      	str	r1, [sp, #4]
 8000fd6:	9200      	str	r2, [sp, #0]
 8000fd8:	462b      	mov	r3, r5
 8000fda:	4622      	mov	r2, r4
 8000fdc:	4601      	mov	r1, r0
 8000fde:	480d      	ldr	r0, [pc, #52]	@ (8001014 <main+0xd4>)
 8000fe0:	f004 fc00 	bl	80057e4 <iprintf>
		  //Send_IMU_Data(&ax, &ay, &az, &gx, &gy, &gz, &pitch, &roll, &yaw);
		  f_uart_send = 0; // Reset flag
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <main+0xd0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
	  if(f_imu_read == 1){
 8000fea:	e7c4      	b.n	8000f76 <main+0x36>
 8000fec:	200000e0 	.word	0x200000e0
 8000ff0:	20000128 	.word	0x20000128
 8000ff4:	200001b8 	.word	0x200001b8
 8000ff8:	200001be 	.word	0x200001be
 8000ffc:	200001bc 	.word	0x200001bc
 8001000:	200001ba 	.word	0x200001ba
 8001004:	200001c4 	.word	0x200001c4
 8001008:	200001c2 	.word	0x200001c2
 800100c:	200001c0 	.word	0x200001c0
 8001010:	200001b9 	.word	0x200001b9
 8001014:	08006c68 	.word	0x08006c68

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b094      	sub	sp, #80	@ 0x50
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	2230      	movs	r2, #48	@ 0x30
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f004 fd24 	bl	8005a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <SystemClock_Config+0xb4>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	4a21      	ldr	r2, [pc, #132]	@ (80010cc <SystemClock_Config+0xb4>)
 8001046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800104a:	6413      	str	r3, [r2, #64]	@ 0x40
 800104c:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <SystemClock_Config+0xb4>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <SystemClock_Config+0xb8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a1b      	ldr	r2, [pc, #108]	@ (80010d0 <SystemClock_Config+0xb8>)
 8001062:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <SystemClock_Config+0xb8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001074:	2302      	movs	r3, #2
 8001076:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001078:	2301      	movs	r3, #1
 800107a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800107c:	2310      	movs	r3, #16
 800107e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001080:	2300      	movs	r3, #0
 8001082:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001084:	f107 0320 	add.w	r3, r7, #32
 8001088:	4618      	mov	r0, r3
 800108a:	f002 fa09 	bl	80034a0 <HAL_RCC_OscConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001094:	f000 fbfa 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001098:	230f      	movs	r3, #15
 800109a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80010a0:	23a0      	movs	r3, #160	@ 0xa0
 80010a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fc6c 	bl	8003990 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010be:	f000 fbe5 	bl	800188c <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3750      	adds	r7, #80	@ 0x50
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40007000 	.word	0x40007000

080010d4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2026      	movs	r0, #38	@ 0x26
 80010de:	f000 ff4c 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010e2:	2026      	movs	r0, #38	@ 0x26
 80010e4:	f000 ff65 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	201c      	movs	r0, #28
 80010ee:	f000 ff44 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010f2:	201c      	movs	r0, #28
 80010f4:	f000 ff5d 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	201d      	movs	r0, #29
 80010fe:	f000 ff3c 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001102:	201d      	movs	r0, #29
 8001104:	f000 ff55 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <MX_I2C1_Init+0x50>)
 8001112:	4a13      	ldr	r2, [pc, #76]	@ (8001160 <MX_I2C1_Init+0x54>)
 8001114:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_I2C1_Init+0x50>)
 8001118:	4a12      	ldr	r2, [pc, #72]	@ (8001164 <MX_I2C1_Init+0x58>)
 800111a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_I2C1_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001122:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <MX_I2C1_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001128:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <MX_I2C1_Init+0x50>)
 800112a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800112e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001130:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <MX_I2C1_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <MX_I2C1_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800113c:	4b07      	ldr	r3, [pc, #28]	@ (800115c <MX_I2C1_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <MX_I2C1_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	@ (800115c <MX_I2C1_Init+0x50>)
 800114a:	f001 f9af 	bl	80024ac <HAL_I2C_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001154:	f000 fb9a 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000008c 	.word	0x2000008c
 8001160:	40005400 	.word	0x40005400
 8001164:	000186a0 	.word	0x000186a0

08001168 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001184:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <MX_TIM2_Init+0x94>)
 8001186:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800118a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 800118c:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <MX_TIM2_Init+0x94>)
 800118e:	2263      	movs	r2, #99	@ 0x63
 8001190:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <MX_TIM2_Init+0x94>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001198:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <MX_TIM2_Init+0x94>)
 800119a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800119e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <MX_TIM2_Init+0x94>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <MX_TIM2_Init+0x94>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ac:	4813      	ldr	r0, [pc, #76]	@ (80011fc <MX_TIM2_Init+0x94>)
 80011ae:	f002 fdcf 	bl	8003d50 <HAL_TIM_Base_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011b8:	f000 fb68 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	4619      	mov	r1, r3
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <MX_TIM2_Init+0x94>)
 80011ca:	f002 ff71 	bl	80040b0 <HAL_TIM_ConfigClockSource>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011d4:	f000 fb5a 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MX_TIM2_Init+0x94>)
 80011e6:	f003 f993 	bl	8004510 <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011f0:	f000 fb4c 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200000e0 	.word	0x200000e0

08001200 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800121c:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <MX_TIM3_Init+0x94>)
 800121e:	4a1e      	ldr	r2, [pc, #120]	@ (8001298 <MX_TIM3_Init+0x98>)
 8001220:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001222:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <MX_TIM3_Init+0x94>)
 8001224:	2263      	movs	r2, #99	@ 0x63
 8001226:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001228:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <MX_TIM3_Init+0x94>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800122e:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <MX_TIM3_Init+0x94>)
 8001230:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001234:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001236:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <MX_TIM3_Init+0x94>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123c:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <MX_TIM3_Init+0x94>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001242:	4814      	ldr	r0, [pc, #80]	@ (8001294 <MX_TIM3_Init+0x94>)
 8001244:	f002 fd84 	bl	8003d50 <HAL_TIM_Base_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800124e:	f000 fb1d 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001252:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001256:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	4619      	mov	r1, r3
 800125e:	480d      	ldr	r0, [pc, #52]	@ (8001294 <MX_TIM3_Init+0x94>)
 8001260:	f002 ff26 	bl	80040b0 <HAL_TIM_ConfigClockSource>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800126a:	f000 fb0f 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001276:	463b      	mov	r3, r7
 8001278:	4619      	mov	r1, r3
 800127a:	4806      	ldr	r0, [pc, #24]	@ (8001294 <MX_TIM3_Init+0x94>)
 800127c:	f003 f948 	bl	8004510 <HAL_TIMEx_MasterConfigSynchronization>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001286:	f000 fb01 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000128 	.word	0x20000128
 8001298:	40000400 	.word	0x40000400

0800129c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	@ (80012ec <MX_USART2_UART_Init+0x50>)
 80012a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80012ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012d4:	f003 f9ac 	bl	8004630 <HAL_UART_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012de:	f000 fad5 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000170 	.word	0x20000170
 80012ec:	40004400 	.word	0x40004400

080012f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <MX_GPIO_Init+0x9c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a1f      	ldr	r2, [pc, #124]	@ (800138c <MX_GPIO_Init+0x9c>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <MX_GPIO_Init+0x9c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b19      	ldr	r3, [pc, #100]	@ (800138c <MX_GPIO_Init+0x9c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a18      	ldr	r2, [pc, #96]	@ (800138c <MX_GPIO_Init+0x9c>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b16      	ldr	r3, [pc, #88]	@ (800138c <MX_GPIO_Init+0x9c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	4b12      	ldr	r3, [pc, #72]	@ (800138c <MX_GPIO_Init+0x9c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a11      	ldr	r2, [pc, #68]	@ (800138c <MX_GPIO_Init+0x9c>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <MX_GPIO_Init+0x9c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001360:	480b      	ldr	r0, [pc, #44]	@ (8001390 <MX_GPIO_Init+0xa0>)
 8001362:	f001 f86f 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001366:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800136a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	4619      	mov	r1, r3
 800137e:	4804      	ldr	r0, [pc, #16]	@ (8001390 <MX_GPIO_Init+0xa0>)
 8001380:	f000 fec4 	bl	800210c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001384:	bf00      	nop
 8001386:	3720      	adds	r7, #32
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800
 8001390:	40020c00 	.word	0x40020c00

08001394 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback function for TIM2 and TIM3 interrupts
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) { // 10ms interrupt for IMU data reading
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013a4:	d108      	bne.n	80013b8 <HAL_TIM_PeriodElapsedCallback+0x24>
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80013a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013aa:	4809      	ldr	r0, [pc, #36]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013ac:	f001 f863 	bl	8002476 <HAL_GPIO_TogglePin>
        f_imu_read = 1;
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
    }else if(htim->Instance == TIM3){ // 100ms interrupt for UART data sending
    	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12); // Toggle onboard LED
    	f_uart_send = 1;
    }
}
 80013b6:	e007      	b.n	80013c8 <HAL_TIM_PeriodElapsedCallback+0x34>
    }else if(htim->Instance == TIM3){ // 100ms interrupt for UART data sending
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a06      	ldr	r2, [pc, #24]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d102      	bne.n	80013c8 <HAL_TIM_PeriodElapsedCallback+0x34>
    	f_uart_send = 1;
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	701a      	strb	r2, [r3, #0]
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40020c00 	.word	0x40020c00
 80013d4:	200001b8 	.word	0x200001b8
 80013d8:	40000400 	.word	0x40000400
 80013dc:	200001b9 	.word	0x200001b9

080013e0 <MPU6050_Write>:
	who_am_i =  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, 100);
	return uga; // Returns an unused variable
}

// Writes a single byte of data to an MPU6050 register
void MPU6050_Write(uint8_t reg, uint8_t data) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	4603      	mov	r3, r0
 80013e8:	460a      	mov	r2, r1
 80013ea:	71fb      	strb	r3, [r7, #7]
 80013ec:	4613      	mov	r3, r2
 80013ee:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg, data}; // Buffer containing register address and data
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	733b      	strb	r3, [r7, #12]
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	737b      	strb	r3, [r7, #13]
    if(HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buffer, 2, 100) != HAL_OK){
 80013f8:	f107 020c 	add.w	r2, r7, #12
 80013fc:	2364      	movs	r3, #100	@ 0x64
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2302      	movs	r3, #2
 8001402:	21d0      	movs	r1, #208	@ 0xd0
 8001404:	4806      	ldr	r0, [pc, #24]	@ (8001420 <MPU6050_Write+0x40>)
 8001406:	f001 f995 	bl	8002734 <HAL_I2C_Master_Transmit>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <MPU6050_Write+0x36>
    	printf("I2C error\n");
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <MPU6050_Write+0x44>)
 8001412:	f004 fa4f 	bl	80058b4 <puts>
    }
}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000008c 	.word	0x2000008c
 8001424:	08006ca0 	.word	0x08006ca0

08001428 <MPU6050_Read>:

// Reads multiple bytes from a specified MPU6050 register
void MPU6050_Read(uint8_t reg, uint8_t* data, uint8_t length) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af02      	add	r7, sp, #8
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
 8001434:	4613      	mov	r3, r2
 8001436:	71bb      	strb	r3, [r7, #6]
    // Transmits the register address to start reading from
	HAL_StatusTypeDef status;

	    // 1. 레지스터 주소 전송
	    status = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, &reg, 1, 100);
 8001438:	1dfa      	adds	r2, r7, #7
 800143a:	2364      	movs	r3, #100	@ 0x64
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2301      	movs	r3, #1
 8001440:	21d0      	movs	r1, #208	@ 0xd0
 8001442:	4827      	ldr	r0, [pc, #156]	@ (80014e0 <MPU6050_Read+0xb8>)
 8001444:	f001 f976 	bl	8002734 <HAL_I2C_Master_Transmit>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
	    if (status != HAL_OK) {
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d01a      	beq.n	8001488 <MPU6050_Read+0x60>
	        // 전송 에러 종류 확인
	        switch (status) {
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	2b03      	cmp	r3, #3
 8001456:	d00e      	beq.n	8001476 <MPU6050_Read+0x4e>
 8001458:	2b03      	cmp	r3, #3
 800145a:	dc10      	bgt.n	800147e <MPU6050_Read+0x56>
 800145c:	2b01      	cmp	r3, #1
 800145e:	d002      	beq.n	8001466 <MPU6050_Read+0x3e>
 8001460:	2b02      	cmp	r3, #2
 8001462:	d004      	beq.n	800146e <MPU6050_Read+0x46>
 8001464:	e00b      	b.n	800147e <MPU6050_Read+0x56>
	            case HAL_ERROR:
	                printf("I2C Transmit Error: HAL_ERROR\r\n");
 8001466:	481f      	ldr	r0, [pc, #124]	@ (80014e4 <MPU6050_Read+0xbc>)
 8001468:	f004 fa24 	bl	80058b4 <puts>
	                break;
 800146c:	e00b      	b.n	8001486 <MPU6050_Read+0x5e>
	            case HAL_BUSY:
	                printf("I2C Transmit Error: HAL_BUSY\r\n");
 800146e:	481e      	ldr	r0, [pc, #120]	@ (80014e8 <MPU6050_Read+0xc0>)
 8001470:	f004 fa20 	bl	80058b4 <puts>
	                break;
 8001474:	e007      	b.n	8001486 <MPU6050_Read+0x5e>
	            case HAL_TIMEOUT:
	                printf("I2C Transmit Error: HAL_TIMEOUT\r\n");
 8001476:	481d      	ldr	r0, [pc, #116]	@ (80014ec <MPU6050_Read+0xc4>)
 8001478:	f004 fa1c 	bl	80058b4 <puts>
	                break;
 800147c:	e003      	b.n	8001486 <MPU6050_Read+0x5e>
	            default:
	                printf("I2C Transmit Error: Unknown\r\n");
 800147e:	481c      	ldr	r0, [pc, #112]	@ (80014f0 <MPU6050_Read+0xc8>)
 8001480:	f004 fa18 	bl	80058b4 <puts>
	                break;
 8001484:	bf00      	nop
	        }
	        return; // 에러 발생 시 함수 종료
 8001486:	e028      	b.n	80014da <MPU6050_Read+0xb2>
	    }

	    // 2. 데이터 수신
	    status = HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, data, length, 100);
 8001488:	79bb      	ldrb	r3, [r7, #6]
 800148a:	b29b      	uxth	r3, r3
 800148c:	2264      	movs	r2, #100	@ 0x64
 800148e:	9200      	str	r2, [sp, #0]
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	21d0      	movs	r1, #208	@ 0xd0
 8001494:	4812      	ldr	r0, [pc, #72]	@ (80014e0 <MPU6050_Read+0xb8>)
 8001496:	f001 fa4b 	bl	8002930 <HAL_I2C_Master_Receive>
 800149a:	4603      	mov	r3, r0
 800149c:	73fb      	strb	r3, [r7, #15]
	    if (status != HAL_OK) {
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d01a      	beq.n	80014da <MPU6050_Read+0xb2>
	        // 수신 에러 종류 확인
	        switch (status) {
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d00e      	beq.n	80014c8 <MPU6050_Read+0xa0>
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	dc10      	bgt.n	80014d0 <MPU6050_Read+0xa8>
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d002      	beq.n	80014b8 <MPU6050_Read+0x90>
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d004      	beq.n	80014c0 <MPU6050_Read+0x98>
 80014b6:	e00b      	b.n	80014d0 <MPU6050_Read+0xa8>
	            case HAL_ERROR:
	                printf("I2C Receive Error: HAL_ERROR\r\n");
 80014b8:	480e      	ldr	r0, [pc, #56]	@ (80014f4 <MPU6050_Read+0xcc>)
 80014ba:	f004 f9fb 	bl	80058b4 <puts>
	                break;
 80014be:	e00b      	b.n	80014d8 <MPU6050_Read+0xb0>
	            case HAL_BUSY:
	                printf("I2C Receive Error: HAL_BUSY\r\n");
 80014c0:	480d      	ldr	r0, [pc, #52]	@ (80014f8 <MPU6050_Read+0xd0>)
 80014c2:	f004 f9f7 	bl	80058b4 <puts>
	                break;
 80014c6:	e007      	b.n	80014d8 <MPU6050_Read+0xb0>
	            case HAL_TIMEOUT:
	                printf("I2C Receive Error: HAL_TIMEOUT\r\n");
 80014c8:	480c      	ldr	r0, [pc, #48]	@ (80014fc <MPU6050_Read+0xd4>)
 80014ca:	f004 f9f3 	bl	80058b4 <puts>
	                break;
 80014ce:	e003      	b.n	80014d8 <MPU6050_Read+0xb0>
	            default:
	                printf("I2C Receive Error: Unknown\r\n");
 80014d0:	480b      	ldr	r0, [pc, #44]	@ (8001500 <MPU6050_Read+0xd8>)
 80014d2:	f004 f9ef 	bl	80058b4 <puts>
	                break;
 80014d6:	bf00      	nop
	        }
	        return; // 에러 발생 시 함수 종료
 80014d8:	bf00      	nop
	    }
}
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	2000008c 	.word	0x2000008c
 80014e4:	08006cac 	.word	0x08006cac
 80014e8:	08006ccc 	.word	0x08006ccc
 80014ec:	08006cec 	.word	0x08006cec
 80014f0:	08006d10 	.word	0x08006d10
 80014f4:	08006d30 	.word	0x08006d30
 80014f8:	08006d50 	.word	0x08006d50
 80014fc:	08006d70 	.word	0x08006d70
 8001500:	08006d90 	.word	0x08006d90

08001504 <MPU6050_Init>:

// Initializes the MPU6050 sensor with a few key settings
void MPU6050_Init(void) {
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
    // 1. Wake up the sensor (Power Management 1)
    MPU6050_Write(PWR_MGMT_1, 0x00);
 8001508:	2100      	movs	r1, #0
 800150a:	206b      	movs	r0, #107	@ 0x6b
 800150c:	f7ff ff68 	bl	80013e0 <MPU6050_Write>
    HAL_Delay(100);
 8001510:	2064      	movs	r0, #100	@ 0x64
 8001512:	f000 fc33 	bl	8001d7c <HAL_Delay>

    // 2. Set accelerometer range to ±2g
    MPU6050_Write(ACCEL_CONFIG, 0x00);
 8001516:	2100      	movs	r1, #0
 8001518:	201c      	movs	r0, #28
 800151a:	f7ff ff61 	bl	80013e0 <MPU6050_Write>
    HAL_Delay(10);
 800151e:	200a      	movs	r0, #10
 8001520:	f000 fc2c 	bl	8001d7c <HAL_Delay>
    // 2. Set gyroscope range to ±250°/s
    //MPU6050_Write(0x1B, 0x00);
    //HAL_Delay(10);

    // 3. Set sample rate to 125Hz (1kHz / (1+7))
    MPU6050_Write(SMPLRT_DIV, 0x07);
 8001524:	2107      	movs	r1, #7
 8001526:	2019      	movs	r0, #25
 8001528:	f7ff ff5a 	bl	80013e0 <MPU6050_Write>
    HAL_Delay(10);
 800152c:	200a      	movs	r0, #10
 800152e:	f000 fc25 	bl	8001d7c <HAL_Delay>

    // 4. Set Digital Low-Pass Filter (DLPF) to 44Hz
    MPU6050_Write(CONFIG, 0x03);
 8001532:	2103      	movs	r1, #3
 8001534:	201a      	movs	r0, #26
 8001536:	f7ff ff53 	bl	80013e0 <MPU6050_Write>
    HAL_Delay(10);
 800153a:	200a      	movs	r0, #10
 800153c:	f000 fc1e 	bl	8001d7c <HAL_Delay>
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <MPU6050_ReadAccel>:

// Reads and combines high and low bytes of accelerometer data
void MPU6050_ReadAccel(int16_t* ax, int16_t* ay, int16_t* az) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];  // Buffer for 6 bytes of accelerometer data (X, Y, Z)

    MPU6050_Read(ACCEL_XOUT_H, buffer, 6);
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	2206      	movs	r2, #6
 8001556:	4619      	mov	r1, r3
 8001558:	203b      	movs	r0, #59	@ 0x3b
 800155a:	f7ff ff65 	bl	8001428 <MPU6050_Read>

    *ax = (int16_t)(buffer[0] << 8 | buffer[1]);  // Combine X high and low bytes
 800155e:	7c3b      	ldrb	r3, [r7, #16]
 8001560:	b21b      	sxth	r3, r3
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21a      	sxth	r2, r3
 8001566:	7c7b      	ldrb	r3, [r7, #17]
 8001568:	b21b      	sxth	r3, r3
 800156a:	4313      	orrs	r3, r2
 800156c:	b21a      	sxth	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	801a      	strh	r2, [r3, #0]
    *ay = (int16_t)(buffer[2] << 8 | buffer[3]);  // Combine Y high and low bytes
 8001572:	7cbb      	ldrb	r3, [r7, #18]
 8001574:	b21b      	sxth	r3, r3
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7cfb      	ldrb	r3, [r7, #19]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b21a      	sxth	r2, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	801a      	strh	r2, [r3, #0]
    *az = (int16_t)(buffer[4] << 8 | buffer[5]);  // Combine Z high and low bytes
 8001586:	7d3b      	ldrb	r3, [r7, #20]
 8001588:	b21b      	sxth	r3, r3
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	b21a      	sxth	r2, r3
 800158e:	7d7b      	ldrb	r3, [r7, #21]
 8001590:	b21b      	sxth	r3, r3
 8001592:	4313      	orrs	r3, r2
 8001594:	b21a      	sxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	801a      	strh	r2, [r3, #0]
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <MPU6050_ReadGyro>:

// Reads and combines high and low bytes of gyroscope data
void MPU6050_ReadGyro(int16_t* gx, int16_t* gy, int16_t* gz) {
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];  // Buffer for 6 bytes of gyroscope data (X, Y, Z)

    MPU6050_Read(GYRO_XOUT_H, buffer, 6);
 80015ae:	f107 0310 	add.w	r3, r7, #16
 80015b2:	2206      	movs	r2, #6
 80015b4:	4619      	mov	r1, r3
 80015b6:	2043      	movs	r0, #67	@ 0x43
 80015b8:	f7ff ff36 	bl	8001428 <MPU6050_Read>

    *gx = (int16_t)(buffer[0] << 8 | buffer[1]);  // Combine X high and low bytes
 80015bc:	7c3b      	ldrb	r3, [r7, #16]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	7c7b      	ldrb	r3, [r7, #17]
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	4313      	orrs	r3, r2
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	801a      	strh	r2, [r3, #0]
    *gy = (int16_t)(buffer[2] << 8 | buffer[3]);  // Combine Y high and low bytes
 80015d0:	7cbb      	ldrb	r3, [r7, #18]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	7cfb      	ldrb	r3, [r7, #19]
 80015da:	b21b      	sxth	r3, r3
 80015dc:	4313      	orrs	r3, r2
 80015de:	b21a      	sxth	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	801a      	strh	r2, [r3, #0]
    *gz = (int16_t)(buffer[4] << 8 | buffer[5]);  // Combine Z high and low bytes
 80015e4:	7d3b      	ldrb	r3, [r7, #20]
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	7d7b      	ldrb	r3, [r7, #21]
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	801a      	strh	r2, [r3, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <Compute_Orientation>:
    // Transmits the data buffer over UART
    HAL_UART_Transmit(&huart2, tx_buffer, 18, 100);
}

// Computes orientation angles using a complementary filter
void Compute_Orientation() {
 8001600:	b5b0      	push	{r4, r5, r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
    // Calculate pitch and roll from accelerometer data
    float acc_pitch = atan2(-ax, sqrt(ay * ay + az * az)) * 57.2958; // Convert radians to degrees
 8001606:	4b92      	ldr	r3, [pc, #584]	@ (8001850 <Compute_Orientation+0x250>)
 8001608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160c:	425b      	negs	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff80 	bl	8000514 <__aeabi_i2d>
 8001614:	4604      	mov	r4, r0
 8001616:	460d      	mov	r5, r1
 8001618:	4b8e      	ldr	r3, [pc, #568]	@ (8001854 <Compute_Orientation+0x254>)
 800161a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161e:	461a      	mov	r2, r3
 8001620:	4b8c      	ldr	r3, [pc, #560]	@ (8001854 <Compute_Orientation+0x254>)
 8001622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001626:	fb03 f202 	mul.w	r2, r3, r2
 800162a:	4b8b      	ldr	r3, [pc, #556]	@ (8001858 <Compute_Orientation+0x258>)
 800162c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001630:	4619      	mov	r1, r3
 8001632:	4b89      	ldr	r3, [pc, #548]	@ (8001858 <Compute_Orientation+0x258>)
 8001634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001638:	fb01 f303 	mul.w	r3, r1, r3
 800163c:	4413      	add	r3, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ff68 	bl	8000514 <__aeabi_i2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	ec43 2b10 	vmov	d0, r2, r3
 800164c:	f004 ff96 	bl	800657c <sqrt>
 8001650:	eeb0 7a40 	vmov.f32	s14, s0
 8001654:	eef0 7a60 	vmov.f32	s15, s1
 8001658:	eeb0 1a47 	vmov.f32	s2, s14
 800165c:	eef0 1a67 	vmov.f32	s3, s15
 8001660:	ec45 4b10 	vmov	d0, r4, r5
 8001664:	f004 ff88 	bl	8006578 <atan2>
 8001668:	ec51 0b10 	vmov	r0, r1, d0
 800166c:	a374      	add	r3, pc, #464	@ (adr r3, 8001840 <Compute_Orientation+0x240>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7fe ffb9 	bl	80005e8 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f7ff fa63 	bl	8000b48 <__aeabi_d2f>
 8001682:	4603      	mov	r3, r0
 8001684:	617b      	str	r3, [r7, #20]
    float acc_roll  = atan2(ay, az) * 57.2958;
 8001686:	4b73      	ldr	r3, [pc, #460]	@ (8001854 <Compute_Orientation+0x254>)
 8001688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff41 	bl	8000514 <__aeabi_i2d>
 8001692:	4604      	mov	r4, r0
 8001694:	460d      	mov	r5, r1
 8001696:	4b70      	ldr	r3, [pc, #448]	@ (8001858 <Compute_Orientation+0x258>)
 8001698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff39 	bl	8000514 <__aeabi_i2d>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	ec43 2b11 	vmov	d1, r2, r3
 80016aa:	ec45 4b10 	vmov	d0, r4, r5
 80016ae:	f004 ff63 	bl	8006578 <atan2>
 80016b2:	ec51 0b10 	vmov	r0, r1, d0
 80016b6:	a362      	add	r3, pc, #392	@ (adr r3, 8001840 <Compute_Orientation+0x240>)
 80016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016bc:	f7fe ff94 	bl	80005e8 <__aeabi_dmul>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f7ff fa3e 	bl	8000b48 <__aeabi_d2f>
 80016cc:	4603      	mov	r3, r0
 80016ce:	613b      	str	r3, [r7, #16]

    // Convert gyroscope raw data to degrees per second
    float gx_dps = gx / 131.0;
 80016d0:	4b62      	ldr	r3, [pc, #392]	@ (800185c <Compute_Orientation+0x25c>)
 80016d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff1c 	bl	8000514 <__aeabi_i2d>
 80016dc:	a35a      	add	r3, pc, #360	@ (adr r3, 8001848 <Compute_Orientation+0x248>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7ff f8ab 	bl	800083c <__aeabi_ddiv>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f7ff fa2b 	bl	8000b48 <__aeabi_d2f>
 80016f2:	4603      	mov	r3, r0
 80016f4:	60fb      	str	r3, [r7, #12]
    float gy_dps = gy / 131.0;
 80016f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001860 <Compute_Orientation+0x260>)
 80016f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff09 	bl	8000514 <__aeabi_i2d>
 8001702:	a351      	add	r3, pc, #324	@ (adr r3, 8001848 <Compute_Orientation+0x248>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7ff f898 	bl	800083c <__aeabi_ddiv>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff fa18 	bl	8000b48 <__aeabi_d2f>
 8001718:	4603      	mov	r3, r0
 800171a:	60bb      	str	r3, [r7, #8]
    float gz_dps = gz / 131.0;
 800171c:	4b51      	ldr	r3, [pc, #324]	@ (8001864 <Compute_Orientation+0x264>)
 800171e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fef6 	bl	8000514 <__aeabi_i2d>
 8001728:	a347      	add	r3, pc, #284	@ (adr r3, 8001848 <Compute_Orientation+0x248>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	f7ff f885 	bl	800083c <__aeabi_ddiv>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f7ff fa05 	bl	8000b48 <__aeabi_d2f>
 800173e:	4603      	mov	r3, r0
 8001740:	607b      	str	r3, [r7, #4]

    // Apply the complementary filter to combine accelerometer and gyroscope data
    pitch_f = alpha * (pitch_f + gy_dps * dt) + (1 - alpha) * acc_pitch;
 8001742:	4b49      	ldr	r3, [pc, #292]	@ (8001868 <Compute_Orientation+0x268>)
 8001744:	ed93 7a00 	vldr	s14, [r3]
 8001748:	edd7 7a02 	vldr	s15, [r7, #8]
 800174c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001750:	4b46      	ldr	r3, [pc, #280]	@ (800186c <Compute_Orientation+0x26c>)
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800175a:	4b45      	ldr	r3, [pc, #276]	@ (8001870 <Compute_Orientation+0x270>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001764:	4b42      	ldr	r3, [pc, #264]	@ (8001870 <Compute_Orientation+0x270>)
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800176e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001772:	edd7 7a05 	vldr	s15, [r7, #20]
 8001776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177e:	4b3b      	ldr	r3, [pc, #236]	@ (800186c <Compute_Orientation+0x26c>)
 8001780:	edc3 7a00 	vstr	s15, [r3]
    roll_f = alpha * (roll_f + gx_dps * dt) + (1 - alpha) * acc_roll;
 8001784:	4b38      	ldr	r3, [pc, #224]	@ (8001868 <Compute_Orientation+0x268>)
 8001786:	ed93 7a00 	vldr	s14, [r3]
 800178a:	edd7 7a03 	vldr	s15, [r7, #12]
 800178e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001792:	4b38      	ldr	r3, [pc, #224]	@ (8001874 <Compute_Orientation+0x274>)
 8001794:	edd3 7a00 	vldr	s15, [r3]
 8001798:	ee37 7a27 	vadd.f32	s14, s14, s15
 800179c:	4b34      	ldr	r3, [pc, #208]	@ (8001870 <Compute_Orientation+0x270>)
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017a6:	4b32      	ldr	r3, [pc, #200]	@ (8001870 <Compute_Orientation+0x270>)
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80017b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001874 <Compute_Orientation+0x274>)
 80017c2:	edc3 7a00 	vstr	s15, [r3]
    yaw_f += gz_dps * dt; // Yaw is only integrated from gyroscope
 80017c6:	4b28      	ldr	r3, [pc, #160]	@ (8001868 <Compute_Orientation+0x268>)
 80017c8:	ed93 7a00 	vldr	s14, [r3]
 80017cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d4:	4b28      	ldr	r3, [pc, #160]	@ (8001878 <Compute_Orientation+0x278>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017de:	4b26      	ldr	r3, [pc, #152]	@ (8001878 <Compute_Orientation+0x278>)
 80017e0:	edc3 7a00 	vstr	s15, [r3]

    // Convert float angles to integer angles for storage
    pitch = (int16_t)(pitch_f * 100);
 80017e4:	4b21      	ldr	r3, [pc, #132]	@ (800186c <Compute_Orientation+0x26c>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800187c <Compute_Orientation+0x27c>
 80017ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f6:	ee17 3a90 	vmov	r3, s15
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	4b20      	ldr	r3, [pc, #128]	@ (8001880 <Compute_Orientation+0x280>)
 80017fe:	801a      	strh	r2, [r3, #0]
    roll = (int16_t)(roll_f * 100);
 8001800:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <Compute_Orientation+0x274>)
 8001802:	edd3 7a00 	vldr	s15, [r3]
 8001806:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800187c <Compute_Orientation+0x27c>
 800180a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800180e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001812:	ee17 3a90 	vmov	r3, s15
 8001816:	b21a      	sxth	r2, r3
 8001818:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <Compute_Orientation+0x284>)
 800181a:	801a      	strh	r2, [r3, #0]
    yaw = (int16_t)(yaw_f * 100);
 800181c:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <Compute_Orientation+0x278>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800187c <Compute_Orientation+0x27c>
 8001826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800182e:	ee17 3a90 	vmov	r3, s15
 8001832:	b21a      	sxth	r2, r3
 8001834:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <Compute_Orientation+0x288>)
 8001836:	801a      	strh	r2, [r3, #0]
}
 8001838:	bf00      	nop
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bdb0      	pop	{r4, r5, r7, pc}
 8001840:	c63f1412 	.word	0xc63f1412
 8001844:	404ca5dc 	.word	0x404ca5dc
 8001848:	00000000 	.word	0x00000000
 800184c:	40606000 	.word	0x40606000
 8001850:	200001ba 	.word	0x200001ba
 8001854:	200001bc 	.word	0x200001bc
 8001858:	200001be 	.word	0x200001be
 800185c:	200001c0 	.word	0x200001c0
 8001860:	200001c2 	.word	0x200001c2
 8001864:	200001c4 	.word	0x200001c4
 8001868:	20000004 	.word	0x20000004
 800186c:	200001cc 	.word	0x200001cc
 8001870:	20000000 	.word	0x20000000
 8001874:	200001d0 	.word	0x200001d0
 8001878:	200001d4 	.word	0x200001d4
 800187c:	42c80000 	.word	0x42c80000
 8001880:	200001c6 	.word	0x200001c6
 8001884:	200001c8 	.word	0x200001c8
 8001888:	200001ca 	.word	0x200001ca

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <Error_Handler+0x8>

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	4a0f      	ldr	r2, [pc, #60]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ae:	4b0d      	ldr	r3, [pc, #52]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	4a08      	ldr	r2, [pc, #32]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800

080018e8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	@ 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a19      	ldr	r2, [pc, #100]	@ (800196c <HAL_I2C_MspInit+0x84>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d12b      	bne.n	8001962 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	4b18      	ldr	r3, [pc, #96]	@ (8001970 <HAL_I2C_MspInit+0x88>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	4a17      	ldr	r2, [pc, #92]	@ (8001970 <HAL_I2C_MspInit+0x88>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	6313      	str	r3, [r2, #48]	@ 0x30
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <HAL_I2C_MspInit+0x88>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001926:	23c0      	movs	r3, #192	@ 0xc0
 8001928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800192a:	2312      	movs	r3, #18
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001932:	2303      	movs	r3, #3
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001936:	2304      	movs	r3, #4
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	480c      	ldr	r0, [pc, #48]	@ (8001974 <HAL_I2C_MspInit+0x8c>)
 8001942:	f000 fbe3 	bl	800210c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <HAL_I2C_MspInit+0x88>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	4a08      	ldr	r2, [pc, #32]	@ (8001970 <HAL_I2C_MspInit+0x88>)
 8001950:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001954:	6413      	str	r3, [r2, #64]	@ 0x40
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_I2C_MspInit+0x88>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001962:	bf00      	nop
 8001964:	3728      	adds	r7, #40	@ 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40005400 	.word	0x40005400
 8001970:	40023800 	.word	0x40023800
 8001974:	40020400 	.word	0x40020400

08001978 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001988:	d10e      	bne.n	80019a8 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <HAL_TIM_Base_MspInit+0x64>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	4a12      	ldr	r2, [pc, #72]	@ (80019dc <HAL_TIM_Base_MspInit+0x64>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6413      	str	r3, [r2, #64]	@ 0x40
 800199a:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <HAL_TIM_Base_MspInit+0x64>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019a6:	e012      	b.n	80019ce <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0c      	ldr	r2, [pc, #48]	@ (80019e0 <HAL_TIM_Base_MspInit+0x68>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d10d      	bne.n	80019ce <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <HAL_TIM_Base_MspInit+0x64>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	4a08      	ldr	r2, [pc, #32]	@ (80019dc <HAL_TIM_Base_MspInit+0x64>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c2:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <HAL_TIM_Base_MspInit+0x64>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40000400 	.word	0x40000400

080019e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	@ 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a19      	ldr	r2, [pc, #100]	@ (8001a68 <HAL_UART_MspInit+0x84>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d12b      	bne.n	8001a5e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	4b18      	ldr	r3, [pc, #96]	@ (8001a6c <HAL_UART_MspInit+0x88>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	4a17      	ldr	r2, [pc, #92]	@ (8001a6c <HAL_UART_MspInit+0x88>)
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a16:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <HAL_UART_MspInit+0x88>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <HAL_UART_MspInit+0x88>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a10      	ldr	r2, [pc, #64]	@ (8001a6c <HAL_UART_MspInit+0x88>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <HAL_UART_MspInit+0x88>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a3e:	230c      	movs	r3, #12
 8001a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a4e:	2307      	movs	r3, #7
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <HAL_UART_MspInit+0x8c>)
 8001a5a:	f000 fb57 	bl	800210c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a5e:	bf00      	nop
 8001a60:	3728      	adds	r7, #40	@ 0x28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40004400 	.word	0x40004400
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020000 	.word	0x40020000

08001a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <NMI_Handler+0x4>

08001a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aca:	f000 f937 	bl	8001d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ad8:	4802      	ldr	r0, [pc, #8]	@ (8001ae4 <TIM2_IRQHandler+0x10>)
 8001ada:	f002 f9f9 	bl	8003ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200000e0 	.word	0x200000e0

08001ae8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001aec:	4802      	ldr	r0, [pc, #8]	@ (8001af8 <TIM3_IRQHandler+0x10>)
 8001aee:	f002 f9ef 	bl	8003ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000128 	.word	0x20000128

08001afc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b00:	4802      	ldr	r0, [pc, #8]	@ (8001b0c <USART2_IRQHandler+0x10>)
 8001b02:	f002 fe71 	bl	80047e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000170 	.word	0x20000170

08001b10 <_read>:
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e00a      	b.n	8001b38 <_read+0x28>
 8001b22:	f3af 8000 	nop.w
 8001b26:	4601      	mov	r1, r0
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	60ba      	str	r2, [r7, #8]
 8001b2e:	b2ca      	uxtb	r2, r1
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbf0      	blt.n	8001b22 <_read+0x12>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_close>:
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_fstat>:
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	2300      	movs	r3, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_isatty>:
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_lseek>:
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <_sbrk>:
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	4a14      	ldr	r2, [pc, #80]	@ (8001c10 <_sbrk+0x5c>)
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <_sbrk+0x60>)
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <_sbrk+0x22>
 8001bd0:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <_sbrk+0x64>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <_sbrk+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d207      	bcs.n	8001bf4 <_sbrk+0x40>
 8001be4:	f003 ff94 	bl	8005b10 <__errno>
 8001be8:	4603      	mov	r3, r0
 8001bea:	220c      	movs	r2, #12
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	e009      	b.n	8001c08 <_sbrk+0x54>
 8001bf4:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a05      	ldr	r2, [pc, #20]	@ (8001c18 <_sbrk+0x64>)
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20020000 	.word	0x20020000
 8001c14:	00000400 	.word	0x00000400
 8001c18:	200001d8 	.word	0x200001d8
 8001c1c:	20000330 	.word	0x20000330

08001c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <SystemInit+0x20>)
 8001c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c2a:	4a05      	ldr	r2, [pc, #20]	@ (8001c40 <SystemInit+0x20>)
 8001c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <Reset_Handler>:
 8001c44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c7c <LoopFillZerobss+0xe>
 8001c48:	f7ff ffea 	bl	8001c20 <SystemInit>
 8001c4c:	480c      	ldr	r0, [pc, #48]	@ (8001c80 <LoopFillZerobss+0x12>)
 8001c4e:	490d      	ldr	r1, [pc, #52]	@ (8001c84 <LoopFillZerobss+0x16>)
 8001c50:	4a0d      	ldr	r2, [pc, #52]	@ (8001c88 <LoopFillZerobss+0x1a>)
 8001c52:	2300      	movs	r3, #0
 8001c54:	e002      	b.n	8001c5c <LoopCopyDataInit>

08001c56 <CopyDataInit>:
 8001c56:	58d4      	ldr	r4, [r2, r3]
 8001c58:	50c4      	str	r4, [r0, r3]
 8001c5a:	3304      	adds	r3, #4

08001c5c <LoopCopyDataInit>:
 8001c5c:	18c4      	adds	r4, r0, r3
 8001c5e:	428c      	cmp	r4, r1
 8001c60:	d3f9      	bcc.n	8001c56 <CopyDataInit>
 8001c62:	4a0a      	ldr	r2, [pc, #40]	@ (8001c8c <LoopFillZerobss+0x1e>)
 8001c64:	4c0a      	ldr	r4, [pc, #40]	@ (8001c90 <LoopFillZerobss+0x22>)
 8001c66:	2300      	movs	r3, #0
 8001c68:	e001      	b.n	8001c6e <LoopFillZerobss>

08001c6a <FillZerobss>:
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	3204      	adds	r2, #4

08001c6e <LoopFillZerobss>:
 8001c6e:	42a2      	cmp	r2, r4
 8001c70:	d3fb      	bcc.n	8001c6a <FillZerobss>
 8001c72:	f003 ff53 	bl	8005b1c <__libc_init_array>
 8001c76:	f7ff f963 	bl	8000f40 <main>
 8001c7a:	4770      	bx	lr
 8001c7c:	20020000 	.word	0x20020000
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000070 	.word	0x20000070
 8001c88:	08006e88 	.word	0x08006e88
 8001c8c:	20000070 	.word	0x20000070
 8001c90:	2000032c 	.word	0x2000032c

08001c94 <ADC_IRQHandler>:
 8001c94:	e7fe      	b.n	8001c94 <ADC_IRQHandler>
	...

08001c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd8 <HAL_Init+0x40>)
 8001ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <HAL_Init+0x40>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd8 <HAL_Init+0x40>)
 8001cae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb4:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <HAL_Init+0x40>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a07      	ldr	r2, [pc, #28]	@ (8001cd8 <HAL_Init+0x40>)
 8001cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f000 f94f 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc6:	200f      	movs	r0, #15
 8001cc8:	f000 f808 	bl	8001cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ccc:	f7ff fde4 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023c00 	.word	0x40023c00

08001cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce4:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_InitTick+0x54>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <HAL_InitTick+0x58>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f967 	bl	8001fce <HAL_SYSTICK_Config>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00e      	b.n	8001d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b0f      	cmp	r3, #15
 8001d0e:	d80a      	bhi.n	8001d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d10:	2200      	movs	r2, #0
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f000 f92f 	bl	8001f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d1c:	4a06      	ldr	r2, [pc, #24]	@ (8001d38 <HAL_InitTick+0x5c>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000008 	.word	0x20000008
 8001d34:	20000010 	.word	0x20000010
 8001d38:	2000000c 	.word	0x2000000c

08001d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <HAL_IncTick+0x20>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_IncTick+0x24>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a04      	ldr	r2, [pc, #16]	@ (8001d60 <HAL_IncTick+0x24>)
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000010 	.word	0x20000010
 8001d60:	200001dc 	.word	0x200001dc

08001d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b03      	ldr	r3, [pc, #12]	@ (8001d78 <HAL_GetTick+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	200001dc 	.word	0x200001dc

08001d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d84:	f7ff ffee 	bl	8001d64 <HAL_GetTick>
 8001d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d005      	beq.n	8001da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d96:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc0 <HAL_Delay+0x44>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001da2:	bf00      	nop
 8001da4:	f7ff ffde 	bl	8001d64 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d8f7      	bhi.n	8001da4 <HAL_Delay+0x28>
  {
  }
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000010 	.word	0x20000010

08001dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001de0:	4013      	ands	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df6:	4a04      	ldr	r2, [pc, #16]	@ (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	60d3      	str	r3, [r2, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e10:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <__NVIC_GetPriorityGrouping+0x18>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	f003 0307 	and.w	r3, r3, #7
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	db0b      	blt.n	8001e52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	f003 021f 	and.w	r2, r3, #31
 8001e40:	4907      	ldr	r1, [pc, #28]	@ (8001e60 <__NVIC_EnableIRQ+0x38>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	2001      	movs	r0, #1
 8001e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e100 	.word	0xe000e100

08001e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db0a      	blt.n	8001e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	490c      	ldr	r1, [pc, #48]	@ (8001eb0 <__NVIC_SetPriority+0x4c>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	0112      	lsls	r2, r2, #4
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	440b      	add	r3, r1
 8001e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e8c:	e00a      	b.n	8001ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4908      	ldr	r1, [pc, #32]	@ (8001eb4 <__NVIC_SetPriority+0x50>)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	3b04      	subs	r3, #4
 8001e9c:	0112      	lsls	r2, r2, #4
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	761a      	strb	r2, [r3, #24]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000e100 	.word	0xe000e100
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	@ 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f1c3 0307 	rsb	r3, r3, #7
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	bf28      	it	cs
 8001ed6:	2304      	movcs	r3, #4
 8001ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3304      	adds	r3, #4
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d902      	bls.n	8001ee8 <NVIC_EncodePriority+0x30>
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3b03      	subs	r3, #3
 8001ee6:	e000      	b.n	8001eea <NVIC_EncodePriority+0x32>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	401a      	ands	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	43d9      	mvns	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	4313      	orrs	r3, r2
         );
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	@ 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f30:	d301      	bcc.n	8001f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00f      	b.n	8001f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f36:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <SysTick_Config+0x40>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3e:	210f      	movs	r1, #15
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f7ff ff8e 	bl	8001e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f48:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <SysTick_Config+0x40>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4e:	4b04      	ldr	r3, [pc, #16]	@ (8001f60 <SysTick_Config+0x40>)
 8001f50:	2207      	movs	r2, #7
 8001f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	e000e010 	.word	0xe000e010

08001f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff29 	bl	8001dc4 <__NVIC_SetPriorityGrouping>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8c:	f7ff ff3e 	bl	8001e0c <__NVIC_GetPriorityGrouping>
 8001f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7ff ff8e 	bl	8001eb8 <NVIC_EncodePriority>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff5d 	bl	8001e64 <__NVIC_SetPriority>
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff31 	bl	8001e28 <__NVIC_EnableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffa2 	bl	8001f20 <SysTick_Config>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7ff feb6 	bl	8001d64 <HAL_GetTick>
 8001ff8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d008      	beq.n	8002018 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2280      	movs	r2, #128	@ 0x80
 800200a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e052      	b.n	80020be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0216 	bic.w	r2, r2, #22
 8002026:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002036:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203c:	2b00      	cmp	r3, #0
 800203e:	d103      	bne.n	8002048 <HAL_DMA_Abort+0x62>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0208 	bic.w	r2, r2, #8
 8002056:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002068:	e013      	b.n	8002092 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800206a:	f7ff fe7b 	bl	8001d64 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b05      	cmp	r3, #5
 8002076:	d90c      	bls.n	8002092 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2203      	movs	r2, #3
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e015      	b.n	80020be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1e4      	bne.n	800206a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a4:	223f      	movs	r2, #63	@ 0x3f
 80020a6:	409a      	lsls	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d004      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2280      	movs	r2, #128	@ 0x80
 80020de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e00c      	b.n	80020fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2205      	movs	r2, #5
 80020e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	@ 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	e16b      	b.n	8002400 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002128:	2201      	movs	r2, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	429a      	cmp	r2, r3
 8002142:	f040 815a 	bne.w	80023fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	2b01      	cmp	r3, #1
 8002150:	d005      	beq.n	800215e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215a:	2b02      	cmp	r3, #2
 800215c:	d130      	bne.n	80021c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	2203      	movs	r2, #3
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002194:	2201      	movs	r2, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 0201 	and.w	r2, r3, #1
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d017      	beq.n	80021fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d123      	bne.n	8002250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	08da      	lsrs	r2, r3, #3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3208      	adds	r2, #8
 8002210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	220f      	movs	r2, #15
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	08da      	lsrs	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3208      	adds	r2, #8
 800224a:	69b9      	ldr	r1, [r7, #24]
 800224c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0203 	and.w	r2, r3, #3
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 80b4 	beq.w	80023fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b60      	ldr	r3, [pc, #384]	@ (8002418 <HAL_GPIO_Init+0x30c>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229a:	4a5f      	ldr	r2, [pc, #380]	@ (8002418 <HAL_GPIO_Init+0x30c>)
 800229c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002418 <HAL_GPIO_Init+0x30c>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ae:	4a5b      	ldr	r2, [pc, #364]	@ (800241c <HAL_GPIO_Init+0x310>)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	3302      	adds	r3, #2
 80022b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	220f      	movs	r2, #15
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a52      	ldr	r2, [pc, #328]	@ (8002420 <HAL_GPIO_Init+0x314>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d02b      	beq.n	8002332 <HAL_GPIO_Init+0x226>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a51      	ldr	r2, [pc, #324]	@ (8002424 <HAL_GPIO_Init+0x318>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d025      	beq.n	800232e <HAL_GPIO_Init+0x222>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a50      	ldr	r2, [pc, #320]	@ (8002428 <HAL_GPIO_Init+0x31c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01f      	beq.n	800232a <HAL_GPIO_Init+0x21e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a4f      	ldr	r2, [pc, #316]	@ (800242c <HAL_GPIO_Init+0x320>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d019      	beq.n	8002326 <HAL_GPIO_Init+0x21a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002430 <HAL_GPIO_Init+0x324>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <HAL_GPIO_Init+0x216>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002434 <HAL_GPIO_Init+0x328>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00d      	beq.n	800231e <HAL_GPIO_Init+0x212>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4c      	ldr	r2, [pc, #304]	@ (8002438 <HAL_GPIO_Init+0x32c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <HAL_GPIO_Init+0x20e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4b      	ldr	r2, [pc, #300]	@ (800243c <HAL_GPIO_Init+0x330>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_GPIO_Init+0x20a>
 8002312:	2307      	movs	r3, #7
 8002314:	e00e      	b.n	8002334 <HAL_GPIO_Init+0x228>
 8002316:	2308      	movs	r3, #8
 8002318:	e00c      	b.n	8002334 <HAL_GPIO_Init+0x228>
 800231a:	2306      	movs	r3, #6
 800231c:	e00a      	b.n	8002334 <HAL_GPIO_Init+0x228>
 800231e:	2305      	movs	r3, #5
 8002320:	e008      	b.n	8002334 <HAL_GPIO_Init+0x228>
 8002322:	2304      	movs	r3, #4
 8002324:	e006      	b.n	8002334 <HAL_GPIO_Init+0x228>
 8002326:	2303      	movs	r3, #3
 8002328:	e004      	b.n	8002334 <HAL_GPIO_Init+0x228>
 800232a:	2302      	movs	r3, #2
 800232c:	e002      	b.n	8002334 <HAL_GPIO_Init+0x228>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_GPIO_Init+0x228>
 8002332:	2300      	movs	r3, #0
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	f002 0203 	and.w	r2, r2, #3
 800233a:	0092      	lsls	r2, r2, #2
 800233c:	4093      	lsls	r3, r2
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002344:	4935      	ldr	r1, [pc, #212]	@ (800241c <HAL_GPIO_Init+0x310>)
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002352:	4b3b      	ldr	r3, [pc, #236]	@ (8002440 <HAL_GPIO_Init+0x334>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002376:	4a32      	ldr	r2, [pc, #200]	@ (8002440 <HAL_GPIO_Init+0x334>)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800237c:	4b30      	ldr	r3, [pc, #192]	@ (8002440 <HAL_GPIO_Init+0x334>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a0:	4a27      	ldr	r2, [pc, #156]	@ (8002440 <HAL_GPIO_Init+0x334>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023a6:	4b26      	ldr	r3, [pc, #152]	@ (8002440 <HAL_GPIO_Init+0x334>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002440 <HAL_GPIO_Init+0x334>)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <HAL_GPIO_Init+0x334>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023f4:	4a12      	ldr	r2, [pc, #72]	@ (8002440 <HAL_GPIO_Init+0x334>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3301      	adds	r3, #1
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b0f      	cmp	r3, #15
 8002404:	f67f ae90 	bls.w	8002128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	40013800 	.word	0x40013800
 8002420:	40020000 	.word	0x40020000
 8002424:	40020400 	.word	0x40020400
 8002428:	40020800 	.word	0x40020800
 800242c:	40020c00 	.word	0x40020c00
 8002430:	40021000 	.word	0x40021000
 8002434:	40021400 	.word	0x40021400
 8002438:	40021800 	.word	0x40021800
 800243c:	40021c00 	.word	0x40021c00
 8002440:	40013c00 	.word	0x40013c00

08002444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
 8002450:	4613      	mov	r3, r2
 8002452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002454:	787b      	ldrb	r3, [r7, #1]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002460:	e003      	b.n	800246a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	041a      	lsls	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	619a      	str	r2, [r3, #24]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002476:	b480      	push	{r7}
 8002478:	b085      	sub	sp, #20
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002488:	887a      	ldrh	r2, [r7, #2]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4013      	ands	r3, r2
 800248e:	041a      	lsls	r2, r3, #16
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43d9      	mvns	r1, r3
 8002494:	887b      	ldrh	r3, [r7, #2]
 8002496:	400b      	ands	r3, r1
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	619a      	str	r2, [r3, #24]
}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e12b      	b.n	8002716 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff fa08 	bl	80018e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2224      	movs	r2, #36	@ 0x24
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0201 	bic.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800250e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002510:	f001 fbf6 	bl	8003d00 <HAL_RCC_GetPCLK1Freq>
 8002514:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	4a81      	ldr	r2, [pc, #516]	@ (8002720 <HAL_I2C_Init+0x274>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d807      	bhi.n	8002530 <HAL_I2C_Init+0x84>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4a80      	ldr	r2, [pc, #512]	@ (8002724 <HAL_I2C_Init+0x278>)
 8002524:	4293      	cmp	r3, r2
 8002526:	bf94      	ite	ls
 8002528:	2301      	movls	r3, #1
 800252a:	2300      	movhi	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	e006      	b.n	800253e <HAL_I2C_Init+0x92>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4a7d      	ldr	r2, [pc, #500]	@ (8002728 <HAL_I2C_Init+0x27c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	bf94      	ite	ls
 8002538:	2301      	movls	r3, #1
 800253a:	2300      	movhi	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e0e7      	b.n	8002716 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4a78      	ldr	r2, [pc, #480]	@ (800272c <HAL_I2C_Init+0x280>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	0c9b      	lsrs	r3, r3, #18
 8002550:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	430a      	orrs	r2, r1
 8002564:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4a6a      	ldr	r2, [pc, #424]	@ (8002720 <HAL_I2C_Init+0x274>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d802      	bhi.n	8002580 <HAL_I2C_Init+0xd4>
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	3301      	adds	r3, #1
 800257e:	e009      	b.n	8002594 <HAL_I2C_Init+0xe8>
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	4a69      	ldr	r2, [pc, #420]	@ (8002730 <HAL_I2C_Init+0x284>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	099b      	lsrs	r3, r3, #6
 8002592:	3301      	adds	r3, #1
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	430b      	orrs	r3, r1
 800259a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	495c      	ldr	r1, [pc, #368]	@ (8002720 <HAL_I2C_Init+0x274>)
 80025b0:	428b      	cmp	r3, r1
 80025b2:	d819      	bhi.n	80025e8 <HAL_I2C_Init+0x13c>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1e59      	subs	r1, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	fbb1 f3f3 	udiv	r3, r1, r3
 80025c2:	1c59      	adds	r1, r3, #1
 80025c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025c8:	400b      	ands	r3, r1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_I2C_Init+0x138>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1e59      	subs	r1, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80025dc:	3301      	adds	r3, #1
 80025de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e2:	e051      	b.n	8002688 <HAL_I2C_Init+0x1dc>
 80025e4:	2304      	movs	r3, #4
 80025e6:	e04f      	b.n	8002688 <HAL_I2C_Init+0x1dc>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d111      	bne.n	8002614 <HAL_I2C_Init+0x168>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1e58      	subs	r0, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	440b      	add	r3, r1
 80025fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002602:	3301      	adds	r3, #1
 8002604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf0c      	ite	eq
 800260c:	2301      	moveq	r3, #1
 800260e:	2300      	movne	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	e012      	b.n	800263a <HAL_I2C_Init+0x18e>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1e58      	subs	r0, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6859      	ldr	r1, [r3, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	0099      	lsls	r1, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	fbb0 f3f3 	udiv	r3, r0, r3
 800262a:	3301      	adds	r3, #1
 800262c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf0c      	ite	eq
 8002634:	2301      	moveq	r3, #1
 8002636:	2300      	movne	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Init+0x196>
 800263e:	2301      	movs	r3, #1
 8002640:	e022      	b.n	8002688 <HAL_I2C_Init+0x1dc>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10e      	bne.n	8002668 <HAL_I2C_Init+0x1bc>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1e58      	subs	r0, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6859      	ldr	r1, [r3, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	440b      	add	r3, r1
 8002658:	fbb0 f3f3 	udiv	r3, r0, r3
 800265c:	3301      	adds	r3, #1
 800265e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002666:	e00f      	b.n	8002688 <HAL_I2C_Init+0x1dc>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1e58      	subs	r0, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6859      	ldr	r1, [r3, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	0099      	lsls	r1, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	fbb0 f3f3 	udiv	r3, r0, r3
 800267e:	3301      	adds	r3, #1
 8002680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002684:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	6809      	ldr	r1, [r1, #0]
 800268c:	4313      	orrs	r3, r2
 800268e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6911      	ldr	r1, [r2, #16]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68d2      	ldr	r2, [r2, #12]
 80026c2:	4311      	orrs	r1, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	430b      	orrs	r3, r1
 80026ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0201 	orr.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2220      	movs	r2, #32
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	000186a0 	.word	0x000186a0
 8002724:	001e847f 	.word	0x001e847f
 8002728:	003d08ff 	.word	0x003d08ff
 800272c:	431bde83 	.word	0x431bde83
 8002730:	10624dd3 	.word	0x10624dd3

08002734 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	461a      	mov	r2, r3
 8002740:	460b      	mov	r3, r1
 8002742:	817b      	strh	r3, [r7, #10]
 8002744:	4613      	mov	r3, r2
 8002746:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002748:	f7ff fb0c 	bl	8001d64 <HAL_GetTick>
 800274c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b20      	cmp	r3, #32
 8002758:	f040 80e0 	bne.w	800291c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2319      	movs	r3, #25
 8002762:	2201      	movs	r2, #1
 8002764:	4970      	ldr	r1, [pc, #448]	@ (8002928 <HAL_I2C_Master_Transmit+0x1f4>)
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fc64 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002772:	2302      	movs	r3, #2
 8002774:	e0d3      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_I2C_Master_Transmit+0x50>
 8002780:	2302      	movs	r3, #2
 8002782:	e0cc      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b01      	cmp	r3, #1
 8002798:	d007      	beq.n	80027aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0201 	orr.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2221      	movs	r2, #33	@ 0x21
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2210      	movs	r2, #16
 80027c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	893a      	ldrh	r2, [r7, #8]
 80027da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4a50      	ldr	r2, [pc, #320]	@ (800292c <HAL_I2C_Master_Transmit+0x1f8>)
 80027ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027ec:	8979      	ldrh	r1, [r7, #10]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	6a3a      	ldr	r2, [r7, #32]
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 face 	bl	8002d94 <I2C_MasterRequestWrite>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e08d      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002818:	e066      	b.n	80028e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	6a39      	ldr	r1, [r7, #32]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fd22 	bl	8003268 <I2C_WaitOnTXEFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00d      	beq.n	8002846 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	2b04      	cmp	r3, #4
 8002830:	d107      	bne.n	8002842 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002840:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e06b      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	781a      	ldrb	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002860:	b29b      	uxth	r3, r3
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b04      	cmp	r3, #4
 8002882:	d11b      	bne.n	80028bc <HAL_I2C_Master_Transmit+0x188>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002888:	2b00      	cmp	r3, #0
 800288a:	d017      	beq.n	80028bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	6a39      	ldr	r1, [r7, #32]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 fd19 	bl	80032f8 <I2C_WaitOnBTFFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00d      	beq.n	80028e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d107      	bne.n	80028e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e01a      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d194      	bne.n	800281a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	e000      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800291c:	2302      	movs	r3, #2
  }
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	00100002 	.word	0x00100002
 800292c:	ffff0000 	.word	0xffff0000

08002930 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08c      	sub	sp, #48	@ 0x30
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	461a      	mov	r2, r3
 800293c:	460b      	mov	r3, r1
 800293e:	817b      	strh	r3, [r7, #10]
 8002940:	4613      	mov	r3, r2
 8002942:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002944:	f7ff fa0e 	bl	8001d64 <HAL_GetTick>
 8002948:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b20      	cmp	r3, #32
 8002954:	f040 8217 	bne.w	8002d86 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	2319      	movs	r3, #25
 800295e:	2201      	movs	r2, #1
 8002960:	497c      	ldr	r1, [pc, #496]	@ (8002b54 <HAL_I2C_Master_Receive+0x224>)
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fb66 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800296e:	2302      	movs	r3, #2
 8002970:	e20a      	b.n	8002d88 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_I2C_Master_Receive+0x50>
 800297c:	2302      	movs	r3, #2
 800297e:	e203      	b.n	8002d88 <HAL_I2C_Master_Receive+0x458>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b01      	cmp	r3, #1
 8002994:	d007      	beq.n	80029a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 0201 	orr.w	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2222      	movs	r2, #34	@ 0x22
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2210      	movs	r2, #16
 80029c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	893a      	ldrh	r2, [r7, #8]
 80029d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4a5c      	ldr	r2, [pc, #368]	@ (8002b58 <HAL_I2C_Master_Receive+0x228>)
 80029e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029e8:	8979      	ldrh	r1, [r7, #10]
 80029ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fa52 	bl	8002e98 <I2C_MasterRequestRead>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e1c4      	b.n	8002d88 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d113      	bne.n	8002a2e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a06:	2300      	movs	r3, #0
 8002a08:	623b      	str	r3, [r7, #32]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	623b      	str	r3, [r7, #32]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	623b      	str	r3, [r7, #32]
 8002a1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	e198      	b.n	8002d60 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d11b      	bne.n	8002a6e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e178      	b.n	8002d60 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d11b      	bne.n	8002aae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	e158      	b.n	8002d60 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002abc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ad4:	e144      	b.n	8002d60 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	f200 80f1 	bhi.w	8002cc2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d123      	bne.n	8002b30 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 fc4b 	bl	8003388 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e145      	b.n	8002d88 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b2e:	e117      	b.n	8002d60 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d14e      	bne.n	8002bd6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3e:	2200      	movs	r2, #0
 8002b40:	4906      	ldr	r1, [pc, #24]	@ (8002b5c <HAL_I2C_Master_Receive+0x22c>)
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fa76 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e11a      	b.n	8002d88 <HAL_I2C_Master_Receive+0x458>
 8002b52:	bf00      	nop
 8002b54:	00100002 	.word	0x00100002
 8002b58:	ffff0000 	.word	0xffff0000
 8002b5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bd4:	e0c4      	b.n	8002d60 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bdc:	2200      	movs	r2, #0
 8002bde:	496c      	ldr	r1, [pc, #432]	@ (8002d90 <HAL_I2C_Master_Receive+0x460>)
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 fa27 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0cb      	b.n	8002d88 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c38:	2200      	movs	r2, #0
 8002c3a:	4955      	ldr	r1, [pc, #340]	@ (8002d90 <HAL_I2C_Master_Receive+0x460>)
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f9f9 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e09d      	b.n	8002d88 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cc0:	e04e      	b.n	8002d60 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fb5e 	bl	8003388 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e058      	b.n	8002d88 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d124      	bne.n	8002d60 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d107      	bne.n	8002d2e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d2c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f47f aeb6 	bne.w	8002ad6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e000      	b.n	8002d88 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002d86:	2302      	movs	r3, #2
  }
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3728      	adds	r7, #40	@ 0x28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	00010004 	.word	0x00010004

08002d94 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	460b      	mov	r3, r1
 8002da2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d006      	beq.n	8002dbe <I2C_MasterRequestWrite+0x2a>
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d003      	beq.n	8002dbe <I2C_MasterRequestWrite+0x2a>
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002dbc:	d108      	bne.n	8002dd0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e00b      	b.n	8002de8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd4:	2b12      	cmp	r3, #18
 8002dd6:	d107      	bne.n	8002de8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002de6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f91d 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00d      	beq.n	8002e1c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e0e:	d103      	bne.n	8002e18 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e035      	b.n	8002e88 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e24:	d108      	bne.n	8002e38 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e26:	897b      	ldrh	r3, [r7, #10]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e34:	611a      	str	r2, [r3, #16]
 8002e36:	e01b      	b.n	8002e70 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e38:	897b      	ldrh	r3, [r7, #10]
 8002e3a:	11db      	asrs	r3, r3, #7
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	f003 0306 	and.w	r3, r3, #6
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	f063 030f 	orn	r3, r3, #15
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	490e      	ldr	r1, [pc, #56]	@ (8002e90 <I2C_MasterRequestWrite+0xfc>)
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f966 	bl	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e010      	b.n	8002e88 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e66:	897b      	ldrh	r3, [r7, #10]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	4907      	ldr	r1, [pc, #28]	@ (8002e94 <I2C_MasterRequestWrite+0x100>)
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f956 	bl	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	00010008 	.word	0x00010008
 8002e94:	00010002 	.word	0x00010002

08002e98 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ebc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d006      	beq.n	8002ed2 <I2C_MasterRequestRead+0x3a>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d003      	beq.n	8002ed2 <I2C_MasterRequestRead+0x3a>
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ed0:	d108      	bne.n	8002ee4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	e00b      	b.n	8002efc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	2b11      	cmp	r3, #17
 8002eea:	d107      	bne.n	8002efc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002efa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f893 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00d      	beq.n	8002f30 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f22:	d103      	bne.n	8002f2c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e079      	b.n	8003024 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f38:	d108      	bne.n	8002f4c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f3a:	897b      	ldrh	r3, [r7, #10]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	611a      	str	r2, [r3, #16]
 8002f4a:	e05f      	b.n	800300c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f4c:	897b      	ldrh	r3, [r7, #10]
 8002f4e:	11db      	asrs	r3, r3, #7
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f003 0306 	and.w	r3, r3, #6
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f063 030f 	orn	r3, r3, #15
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	4930      	ldr	r1, [pc, #192]	@ (800302c <I2C_MasterRequestRead+0x194>)
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f8dc 	bl	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e054      	b.n	8003024 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f7a:	897b      	ldrh	r3, [r7, #10]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4929      	ldr	r1, [pc, #164]	@ (8003030 <I2C_MasterRequestRead+0x198>)
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f8cc 	bl	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e044      	b.n	8003024 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fbe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f831 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fe6:	d103      	bne.n	8002ff0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fee:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e017      	b.n	8003024 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ff4:	897b      	ldrh	r3, [r7, #10]
 8002ff6:	11db      	asrs	r3, r3, #7
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f003 0306 	and.w	r3, r3, #6
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f063 030e 	orn	r3, r3, #14
 8003004:	b2da      	uxtb	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	4907      	ldr	r1, [pc, #28]	@ (8003030 <I2C_MasterRequestRead+0x198>)
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f888 	bl	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	00010008 	.word	0x00010008
 8003030:	00010002 	.word	0x00010002

08003034 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003044:	e048      	b.n	80030d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d044      	beq.n	80030d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304e:	f7fe fe89 	bl	8001d64 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d302      	bcc.n	8003064 <I2C_WaitOnFlagUntilTimeout+0x30>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d139      	bne.n	80030d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	0c1b      	lsrs	r3, r3, #16
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d10d      	bne.n	800308a <I2C_WaitOnFlagUntilTimeout+0x56>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	43da      	mvns	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4013      	ands	r3, r2
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	e00c      	b.n	80030a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	43da      	mvns	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4013      	ands	r3, r2
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d116      	bne.n	80030d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	f043 0220 	orr.w	r2, r3, #32
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e023      	b.n	8003120 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	0c1b      	lsrs	r3, r3, #16
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d10d      	bne.n	80030fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	43da      	mvns	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4013      	ands	r3, r2
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	e00c      	b.n	8003118 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	43da      	mvns	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4013      	ands	r3, r2
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	429a      	cmp	r2, r3
 800311c:	d093      	beq.n	8003046 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003136:	e071      	b.n	800321c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003146:	d123      	bne.n	8003190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003156:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003160:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317c:	f043 0204 	orr.w	r2, r3, #4
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e067      	b.n	8003260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003196:	d041      	beq.n	800321c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003198:	f7fe fde4 	bl	8001d64 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d302      	bcc.n	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d136      	bne.n	800321c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d10c      	bne.n	80031d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	43da      	mvns	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4013      	ands	r3, r2
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	bf14      	ite	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	2300      	moveq	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	e00b      	b.n	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	43da      	mvns	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4013      	ands	r3, r2
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d016      	beq.n	800321c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	f043 0220 	orr.w	r2, r3, #32
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e021      	b.n	8003260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	0c1b      	lsrs	r3, r3, #16
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	d10c      	bne.n	8003240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	43da      	mvns	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	4013      	ands	r3, r2
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf14      	ite	ne
 8003238:	2301      	movne	r3, #1
 800323a:	2300      	moveq	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	e00b      	b.n	8003258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4013      	ands	r3, r2
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	bf14      	ite	ne
 8003252:	2301      	movne	r3, #1
 8003254:	2300      	moveq	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	f47f af6d 	bne.w	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003274:	e034      	b.n	80032e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f8e3 	bl	8003442 <I2C_IsAcknowledgeFailed>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e034      	b.n	80032f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d028      	beq.n	80032e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328e:	f7fe fd69 	bl	8001d64 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	429a      	cmp	r2, r3
 800329c:	d302      	bcc.n	80032a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d11d      	bne.n	80032e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ae:	2b80      	cmp	r3, #128	@ 0x80
 80032b0:	d016      	beq.n	80032e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032cc:	f043 0220 	orr.w	r2, r3, #32
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e007      	b.n	80032f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ea:	2b80      	cmp	r3, #128	@ 0x80
 80032ec:	d1c3      	bne.n	8003276 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003304:	e034      	b.n	8003370 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f89b 	bl	8003442 <I2C_IsAcknowledgeFailed>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e034      	b.n	8003380 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d028      	beq.n	8003370 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331e:	f7fe fd21 	bl	8001d64 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	429a      	cmp	r2, r3
 800332c:	d302      	bcc.n	8003334 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d11d      	bne.n	8003370 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b04      	cmp	r3, #4
 8003340:	d016      	beq.n	8003370 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335c:	f043 0220 	orr.w	r2, r3, #32
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e007      	b.n	8003380 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b04      	cmp	r3, #4
 800337c:	d1c3      	bne.n	8003306 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003394:	e049      	b.n	800342a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d119      	bne.n	80033d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0210 	mvn.w	r2, #16
 80033ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e030      	b.n	800343a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d8:	f7fe fcc4 	bl	8001d64 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d302      	bcc.n	80033ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d11d      	bne.n	800342a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f8:	2b40      	cmp	r3, #64	@ 0x40
 80033fa:	d016      	beq.n	800342a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	f043 0220 	orr.w	r2, r3, #32
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e007      	b.n	800343a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003434:	2b40      	cmp	r3, #64	@ 0x40
 8003436:	d1ae      	bne.n	8003396 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003458:	d11b      	bne.n	8003492 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003462:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	f043 0204 	orr.w	r2, r3, #4
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e267      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d075      	beq.n	80035aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034be:	4b88      	ldr	r3, [pc, #544]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d00c      	beq.n	80034e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ca:	4b85      	ldr	r3, [pc, #532]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d112      	bne.n	80034fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034d6:	4b82      	ldr	r3, [pc, #520]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034e2:	d10b      	bne.n	80034fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e4:	4b7e      	ldr	r3, [pc, #504]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d05b      	beq.n	80035a8 <HAL_RCC_OscConfig+0x108>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d157      	bne.n	80035a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e242      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003504:	d106      	bne.n	8003514 <HAL_RCC_OscConfig+0x74>
 8003506:	4b76      	ldr	r3, [pc, #472]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a75      	ldr	r2, [pc, #468]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 800350c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e01d      	b.n	8003550 <HAL_RCC_OscConfig+0xb0>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0x98>
 800351e:	4b70      	ldr	r3, [pc, #448]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a6f      	ldr	r2, [pc, #444]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	4b6d      	ldr	r3, [pc, #436]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a6c      	ldr	r2, [pc, #432]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e00b      	b.n	8003550 <HAL_RCC_OscConfig+0xb0>
 8003538:	4b69      	ldr	r3, [pc, #420]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a68      	ldr	r2, [pc, #416]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 800353e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	4b66      	ldr	r3, [pc, #408]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a65      	ldr	r2, [pc, #404]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 800354a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800354e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d013      	beq.n	8003580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fe fc04 	bl	8001d64 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003560:	f7fe fc00 	bl	8001d64 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	@ 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e207      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	4b5b      	ldr	r3, [pc, #364]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0xc0>
 800357e:	e014      	b.n	80035aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fe fbf0 	bl	8001d64 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003588:	f7fe fbec 	bl	8001d64 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	@ 0x64
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e1f3      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359a:	4b51      	ldr	r3, [pc, #324]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0xe8>
 80035a6:	e000      	b.n	80035aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d063      	beq.n	800367e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035b6:	4b4a      	ldr	r3, [pc, #296]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c2:	4b47      	ldr	r3, [pc, #284]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d11c      	bne.n	8003608 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ce:	4b44      	ldr	r3, [pc, #272]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d116      	bne.n	8003608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035da:	4b41      	ldr	r3, [pc, #260]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_RCC_OscConfig+0x152>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d001      	beq.n	80035f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e1c7      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f2:	4b3b      	ldr	r3, [pc, #236]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4937      	ldr	r1, [pc, #220]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003602:	4313      	orrs	r3, r2
 8003604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003606:	e03a      	b.n	800367e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d020      	beq.n	8003652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003610:	4b34      	ldr	r3, [pc, #208]	@ (80036e4 <HAL_RCC_OscConfig+0x244>)
 8003612:	2201      	movs	r2, #1
 8003614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003616:	f7fe fba5 	bl	8001d64 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800361e:	f7fe fba1 	bl	8001d64 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e1a8      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003630:	4b2b      	ldr	r3, [pc, #172]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363c:	4b28      	ldr	r3, [pc, #160]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4925      	ldr	r1, [pc, #148]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 800364c:	4313      	orrs	r3, r2
 800364e:	600b      	str	r3, [r1, #0]
 8003650:	e015      	b.n	800367e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003652:	4b24      	ldr	r3, [pc, #144]	@ (80036e4 <HAL_RCC_OscConfig+0x244>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fe fb84 	bl	8001d64 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003660:	f7fe fb80 	bl	8001d64 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e187      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003672:	4b1b      	ldr	r3, [pc, #108]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d036      	beq.n	80036f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d016      	beq.n	80036c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003692:	4b15      	ldr	r3, [pc, #84]	@ (80036e8 <HAL_RCC_OscConfig+0x248>)
 8003694:	2201      	movs	r2, #1
 8003696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003698:	f7fe fb64 	bl	8001d64 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a0:	f7fe fb60 	bl	8001d64 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e167      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b2:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <HAL_RCC_OscConfig+0x240>)
 80036b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0x200>
 80036be:	e01b      	b.n	80036f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c0:	4b09      	ldr	r3, [pc, #36]	@ (80036e8 <HAL_RCC_OscConfig+0x248>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c6:	f7fe fb4d 	bl	8001d64 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036cc:	e00e      	b.n	80036ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ce:	f7fe fb49 	bl	8001d64 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d907      	bls.n	80036ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e150      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
 80036e0:	40023800 	.word	0x40023800
 80036e4:	42470000 	.word	0x42470000
 80036e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ec:	4b88      	ldr	r3, [pc, #544]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 80036ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1ea      	bne.n	80036ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8097 	beq.w	8003834 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003706:	2300      	movs	r3, #0
 8003708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370a:	4b81      	ldr	r3, [pc, #516]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10f      	bne.n	8003736 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	4b7d      	ldr	r3, [pc, #500]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	4a7c      	ldr	r2, [pc, #496]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 8003720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003724:	6413      	str	r3, [r2, #64]	@ 0x40
 8003726:	4b7a      	ldr	r3, [pc, #488]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003732:	2301      	movs	r3, #1
 8003734:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003736:	4b77      	ldr	r3, [pc, #476]	@ (8003914 <HAL_RCC_OscConfig+0x474>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d118      	bne.n	8003774 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003742:	4b74      	ldr	r3, [pc, #464]	@ (8003914 <HAL_RCC_OscConfig+0x474>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a73      	ldr	r2, [pc, #460]	@ (8003914 <HAL_RCC_OscConfig+0x474>)
 8003748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800374c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374e:	f7fe fb09 	bl	8001d64 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003756:	f7fe fb05 	bl	8001d64 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e10c      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	4b6a      	ldr	r3, [pc, #424]	@ (8003914 <HAL_RCC_OscConfig+0x474>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d106      	bne.n	800378a <HAL_RCC_OscConfig+0x2ea>
 800377c:	4b64      	ldr	r3, [pc, #400]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003780:	4a63      	ldr	r2, [pc, #396]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	6713      	str	r3, [r2, #112]	@ 0x70
 8003788:	e01c      	b.n	80037c4 <HAL_RCC_OscConfig+0x324>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b05      	cmp	r3, #5
 8003790:	d10c      	bne.n	80037ac <HAL_RCC_OscConfig+0x30c>
 8003792:	4b5f      	ldr	r3, [pc, #380]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003796:	4a5e      	ldr	r2, [pc, #376]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 8003798:	f043 0304 	orr.w	r3, r3, #4
 800379c:	6713      	str	r3, [r2, #112]	@ 0x70
 800379e:	4b5c      	ldr	r3, [pc, #368]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037aa:	e00b      	b.n	80037c4 <HAL_RCC_OscConfig+0x324>
 80037ac:	4b58      	ldr	r3, [pc, #352]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 80037ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b0:	4a57      	ldr	r2, [pc, #348]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b8:	4b55      	ldr	r3, [pc, #340]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037bc:	4a54      	ldr	r2, [pc, #336]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 80037be:	f023 0304 	bic.w	r3, r3, #4
 80037c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d015      	beq.n	80037f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037cc:	f7fe faca 	bl	8001d64 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	f7fe fac6 	bl	8001d64 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e0cb      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ea:	4b49      	ldr	r3, [pc, #292]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0ee      	beq.n	80037d4 <HAL_RCC_OscConfig+0x334>
 80037f6:	e014      	b.n	8003822 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f8:	f7fe fab4 	bl	8001d64 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003800:	f7fe fab0 	bl	8001d64 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e0b5      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003816:	4b3e      	ldr	r3, [pc, #248]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1ee      	bne.n	8003800 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003822:	7dfb      	ldrb	r3, [r7, #23]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d105      	bne.n	8003834 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003828:	4b39      	ldr	r3, [pc, #228]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	4a38      	ldr	r2, [pc, #224]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 800382e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003832:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80a1 	beq.w	8003980 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800383e:	4b34      	ldr	r3, [pc, #208]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b08      	cmp	r3, #8
 8003848:	d05c      	beq.n	8003904 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d141      	bne.n	80038d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003852:	4b31      	ldr	r3, [pc, #196]	@ (8003918 <HAL_RCC_OscConfig+0x478>)
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fe fa84 	bl	8001d64 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003860:	f7fe fa80 	bl	8001d64 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e087      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003872:	4b27      	ldr	r3, [pc, #156]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69da      	ldr	r2, [r3, #28]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388c:	019b      	lsls	r3, r3, #6
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	3b01      	subs	r3, #1
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a0:	061b      	lsls	r3, r3, #24
 80038a2:	491b      	ldr	r1, [pc, #108]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003918 <HAL_RCC_OscConfig+0x478>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ae:	f7fe fa59 	bl	8001d64 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b6:	f7fe fa55 	bl	8001d64 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e05c      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c8:	4b11      	ldr	r3, [pc, #68]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x416>
 80038d4:	e054      	b.n	8003980 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d6:	4b10      	ldr	r3, [pc, #64]	@ (8003918 <HAL_RCC_OscConfig+0x478>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7fe fa42 	bl	8001d64 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e4:	f7fe fa3e 	bl	8001d64 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e045      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f6:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <HAL_RCC_OscConfig+0x470>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x444>
 8003902:	e03d      	b.n	8003980 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d107      	bne.n	800391c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e038      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
 8003910:	40023800 	.word	0x40023800
 8003914:	40007000 	.word	0x40007000
 8003918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800391c:	4b1b      	ldr	r3, [pc, #108]	@ (800398c <HAL_RCC_OscConfig+0x4ec>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d028      	beq.n	800397c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003934:	429a      	cmp	r2, r3
 8003936:	d121      	bne.n	800397c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003942:	429a      	cmp	r2, r3
 8003944:	d11a      	bne.n	800397c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800394c:	4013      	ands	r3, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003954:	4293      	cmp	r3, r2
 8003956:	d111      	bne.n	800397c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003962:	085b      	lsrs	r3, r3, #1
 8003964:	3b01      	subs	r3, #1
 8003966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003968:	429a      	cmp	r2, r3
 800396a:	d107      	bne.n	800397c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800

08003990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0cc      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039a4:	4b68      	ldr	r3, [pc, #416]	@ (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d90c      	bls.n	80039cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b65      	ldr	r3, [pc, #404]	@ (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ba:	4b63      	ldr	r3, [pc, #396]	@ (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0b8      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d020      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e4:	4b59      	ldr	r3, [pc, #356]	@ (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a58      	ldr	r2, [pc, #352]	@ (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039fc:	4b53      	ldr	r3, [pc, #332]	@ (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4a52      	ldr	r2, [pc, #328]	@ (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a08:	4b50      	ldr	r3, [pc, #320]	@ (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	494d      	ldr	r1, [pc, #308]	@ (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d044      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2e:	4b47      	ldr	r3, [pc, #284]	@ (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d119      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e07f      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d003      	beq.n	8003a4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d107      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e06f      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e067      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a6e:	4b37      	ldr	r3, [pc, #220]	@ (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f023 0203 	bic.w	r2, r3, #3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4934      	ldr	r1, [pc, #208]	@ (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a80:	f7fe f970 	bl	8001d64 <HAL_GetTick>
 8003a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	e00a      	b.n	8003a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a88:	f7fe f96c 	bl	8001d64 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e04f      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 020c 	and.w	r2, r3, #12
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d1eb      	bne.n	8003a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab0:	4b25      	ldr	r3, [pc, #148]	@ (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d20c      	bcs.n	8003ad8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003abe:	4b22      	ldr	r3, [pc, #136]	@ (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac6:	4b20      	ldr	r3, [pc, #128]	@ (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e032      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae4:	4b19      	ldr	r3, [pc, #100]	@ (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4916      	ldr	r1, [pc, #88]	@ (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d009      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b02:	4b12      	ldr	r3, [pc, #72]	@ (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	490e      	ldr	r1, [pc, #56]	@ (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b16:	f000 f821 	bl	8003b5c <HAL_RCC_GetSysClockFreq>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	091b      	lsrs	r3, r3, #4
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	490a      	ldr	r1, [pc, #40]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 8003b28:	5ccb      	ldrb	r3, [r1, r3]
 8003b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2e:	4a09      	ldr	r2, [pc, #36]	@ (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b32:	4b09      	ldr	r3, [pc, #36]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe f8d0 	bl	8001cdc <HAL_InitTick>

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40023c00 	.word	0x40023c00
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	08006dac 	.word	0x08006dac
 8003b54:	20000008 	.word	0x20000008
 8003b58:	2000000c 	.word	0x2000000c

08003b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b60:	b090      	sub	sp, #64	@ 0x40
 8003b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b74:	4b59      	ldr	r3, [pc, #356]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 030c 	and.w	r3, r3, #12
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d00d      	beq.n	8003b9c <HAL_RCC_GetSysClockFreq+0x40>
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	f200 80a1 	bhi.w	8003cc8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_RCC_GetSysClockFreq+0x34>
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b8e:	e09b      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b90:	4b53      	ldr	r3, [pc, #332]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b94:	e09b      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b96:	4b53      	ldr	r3, [pc, #332]	@ (8003ce4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b9a:	e098      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b9c:	4b4f      	ldr	r3, [pc, #316]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ba4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ba6:	4b4d      	ldr	r3, [pc, #308]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d028      	beq.n	8003c04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb2:	4b4a      	ldr	r3, [pc, #296]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	099b      	lsrs	r3, r3, #6
 8003bb8:	2200      	movs	r2, #0
 8003bba:	623b      	str	r3, [r7, #32]
 8003bbc:	627a      	str	r2, [r7, #36]	@ 0x24
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4b47      	ldr	r3, [pc, #284]	@ (8003ce4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bc8:	fb03 f201 	mul.w	r2, r3, r1
 8003bcc:	2300      	movs	r3, #0
 8003bce:	fb00 f303 	mul.w	r3, r0, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	4a43      	ldr	r2, [pc, #268]	@ (8003ce4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bd6:	fba0 1202 	umull	r1, r2, r0, r2
 8003bda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bdc:	460a      	mov	r2, r1
 8003bde:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003be0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003be2:	4413      	add	r3, r2
 8003be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be8:	2200      	movs	r2, #0
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	61fa      	str	r2, [r7, #28]
 8003bee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003bf6:	f7fc fff7 	bl	8000be8 <__aeabi_uldivmod>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4613      	mov	r3, r2
 8003c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c02:	e053      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c04:	4b35      	ldr	r3, [pc, #212]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	099b      	lsrs	r3, r3, #6
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	617a      	str	r2, [r7, #20]
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c16:	f04f 0b00 	mov.w	fp, #0
 8003c1a:	4652      	mov	r2, sl
 8003c1c:	465b      	mov	r3, fp
 8003c1e:	f04f 0000 	mov.w	r0, #0
 8003c22:	f04f 0100 	mov.w	r1, #0
 8003c26:	0159      	lsls	r1, r3, #5
 8003c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c2c:	0150      	lsls	r0, r2, #5
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	ebb2 080a 	subs.w	r8, r2, sl
 8003c36:	eb63 090b 	sbc.w	r9, r3, fp
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c4e:	ebb2 0408 	subs.w	r4, r2, r8
 8003c52:	eb63 0509 	sbc.w	r5, r3, r9
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	00eb      	lsls	r3, r5, #3
 8003c60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c64:	00e2      	lsls	r2, r4, #3
 8003c66:	4614      	mov	r4, r2
 8003c68:	461d      	mov	r5, r3
 8003c6a:	eb14 030a 	adds.w	r3, r4, sl
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	eb45 030b 	adc.w	r3, r5, fp
 8003c74:	607b      	str	r3, [r7, #4]
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c82:	4629      	mov	r1, r5
 8003c84:	028b      	lsls	r3, r1, #10
 8003c86:	4621      	mov	r1, r4
 8003c88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	028a      	lsls	r2, r1, #10
 8003c90:	4610      	mov	r0, r2
 8003c92:	4619      	mov	r1, r3
 8003c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c96:	2200      	movs	r2, #0
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	60fa      	str	r2, [r7, #12]
 8003c9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ca0:	f7fc ffa2 	bl	8000be8 <__aeabi_uldivmod>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4613      	mov	r3, r2
 8003caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003cac:	4b0b      	ldr	r3, [pc, #44]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0x180>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	0c1b      	lsrs	r3, r3, #16
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003cbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cc6:	e002      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cc8:	4b05      	ldr	r3, [pc, #20]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3740      	adds	r7, #64	@ 0x40
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	00f42400 	.word	0x00f42400
 8003ce4:	017d7840 	.word	0x017d7840

08003ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cec:	4b03      	ldr	r3, [pc, #12]	@ (8003cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cee:	681b      	ldr	r3, [r3, #0]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000008 	.word	0x20000008

08003d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d04:	f7ff fff0 	bl	8003ce8 <HAL_RCC_GetHCLKFreq>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	4b05      	ldr	r3, [pc, #20]	@ (8003d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	0a9b      	lsrs	r3, r3, #10
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	4903      	ldr	r1, [pc, #12]	@ (8003d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d16:	5ccb      	ldrb	r3, [r1, r3]
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40023800 	.word	0x40023800
 8003d24:	08006dbc 	.word	0x08006dbc

08003d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d2c:	f7ff ffdc 	bl	8003ce8 <HAL_RCC_GetHCLKFreq>
 8003d30:	4602      	mov	r2, r0
 8003d32:	4b05      	ldr	r3, [pc, #20]	@ (8003d48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	0b5b      	lsrs	r3, r3, #13
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	4903      	ldr	r1, [pc, #12]	@ (8003d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d3e:	5ccb      	ldrb	r3, [r1, r3]
 8003d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	08006dbc 	.word	0x08006dbc

08003d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e041      	b.n	8003de6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fd fdfe 	bl	8001978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4610      	mov	r0, r2
 8003d90:	f000 fa7e 	bl	8004290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d001      	beq.n	8003e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e04e      	b.n	8003ea6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a23      	ldr	r2, [pc, #140]	@ (8003eb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d022      	beq.n	8003e70 <HAL_TIM_Base_Start_IT+0x80>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e32:	d01d      	beq.n	8003e70 <HAL_TIM_Base_Start_IT+0x80>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1f      	ldr	r2, [pc, #124]	@ (8003eb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d018      	beq.n	8003e70 <HAL_TIM_Base_Start_IT+0x80>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a1e      	ldr	r2, [pc, #120]	@ (8003ebc <HAL_TIM_Base_Start_IT+0xcc>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d013      	beq.n	8003e70 <HAL_TIM_Base_Start_IT+0x80>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ec0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00e      	beq.n	8003e70 <HAL_TIM_Base_Start_IT+0x80>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1b      	ldr	r2, [pc, #108]	@ (8003ec4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d009      	beq.n	8003e70 <HAL_TIM_Base_Start_IT+0x80>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a19      	ldr	r2, [pc, #100]	@ (8003ec8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d004      	beq.n	8003e70 <HAL_TIM_Base_Start_IT+0x80>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a18      	ldr	r2, [pc, #96]	@ (8003ecc <HAL_TIM_Base_Start_IT+0xdc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d111      	bne.n	8003e94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b06      	cmp	r3, #6
 8003e80:	d010      	beq.n	8003ea4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0201 	orr.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e92:	e007      	b.n	8003ea4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40010000 	.word	0x40010000
 8003eb8:	40000400 	.word	0x40000400
 8003ebc:	40000800 	.word	0x40000800
 8003ec0:	40000c00 	.word	0x40000c00
 8003ec4:	40010400 	.word	0x40010400
 8003ec8:	40014000 	.word	0x40014000
 8003ecc:	40001800 	.word	0x40001800

08003ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d020      	beq.n	8003f34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d01b      	beq.n	8003f34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0202 	mvn.w	r2, #2
 8003f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f999 	bl	8004252 <HAL_TIM_IC_CaptureCallback>
 8003f20:	e005      	b.n	8003f2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f98b 	bl	800423e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f99c 	bl	8004266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d020      	beq.n	8003f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01b      	beq.n	8003f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0204 	mvn.w	r2, #4
 8003f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2202      	movs	r2, #2
 8003f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f973 	bl	8004252 <HAL_TIM_IC_CaptureCallback>
 8003f6c:	e005      	b.n	8003f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f965 	bl	800423e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f976 	bl	8004266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d020      	beq.n	8003fcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01b      	beq.n	8003fcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0208 	mvn.w	r2, #8
 8003f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f94d 	bl	8004252 <HAL_TIM_IC_CaptureCallback>
 8003fb8:	e005      	b.n	8003fc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f93f 	bl	800423e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f950 	bl	8004266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d020      	beq.n	8004018 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01b      	beq.n	8004018 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0210 	mvn.w	r2, #16
 8003fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2208      	movs	r2, #8
 8003fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f927 	bl	8004252 <HAL_TIM_IC_CaptureCallback>
 8004004:	e005      	b.n	8004012 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f919 	bl	800423e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f92a 	bl	8004266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00c      	beq.n	800403c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d007      	beq.n	800403c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0201 	mvn.w	r2, #1
 8004034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fd f9ac 	bl	8001394 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00c      	beq.n	8004060 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fade 	bl	800461c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00c      	beq.n	8004084 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004070:	2b00      	cmp	r3, #0
 8004072:	d007      	beq.n	8004084 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800407c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f8fb 	bl	800427a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00c      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0220 	mvn.w	r2, #32
 80040a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fab0 	bl	8004608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_TIM_ConfigClockSource+0x1c>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e0b4      	b.n	8004236 <HAL_TIM_ConfigClockSource+0x186>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004104:	d03e      	beq.n	8004184 <HAL_TIM_ConfigClockSource+0xd4>
 8004106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800410a:	f200 8087 	bhi.w	800421c <HAL_TIM_ConfigClockSource+0x16c>
 800410e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004112:	f000 8086 	beq.w	8004222 <HAL_TIM_ConfigClockSource+0x172>
 8004116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800411a:	d87f      	bhi.n	800421c <HAL_TIM_ConfigClockSource+0x16c>
 800411c:	2b70      	cmp	r3, #112	@ 0x70
 800411e:	d01a      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0xa6>
 8004120:	2b70      	cmp	r3, #112	@ 0x70
 8004122:	d87b      	bhi.n	800421c <HAL_TIM_ConfigClockSource+0x16c>
 8004124:	2b60      	cmp	r3, #96	@ 0x60
 8004126:	d050      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x11a>
 8004128:	2b60      	cmp	r3, #96	@ 0x60
 800412a:	d877      	bhi.n	800421c <HAL_TIM_ConfigClockSource+0x16c>
 800412c:	2b50      	cmp	r3, #80	@ 0x50
 800412e:	d03c      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0xfa>
 8004130:	2b50      	cmp	r3, #80	@ 0x50
 8004132:	d873      	bhi.n	800421c <HAL_TIM_ConfigClockSource+0x16c>
 8004134:	2b40      	cmp	r3, #64	@ 0x40
 8004136:	d058      	beq.n	80041ea <HAL_TIM_ConfigClockSource+0x13a>
 8004138:	2b40      	cmp	r3, #64	@ 0x40
 800413a:	d86f      	bhi.n	800421c <HAL_TIM_ConfigClockSource+0x16c>
 800413c:	2b30      	cmp	r3, #48	@ 0x30
 800413e:	d064      	beq.n	800420a <HAL_TIM_ConfigClockSource+0x15a>
 8004140:	2b30      	cmp	r3, #48	@ 0x30
 8004142:	d86b      	bhi.n	800421c <HAL_TIM_ConfigClockSource+0x16c>
 8004144:	2b20      	cmp	r3, #32
 8004146:	d060      	beq.n	800420a <HAL_TIM_ConfigClockSource+0x15a>
 8004148:	2b20      	cmp	r3, #32
 800414a:	d867      	bhi.n	800421c <HAL_TIM_ConfigClockSource+0x16c>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d05c      	beq.n	800420a <HAL_TIM_ConfigClockSource+0x15a>
 8004150:	2b10      	cmp	r3, #16
 8004152:	d05a      	beq.n	800420a <HAL_TIM_ConfigClockSource+0x15a>
 8004154:	e062      	b.n	800421c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004166:	f000 f9b3 	bl	80044d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004178:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	609a      	str	r2, [r3, #8]
      break;
 8004182:	e04f      	b.n	8004224 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004194:	f000 f99c 	bl	80044d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041a6:	609a      	str	r2, [r3, #8]
      break;
 80041a8:	e03c      	b.n	8004224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b6:	461a      	mov	r2, r3
 80041b8:	f000 f910 	bl	80043dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2150      	movs	r1, #80	@ 0x50
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 f969 	bl	800449a <TIM_ITRx_SetConfig>
      break;
 80041c8:	e02c      	b.n	8004224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041d6:	461a      	mov	r2, r3
 80041d8:	f000 f92f 	bl	800443a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2160      	movs	r1, #96	@ 0x60
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 f959 	bl	800449a <TIM_ITRx_SetConfig>
      break;
 80041e8:	e01c      	b.n	8004224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f6:	461a      	mov	r2, r3
 80041f8:	f000 f8f0 	bl	80043dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2140      	movs	r1, #64	@ 0x40
 8004202:	4618      	mov	r0, r3
 8004204:	f000 f949 	bl	800449a <TIM_ITRx_SetConfig>
      break;
 8004208:	e00c      	b.n	8004224 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4619      	mov	r1, r3
 8004214:	4610      	mov	r0, r2
 8004216:	f000 f940 	bl	800449a <TIM_ITRx_SetConfig>
      break;
 800421a:	e003      	b.n	8004224 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
      break;
 8004220:	e000      	b.n	8004224 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004222:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004234:	7bfb      	ldrb	r3, [r7, #15]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a43      	ldr	r2, [pc, #268]	@ (80043b0 <TIM_Base_SetConfig+0x120>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d013      	beq.n	80042d0 <TIM_Base_SetConfig+0x40>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ae:	d00f      	beq.n	80042d0 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a40      	ldr	r2, [pc, #256]	@ (80043b4 <TIM_Base_SetConfig+0x124>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00b      	beq.n	80042d0 <TIM_Base_SetConfig+0x40>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a3f      	ldr	r2, [pc, #252]	@ (80043b8 <TIM_Base_SetConfig+0x128>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d007      	beq.n	80042d0 <TIM_Base_SetConfig+0x40>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a3e      	ldr	r2, [pc, #248]	@ (80043bc <TIM_Base_SetConfig+0x12c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d003      	beq.n	80042d0 <TIM_Base_SetConfig+0x40>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a3d      	ldr	r2, [pc, #244]	@ (80043c0 <TIM_Base_SetConfig+0x130>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d108      	bne.n	80042e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a32      	ldr	r2, [pc, #200]	@ (80043b0 <TIM_Base_SetConfig+0x120>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d02b      	beq.n	8004342 <TIM_Base_SetConfig+0xb2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f0:	d027      	beq.n	8004342 <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a2f      	ldr	r2, [pc, #188]	@ (80043b4 <TIM_Base_SetConfig+0x124>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d023      	beq.n	8004342 <TIM_Base_SetConfig+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a2e      	ldr	r2, [pc, #184]	@ (80043b8 <TIM_Base_SetConfig+0x128>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d01f      	beq.n	8004342 <TIM_Base_SetConfig+0xb2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a2d      	ldr	r2, [pc, #180]	@ (80043bc <TIM_Base_SetConfig+0x12c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d01b      	beq.n	8004342 <TIM_Base_SetConfig+0xb2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a2c      	ldr	r2, [pc, #176]	@ (80043c0 <TIM_Base_SetConfig+0x130>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d017      	beq.n	8004342 <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a2b      	ldr	r2, [pc, #172]	@ (80043c4 <TIM_Base_SetConfig+0x134>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d013      	beq.n	8004342 <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a2a      	ldr	r2, [pc, #168]	@ (80043c8 <TIM_Base_SetConfig+0x138>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00f      	beq.n	8004342 <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a29      	ldr	r2, [pc, #164]	@ (80043cc <TIM_Base_SetConfig+0x13c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00b      	beq.n	8004342 <TIM_Base_SetConfig+0xb2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a28      	ldr	r2, [pc, #160]	@ (80043d0 <TIM_Base_SetConfig+0x140>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d007      	beq.n	8004342 <TIM_Base_SetConfig+0xb2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a27      	ldr	r2, [pc, #156]	@ (80043d4 <TIM_Base_SetConfig+0x144>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d003      	beq.n	8004342 <TIM_Base_SetConfig+0xb2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a26      	ldr	r2, [pc, #152]	@ (80043d8 <TIM_Base_SetConfig+0x148>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d108      	bne.n	8004354 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a0e      	ldr	r2, [pc, #56]	@ (80043b0 <TIM_Base_SetConfig+0x120>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d003      	beq.n	8004382 <TIM_Base_SetConfig+0xf2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a10      	ldr	r2, [pc, #64]	@ (80043c0 <TIM_Base_SetConfig+0x130>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d103      	bne.n	800438a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	691a      	ldr	r2, [r3, #16]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f043 0204 	orr.w	r2, r3, #4
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	601a      	str	r2, [r3, #0]
}
 80043a2:	bf00      	nop
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40000400 	.word	0x40000400
 80043b8:	40000800 	.word	0x40000800
 80043bc:	40000c00 	.word	0x40000c00
 80043c0:	40010400 	.word	0x40010400
 80043c4:	40014000 	.word	0x40014000
 80043c8:	40014400 	.word	0x40014400
 80043cc:	40014800 	.word	0x40014800
 80043d0:	40001800 	.word	0x40001800
 80043d4:	40001c00 	.word	0x40001c00
 80043d8:	40002000 	.word	0x40002000

080043dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	f023 0201 	bic.w	r2, r3, #1
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f023 030a 	bic.w	r3, r3, #10
 8004418:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4313      	orrs	r3, r2
 8004420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	621a      	str	r2, [r3, #32]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800443a:	b480      	push	{r7}
 800443c:	b087      	sub	sp, #28
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	f023 0210 	bic.w	r2, r3, #16
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004464:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	031b      	lsls	r3, r3, #12
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004476:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f043 0307 	orr.w	r3, r3, #7
 80044bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	609a      	str	r2, [r3, #8]
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	021a      	lsls	r2, r3, #8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	609a      	str	r2, [r3, #8]
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004524:	2302      	movs	r3, #2
 8004526:	e05a      	b.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800454e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a21      	ldr	r2, [pc, #132]	@ (80045ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d022      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004574:	d01d      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1d      	ldr	r2, [pc, #116]	@ (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d018      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1b      	ldr	r2, [pc, #108]	@ (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d013      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a1a      	ldr	r2, [pc, #104]	@ (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00e      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a18      	ldr	r2, [pc, #96]	@ (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d009      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a17      	ldr	r2, [pc, #92]	@ (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d004      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a15      	ldr	r2, [pc, #84]	@ (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d10c      	bne.n	80045cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40010000 	.word	0x40010000
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40000800 	.word	0x40000800
 80045f8:	40000c00 	.word	0x40000c00
 80045fc:	40010400 	.word	0x40010400
 8004600:	40014000 	.word	0x40014000
 8004604:	40001800 	.word	0x40001800

08004608 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e042      	b.n	80046c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fd f9c4 	bl	80019e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2224      	movs	r2, #36	@ 0x24
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fd7f 	bl	8005178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695a      	ldr	r2, [r3, #20]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004698:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08a      	sub	sp, #40	@ 0x28
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	4613      	mov	r3, r2
 80046de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d175      	bne.n	80047dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_UART_Transmit+0x2c>
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e06e      	b.n	80047de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2221      	movs	r2, #33	@ 0x21
 800470a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800470e:	f7fd fb29 	bl	8001d64 <HAL_GetTick>
 8004712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	88fa      	ldrh	r2, [r7, #6]
 8004718:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	88fa      	ldrh	r2, [r7, #6]
 800471e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004728:	d108      	bne.n	800473c <HAL_UART_Transmit+0x6c>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d104      	bne.n	800473c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004732:	2300      	movs	r3, #0
 8004734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	e003      	b.n	8004744 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004740:	2300      	movs	r3, #0
 8004742:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004744:	e02e      	b.n	80047a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2200      	movs	r2, #0
 800474e:	2180      	movs	r1, #128	@ 0x80
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 fb1d 	bl	8004d90 <UART_WaitOnFlagUntilTimeout>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e03a      	b.n	80047de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10b      	bne.n	8004786 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800477c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	3302      	adds	r3, #2
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	e007      	b.n	8004796 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	781a      	ldrb	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	3301      	adds	r3, #1
 8004794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1cb      	bne.n	8004746 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2200      	movs	r2, #0
 80047b6:	2140      	movs	r1, #64	@ 0x40
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fae9 	bl	8004d90 <UART_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e006      	b.n	80047de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	e000      	b.n	80047de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80047dc:	2302      	movs	r3, #2
  }
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b0ba      	sub	sp, #232	@ 0xe8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800480e:	2300      	movs	r3, #0
 8004810:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004814:	2300      	movs	r3, #0
 8004816:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800481a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10f      	bne.n	800484e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800482e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d009      	beq.n	800484e <HAL_UART_IRQHandler+0x66>
 800483a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fbd7 	bl	8004ffa <UART_Receive_IT>
      return;
 800484c:	e273      	b.n	8004d36 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800484e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 80de 	beq.w	8004a14 <HAL_UART_IRQHandler+0x22c>
 8004858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d106      	bne.n	8004872 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004868:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 80d1 	beq.w	8004a14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00b      	beq.n	8004896 <HAL_UART_IRQHandler+0xae>
 800487e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488e:	f043 0201 	orr.w	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <HAL_UART_IRQHandler+0xd2>
 80048a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b2:	f043 0202 	orr.w	r2, r3, #2
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00b      	beq.n	80048de <HAL_UART_IRQHandler+0xf6>
 80048c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d005      	beq.n	80048de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d6:	f043 0204 	orr.w	r2, r3, #4
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d011      	beq.n	800490e <HAL_UART_IRQHandler+0x126>
 80048ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d105      	bne.n	8004902 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004906:	f043 0208 	orr.w	r2, r3, #8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 820a 	beq.w	8004d2c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_UART_IRQHandler+0x14e>
 8004924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fb62 	bl	8004ffa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004940:	2b40      	cmp	r3, #64	@ 0x40
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d103      	bne.n	8004962 <HAL_UART_IRQHandler+0x17a>
 800495a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800495e:	2b00      	cmp	r3, #0
 8004960:	d04f      	beq.n	8004a02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fa6d 	bl	8004e42 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004972:	2b40      	cmp	r3, #64	@ 0x40
 8004974:	d141      	bne.n	80049fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3314      	adds	r3, #20
 800497c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800498c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004994:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3314      	adds	r3, #20
 800499e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1d9      	bne.n	8004976 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d013      	beq.n	80049f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ce:	4a8a      	ldr	r2, [pc, #552]	@ (8004bf8 <HAL_UART_IRQHandler+0x410>)
 80049d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fd fb75 	bl	80020c6 <HAL_DMA_Abort_IT>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d016      	beq.n	8004a10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049ec:	4610      	mov	r0, r2
 80049ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f0:	e00e      	b.n	8004a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f9b6 	bl	8004d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f8:	e00a      	b.n	8004a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f9b2 	bl	8004d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a00:	e006      	b.n	8004a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f9ae 	bl	8004d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a0e:	e18d      	b.n	8004d2c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a10:	bf00      	nop
    return;
 8004a12:	e18b      	b.n	8004d2c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	f040 8167 	bne.w	8004cec <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 8160 	beq.w	8004cec <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8159 	beq.w	8004cec <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a5a:	2b40      	cmp	r3, #64	@ 0x40
 8004a5c:	f040 80ce 	bne.w	8004bfc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80a9 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	f080 80a2 	bcs.w	8004bc8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a96:	f000 8088 	beq.w	8004baa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	330c      	adds	r3, #12
 8004aa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004aa8:	e853 3f00 	ldrex	r3, [r3]
 8004aac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	330c      	adds	r3, #12
 8004ac2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ac6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004aca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ad2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1d9      	bne.n	8004a9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3314      	adds	r3, #20
 8004aec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004af6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004af8:	f023 0301 	bic.w	r3, r3, #1
 8004afc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3314      	adds	r3, #20
 8004b06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b16:	e841 2300 	strex	r3, r2, [r1]
 8004b1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1e1      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3314      	adds	r3, #20
 8004b28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b2c:	e853 3f00 	ldrex	r3, [r3]
 8004b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3314      	adds	r3, #20
 8004b42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e3      	bne.n	8004b22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	330c      	adds	r3, #12
 8004b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b72:	e853 3f00 	ldrex	r3, [r3]
 8004b76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b7a:	f023 0310 	bic.w	r3, r3, #16
 8004b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	330c      	adds	r3, #12
 8004b88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004b8c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b8e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b94:	e841 2300 	strex	r3, r2, [r1]
 8004b98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e3      	bne.n	8004b68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fd fa1e 	bl	8001fe6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2202      	movs	r2, #2
 8004bae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f8d9 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004bc6:	e0b3      	b.n	8004d30 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	f040 80ad 	bne.w	8004d30 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004be0:	f040 80a6 	bne.w	8004d30 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f8c1 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
      return;
 8004bf6:	e09b      	b.n	8004d30 <HAL_UART_IRQHandler+0x548>
 8004bf8:	08004f09 	.word	0x08004f09
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 808e 	beq.w	8004d34 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8089 	beq.w	8004d34 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	330c      	adds	r3, #12
 8004c28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	330c      	adds	r3, #12
 8004c42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c46:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e3      	bne.n	8004c22 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3314      	adds	r3, #20
 8004c60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	623b      	str	r3, [r7, #32]
   return(result);
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3314      	adds	r3, #20
 8004c7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e3      	bne.n	8004c5a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0310 	bic.w	r3, r3, #16
 8004cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004cc4:	61fa      	str	r2, [r7, #28]
 8004cc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	69b9      	ldr	r1, [r7, #24]
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e3      	bne.n	8004ca0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f847 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cea:	e023      	b.n	8004d34 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d009      	beq.n	8004d0c <HAL_UART_IRQHandler+0x524>
 8004cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f910 	bl	8004f2a <UART_Transmit_IT>
    return;
 8004d0a:	e014      	b.n	8004d36 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00e      	beq.n	8004d36 <HAL_UART_IRQHandler+0x54e>
 8004d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d008      	beq.n	8004d36 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f950 	bl	8004fca <UART_EndTransmit_IT>
    return;
 8004d2a:	e004      	b.n	8004d36 <HAL_UART_IRQHandler+0x54e>
    return;
 8004d2c:	bf00      	nop
 8004d2e:	e002      	b.n	8004d36 <HAL_UART_IRQHandler+0x54e>
      return;
 8004d30:	bf00      	nop
 8004d32:	e000      	b.n	8004d36 <HAL_UART_IRQHandler+0x54e>
      return;
 8004d34:	bf00      	nop
  }
}
 8004d36:	37e8      	adds	r7, #232	@ 0xe8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da0:	e03b      	b.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da8:	d037      	beq.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004daa:	f7fc ffdb 	bl	8001d64 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	6a3a      	ldr	r2, [r7, #32]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d302      	bcc.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e03a      	b.n	8004e3a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d023      	beq.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b80      	cmp	r3, #128	@ 0x80
 8004dd6:	d020      	beq.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b40      	cmp	r3, #64	@ 0x40
 8004ddc:	d01d      	beq.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d116      	bne.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f81d 	bl	8004e42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2208      	movs	r2, #8
 8004e0c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e00f      	b.n	8004e3a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4013      	ands	r3, r2
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	bf0c      	ite	eq
 8004e2a:	2301      	moveq	r3, #1
 8004e2c:	2300      	movne	r3, #0
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d0b4      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b095      	sub	sp, #84	@ 0x54
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	330c      	adds	r3, #12
 8004e68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e6a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e5      	bne.n	8004e4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3314      	adds	r3, #20
 8004e84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3314      	adds	r3, #20
 8004e9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ea4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ea6:	e841 2300 	strex	r3, r2, [r1]
 8004eaa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e5      	bne.n	8004e7e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d119      	bne.n	8004eee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	330c      	adds	r3, #12
 8004ec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f023 0310 	bic.w	r3, r3, #16
 8004ed0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	330c      	adds	r3, #12
 8004ed8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004eda:	61ba      	str	r2, [r7, #24]
 8004edc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	6979      	ldr	r1, [r7, #20]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e5      	bne.n	8004eba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004efc:	bf00      	nop
 8004efe:	3754      	adds	r7, #84	@ 0x54
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f7ff ff21 	bl	8004d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f22:	bf00      	nop
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b085      	sub	sp, #20
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b21      	cmp	r3, #33	@ 0x21
 8004f3c:	d13e      	bne.n	8004fbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f46:	d114      	bne.n	8004f72 <UART_Transmit_IT+0x48>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d110      	bne.n	8004f72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	1c9a      	adds	r2, r3, #2
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	621a      	str	r2, [r3, #32]
 8004f70:	e008      	b.n	8004f84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	1c59      	adds	r1, r3, #1
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6211      	str	r1, [r2, #32]
 8004f7c:	781a      	ldrb	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	4619      	mov	r1, r3
 8004f92:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10f      	bne.n	8004fb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fa6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	e000      	b.n	8004fbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fbc:	2302      	movs	r3, #2
  }
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fe0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff fea6 	bl	8004d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b08c      	sub	sp, #48	@ 0x30
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005002:	2300      	movs	r3, #0
 8005004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005006:	2300      	movs	r3, #0
 8005008:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b22      	cmp	r3, #34	@ 0x22
 8005014:	f040 80aa 	bne.w	800516c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005020:	d115      	bne.n	800504e <UART_Receive_IT+0x54>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d111      	bne.n	800504e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	b29b      	uxth	r3, r3
 8005038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503c:	b29a      	uxth	r2, r3
 800503e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005040:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005046:	1c9a      	adds	r2, r3, #2
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	629a      	str	r2, [r3, #40]	@ 0x28
 800504c:	e024      	b.n	8005098 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005052:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800505c:	d007      	beq.n	800506e <UART_Receive_IT+0x74>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10a      	bne.n	800507c <UART_Receive_IT+0x82>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	b2da      	uxtb	r2, r3
 8005076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005078:	701a      	strb	r2, [r3, #0]
 800507a:	e008      	b.n	800508e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	b2db      	uxtb	r3, r3
 8005084:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005088:	b2da      	uxtb	r2, r3
 800508a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800508c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4619      	mov	r1, r3
 80050a6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d15d      	bne.n	8005168 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0220 	bic.w	r2, r2, #32
 80050ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695a      	ldr	r2, [r3, #20]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0201 	bic.w	r2, r2, #1
 80050da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d135      	bne.n	800515e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	330c      	adds	r3, #12
 80050fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	e853 3f00 	ldrex	r3, [r3]
 8005106:	613b      	str	r3, [r7, #16]
   return(result);
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f023 0310 	bic.w	r3, r3, #16
 800510e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005118:	623a      	str	r2, [r7, #32]
 800511a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511c:	69f9      	ldr	r1, [r7, #28]
 800511e:	6a3a      	ldr	r2, [r7, #32]
 8005120:	e841 2300 	strex	r3, r2, [r1]
 8005124:	61bb      	str	r3, [r7, #24]
   return(result);
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1e5      	bne.n	80050f8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b10      	cmp	r3, #16
 8005138:	d10a      	bne.n	8005150 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff fe0e 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
 800515c:	e002      	b.n	8005164 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff fdf6 	bl	8004d50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	e002      	b.n	800516e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	e000      	b.n	800516e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800516c:	2302      	movs	r3, #2
  }
}
 800516e:	4618      	mov	r0, r3
 8005170:	3730      	adds	r7, #48	@ 0x30
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800517c:	b0c0      	sub	sp, #256	@ 0x100
 800517e:	af00      	add	r7, sp, #0
 8005180:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005194:	68d9      	ldr	r1, [r3, #12]
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	ea40 0301 	orr.w	r3, r0, r1
 80051a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	431a      	orrs	r2, r3
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80051d0:	f021 010c 	bic.w	r1, r1, #12
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051de:	430b      	orrs	r3, r1
 80051e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f2:	6999      	ldr	r1, [r3, #24]
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	ea40 0301 	orr.w	r3, r0, r1
 80051fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b8f      	ldr	r3, [pc, #572]	@ (8005444 <UART_SetConfig+0x2cc>)
 8005208:	429a      	cmp	r2, r3
 800520a:	d005      	beq.n	8005218 <UART_SetConfig+0xa0>
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4b8d      	ldr	r3, [pc, #564]	@ (8005448 <UART_SetConfig+0x2d0>)
 8005214:	429a      	cmp	r2, r3
 8005216:	d104      	bne.n	8005222 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005218:	f7fe fd86 	bl	8003d28 <HAL_RCC_GetPCLK2Freq>
 800521c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005220:	e003      	b.n	800522a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005222:	f7fe fd6d 	bl	8003d00 <HAL_RCC_GetPCLK1Freq>
 8005226:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800522a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005234:	f040 810c 	bne.w	8005450 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800523c:	2200      	movs	r2, #0
 800523e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005242:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005246:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800524a:	4622      	mov	r2, r4
 800524c:	462b      	mov	r3, r5
 800524e:	1891      	adds	r1, r2, r2
 8005250:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005252:	415b      	adcs	r3, r3
 8005254:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005256:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800525a:	4621      	mov	r1, r4
 800525c:	eb12 0801 	adds.w	r8, r2, r1
 8005260:	4629      	mov	r1, r5
 8005262:	eb43 0901 	adc.w	r9, r3, r1
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800527a:	4690      	mov	r8, r2
 800527c:	4699      	mov	r9, r3
 800527e:	4623      	mov	r3, r4
 8005280:	eb18 0303 	adds.w	r3, r8, r3
 8005284:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005288:	462b      	mov	r3, r5
 800528a:	eb49 0303 	adc.w	r3, r9, r3
 800528e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800529e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80052a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052a6:	460b      	mov	r3, r1
 80052a8:	18db      	adds	r3, r3, r3
 80052aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80052ac:	4613      	mov	r3, r2
 80052ae:	eb42 0303 	adc.w	r3, r2, r3
 80052b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80052b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80052b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80052bc:	f7fb fc94 	bl	8000be8 <__aeabi_uldivmod>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4b61      	ldr	r3, [pc, #388]	@ (800544c <UART_SetConfig+0x2d4>)
 80052c6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	011c      	lsls	r4, r3, #4
 80052ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80052dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80052e0:	4642      	mov	r2, r8
 80052e2:	464b      	mov	r3, r9
 80052e4:	1891      	adds	r1, r2, r2
 80052e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80052e8:	415b      	adcs	r3, r3
 80052ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052f0:	4641      	mov	r1, r8
 80052f2:	eb12 0a01 	adds.w	sl, r2, r1
 80052f6:	4649      	mov	r1, r9
 80052f8:	eb43 0b01 	adc.w	fp, r3, r1
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005308:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800530c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005310:	4692      	mov	sl, r2
 8005312:	469b      	mov	fp, r3
 8005314:	4643      	mov	r3, r8
 8005316:	eb1a 0303 	adds.w	r3, sl, r3
 800531a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800531e:	464b      	mov	r3, r9
 8005320:	eb4b 0303 	adc.w	r3, fp, r3
 8005324:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005334:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005338:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800533c:	460b      	mov	r3, r1
 800533e:	18db      	adds	r3, r3, r3
 8005340:	643b      	str	r3, [r7, #64]	@ 0x40
 8005342:	4613      	mov	r3, r2
 8005344:	eb42 0303 	adc.w	r3, r2, r3
 8005348:	647b      	str	r3, [r7, #68]	@ 0x44
 800534a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800534e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005352:	f7fb fc49 	bl	8000be8 <__aeabi_uldivmod>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4611      	mov	r1, r2
 800535c:	4b3b      	ldr	r3, [pc, #236]	@ (800544c <UART_SetConfig+0x2d4>)
 800535e:	fba3 2301 	umull	r2, r3, r3, r1
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	2264      	movs	r2, #100	@ 0x64
 8005366:	fb02 f303 	mul.w	r3, r2, r3
 800536a:	1acb      	subs	r3, r1, r3
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005372:	4b36      	ldr	r3, [pc, #216]	@ (800544c <UART_SetConfig+0x2d4>)
 8005374:	fba3 2302 	umull	r2, r3, r3, r2
 8005378:	095b      	lsrs	r3, r3, #5
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005380:	441c      	add	r4, r3
 8005382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005386:	2200      	movs	r2, #0
 8005388:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800538c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005390:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005394:	4642      	mov	r2, r8
 8005396:	464b      	mov	r3, r9
 8005398:	1891      	adds	r1, r2, r2
 800539a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800539c:	415b      	adcs	r3, r3
 800539e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80053a4:	4641      	mov	r1, r8
 80053a6:	1851      	adds	r1, r2, r1
 80053a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80053aa:	4649      	mov	r1, r9
 80053ac:	414b      	adcs	r3, r1
 80053ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80053bc:	4659      	mov	r1, fp
 80053be:	00cb      	lsls	r3, r1, #3
 80053c0:	4651      	mov	r1, sl
 80053c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053c6:	4651      	mov	r1, sl
 80053c8:	00ca      	lsls	r2, r1, #3
 80053ca:	4610      	mov	r0, r2
 80053cc:	4619      	mov	r1, r3
 80053ce:	4603      	mov	r3, r0
 80053d0:	4642      	mov	r2, r8
 80053d2:	189b      	adds	r3, r3, r2
 80053d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053d8:	464b      	mov	r3, r9
 80053da:	460a      	mov	r2, r1
 80053dc:	eb42 0303 	adc.w	r3, r2, r3
 80053e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053f8:	460b      	mov	r3, r1
 80053fa:	18db      	adds	r3, r3, r3
 80053fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053fe:	4613      	mov	r3, r2
 8005400:	eb42 0303 	adc.w	r3, r2, r3
 8005404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005406:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800540a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800540e:	f7fb fbeb 	bl	8000be8 <__aeabi_uldivmod>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4b0d      	ldr	r3, [pc, #52]	@ (800544c <UART_SetConfig+0x2d4>)
 8005418:	fba3 1302 	umull	r1, r3, r3, r2
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	2164      	movs	r1, #100	@ 0x64
 8005420:	fb01 f303 	mul.w	r3, r1, r3
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	3332      	adds	r3, #50	@ 0x32
 800542a:	4a08      	ldr	r2, [pc, #32]	@ (800544c <UART_SetConfig+0x2d4>)
 800542c:	fba2 2303 	umull	r2, r3, r2, r3
 8005430:	095b      	lsrs	r3, r3, #5
 8005432:	f003 0207 	and.w	r2, r3, #7
 8005436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4422      	add	r2, r4
 800543e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005440:	e106      	b.n	8005650 <UART_SetConfig+0x4d8>
 8005442:	bf00      	nop
 8005444:	40011000 	.word	0x40011000
 8005448:	40011400 	.word	0x40011400
 800544c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005454:	2200      	movs	r2, #0
 8005456:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800545a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800545e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005462:	4642      	mov	r2, r8
 8005464:	464b      	mov	r3, r9
 8005466:	1891      	adds	r1, r2, r2
 8005468:	6239      	str	r1, [r7, #32]
 800546a:	415b      	adcs	r3, r3
 800546c:	627b      	str	r3, [r7, #36]	@ 0x24
 800546e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005472:	4641      	mov	r1, r8
 8005474:	1854      	adds	r4, r2, r1
 8005476:	4649      	mov	r1, r9
 8005478:	eb43 0501 	adc.w	r5, r3, r1
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	00eb      	lsls	r3, r5, #3
 8005486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800548a:	00e2      	lsls	r2, r4, #3
 800548c:	4614      	mov	r4, r2
 800548e:	461d      	mov	r5, r3
 8005490:	4643      	mov	r3, r8
 8005492:	18e3      	adds	r3, r4, r3
 8005494:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005498:	464b      	mov	r3, r9
 800549a:	eb45 0303 	adc.w	r3, r5, r3
 800549e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80054be:	4629      	mov	r1, r5
 80054c0:	008b      	lsls	r3, r1, #2
 80054c2:	4621      	mov	r1, r4
 80054c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054c8:	4621      	mov	r1, r4
 80054ca:	008a      	lsls	r2, r1, #2
 80054cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80054d0:	f7fb fb8a 	bl	8000be8 <__aeabi_uldivmod>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4b60      	ldr	r3, [pc, #384]	@ (800565c <UART_SetConfig+0x4e4>)
 80054da:	fba3 2302 	umull	r2, r3, r3, r2
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	011c      	lsls	r4, r3, #4
 80054e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054e6:	2200      	movs	r2, #0
 80054e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054f4:	4642      	mov	r2, r8
 80054f6:	464b      	mov	r3, r9
 80054f8:	1891      	adds	r1, r2, r2
 80054fa:	61b9      	str	r1, [r7, #24]
 80054fc:	415b      	adcs	r3, r3
 80054fe:	61fb      	str	r3, [r7, #28]
 8005500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005504:	4641      	mov	r1, r8
 8005506:	1851      	adds	r1, r2, r1
 8005508:	6139      	str	r1, [r7, #16]
 800550a:	4649      	mov	r1, r9
 800550c:	414b      	adcs	r3, r1
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800551c:	4659      	mov	r1, fp
 800551e:	00cb      	lsls	r3, r1, #3
 8005520:	4651      	mov	r1, sl
 8005522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005526:	4651      	mov	r1, sl
 8005528:	00ca      	lsls	r2, r1, #3
 800552a:	4610      	mov	r0, r2
 800552c:	4619      	mov	r1, r3
 800552e:	4603      	mov	r3, r0
 8005530:	4642      	mov	r2, r8
 8005532:	189b      	adds	r3, r3, r2
 8005534:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005538:	464b      	mov	r3, r9
 800553a:	460a      	mov	r2, r1
 800553c:	eb42 0303 	adc.w	r3, r2, r3
 8005540:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800554e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800555c:	4649      	mov	r1, r9
 800555e:	008b      	lsls	r3, r1, #2
 8005560:	4641      	mov	r1, r8
 8005562:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005566:	4641      	mov	r1, r8
 8005568:	008a      	lsls	r2, r1, #2
 800556a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800556e:	f7fb fb3b 	bl	8000be8 <__aeabi_uldivmod>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	4611      	mov	r1, r2
 8005578:	4b38      	ldr	r3, [pc, #224]	@ (800565c <UART_SetConfig+0x4e4>)
 800557a:	fba3 2301 	umull	r2, r3, r3, r1
 800557e:	095b      	lsrs	r3, r3, #5
 8005580:	2264      	movs	r2, #100	@ 0x64
 8005582:	fb02 f303 	mul.w	r3, r2, r3
 8005586:	1acb      	subs	r3, r1, r3
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	3332      	adds	r3, #50	@ 0x32
 800558c:	4a33      	ldr	r2, [pc, #204]	@ (800565c <UART_SetConfig+0x4e4>)
 800558e:	fba2 2303 	umull	r2, r3, r2, r3
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005598:	441c      	add	r4, r3
 800559a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800559e:	2200      	movs	r2, #0
 80055a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80055a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80055a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80055a8:	4642      	mov	r2, r8
 80055aa:	464b      	mov	r3, r9
 80055ac:	1891      	adds	r1, r2, r2
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	415b      	adcs	r3, r3
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055b8:	4641      	mov	r1, r8
 80055ba:	1851      	adds	r1, r2, r1
 80055bc:	6039      	str	r1, [r7, #0]
 80055be:	4649      	mov	r1, r9
 80055c0:	414b      	adcs	r3, r1
 80055c2:	607b      	str	r3, [r7, #4]
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055d0:	4659      	mov	r1, fp
 80055d2:	00cb      	lsls	r3, r1, #3
 80055d4:	4651      	mov	r1, sl
 80055d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055da:	4651      	mov	r1, sl
 80055dc:	00ca      	lsls	r2, r1, #3
 80055de:	4610      	mov	r0, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	4603      	mov	r3, r0
 80055e4:	4642      	mov	r2, r8
 80055e6:	189b      	adds	r3, r3, r2
 80055e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055ea:	464b      	mov	r3, r9
 80055ec:	460a      	mov	r2, r1
 80055ee:	eb42 0303 	adc.w	r3, r2, r3
 80055f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80055fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800560c:	4649      	mov	r1, r9
 800560e:	008b      	lsls	r3, r1, #2
 8005610:	4641      	mov	r1, r8
 8005612:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005616:	4641      	mov	r1, r8
 8005618:	008a      	lsls	r2, r1, #2
 800561a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800561e:	f7fb fae3 	bl	8000be8 <__aeabi_uldivmod>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	4b0d      	ldr	r3, [pc, #52]	@ (800565c <UART_SetConfig+0x4e4>)
 8005628:	fba3 1302 	umull	r1, r3, r3, r2
 800562c:	095b      	lsrs	r3, r3, #5
 800562e:	2164      	movs	r1, #100	@ 0x64
 8005630:	fb01 f303 	mul.w	r3, r1, r3
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	3332      	adds	r3, #50	@ 0x32
 800563a:	4a08      	ldr	r2, [pc, #32]	@ (800565c <UART_SetConfig+0x4e4>)
 800563c:	fba2 2303 	umull	r2, r3, r2, r3
 8005640:	095b      	lsrs	r3, r3, #5
 8005642:	f003 020f 	and.w	r2, r3, #15
 8005646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4422      	add	r2, r4
 800564e:	609a      	str	r2, [r3, #8]
}
 8005650:	bf00      	nop
 8005652:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005656:	46bd      	mov	sp, r7
 8005658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800565c:	51eb851f 	.word	0x51eb851f

08005660 <std>:
 8005660:	2300      	movs	r3, #0
 8005662:	b510      	push	{r4, lr}
 8005664:	4604      	mov	r4, r0
 8005666:	e9c0 3300 	strd	r3, r3, [r0]
 800566a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800566e:	6083      	str	r3, [r0, #8]
 8005670:	8181      	strh	r1, [r0, #12]
 8005672:	6643      	str	r3, [r0, #100]	@ 0x64
 8005674:	81c2      	strh	r2, [r0, #14]
 8005676:	6183      	str	r3, [r0, #24]
 8005678:	4619      	mov	r1, r3
 800567a:	2208      	movs	r2, #8
 800567c:	305c      	adds	r0, #92	@ 0x5c
 800567e:	f000 f9f9 	bl	8005a74 <memset>
 8005682:	4b0d      	ldr	r3, [pc, #52]	@ (80056b8 <std+0x58>)
 8005684:	6263      	str	r3, [r4, #36]	@ 0x24
 8005686:	4b0d      	ldr	r3, [pc, #52]	@ (80056bc <std+0x5c>)
 8005688:	62a3      	str	r3, [r4, #40]	@ 0x28
 800568a:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <std+0x60>)
 800568c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800568e:	4b0d      	ldr	r3, [pc, #52]	@ (80056c4 <std+0x64>)
 8005690:	6323      	str	r3, [r4, #48]	@ 0x30
 8005692:	4b0d      	ldr	r3, [pc, #52]	@ (80056c8 <std+0x68>)
 8005694:	6224      	str	r4, [r4, #32]
 8005696:	429c      	cmp	r4, r3
 8005698:	d006      	beq.n	80056a8 <std+0x48>
 800569a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800569e:	4294      	cmp	r4, r2
 80056a0:	d002      	beq.n	80056a8 <std+0x48>
 80056a2:	33d0      	adds	r3, #208	@ 0xd0
 80056a4:	429c      	cmp	r4, r3
 80056a6:	d105      	bne.n	80056b4 <std+0x54>
 80056a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056b0:	f000 ba58 	b.w	8005b64 <__retarget_lock_init_recursive>
 80056b4:	bd10      	pop	{r4, pc}
 80056b6:	bf00      	nop
 80056b8:	080058c5 	.word	0x080058c5
 80056bc:	080058e7 	.word	0x080058e7
 80056c0:	0800591f 	.word	0x0800591f
 80056c4:	08005943 	.word	0x08005943
 80056c8:	200001e0 	.word	0x200001e0

080056cc <stdio_exit_handler>:
 80056cc:	4a02      	ldr	r2, [pc, #8]	@ (80056d8 <stdio_exit_handler+0xc>)
 80056ce:	4903      	ldr	r1, [pc, #12]	@ (80056dc <stdio_exit_handler+0x10>)
 80056d0:	4803      	ldr	r0, [pc, #12]	@ (80056e0 <stdio_exit_handler+0x14>)
 80056d2:	f000 b869 	b.w	80057a8 <_fwalk_sglue>
 80056d6:	bf00      	nop
 80056d8:	20000014 	.word	0x20000014
 80056dc:	08006401 	.word	0x08006401
 80056e0:	20000024 	.word	0x20000024

080056e4 <cleanup_stdio>:
 80056e4:	6841      	ldr	r1, [r0, #4]
 80056e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005718 <cleanup_stdio+0x34>)
 80056e8:	4299      	cmp	r1, r3
 80056ea:	b510      	push	{r4, lr}
 80056ec:	4604      	mov	r4, r0
 80056ee:	d001      	beq.n	80056f4 <cleanup_stdio+0x10>
 80056f0:	f000 fe86 	bl	8006400 <_fflush_r>
 80056f4:	68a1      	ldr	r1, [r4, #8]
 80056f6:	4b09      	ldr	r3, [pc, #36]	@ (800571c <cleanup_stdio+0x38>)
 80056f8:	4299      	cmp	r1, r3
 80056fa:	d002      	beq.n	8005702 <cleanup_stdio+0x1e>
 80056fc:	4620      	mov	r0, r4
 80056fe:	f000 fe7f 	bl	8006400 <_fflush_r>
 8005702:	68e1      	ldr	r1, [r4, #12]
 8005704:	4b06      	ldr	r3, [pc, #24]	@ (8005720 <cleanup_stdio+0x3c>)
 8005706:	4299      	cmp	r1, r3
 8005708:	d004      	beq.n	8005714 <cleanup_stdio+0x30>
 800570a:	4620      	mov	r0, r4
 800570c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005710:	f000 be76 	b.w	8006400 <_fflush_r>
 8005714:	bd10      	pop	{r4, pc}
 8005716:	bf00      	nop
 8005718:	200001e0 	.word	0x200001e0
 800571c:	20000248 	.word	0x20000248
 8005720:	200002b0 	.word	0x200002b0

08005724 <global_stdio_init.part.0>:
 8005724:	b510      	push	{r4, lr}
 8005726:	4b0b      	ldr	r3, [pc, #44]	@ (8005754 <global_stdio_init.part.0+0x30>)
 8005728:	4c0b      	ldr	r4, [pc, #44]	@ (8005758 <global_stdio_init.part.0+0x34>)
 800572a:	4a0c      	ldr	r2, [pc, #48]	@ (800575c <global_stdio_init.part.0+0x38>)
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	4620      	mov	r0, r4
 8005730:	2200      	movs	r2, #0
 8005732:	2104      	movs	r1, #4
 8005734:	f7ff ff94 	bl	8005660 <std>
 8005738:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800573c:	2201      	movs	r2, #1
 800573e:	2109      	movs	r1, #9
 8005740:	f7ff ff8e 	bl	8005660 <std>
 8005744:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005748:	2202      	movs	r2, #2
 800574a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800574e:	2112      	movs	r1, #18
 8005750:	f7ff bf86 	b.w	8005660 <std>
 8005754:	20000318 	.word	0x20000318
 8005758:	200001e0 	.word	0x200001e0
 800575c:	080056cd 	.word	0x080056cd

08005760 <__sfp_lock_acquire>:
 8005760:	4801      	ldr	r0, [pc, #4]	@ (8005768 <__sfp_lock_acquire+0x8>)
 8005762:	f000 ba00 	b.w	8005b66 <__retarget_lock_acquire_recursive>
 8005766:	bf00      	nop
 8005768:	20000321 	.word	0x20000321

0800576c <__sfp_lock_release>:
 800576c:	4801      	ldr	r0, [pc, #4]	@ (8005774 <__sfp_lock_release+0x8>)
 800576e:	f000 b9fb 	b.w	8005b68 <__retarget_lock_release_recursive>
 8005772:	bf00      	nop
 8005774:	20000321 	.word	0x20000321

08005778 <__sinit>:
 8005778:	b510      	push	{r4, lr}
 800577a:	4604      	mov	r4, r0
 800577c:	f7ff fff0 	bl	8005760 <__sfp_lock_acquire>
 8005780:	6a23      	ldr	r3, [r4, #32]
 8005782:	b11b      	cbz	r3, 800578c <__sinit+0x14>
 8005784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005788:	f7ff bff0 	b.w	800576c <__sfp_lock_release>
 800578c:	4b04      	ldr	r3, [pc, #16]	@ (80057a0 <__sinit+0x28>)
 800578e:	6223      	str	r3, [r4, #32]
 8005790:	4b04      	ldr	r3, [pc, #16]	@ (80057a4 <__sinit+0x2c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f5      	bne.n	8005784 <__sinit+0xc>
 8005798:	f7ff ffc4 	bl	8005724 <global_stdio_init.part.0>
 800579c:	e7f2      	b.n	8005784 <__sinit+0xc>
 800579e:	bf00      	nop
 80057a0:	080056e5 	.word	0x080056e5
 80057a4:	20000318 	.word	0x20000318

080057a8 <_fwalk_sglue>:
 80057a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057ac:	4607      	mov	r7, r0
 80057ae:	4688      	mov	r8, r1
 80057b0:	4614      	mov	r4, r2
 80057b2:	2600      	movs	r6, #0
 80057b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057b8:	f1b9 0901 	subs.w	r9, r9, #1
 80057bc:	d505      	bpl.n	80057ca <_fwalk_sglue+0x22>
 80057be:	6824      	ldr	r4, [r4, #0]
 80057c0:	2c00      	cmp	r4, #0
 80057c2:	d1f7      	bne.n	80057b4 <_fwalk_sglue+0xc>
 80057c4:	4630      	mov	r0, r6
 80057c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ca:	89ab      	ldrh	r3, [r5, #12]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d907      	bls.n	80057e0 <_fwalk_sglue+0x38>
 80057d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057d4:	3301      	adds	r3, #1
 80057d6:	d003      	beq.n	80057e0 <_fwalk_sglue+0x38>
 80057d8:	4629      	mov	r1, r5
 80057da:	4638      	mov	r0, r7
 80057dc:	47c0      	blx	r8
 80057de:	4306      	orrs	r6, r0
 80057e0:	3568      	adds	r5, #104	@ 0x68
 80057e2:	e7e9      	b.n	80057b8 <_fwalk_sglue+0x10>

080057e4 <iprintf>:
 80057e4:	b40f      	push	{r0, r1, r2, r3}
 80057e6:	b507      	push	{r0, r1, r2, lr}
 80057e8:	4906      	ldr	r1, [pc, #24]	@ (8005804 <iprintf+0x20>)
 80057ea:	ab04      	add	r3, sp, #16
 80057ec:	6808      	ldr	r0, [r1, #0]
 80057ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80057f2:	6881      	ldr	r1, [r0, #8]
 80057f4:	9301      	str	r3, [sp, #4]
 80057f6:	f000 fadb 	bl	8005db0 <_vfiprintf_r>
 80057fa:	b003      	add	sp, #12
 80057fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005800:	b004      	add	sp, #16
 8005802:	4770      	bx	lr
 8005804:	20000020 	.word	0x20000020

08005808 <_puts_r>:
 8005808:	6a03      	ldr	r3, [r0, #32]
 800580a:	b570      	push	{r4, r5, r6, lr}
 800580c:	6884      	ldr	r4, [r0, #8]
 800580e:	4605      	mov	r5, r0
 8005810:	460e      	mov	r6, r1
 8005812:	b90b      	cbnz	r3, 8005818 <_puts_r+0x10>
 8005814:	f7ff ffb0 	bl	8005778 <__sinit>
 8005818:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800581a:	07db      	lsls	r3, r3, #31
 800581c:	d405      	bmi.n	800582a <_puts_r+0x22>
 800581e:	89a3      	ldrh	r3, [r4, #12]
 8005820:	0598      	lsls	r0, r3, #22
 8005822:	d402      	bmi.n	800582a <_puts_r+0x22>
 8005824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005826:	f000 f99e 	bl	8005b66 <__retarget_lock_acquire_recursive>
 800582a:	89a3      	ldrh	r3, [r4, #12]
 800582c:	0719      	lsls	r1, r3, #28
 800582e:	d502      	bpl.n	8005836 <_puts_r+0x2e>
 8005830:	6923      	ldr	r3, [r4, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d135      	bne.n	80058a2 <_puts_r+0x9a>
 8005836:	4621      	mov	r1, r4
 8005838:	4628      	mov	r0, r5
 800583a:	f000 f8c5 	bl	80059c8 <__swsetup_r>
 800583e:	b380      	cbz	r0, 80058a2 <_puts_r+0x9a>
 8005840:	f04f 35ff 	mov.w	r5, #4294967295
 8005844:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005846:	07da      	lsls	r2, r3, #31
 8005848:	d405      	bmi.n	8005856 <_puts_r+0x4e>
 800584a:	89a3      	ldrh	r3, [r4, #12]
 800584c:	059b      	lsls	r3, r3, #22
 800584e:	d402      	bmi.n	8005856 <_puts_r+0x4e>
 8005850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005852:	f000 f989 	bl	8005b68 <__retarget_lock_release_recursive>
 8005856:	4628      	mov	r0, r5
 8005858:	bd70      	pop	{r4, r5, r6, pc}
 800585a:	2b00      	cmp	r3, #0
 800585c:	da04      	bge.n	8005868 <_puts_r+0x60>
 800585e:	69a2      	ldr	r2, [r4, #24]
 8005860:	429a      	cmp	r2, r3
 8005862:	dc17      	bgt.n	8005894 <_puts_r+0x8c>
 8005864:	290a      	cmp	r1, #10
 8005866:	d015      	beq.n	8005894 <_puts_r+0x8c>
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	6022      	str	r2, [r4, #0]
 800586e:	7019      	strb	r1, [r3, #0]
 8005870:	68a3      	ldr	r3, [r4, #8]
 8005872:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005876:	3b01      	subs	r3, #1
 8005878:	60a3      	str	r3, [r4, #8]
 800587a:	2900      	cmp	r1, #0
 800587c:	d1ed      	bne.n	800585a <_puts_r+0x52>
 800587e:	2b00      	cmp	r3, #0
 8005880:	da11      	bge.n	80058a6 <_puts_r+0x9e>
 8005882:	4622      	mov	r2, r4
 8005884:	210a      	movs	r1, #10
 8005886:	4628      	mov	r0, r5
 8005888:	f000 f85f 	bl	800594a <__swbuf_r>
 800588c:	3001      	adds	r0, #1
 800588e:	d0d7      	beq.n	8005840 <_puts_r+0x38>
 8005890:	250a      	movs	r5, #10
 8005892:	e7d7      	b.n	8005844 <_puts_r+0x3c>
 8005894:	4622      	mov	r2, r4
 8005896:	4628      	mov	r0, r5
 8005898:	f000 f857 	bl	800594a <__swbuf_r>
 800589c:	3001      	adds	r0, #1
 800589e:	d1e7      	bne.n	8005870 <_puts_r+0x68>
 80058a0:	e7ce      	b.n	8005840 <_puts_r+0x38>
 80058a2:	3e01      	subs	r6, #1
 80058a4:	e7e4      	b.n	8005870 <_puts_r+0x68>
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	6022      	str	r2, [r4, #0]
 80058ac:	220a      	movs	r2, #10
 80058ae:	701a      	strb	r2, [r3, #0]
 80058b0:	e7ee      	b.n	8005890 <_puts_r+0x88>
	...

080058b4 <puts>:
 80058b4:	4b02      	ldr	r3, [pc, #8]	@ (80058c0 <puts+0xc>)
 80058b6:	4601      	mov	r1, r0
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	f7ff bfa5 	b.w	8005808 <_puts_r>
 80058be:	bf00      	nop
 80058c0:	20000020 	.word	0x20000020

080058c4 <__sread>:
 80058c4:	b510      	push	{r4, lr}
 80058c6:	460c      	mov	r4, r1
 80058c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058cc:	f000 f8fc 	bl	8005ac8 <_read_r>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	bfab      	itete	ge
 80058d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80058d6:	89a3      	ldrhlt	r3, [r4, #12]
 80058d8:	181b      	addge	r3, r3, r0
 80058da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80058de:	bfac      	ite	ge
 80058e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80058e2:	81a3      	strhlt	r3, [r4, #12]
 80058e4:	bd10      	pop	{r4, pc}

080058e6 <__swrite>:
 80058e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ea:	461f      	mov	r7, r3
 80058ec:	898b      	ldrh	r3, [r1, #12]
 80058ee:	05db      	lsls	r3, r3, #23
 80058f0:	4605      	mov	r5, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	4616      	mov	r6, r2
 80058f6:	d505      	bpl.n	8005904 <__swrite+0x1e>
 80058f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fc:	2302      	movs	r3, #2
 80058fe:	2200      	movs	r2, #0
 8005900:	f000 f8d0 	bl	8005aa4 <_lseek_r>
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800590a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800590e:	81a3      	strh	r3, [r4, #12]
 8005910:	4632      	mov	r2, r6
 8005912:	463b      	mov	r3, r7
 8005914:	4628      	mov	r0, r5
 8005916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800591a:	f000 b8e7 	b.w	8005aec <_write_r>

0800591e <__sseek>:
 800591e:	b510      	push	{r4, lr}
 8005920:	460c      	mov	r4, r1
 8005922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005926:	f000 f8bd 	bl	8005aa4 <_lseek_r>
 800592a:	1c43      	adds	r3, r0, #1
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	bf15      	itete	ne
 8005930:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005932:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005936:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800593a:	81a3      	strheq	r3, [r4, #12]
 800593c:	bf18      	it	ne
 800593e:	81a3      	strhne	r3, [r4, #12]
 8005940:	bd10      	pop	{r4, pc}

08005942 <__sclose>:
 8005942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005946:	f000 b89d 	b.w	8005a84 <_close_r>

0800594a <__swbuf_r>:
 800594a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594c:	460e      	mov	r6, r1
 800594e:	4614      	mov	r4, r2
 8005950:	4605      	mov	r5, r0
 8005952:	b118      	cbz	r0, 800595c <__swbuf_r+0x12>
 8005954:	6a03      	ldr	r3, [r0, #32]
 8005956:	b90b      	cbnz	r3, 800595c <__swbuf_r+0x12>
 8005958:	f7ff ff0e 	bl	8005778 <__sinit>
 800595c:	69a3      	ldr	r3, [r4, #24]
 800595e:	60a3      	str	r3, [r4, #8]
 8005960:	89a3      	ldrh	r3, [r4, #12]
 8005962:	071a      	lsls	r2, r3, #28
 8005964:	d501      	bpl.n	800596a <__swbuf_r+0x20>
 8005966:	6923      	ldr	r3, [r4, #16]
 8005968:	b943      	cbnz	r3, 800597c <__swbuf_r+0x32>
 800596a:	4621      	mov	r1, r4
 800596c:	4628      	mov	r0, r5
 800596e:	f000 f82b 	bl	80059c8 <__swsetup_r>
 8005972:	b118      	cbz	r0, 800597c <__swbuf_r+0x32>
 8005974:	f04f 37ff 	mov.w	r7, #4294967295
 8005978:	4638      	mov	r0, r7
 800597a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	6922      	ldr	r2, [r4, #16]
 8005980:	1a98      	subs	r0, r3, r2
 8005982:	6963      	ldr	r3, [r4, #20]
 8005984:	b2f6      	uxtb	r6, r6
 8005986:	4283      	cmp	r3, r0
 8005988:	4637      	mov	r7, r6
 800598a:	dc05      	bgt.n	8005998 <__swbuf_r+0x4e>
 800598c:	4621      	mov	r1, r4
 800598e:	4628      	mov	r0, r5
 8005990:	f000 fd36 	bl	8006400 <_fflush_r>
 8005994:	2800      	cmp	r0, #0
 8005996:	d1ed      	bne.n	8005974 <__swbuf_r+0x2a>
 8005998:	68a3      	ldr	r3, [r4, #8]
 800599a:	3b01      	subs	r3, #1
 800599c:	60a3      	str	r3, [r4, #8]
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	6022      	str	r2, [r4, #0]
 80059a4:	701e      	strb	r6, [r3, #0]
 80059a6:	6962      	ldr	r2, [r4, #20]
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d004      	beq.n	80059b8 <__swbuf_r+0x6e>
 80059ae:	89a3      	ldrh	r3, [r4, #12]
 80059b0:	07db      	lsls	r3, r3, #31
 80059b2:	d5e1      	bpl.n	8005978 <__swbuf_r+0x2e>
 80059b4:	2e0a      	cmp	r6, #10
 80059b6:	d1df      	bne.n	8005978 <__swbuf_r+0x2e>
 80059b8:	4621      	mov	r1, r4
 80059ba:	4628      	mov	r0, r5
 80059bc:	f000 fd20 	bl	8006400 <_fflush_r>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d0d9      	beq.n	8005978 <__swbuf_r+0x2e>
 80059c4:	e7d6      	b.n	8005974 <__swbuf_r+0x2a>
	...

080059c8 <__swsetup_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4b29      	ldr	r3, [pc, #164]	@ (8005a70 <__swsetup_r+0xa8>)
 80059cc:	4605      	mov	r5, r0
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	460c      	mov	r4, r1
 80059d2:	b118      	cbz	r0, 80059dc <__swsetup_r+0x14>
 80059d4:	6a03      	ldr	r3, [r0, #32]
 80059d6:	b90b      	cbnz	r3, 80059dc <__swsetup_r+0x14>
 80059d8:	f7ff fece 	bl	8005778 <__sinit>
 80059dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059e0:	0719      	lsls	r1, r3, #28
 80059e2:	d422      	bmi.n	8005a2a <__swsetup_r+0x62>
 80059e4:	06da      	lsls	r2, r3, #27
 80059e6:	d407      	bmi.n	80059f8 <__swsetup_r+0x30>
 80059e8:	2209      	movs	r2, #9
 80059ea:	602a      	str	r2, [r5, #0]
 80059ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059f0:	81a3      	strh	r3, [r4, #12]
 80059f2:	f04f 30ff 	mov.w	r0, #4294967295
 80059f6:	e033      	b.n	8005a60 <__swsetup_r+0x98>
 80059f8:	0758      	lsls	r0, r3, #29
 80059fa:	d512      	bpl.n	8005a22 <__swsetup_r+0x5a>
 80059fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059fe:	b141      	cbz	r1, 8005a12 <__swsetup_r+0x4a>
 8005a00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a04:	4299      	cmp	r1, r3
 8005a06:	d002      	beq.n	8005a0e <__swsetup_r+0x46>
 8005a08:	4628      	mov	r0, r5
 8005a0a:	f000 f8af 	bl	8005b6c <_free_r>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a12:	89a3      	ldrh	r3, [r4, #12]
 8005a14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a18:	81a3      	strh	r3, [r4, #12]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	6063      	str	r3, [r4, #4]
 8005a1e:	6923      	ldr	r3, [r4, #16]
 8005a20:	6023      	str	r3, [r4, #0]
 8005a22:	89a3      	ldrh	r3, [r4, #12]
 8005a24:	f043 0308 	orr.w	r3, r3, #8
 8005a28:	81a3      	strh	r3, [r4, #12]
 8005a2a:	6923      	ldr	r3, [r4, #16]
 8005a2c:	b94b      	cbnz	r3, 8005a42 <__swsetup_r+0x7a>
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a38:	d003      	beq.n	8005a42 <__swsetup_r+0x7a>
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f000 fd2d 	bl	800649c <__smakebuf_r>
 8005a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a46:	f013 0201 	ands.w	r2, r3, #1
 8005a4a:	d00a      	beq.n	8005a62 <__swsetup_r+0x9a>
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	60a2      	str	r2, [r4, #8]
 8005a50:	6962      	ldr	r2, [r4, #20]
 8005a52:	4252      	negs	r2, r2
 8005a54:	61a2      	str	r2, [r4, #24]
 8005a56:	6922      	ldr	r2, [r4, #16]
 8005a58:	b942      	cbnz	r2, 8005a6c <__swsetup_r+0xa4>
 8005a5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a5e:	d1c5      	bne.n	80059ec <__swsetup_r+0x24>
 8005a60:	bd38      	pop	{r3, r4, r5, pc}
 8005a62:	0799      	lsls	r1, r3, #30
 8005a64:	bf58      	it	pl
 8005a66:	6962      	ldrpl	r2, [r4, #20]
 8005a68:	60a2      	str	r2, [r4, #8]
 8005a6a:	e7f4      	b.n	8005a56 <__swsetup_r+0x8e>
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	e7f7      	b.n	8005a60 <__swsetup_r+0x98>
 8005a70:	20000020 	.word	0x20000020

08005a74 <memset>:
 8005a74:	4402      	add	r2, r0
 8005a76:	4603      	mov	r3, r0
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d100      	bne.n	8005a7e <memset+0xa>
 8005a7c:	4770      	bx	lr
 8005a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a82:	e7f9      	b.n	8005a78 <memset+0x4>

08005a84 <_close_r>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	4d06      	ldr	r5, [pc, #24]	@ (8005aa0 <_close_r+0x1c>)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	602b      	str	r3, [r5, #0]
 8005a90:	f7fc f85b 	bl	8001b4a <_close>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_close_r+0x1a>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_close_r+0x1a>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	2000031c 	.word	0x2000031c

08005aa4 <_lseek_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4d07      	ldr	r5, [pc, #28]	@ (8005ac4 <_lseek_r+0x20>)
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	4608      	mov	r0, r1
 8005aac:	4611      	mov	r1, r2
 8005aae:	2200      	movs	r2, #0
 8005ab0:	602a      	str	r2, [r5, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f7fc f870 	bl	8001b98 <_lseek>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_lseek_r+0x1e>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_lseek_r+0x1e>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	2000031c 	.word	0x2000031c

08005ac8 <_read_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4d07      	ldr	r5, [pc, #28]	@ (8005ae8 <_read_r+0x20>)
 8005acc:	4604      	mov	r4, r0
 8005ace:	4608      	mov	r0, r1
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	602a      	str	r2, [r5, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f7fc f81a 	bl	8001b10 <_read>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_read_r+0x1e>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_read_r+0x1e>
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	2000031c 	.word	0x2000031c

08005aec <_write_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	4d07      	ldr	r5, [pc, #28]	@ (8005b0c <_write_r+0x20>)
 8005af0:	4604      	mov	r4, r0
 8005af2:	4608      	mov	r0, r1
 8005af4:	4611      	mov	r1, r2
 8005af6:	2200      	movs	r2, #0
 8005af8:	602a      	str	r2, [r5, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	f7fb fa0a 	bl	8000f14 <_write>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d102      	bne.n	8005b0a <_write_r+0x1e>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	b103      	cbz	r3, 8005b0a <_write_r+0x1e>
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	2000031c 	.word	0x2000031c

08005b10 <__errno>:
 8005b10:	4b01      	ldr	r3, [pc, #4]	@ (8005b18 <__errno+0x8>)
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	20000020 	.word	0x20000020

08005b1c <__libc_init_array>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8005b54 <__libc_init_array+0x38>)
 8005b20:	4c0d      	ldr	r4, [pc, #52]	@ (8005b58 <__libc_init_array+0x3c>)
 8005b22:	1b64      	subs	r4, r4, r5
 8005b24:	10a4      	asrs	r4, r4, #2
 8005b26:	2600      	movs	r6, #0
 8005b28:	42a6      	cmp	r6, r4
 8005b2a:	d109      	bne.n	8005b40 <__libc_init_array+0x24>
 8005b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8005b5c <__libc_init_array+0x40>)
 8005b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8005b60 <__libc_init_array+0x44>)
 8005b30:	f001 f88e 	bl	8006c50 <_init>
 8005b34:	1b64      	subs	r4, r4, r5
 8005b36:	10a4      	asrs	r4, r4, #2
 8005b38:	2600      	movs	r6, #0
 8005b3a:	42a6      	cmp	r6, r4
 8005b3c:	d105      	bne.n	8005b4a <__libc_init_array+0x2e>
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b44:	4798      	blx	r3
 8005b46:	3601      	adds	r6, #1
 8005b48:	e7ee      	b.n	8005b28 <__libc_init_array+0xc>
 8005b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4e:	4798      	blx	r3
 8005b50:	3601      	adds	r6, #1
 8005b52:	e7f2      	b.n	8005b3a <__libc_init_array+0x1e>
 8005b54:	08006e80 	.word	0x08006e80
 8005b58:	08006e80 	.word	0x08006e80
 8005b5c:	08006e80 	.word	0x08006e80
 8005b60:	08006e84 	.word	0x08006e84

08005b64 <__retarget_lock_init_recursive>:
 8005b64:	4770      	bx	lr

08005b66 <__retarget_lock_acquire_recursive>:
 8005b66:	4770      	bx	lr

08005b68 <__retarget_lock_release_recursive>:
 8005b68:	4770      	bx	lr
	...

08005b6c <_free_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	4605      	mov	r5, r0
 8005b70:	2900      	cmp	r1, #0
 8005b72:	d041      	beq.n	8005bf8 <_free_r+0x8c>
 8005b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b78:	1f0c      	subs	r4, r1, #4
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bfb8      	it	lt
 8005b7e:	18e4      	addlt	r4, r4, r3
 8005b80:	f000 f8e0 	bl	8005d44 <__malloc_lock>
 8005b84:	4a1d      	ldr	r2, [pc, #116]	@ (8005bfc <_free_r+0x90>)
 8005b86:	6813      	ldr	r3, [r2, #0]
 8005b88:	b933      	cbnz	r3, 8005b98 <_free_r+0x2c>
 8005b8a:	6063      	str	r3, [r4, #4]
 8005b8c:	6014      	str	r4, [r2, #0]
 8005b8e:	4628      	mov	r0, r5
 8005b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b94:	f000 b8dc 	b.w	8005d50 <__malloc_unlock>
 8005b98:	42a3      	cmp	r3, r4
 8005b9a:	d908      	bls.n	8005bae <_free_r+0x42>
 8005b9c:	6820      	ldr	r0, [r4, #0]
 8005b9e:	1821      	adds	r1, r4, r0
 8005ba0:	428b      	cmp	r3, r1
 8005ba2:	bf01      	itttt	eq
 8005ba4:	6819      	ldreq	r1, [r3, #0]
 8005ba6:	685b      	ldreq	r3, [r3, #4]
 8005ba8:	1809      	addeq	r1, r1, r0
 8005baa:	6021      	streq	r1, [r4, #0]
 8005bac:	e7ed      	b.n	8005b8a <_free_r+0x1e>
 8005bae:	461a      	mov	r2, r3
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	b10b      	cbz	r3, 8005bb8 <_free_r+0x4c>
 8005bb4:	42a3      	cmp	r3, r4
 8005bb6:	d9fa      	bls.n	8005bae <_free_r+0x42>
 8005bb8:	6811      	ldr	r1, [r2, #0]
 8005bba:	1850      	adds	r0, r2, r1
 8005bbc:	42a0      	cmp	r0, r4
 8005bbe:	d10b      	bne.n	8005bd8 <_free_r+0x6c>
 8005bc0:	6820      	ldr	r0, [r4, #0]
 8005bc2:	4401      	add	r1, r0
 8005bc4:	1850      	adds	r0, r2, r1
 8005bc6:	4283      	cmp	r3, r0
 8005bc8:	6011      	str	r1, [r2, #0]
 8005bca:	d1e0      	bne.n	8005b8e <_free_r+0x22>
 8005bcc:	6818      	ldr	r0, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	6053      	str	r3, [r2, #4]
 8005bd2:	4408      	add	r0, r1
 8005bd4:	6010      	str	r0, [r2, #0]
 8005bd6:	e7da      	b.n	8005b8e <_free_r+0x22>
 8005bd8:	d902      	bls.n	8005be0 <_free_r+0x74>
 8005bda:	230c      	movs	r3, #12
 8005bdc:	602b      	str	r3, [r5, #0]
 8005bde:	e7d6      	b.n	8005b8e <_free_r+0x22>
 8005be0:	6820      	ldr	r0, [r4, #0]
 8005be2:	1821      	adds	r1, r4, r0
 8005be4:	428b      	cmp	r3, r1
 8005be6:	bf04      	itt	eq
 8005be8:	6819      	ldreq	r1, [r3, #0]
 8005bea:	685b      	ldreq	r3, [r3, #4]
 8005bec:	6063      	str	r3, [r4, #4]
 8005bee:	bf04      	itt	eq
 8005bf0:	1809      	addeq	r1, r1, r0
 8005bf2:	6021      	streq	r1, [r4, #0]
 8005bf4:	6054      	str	r4, [r2, #4]
 8005bf6:	e7ca      	b.n	8005b8e <_free_r+0x22>
 8005bf8:	bd38      	pop	{r3, r4, r5, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000328 	.word	0x20000328

08005c00 <sbrk_aligned>:
 8005c00:	b570      	push	{r4, r5, r6, lr}
 8005c02:	4e0f      	ldr	r6, [pc, #60]	@ (8005c40 <sbrk_aligned+0x40>)
 8005c04:	460c      	mov	r4, r1
 8005c06:	6831      	ldr	r1, [r6, #0]
 8005c08:	4605      	mov	r5, r0
 8005c0a:	b911      	cbnz	r1, 8005c12 <sbrk_aligned+0x12>
 8005c0c:	f000 fca4 	bl	8006558 <_sbrk_r>
 8005c10:	6030      	str	r0, [r6, #0]
 8005c12:	4621      	mov	r1, r4
 8005c14:	4628      	mov	r0, r5
 8005c16:	f000 fc9f 	bl	8006558 <_sbrk_r>
 8005c1a:	1c43      	adds	r3, r0, #1
 8005c1c:	d103      	bne.n	8005c26 <sbrk_aligned+0x26>
 8005c1e:	f04f 34ff 	mov.w	r4, #4294967295
 8005c22:	4620      	mov	r0, r4
 8005c24:	bd70      	pop	{r4, r5, r6, pc}
 8005c26:	1cc4      	adds	r4, r0, #3
 8005c28:	f024 0403 	bic.w	r4, r4, #3
 8005c2c:	42a0      	cmp	r0, r4
 8005c2e:	d0f8      	beq.n	8005c22 <sbrk_aligned+0x22>
 8005c30:	1a21      	subs	r1, r4, r0
 8005c32:	4628      	mov	r0, r5
 8005c34:	f000 fc90 	bl	8006558 <_sbrk_r>
 8005c38:	3001      	adds	r0, #1
 8005c3a:	d1f2      	bne.n	8005c22 <sbrk_aligned+0x22>
 8005c3c:	e7ef      	b.n	8005c1e <sbrk_aligned+0x1e>
 8005c3e:	bf00      	nop
 8005c40:	20000324 	.word	0x20000324

08005c44 <_malloc_r>:
 8005c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c48:	1ccd      	adds	r5, r1, #3
 8005c4a:	f025 0503 	bic.w	r5, r5, #3
 8005c4e:	3508      	adds	r5, #8
 8005c50:	2d0c      	cmp	r5, #12
 8005c52:	bf38      	it	cc
 8005c54:	250c      	movcc	r5, #12
 8005c56:	2d00      	cmp	r5, #0
 8005c58:	4606      	mov	r6, r0
 8005c5a:	db01      	blt.n	8005c60 <_malloc_r+0x1c>
 8005c5c:	42a9      	cmp	r1, r5
 8005c5e:	d904      	bls.n	8005c6a <_malloc_r+0x26>
 8005c60:	230c      	movs	r3, #12
 8005c62:	6033      	str	r3, [r6, #0]
 8005c64:	2000      	movs	r0, #0
 8005c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d40 <_malloc_r+0xfc>
 8005c6e:	f000 f869 	bl	8005d44 <__malloc_lock>
 8005c72:	f8d8 3000 	ldr.w	r3, [r8]
 8005c76:	461c      	mov	r4, r3
 8005c78:	bb44      	cbnz	r4, 8005ccc <_malloc_r+0x88>
 8005c7a:	4629      	mov	r1, r5
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f7ff ffbf 	bl	8005c00 <sbrk_aligned>
 8005c82:	1c43      	adds	r3, r0, #1
 8005c84:	4604      	mov	r4, r0
 8005c86:	d158      	bne.n	8005d3a <_malloc_r+0xf6>
 8005c88:	f8d8 4000 	ldr.w	r4, [r8]
 8005c8c:	4627      	mov	r7, r4
 8005c8e:	2f00      	cmp	r7, #0
 8005c90:	d143      	bne.n	8005d1a <_malloc_r+0xd6>
 8005c92:	2c00      	cmp	r4, #0
 8005c94:	d04b      	beq.n	8005d2e <_malloc_r+0xea>
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	4639      	mov	r1, r7
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	eb04 0903 	add.w	r9, r4, r3
 8005ca0:	f000 fc5a 	bl	8006558 <_sbrk_r>
 8005ca4:	4581      	cmp	r9, r0
 8005ca6:	d142      	bne.n	8005d2e <_malloc_r+0xea>
 8005ca8:	6821      	ldr	r1, [r4, #0]
 8005caa:	1a6d      	subs	r5, r5, r1
 8005cac:	4629      	mov	r1, r5
 8005cae:	4630      	mov	r0, r6
 8005cb0:	f7ff ffa6 	bl	8005c00 <sbrk_aligned>
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d03a      	beq.n	8005d2e <_malloc_r+0xea>
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	442b      	add	r3, r5
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	bb62      	cbnz	r2, 8005d20 <_malloc_r+0xdc>
 8005cc6:	f8c8 7000 	str.w	r7, [r8]
 8005cca:	e00f      	b.n	8005cec <_malloc_r+0xa8>
 8005ccc:	6822      	ldr	r2, [r4, #0]
 8005cce:	1b52      	subs	r2, r2, r5
 8005cd0:	d420      	bmi.n	8005d14 <_malloc_r+0xd0>
 8005cd2:	2a0b      	cmp	r2, #11
 8005cd4:	d917      	bls.n	8005d06 <_malloc_r+0xc2>
 8005cd6:	1961      	adds	r1, r4, r5
 8005cd8:	42a3      	cmp	r3, r4
 8005cda:	6025      	str	r5, [r4, #0]
 8005cdc:	bf18      	it	ne
 8005cde:	6059      	strne	r1, [r3, #4]
 8005ce0:	6863      	ldr	r3, [r4, #4]
 8005ce2:	bf08      	it	eq
 8005ce4:	f8c8 1000 	streq.w	r1, [r8]
 8005ce8:	5162      	str	r2, [r4, r5]
 8005cea:	604b      	str	r3, [r1, #4]
 8005cec:	4630      	mov	r0, r6
 8005cee:	f000 f82f 	bl	8005d50 <__malloc_unlock>
 8005cf2:	f104 000b 	add.w	r0, r4, #11
 8005cf6:	1d23      	adds	r3, r4, #4
 8005cf8:	f020 0007 	bic.w	r0, r0, #7
 8005cfc:	1ac2      	subs	r2, r0, r3
 8005cfe:	bf1c      	itt	ne
 8005d00:	1a1b      	subne	r3, r3, r0
 8005d02:	50a3      	strne	r3, [r4, r2]
 8005d04:	e7af      	b.n	8005c66 <_malloc_r+0x22>
 8005d06:	6862      	ldr	r2, [r4, #4]
 8005d08:	42a3      	cmp	r3, r4
 8005d0a:	bf0c      	ite	eq
 8005d0c:	f8c8 2000 	streq.w	r2, [r8]
 8005d10:	605a      	strne	r2, [r3, #4]
 8005d12:	e7eb      	b.n	8005cec <_malloc_r+0xa8>
 8005d14:	4623      	mov	r3, r4
 8005d16:	6864      	ldr	r4, [r4, #4]
 8005d18:	e7ae      	b.n	8005c78 <_malloc_r+0x34>
 8005d1a:	463c      	mov	r4, r7
 8005d1c:	687f      	ldr	r7, [r7, #4]
 8005d1e:	e7b6      	b.n	8005c8e <_malloc_r+0x4a>
 8005d20:	461a      	mov	r2, r3
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	42a3      	cmp	r3, r4
 8005d26:	d1fb      	bne.n	8005d20 <_malloc_r+0xdc>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	6053      	str	r3, [r2, #4]
 8005d2c:	e7de      	b.n	8005cec <_malloc_r+0xa8>
 8005d2e:	230c      	movs	r3, #12
 8005d30:	6033      	str	r3, [r6, #0]
 8005d32:	4630      	mov	r0, r6
 8005d34:	f000 f80c 	bl	8005d50 <__malloc_unlock>
 8005d38:	e794      	b.n	8005c64 <_malloc_r+0x20>
 8005d3a:	6005      	str	r5, [r0, #0]
 8005d3c:	e7d6      	b.n	8005cec <_malloc_r+0xa8>
 8005d3e:	bf00      	nop
 8005d40:	20000328 	.word	0x20000328

08005d44 <__malloc_lock>:
 8005d44:	4801      	ldr	r0, [pc, #4]	@ (8005d4c <__malloc_lock+0x8>)
 8005d46:	f7ff bf0e 	b.w	8005b66 <__retarget_lock_acquire_recursive>
 8005d4a:	bf00      	nop
 8005d4c:	20000320 	.word	0x20000320

08005d50 <__malloc_unlock>:
 8005d50:	4801      	ldr	r0, [pc, #4]	@ (8005d58 <__malloc_unlock+0x8>)
 8005d52:	f7ff bf09 	b.w	8005b68 <__retarget_lock_release_recursive>
 8005d56:	bf00      	nop
 8005d58:	20000320 	.word	0x20000320

08005d5c <__sfputc_r>:
 8005d5c:	6893      	ldr	r3, [r2, #8]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	b410      	push	{r4}
 8005d64:	6093      	str	r3, [r2, #8]
 8005d66:	da08      	bge.n	8005d7a <__sfputc_r+0x1e>
 8005d68:	6994      	ldr	r4, [r2, #24]
 8005d6a:	42a3      	cmp	r3, r4
 8005d6c:	db01      	blt.n	8005d72 <__sfputc_r+0x16>
 8005d6e:	290a      	cmp	r1, #10
 8005d70:	d103      	bne.n	8005d7a <__sfputc_r+0x1e>
 8005d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d76:	f7ff bde8 	b.w	800594a <__swbuf_r>
 8005d7a:	6813      	ldr	r3, [r2, #0]
 8005d7c:	1c58      	adds	r0, r3, #1
 8005d7e:	6010      	str	r0, [r2, #0]
 8005d80:	7019      	strb	r1, [r3, #0]
 8005d82:	4608      	mov	r0, r1
 8005d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <__sfputs_r>:
 8005d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8c:	4606      	mov	r6, r0
 8005d8e:	460f      	mov	r7, r1
 8005d90:	4614      	mov	r4, r2
 8005d92:	18d5      	adds	r5, r2, r3
 8005d94:	42ac      	cmp	r4, r5
 8005d96:	d101      	bne.n	8005d9c <__sfputs_r+0x12>
 8005d98:	2000      	movs	r0, #0
 8005d9a:	e007      	b.n	8005dac <__sfputs_r+0x22>
 8005d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da0:	463a      	mov	r2, r7
 8005da2:	4630      	mov	r0, r6
 8005da4:	f7ff ffda 	bl	8005d5c <__sfputc_r>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d1f3      	bne.n	8005d94 <__sfputs_r+0xa>
 8005dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005db0 <_vfiprintf_r>:
 8005db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	460d      	mov	r5, r1
 8005db6:	b09d      	sub	sp, #116	@ 0x74
 8005db8:	4614      	mov	r4, r2
 8005dba:	4698      	mov	r8, r3
 8005dbc:	4606      	mov	r6, r0
 8005dbe:	b118      	cbz	r0, 8005dc8 <_vfiprintf_r+0x18>
 8005dc0:	6a03      	ldr	r3, [r0, #32]
 8005dc2:	b90b      	cbnz	r3, 8005dc8 <_vfiprintf_r+0x18>
 8005dc4:	f7ff fcd8 	bl	8005778 <__sinit>
 8005dc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dca:	07d9      	lsls	r1, r3, #31
 8005dcc:	d405      	bmi.n	8005dda <_vfiprintf_r+0x2a>
 8005dce:	89ab      	ldrh	r3, [r5, #12]
 8005dd0:	059a      	lsls	r2, r3, #22
 8005dd2:	d402      	bmi.n	8005dda <_vfiprintf_r+0x2a>
 8005dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dd6:	f7ff fec6 	bl	8005b66 <__retarget_lock_acquire_recursive>
 8005dda:	89ab      	ldrh	r3, [r5, #12]
 8005ddc:	071b      	lsls	r3, r3, #28
 8005dde:	d501      	bpl.n	8005de4 <_vfiprintf_r+0x34>
 8005de0:	692b      	ldr	r3, [r5, #16]
 8005de2:	b99b      	cbnz	r3, 8005e0c <_vfiprintf_r+0x5c>
 8005de4:	4629      	mov	r1, r5
 8005de6:	4630      	mov	r0, r6
 8005de8:	f7ff fdee 	bl	80059c8 <__swsetup_r>
 8005dec:	b170      	cbz	r0, 8005e0c <_vfiprintf_r+0x5c>
 8005dee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005df0:	07dc      	lsls	r4, r3, #31
 8005df2:	d504      	bpl.n	8005dfe <_vfiprintf_r+0x4e>
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	b01d      	add	sp, #116	@ 0x74
 8005dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfe:	89ab      	ldrh	r3, [r5, #12]
 8005e00:	0598      	lsls	r0, r3, #22
 8005e02:	d4f7      	bmi.n	8005df4 <_vfiprintf_r+0x44>
 8005e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e06:	f7ff feaf 	bl	8005b68 <__retarget_lock_release_recursive>
 8005e0a:	e7f3      	b.n	8005df4 <_vfiprintf_r+0x44>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e10:	2320      	movs	r3, #32
 8005e12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e16:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e1a:	2330      	movs	r3, #48	@ 0x30
 8005e1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005fcc <_vfiprintf_r+0x21c>
 8005e20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e24:	f04f 0901 	mov.w	r9, #1
 8005e28:	4623      	mov	r3, r4
 8005e2a:	469a      	mov	sl, r3
 8005e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e30:	b10a      	cbz	r2, 8005e36 <_vfiprintf_r+0x86>
 8005e32:	2a25      	cmp	r2, #37	@ 0x25
 8005e34:	d1f9      	bne.n	8005e2a <_vfiprintf_r+0x7a>
 8005e36:	ebba 0b04 	subs.w	fp, sl, r4
 8005e3a:	d00b      	beq.n	8005e54 <_vfiprintf_r+0xa4>
 8005e3c:	465b      	mov	r3, fp
 8005e3e:	4622      	mov	r2, r4
 8005e40:	4629      	mov	r1, r5
 8005e42:	4630      	mov	r0, r6
 8005e44:	f7ff ffa1 	bl	8005d8a <__sfputs_r>
 8005e48:	3001      	adds	r0, #1
 8005e4a:	f000 80a7 	beq.w	8005f9c <_vfiprintf_r+0x1ec>
 8005e4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e50:	445a      	add	r2, fp
 8005e52:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e54:	f89a 3000 	ldrb.w	r3, [sl]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 809f 	beq.w	8005f9c <_vfiprintf_r+0x1ec>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f04f 32ff 	mov.w	r2, #4294967295
 8005e64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e68:	f10a 0a01 	add.w	sl, sl, #1
 8005e6c:	9304      	str	r3, [sp, #16]
 8005e6e:	9307      	str	r3, [sp, #28]
 8005e70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e74:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e76:	4654      	mov	r4, sl
 8005e78:	2205      	movs	r2, #5
 8005e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e7e:	4853      	ldr	r0, [pc, #332]	@ (8005fcc <_vfiprintf_r+0x21c>)
 8005e80:	f7fa f9a6 	bl	80001d0 <memchr>
 8005e84:	9a04      	ldr	r2, [sp, #16]
 8005e86:	b9d8      	cbnz	r0, 8005ec0 <_vfiprintf_r+0x110>
 8005e88:	06d1      	lsls	r1, r2, #27
 8005e8a:	bf44      	itt	mi
 8005e8c:	2320      	movmi	r3, #32
 8005e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e92:	0713      	lsls	r3, r2, #28
 8005e94:	bf44      	itt	mi
 8005e96:	232b      	movmi	r3, #43	@ 0x2b
 8005e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ea2:	d015      	beq.n	8005ed0 <_vfiprintf_r+0x120>
 8005ea4:	9a07      	ldr	r2, [sp, #28]
 8005ea6:	4654      	mov	r4, sl
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	f04f 0c0a 	mov.w	ip, #10
 8005eae:	4621      	mov	r1, r4
 8005eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eb4:	3b30      	subs	r3, #48	@ 0x30
 8005eb6:	2b09      	cmp	r3, #9
 8005eb8:	d94b      	bls.n	8005f52 <_vfiprintf_r+0x1a2>
 8005eba:	b1b0      	cbz	r0, 8005eea <_vfiprintf_r+0x13a>
 8005ebc:	9207      	str	r2, [sp, #28]
 8005ebe:	e014      	b.n	8005eea <_vfiprintf_r+0x13a>
 8005ec0:	eba0 0308 	sub.w	r3, r0, r8
 8005ec4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	9304      	str	r3, [sp, #16]
 8005ecc:	46a2      	mov	sl, r4
 8005ece:	e7d2      	b.n	8005e76 <_vfiprintf_r+0xc6>
 8005ed0:	9b03      	ldr	r3, [sp, #12]
 8005ed2:	1d19      	adds	r1, r3, #4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	9103      	str	r1, [sp, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	bfbb      	ittet	lt
 8005edc:	425b      	neglt	r3, r3
 8005ede:	f042 0202 	orrlt.w	r2, r2, #2
 8005ee2:	9307      	strge	r3, [sp, #28]
 8005ee4:	9307      	strlt	r3, [sp, #28]
 8005ee6:	bfb8      	it	lt
 8005ee8:	9204      	strlt	r2, [sp, #16]
 8005eea:	7823      	ldrb	r3, [r4, #0]
 8005eec:	2b2e      	cmp	r3, #46	@ 0x2e
 8005eee:	d10a      	bne.n	8005f06 <_vfiprintf_r+0x156>
 8005ef0:	7863      	ldrb	r3, [r4, #1]
 8005ef2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ef4:	d132      	bne.n	8005f5c <_vfiprintf_r+0x1ac>
 8005ef6:	9b03      	ldr	r3, [sp, #12]
 8005ef8:	1d1a      	adds	r2, r3, #4
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	9203      	str	r2, [sp, #12]
 8005efe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f02:	3402      	adds	r4, #2
 8005f04:	9305      	str	r3, [sp, #20]
 8005f06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005fdc <_vfiprintf_r+0x22c>
 8005f0a:	7821      	ldrb	r1, [r4, #0]
 8005f0c:	2203      	movs	r2, #3
 8005f0e:	4650      	mov	r0, sl
 8005f10:	f7fa f95e 	bl	80001d0 <memchr>
 8005f14:	b138      	cbz	r0, 8005f26 <_vfiprintf_r+0x176>
 8005f16:	9b04      	ldr	r3, [sp, #16]
 8005f18:	eba0 000a 	sub.w	r0, r0, sl
 8005f1c:	2240      	movs	r2, #64	@ 0x40
 8005f1e:	4082      	lsls	r2, r0
 8005f20:	4313      	orrs	r3, r2
 8005f22:	3401      	adds	r4, #1
 8005f24:	9304      	str	r3, [sp, #16]
 8005f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f2a:	4829      	ldr	r0, [pc, #164]	@ (8005fd0 <_vfiprintf_r+0x220>)
 8005f2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f30:	2206      	movs	r2, #6
 8005f32:	f7fa f94d 	bl	80001d0 <memchr>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	d03f      	beq.n	8005fba <_vfiprintf_r+0x20a>
 8005f3a:	4b26      	ldr	r3, [pc, #152]	@ (8005fd4 <_vfiprintf_r+0x224>)
 8005f3c:	bb1b      	cbnz	r3, 8005f86 <_vfiprintf_r+0x1d6>
 8005f3e:	9b03      	ldr	r3, [sp, #12]
 8005f40:	3307      	adds	r3, #7
 8005f42:	f023 0307 	bic.w	r3, r3, #7
 8005f46:	3308      	adds	r3, #8
 8005f48:	9303      	str	r3, [sp, #12]
 8005f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f4c:	443b      	add	r3, r7
 8005f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f50:	e76a      	b.n	8005e28 <_vfiprintf_r+0x78>
 8005f52:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f56:	460c      	mov	r4, r1
 8005f58:	2001      	movs	r0, #1
 8005f5a:	e7a8      	b.n	8005eae <_vfiprintf_r+0xfe>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	3401      	adds	r4, #1
 8005f60:	9305      	str	r3, [sp, #20]
 8005f62:	4619      	mov	r1, r3
 8005f64:	f04f 0c0a 	mov.w	ip, #10
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f6e:	3a30      	subs	r2, #48	@ 0x30
 8005f70:	2a09      	cmp	r2, #9
 8005f72:	d903      	bls.n	8005f7c <_vfiprintf_r+0x1cc>
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0c6      	beq.n	8005f06 <_vfiprintf_r+0x156>
 8005f78:	9105      	str	r1, [sp, #20]
 8005f7a:	e7c4      	b.n	8005f06 <_vfiprintf_r+0x156>
 8005f7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f80:	4604      	mov	r4, r0
 8005f82:	2301      	movs	r3, #1
 8005f84:	e7f0      	b.n	8005f68 <_vfiprintf_r+0x1b8>
 8005f86:	ab03      	add	r3, sp, #12
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	462a      	mov	r2, r5
 8005f8c:	4b12      	ldr	r3, [pc, #72]	@ (8005fd8 <_vfiprintf_r+0x228>)
 8005f8e:	a904      	add	r1, sp, #16
 8005f90:	4630      	mov	r0, r6
 8005f92:	f3af 8000 	nop.w
 8005f96:	4607      	mov	r7, r0
 8005f98:	1c78      	adds	r0, r7, #1
 8005f9a:	d1d6      	bne.n	8005f4a <_vfiprintf_r+0x19a>
 8005f9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f9e:	07d9      	lsls	r1, r3, #31
 8005fa0:	d405      	bmi.n	8005fae <_vfiprintf_r+0x1fe>
 8005fa2:	89ab      	ldrh	r3, [r5, #12]
 8005fa4:	059a      	lsls	r2, r3, #22
 8005fa6:	d402      	bmi.n	8005fae <_vfiprintf_r+0x1fe>
 8005fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005faa:	f7ff fddd 	bl	8005b68 <__retarget_lock_release_recursive>
 8005fae:	89ab      	ldrh	r3, [r5, #12]
 8005fb0:	065b      	lsls	r3, r3, #25
 8005fb2:	f53f af1f 	bmi.w	8005df4 <_vfiprintf_r+0x44>
 8005fb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fb8:	e71e      	b.n	8005df8 <_vfiprintf_r+0x48>
 8005fba:	ab03      	add	r3, sp, #12
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	462a      	mov	r2, r5
 8005fc0:	4b05      	ldr	r3, [pc, #20]	@ (8005fd8 <_vfiprintf_r+0x228>)
 8005fc2:	a904      	add	r1, sp, #16
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	f000 f879 	bl	80060bc <_printf_i>
 8005fca:	e7e4      	b.n	8005f96 <_vfiprintf_r+0x1e6>
 8005fcc:	08006dc4 	.word	0x08006dc4
 8005fd0:	08006dce 	.word	0x08006dce
 8005fd4:	00000000 	.word	0x00000000
 8005fd8:	08005d8b 	.word	0x08005d8b
 8005fdc:	08006dca 	.word	0x08006dca

08005fe0 <_printf_common>:
 8005fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	4616      	mov	r6, r2
 8005fe6:	4698      	mov	r8, r3
 8005fe8:	688a      	ldr	r2, [r1, #8]
 8005fea:	690b      	ldr	r3, [r1, #16]
 8005fec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	bfb8      	it	lt
 8005ff4:	4613      	movlt	r3, r2
 8005ff6:	6033      	str	r3, [r6, #0]
 8005ff8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ffc:	4607      	mov	r7, r0
 8005ffe:	460c      	mov	r4, r1
 8006000:	b10a      	cbz	r2, 8006006 <_printf_common+0x26>
 8006002:	3301      	adds	r3, #1
 8006004:	6033      	str	r3, [r6, #0]
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	0699      	lsls	r1, r3, #26
 800600a:	bf42      	ittt	mi
 800600c:	6833      	ldrmi	r3, [r6, #0]
 800600e:	3302      	addmi	r3, #2
 8006010:	6033      	strmi	r3, [r6, #0]
 8006012:	6825      	ldr	r5, [r4, #0]
 8006014:	f015 0506 	ands.w	r5, r5, #6
 8006018:	d106      	bne.n	8006028 <_printf_common+0x48>
 800601a:	f104 0a19 	add.w	sl, r4, #25
 800601e:	68e3      	ldr	r3, [r4, #12]
 8006020:	6832      	ldr	r2, [r6, #0]
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	42ab      	cmp	r3, r5
 8006026:	dc26      	bgt.n	8006076 <_printf_common+0x96>
 8006028:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800602c:	6822      	ldr	r2, [r4, #0]
 800602e:	3b00      	subs	r3, #0
 8006030:	bf18      	it	ne
 8006032:	2301      	movne	r3, #1
 8006034:	0692      	lsls	r2, r2, #26
 8006036:	d42b      	bmi.n	8006090 <_printf_common+0xb0>
 8006038:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800603c:	4641      	mov	r1, r8
 800603e:	4638      	mov	r0, r7
 8006040:	47c8      	blx	r9
 8006042:	3001      	adds	r0, #1
 8006044:	d01e      	beq.n	8006084 <_printf_common+0xa4>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	6922      	ldr	r2, [r4, #16]
 800604a:	f003 0306 	and.w	r3, r3, #6
 800604e:	2b04      	cmp	r3, #4
 8006050:	bf02      	ittt	eq
 8006052:	68e5      	ldreq	r5, [r4, #12]
 8006054:	6833      	ldreq	r3, [r6, #0]
 8006056:	1aed      	subeq	r5, r5, r3
 8006058:	68a3      	ldr	r3, [r4, #8]
 800605a:	bf0c      	ite	eq
 800605c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006060:	2500      	movne	r5, #0
 8006062:	4293      	cmp	r3, r2
 8006064:	bfc4      	itt	gt
 8006066:	1a9b      	subgt	r3, r3, r2
 8006068:	18ed      	addgt	r5, r5, r3
 800606a:	2600      	movs	r6, #0
 800606c:	341a      	adds	r4, #26
 800606e:	42b5      	cmp	r5, r6
 8006070:	d11a      	bne.n	80060a8 <_printf_common+0xc8>
 8006072:	2000      	movs	r0, #0
 8006074:	e008      	b.n	8006088 <_printf_common+0xa8>
 8006076:	2301      	movs	r3, #1
 8006078:	4652      	mov	r2, sl
 800607a:	4641      	mov	r1, r8
 800607c:	4638      	mov	r0, r7
 800607e:	47c8      	blx	r9
 8006080:	3001      	adds	r0, #1
 8006082:	d103      	bne.n	800608c <_printf_common+0xac>
 8006084:	f04f 30ff 	mov.w	r0, #4294967295
 8006088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800608c:	3501      	adds	r5, #1
 800608e:	e7c6      	b.n	800601e <_printf_common+0x3e>
 8006090:	18e1      	adds	r1, r4, r3
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	2030      	movs	r0, #48	@ 0x30
 8006096:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800609a:	4422      	add	r2, r4
 800609c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060a4:	3302      	adds	r3, #2
 80060a6:	e7c7      	b.n	8006038 <_printf_common+0x58>
 80060a8:	2301      	movs	r3, #1
 80060aa:	4622      	mov	r2, r4
 80060ac:	4641      	mov	r1, r8
 80060ae:	4638      	mov	r0, r7
 80060b0:	47c8      	blx	r9
 80060b2:	3001      	adds	r0, #1
 80060b4:	d0e6      	beq.n	8006084 <_printf_common+0xa4>
 80060b6:	3601      	adds	r6, #1
 80060b8:	e7d9      	b.n	800606e <_printf_common+0x8e>
	...

080060bc <_printf_i>:
 80060bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060c0:	7e0f      	ldrb	r7, [r1, #24]
 80060c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060c4:	2f78      	cmp	r7, #120	@ 0x78
 80060c6:	4691      	mov	r9, r2
 80060c8:	4680      	mov	r8, r0
 80060ca:	460c      	mov	r4, r1
 80060cc:	469a      	mov	sl, r3
 80060ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060d2:	d807      	bhi.n	80060e4 <_printf_i+0x28>
 80060d4:	2f62      	cmp	r7, #98	@ 0x62
 80060d6:	d80a      	bhi.n	80060ee <_printf_i+0x32>
 80060d8:	2f00      	cmp	r7, #0
 80060da:	f000 80d1 	beq.w	8006280 <_printf_i+0x1c4>
 80060de:	2f58      	cmp	r7, #88	@ 0x58
 80060e0:	f000 80b8 	beq.w	8006254 <_printf_i+0x198>
 80060e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060ec:	e03a      	b.n	8006164 <_printf_i+0xa8>
 80060ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060f2:	2b15      	cmp	r3, #21
 80060f4:	d8f6      	bhi.n	80060e4 <_printf_i+0x28>
 80060f6:	a101      	add	r1, pc, #4	@ (adr r1, 80060fc <_printf_i+0x40>)
 80060f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060fc:	08006155 	.word	0x08006155
 8006100:	08006169 	.word	0x08006169
 8006104:	080060e5 	.word	0x080060e5
 8006108:	080060e5 	.word	0x080060e5
 800610c:	080060e5 	.word	0x080060e5
 8006110:	080060e5 	.word	0x080060e5
 8006114:	08006169 	.word	0x08006169
 8006118:	080060e5 	.word	0x080060e5
 800611c:	080060e5 	.word	0x080060e5
 8006120:	080060e5 	.word	0x080060e5
 8006124:	080060e5 	.word	0x080060e5
 8006128:	08006267 	.word	0x08006267
 800612c:	08006193 	.word	0x08006193
 8006130:	08006221 	.word	0x08006221
 8006134:	080060e5 	.word	0x080060e5
 8006138:	080060e5 	.word	0x080060e5
 800613c:	08006289 	.word	0x08006289
 8006140:	080060e5 	.word	0x080060e5
 8006144:	08006193 	.word	0x08006193
 8006148:	080060e5 	.word	0x080060e5
 800614c:	080060e5 	.word	0x080060e5
 8006150:	08006229 	.word	0x08006229
 8006154:	6833      	ldr	r3, [r6, #0]
 8006156:	1d1a      	adds	r2, r3, #4
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6032      	str	r2, [r6, #0]
 800615c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006160:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006164:	2301      	movs	r3, #1
 8006166:	e09c      	b.n	80062a2 <_printf_i+0x1e6>
 8006168:	6833      	ldr	r3, [r6, #0]
 800616a:	6820      	ldr	r0, [r4, #0]
 800616c:	1d19      	adds	r1, r3, #4
 800616e:	6031      	str	r1, [r6, #0]
 8006170:	0606      	lsls	r6, r0, #24
 8006172:	d501      	bpl.n	8006178 <_printf_i+0xbc>
 8006174:	681d      	ldr	r5, [r3, #0]
 8006176:	e003      	b.n	8006180 <_printf_i+0xc4>
 8006178:	0645      	lsls	r5, r0, #25
 800617a:	d5fb      	bpl.n	8006174 <_printf_i+0xb8>
 800617c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006180:	2d00      	cmp	r5, #0
 8006182:	da03      	bge.n	800618c <_printf_i+0xd0>
 8006184:	232d      	movs	r3, #45	@ 0x2d
 8006186:	426d      	negs	r5, r5
 8006188:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800618c:	4858      	ldr	r0, [pc, #352]	@ (80062f0 <_printf_i+0x234>)
 800618e:	230a      	movs	r3, #10
 8006190:	e011      	b.n	80061b6 <_printf_i+0xfa>
 8006192:	6821      	ldr	r1, [r4, #0]
 8006194:	6833      	ldr	r3, [r6, #0]
 8006196:	0608      	lsls	r0, r1, #24
 8006198:	f853 5b04 	ldr.w	r5, [r3], #4
 800619c:	d402      	bmi.n	80061a4 <_printf_i+0xe8>
 800619e:	0649      	lsls	r1, r1, #25
 80061a0:	bf48      	it	mi
 80061a2:	b2ad      	uxthmi	r5, r5
 80061a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80061a6:	4852      	ldr	r0, [pc, #328]	@ (80062f0 <_printf_i+0x234>)
 80061a8:	6033      	str	r3, [r6, #0]
 80061aa:	bf14      	ite	ne
 80061ac:	230a      	movne	r3, #10
 80061ae:	2308      	moveq	r3, #8
 80061b0:	2100      	movs	r1, #0
 80061b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061b6:	6866      	ldr	r6, [r4, #4]
 80061b8:	60a6      	str	r6, [r4, #8]
 80061ba:	2e00      	cmp	r6, #0
 80061bc:	db05      	blt.n	80061ca <_printf_i+0x10e>
 80061be:	6821      	ldr	r1, [r4, #0]
 80061c0:	432e      	orrs	r6, r5
 80061c2:	f021 0104 	bic.w	r1, r1, #4
 80061c6:	6021      	str	r1, [r4, #0]
 80061c8:	d04b      	beq.n	8006262 <_printf_i+0x1a6>
 80061ca:	4616      	mov	r6, r2
 80061cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80061d0:	fb03 5711 	mls	r7, r3, r1, r5
 80061d4:	5dc7      	ldrb	r7, [r0, r7]
 80061d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061da:	462f      	mov	r7, r5
 80061dc:	42bb      	cmp	r3, r7
 80061de:	460d      	mov	r5, r1
 80061e0:	d9f4      	bls.n	80061cc <_printf_i+0x110>
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d10b      	bne.n	80061fe <_printf_i+0x142>
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	07df      	lsls	r7, r3, #31
 80061ea:	d508      	bpl.n	80061fe <_printf_i+0x142>
 80061ec:	6923      	ldr	r3, [r4, #16]
 80061ee:	6861      	ldr	r1, [r4, #4]
 80061f0:	4299      	cmp	r1, r3
 80061f2:	bfde      	ittt	le
 80061f4:	2330      	movle	r3, #48	@ 0x30
 80061f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061fe:	1b92      	subs	r2, r2, r6
 8006200:	6122      	str	r2, [r4, #16]
 8006202:	f8cd a000 	str.w	sl, [sp]
 8006206:	464b      	mov	r3, r9
 8006208:	aa03      	add	r2, sp, #12
 800620a:	4621      	mov	r1, r4
 800620c:	4640      	mov	r0, r8
 800620e:	f7ff fee7 	bl	8005fe0 <_printf_common>
 8006212:	3001      	adds	r0, #1
 8006214:	d14a      	bne.n	80062ac <_printf_i+0x1f0>
 8006216:	f04f 30ff 	mov.w	r0, #4294967295
 800621a:	b004      	add	sp, #16
 800621c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	f043 0320 	orr.w	r3, r3, #32
 8006226:	6023      	str	r3, [r4, #0]
 8006228:	4832      	ldr	r0, [pc, #200]	@ (80062f4 <_printf_i+0x238>)
 800622a:	2778      	movs	r7, #120	@ 0x78
 800622c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	6831      	ldr	r1, [r6, #0]
 8006234:	061f      	lsls	r7, r3, #24
 8006236:	f851 5b04 	ldr.w	r5, [r1], #4
 800623a:	d402      	bmi.n	8006242 <_printf_i+0x186>
 800623c:	065f      	lsls	r7, r3, #25
 800623e:	bf48      	it	mi
 8006240:	b2ad      	uxthmi	r5, r5
 8006242:	6031      	str	r1, [r6, #0]
 8006244:	07d9      	lsls	r1, r3, #31
 8006246:	bf44      	itt	mi
 8006248:	f043 0320 	orrmi.w	r3, r3, #32
 800624c:	6023      	strmi	r3, [r4, #0]
 800624e:	b11d      	cbz	r5, 8006258 <_printf_i+0x19c>
 8006250:	2310      	movs	r3, #16
 8006252:	e7ad      	b.n	80061b0 <_printf_i+0xf4>
 8006254:	4826      	ldr	r0, [pc, #152]	@ (80062f0 <_printf_i+0x234>)
 8006256:	e7e9      	b.n	800622c <_printf_i+0x170>
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	f023 0320 	bic.w	r3, r3, #32
 800625e:	6023      	str	r3, [r4, #0]
 8006260:	e7f6      	b.n	8006250 <_printf_i+0x194>
 8006262:	4616      	mov	r6, r2
 8006264:	e7bd      	b.n	80061e2 <_printf_i+0x126>
 8006266:	6833      	ldr	r3, [r6, #0]
 8006268:	6825      	ldr	r5, [r4, #0]
 800626a:	6961      	ldr	r1, [r4, #20]
 800626c:	1d18      	adds	r0, r3, #4
 800626e:	6030      	str	r0, [r6, #0]
 8006270:	062e      	lsls	r6, r5, #24
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	d501      	bpl.n	800627a <_printf_i+0x1be>
 8006276:	6019      	str	r1, [r3, #0]
 8006278:	e002      	b.n	8006280 <_printf_i+0x1c4>
 800627a:	0668      	lsls	r0, r5, #25
 800627c:	d5fb      	bpl.n	8006276 <_printf_i+0x1ba>
 800627e:	8019      	strh	r1, [r3, #0]
 8006280:	2300      	movs	r3, #0
 8006282:	6123      	str	r3, [r4, #16]
 8006284:	4616      	mov	r6, r2
 8006286:	e7bc      	b.n	8006202 <_printf_i+0x146>
 8006288:	6833      	ldr	r3, [r6, #0]
 800628a:	1d1a      	adds	r2, r3, #4
 800628c:	6032      	str	r2, [r6, #0]
 800628e:	681e      	ldr	r6, [r3, #0]
 8006290:	6862      	ldr	r2, [r4, #4]
 8006292:	2100      	movs	r1, #0
 8006294:	4630      	mov	r0, r6
 8006296:	f7f9 ff9b 	bl	80001d0 <memchr>
 800629a:	b108      	cbz	r0, 80062a0 <_printf_i+0x1e4>
 800629c:	1b80      	subs	r0, r0, r6
 800629e:	6060      	str	r0, [r4, #4]
 80062a0:	6863      	ldr	r3, [r4, #4]
 80062a2:	6123      	str	r3, [r4, #16]
 80062a4:	2300      	movs	r3, #0
 80062a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062aa:	e7aa      	b.n	8006202 <_printf_i+0x146>
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	4632      	mov	r2, r6
 80062b0:	4649      	mov	r1, r9
 80062b2:	4640      	mov	r0, r8
 80062b4:	47d0      	blx	sl
 80062b6:	3001      	adds	r0, #1
 80062b8:	d0ad      	beq.n	8006216 <_printf_i+0x15a>
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	079b      	lsls	r3, r3, #30
 80062be:	d413      	bmi.n	80062e8 <_printf_i+0x22c>
 80062c0:	68e0      	ldr	r0, [r4, #12]
 80062c2:	9b03      	ldr	r3, [sp, #12]
 80062c4:	4298      	cmp	r0, r3
 80062c6:	bfb8      	it	lt
 80062c8:	4618      	movlt	r0, r3
 80062ca:	e7a6      	b.n	800621a <_printf_i+0x15e>
 80062cc:	2301      	movs	r3, #1
 80062ce:	4632      	mov	r2, r6
 80062d0:	4649      	mov	r1, r9
 80062d2:	4640      	mov	r0, r8
 80062d4:	47d0      	blx	sl
 80062d6:	3001      	adds	r0, #1
 80062d8:	d09d      	beq.n	8006216 <_printf_i+0x15a>
 80062da:	3501      	adds	r5, #1
 80062dc:	68e3      	ldr	r3, [r4, #12]
 80062de:	9903      	ldr	r1, [sp, #12]
 80062e0:	1a5b      	subs	r3, r3, r1
 80062e2:	42ab      	cmp	r3, r5
 80062e4:	dcf2      	bgt.n	80062cc <_printf_i+0x210>
 80062e6:	e7eb      	b.n	80062c0 <_printf_i+0x204>
 80062e8:	2500      	movs	r5, #0
 80062ea:	f104 0619 	add.w	r6, r4, #25
 80062ee:	e7f5      	b.n	80062dc <_printf_i+0x220>
 80062f0:	08006dd5 	.word	0x08006dd5
 80062f4:	08006de6 	.word	0x08006de6

080062f8 <__sflush_r>:
 80062f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006300:	0716      	lsls	r6, r2, #28
 8006302:	4605      	mov	r5, r0
 8006304:	460c      	mov	r4, r1
 8006306:	d454      	bmi.n	80063b2 <__sflush_r+0xba>
 8006308:	684b      	ldr	r3, [r1, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	dc02      	bgt.n	8006314 <__sflush_r+0x1c>
 800630e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	dd48      	ble.n	80063a6 <__sflush_r+0xae>
 8006314:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006316:	2e00      	cmp	r6, #0
 8006318:	d045      	beq.n	80063a6 <__sflush_r+0xae>
 800631a:	2300      	movs	r3, #0
 800631c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006320:	682f      	ldr	r7, [r5, #0]
 8006322:	6a21      	ldr	r1, [r4, #32]
 8006324:	602b      	str	r3, [r5, #0]
 8006326:	d030      	beq.n	800638a <__sflush_r+0x92>
 8006328:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800632a:	89a3      	ldrh	r3, [r4, #12]
 800632c:	0759      	lsls	r1, r3, #29
 800632e:	d505      	bpl.n	800633c <__sflush_r+0x44>
 8006330:	6863      	ldr	r3, [r4, #4]
 8006332:	1ad2      	subs	r2, r2, r3
 8006334:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006336:	b10b      	cbz	r3, 800633c <__sflush_r+0x44>
 8006338:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800633a:	1ad2      	subs	r2, r2, r3
 800633c:	2300      	movs	r3, #0
 800633e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006340:	6a21      	ldr	r1, [r4, #32]
 8006342:	4628      	mov	r0, r5
 8006344:	47b0      	blx	r6
 8006346:	1c43      	adds	r3, r0, #1
 8006348:	89a3      	ldrh	r3, [r4, #12]
 800634a:	d106      	bne.n	800635a <__sflush_r+0x62>
 800634c:	6829      	ldr	r1, [r5, #0]
 800634e:	291d      	cmp	r1, #29
 8006350:	d82b      	bhi.n	80063aa <__sflush_r+0xb2>
 8006352:	4a2a      	ldr	r2, [pc, #168]	@ (80063fc <__sflush_r+0x104>)
 8006354:	40ca      	lsrs	r2, r1
 8006356:	07d6      	lsls	r6, r2, #31
 8006358:	d527      	bpl.n	80063aa <__sflush_r+0xb2>
 800635a:	2200      	movs	r2, #0
 800635c:	6062      	str	r2, [r4, #4]
 800635e:	04d9      	lsls	r1, r3, #19
 8006360:	6922      	ldr	r2, [r4, #16]
 8006362:	6022      	str	r2, [r4, #0]
 8006364:	d504      	bpl.n	8006370 <__sflush_r+0x78>
 8006366:	1c42      	adds	r2, r0, #1
 8006368:	d101      	bne.n	800636e <__sflush_r+0x76>
 800636a:	682b      	ldr	r3, [r5, #0]
 800636c:	b903      	cbnz	r3, 8006370 <__sflush_r+0x78>
 800636e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006370:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006372:	602f      	str	r7, [r5, #0]
 8006374:	b1b9      	cbz	r1, 80063a6 <__sflush_r+0xae>
 8006376:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800637a:	4299      	cmp	r1, r3
 800637c:	d002      	beq.n	8006384 <__sflush_r+0x8c>
 800637e:	4628      	mov	r0, r5
 8006380:	f7ff fbf4 	bl	8005b6c <_free_r>
 8006384:	2300      	movs	r3, #0
 8006386:	6363      	str	r3, [r4, #52]	@ 0x34
 8006388:	e00d      	b.n	80063a6 <__sflush_r+0xae>
 800638a:	2301      	movs	r3, #1
 800638c:	4628      	mov	r0, r5
 800638e:	47b0      	blx	r6
 8006390:	4602      	mov	r2, r0
 8006392:	1c50      	adds	r0, r2, #1
 8006394:	d1c9      	bne.n	800632a <__sflush_r+0x32>
 8006396:	682b      	ldr	r3, [r5, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0c6      	beq.n	800632a <__sflush_r+0x32>
 800639c:	2b1d      	cmp	r3, #29
 800639e:	d001      	beq.n	80063a4 <__sflush_r+0xac>
 80063a0:	2b16      	cmp	r3, #22
 80063a2:	d11e      	bne.n	80063e2 <__sflush_r+0xea>
 80063a4:	602f      	str	r7, [r5, #0]
 80063a6:	2000      	movs	r0, #0
 80063a8:	e022      	b.n	80063f0 <__sflush_r+0xf8>
 80063aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063ae:	b21b      	sxth	r3, r3
 80063b0:	e01b      	b.n	80063ea <__sflush_r+0xf2>
 80063b2:	690f      	ldr	r7, [r1, #16]
 80063b4:	2f00      	cmp	r7, #0
 80063b6:	d0f6      	beq.n	80063a6 <__sflush_r+0xae>
 80063b8:	0793      	lsls	r3, r2, #30
 80063ba:	680e      	ldr	r6, [r1, #0]
 80063bc:	bf08      	it	eq
 80063be:	694b      	ldreq	r3, [r1, #20]
 80063c0:	600f      	str	r7, [r1, #0]
 80063c2:	bf18      	it	ne
 80063c4:	2300      	movne	r3, #0
 80063c6:	eba6 0807 	sub.w	r8, r6, r7
 80063ca:	608b      	str	r3, [r1, #8]
 80063cc:	f1b8 0f00 	cmp.w	r8, #0
 80063d0:	dde9      	ble.n	80063a6 <__sflush_r+0xae>
 80063d2:	6a21      	ldr	r1, [r4, #32]
 80063d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063d6:	4643      	mov	r3, r8
 80063d8:	463a      	mov	r2, r7
 80063da:	4628      	mov	r0, r5
 80063dc:	47b0      	blx	r6
 80063de:	2800      	cmp	r0, #0
 80063e0:	dc08      	bgt.n	80063f4 <__sflush_r+0xfc>
 80063e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063ea:	81a3      	strh	r3, [r4, #12]
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295
 80063f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063f4:	4407      	add	r7, r0
 80063f6:	eba8 0800 	sub.w	r8, r8, r0
 80063fa:	e7e7      	b.n	80063cc <__sflush_r+0xd4>
 80063fc:	20400001 	.word	0x20400001

08006400 <_fflush_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	690b      	ldr	r3, [r1, #16]
 8006404:	4605      	mov	r5, r0
 8006406:	460c      	mov	r4, r1
 8006408:	b913      	cbnz	r3, 8006410 <_fflush_r+0x10>
 800640a:	2500      	movs	r5, #0
 800640c:	4628      	mov	r0, r5
 800640e:	bd38      	pop	{r3, r4, r5, pc}
 8006410:	b118      	cbz	r0, 800641a <_fflush_r+0x1a>
 8006412:	6a03      	ldr	r3, [r0, #32]
 8006414:	b90b      	cbnz	r3, 800641a <_fflush_r+0x1a>
 8006416:	f7ff f9af 	bl	8005778 <__sinit>
 800641a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0f3      	beq.n	800640a <_fflush_r+0xa>
 8006422:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006424:	07d0      	lsls	r0, r2, #31
 8006426:	d404      	bmi.n	8006432 <_fflush_r+0x32>
 8006428:	0599      	lsls	r1, r3, #22
 800642a:	d402      	bmi.n	8006432 <_fflush_r+0x32>
 800642c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800642e:	f7ff fb9a 	bl	8005b66 <__retarget_lock_acquire_recursive>
 8006432:	4628      	mov	r0, r5
 8006434:	4621      	mov	r1, r4
 8006436:	f7ff ff5f 	bl	80062f8 <__sflush_r>
 800643a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800643c:	07da      	lsls	r2, r3, #31
 800643e:	4605      	mov	r5, r0
 8006440:	d4e4      	bmi.n	800640c <_fflush_r+0xc>
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	059b      	lsls	r3, r3, #22
 8006446:	d4e1      	bmi.n	800640c <_fflush_r+0xc>
 8006448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800644a:	f7ff fb8d 	bl	8005b68 <__retarget_lock_release_recursive>
 800644e:	e7dd      	b.n	800640c <_fflush_r+0xc>

08006450 <__swhatbuf_r>:
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	460c      	mov	r4, r1
 8006454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006458:	2900      	cmp	r1, #0
 800645a:	b096      	sub	sp, #88	@ 0x58
 800645c:	4615      	mov	r5, r2
 800645e:	461e      	mov	r6, r3
 8006460:	da0d      	bge.n	800647e <__swhatbuf_r+0x2e>
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006468:	f04f 0100 	mov.w	r1, #0
 800646c:	bf14      	ite	ne
 800646e:	2340      	movne	r3, #64	@ 0x40
 8006470:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006474:	2000      	movs	r0, #0
 8006476:	6031      	str	r1, [r6, #0]
 8006478:	602b      	str	r3, [r5, #0]
 800647a:	b016      	add	sp, #88	@ 0x58
 800647c:	bd70      	pop	{r4, r5, r6, pc}
 800647e:	466a      	mov	r2, sp
 8006480:	f000 f848 	bl	8006514 <_fstat_r>
 8006484:	2800      	cmp	r0, #0
 8006486:	dbec      	blt.n	8006462 <__swhatbuf_r+0x12>
 8006488:	9901      	ldr	r1, [sp, #4]
 800648a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800648e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006492:	4259      	negs	r1, r3
 8006494:	4159      	adcs	r1, r3
 8006496:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800649a:	e7eb      	b.n	8006474 <__swhatbuf_r+0x24>

0800649c <__smakebuf_r>:
 800649c:	898b      	ldrh	r3, [r1, #12]
 800649e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064a0:	079d      	lsls	r5, r3, #30
 80064a2:	4606      	mov	r6, r0
 80064a4:	460c      	mov	r4, r1
 80064a6:	d507      	bpl.n	80064b8 <__smakebuf_r+0x1c>
 80064a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	6123      	str	r3, [r4, #16]
 80064b0:	2301      	movs	r3, #1
 80064b2:	6163      	str	r3, [r4, #20]
 80064b4:	b003      	add	sp, #12
 80064b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064b8:	ab01      	add	r3, sp, #4
 80064ba:	466a      	mov	r2, sp
 80064bc:	f7ff ffc8 	bl	8006450 <__swhatbuf_r>
 80064c0:	9f00      	ldr	r7, [sp, #0]
 80064c2:	4605      	mov	r5, r0
 80064c4:	4639      	mov	r1, r7
 80064c6:	4630      	mov	r0, r6
 80064c8:	f7ff fbbc 	bl	8005c44 <_malloc_r>
 80064cc:	b948      	cbnz	r0, 80064e2 <__smakebuf_r+0x46>
 80064ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064d2:	059a      	lsls	r2, r3, #22
 80064d4:	d4ee      	bmi.n	80064b4 <__smakebuf_r+0x18>
 80064d6:	f023 0303 	bic.w	r3, r3, #3
 80064da:	f043 0302 	orr.w	r3, r3, #2
 80064de:	81a3      	strh	r3, [r4, #12]
 80064e0:	e7e2      	b.n	80064a8 <__smakebuf_r+0xc>
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	6020      	str	r0, [r4, #0]
 80064e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ea:	81a3      	strh	r3, [r4, #12]
 80064ec:	9b01      	ldr	r3, [sp, #4]
 80064ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064f2:	b15b      	cbz	r3, 800650c <__smakebuf_r+0x70>
 80064f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064f8:	4630      	mov	r0, r6
 80064fa:	f000 f81d 	bl	8006538 <_isatty_r>
 80064fe:	b128      	cbz	r0, 800650c <__smakebuf_r+0x70>
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	f023 0303 	bic.w	r3, r3, #3
 8006506:	f043 0301 	orr.w	r3, r3, #1
 800650a:	81a3      	strh	r3, [r4, #12]
 800650c:	89a3      	ldrh	r3, [r4, #12]
 800650e:	431d      	orrs	r5, r3
 8006510:	81a5      	strh	r5, [r4, #12]
 8006512:	e7cf      	b.n	80064b4 <__smakebuf_r+0x18>

08006514 <_fstat_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	4d07      	ldr	r5, [pc, #28]	@ (8006534 <_fstat_r+0x20>)
 8006518:	2300      	movs	r3, #0
 800651a:	4604      	mov	r4, r0
 800651c:	4608      	mov	r0, r1
 800651e:	4611      	mov	r1, r2
 8006520:	602b      	str	r3, [r5, #0]
 8006522:	f7fb fb1e 	bl	8001b62 <_fstat>
 8006526:	1c43      	adds	r3, r0, #1
 8006528:	d102      	bne.n	8006530 <_fstat_r+0x1c>
 800652a:	682b      	ldr	r3, [r5, #0]
 800652c:	b103      	cbz	r3, 8006530 <_fstat_r+0x1c>
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	bd38      	pop	{r3, r4, r5, pc}
 8006532:	bf00      	nop
 8006534:	2000031c 	.word	0x2000031c

08006538 <_isatty_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4d06      	ldr	r5, [pc, #24]	@ (8006554 <_isatty_r+0x1c>)
 800653c:	2300      	movs	r3, #0
 800653e:	4604      	mov	r4, r0
 8006540:	4608      	mov	r0, r1
 8006542:	602b      	str	r3, [r5, #0]
 8006544:	f7fb fb1d 	bl	8001b82 <_isatty>
 8006548:	1c43      	adds	r3, r0, #1
 800654a:	d102      	bne.n	8006552 <_isatty_r+0x1a>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	b103      	cbz	r3, 8006552 <_isatty_r+0x1a>
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	bd38      	pop	{r3, r4, r5, pc}
 8006554:	2000031c 	.word	0x2000031c

08006558 <_sbrk_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4d06      	ldr	r5, [pc, #24]	@ (8006574 <_sbrk_r+0x1c>)
 800655c:	2300      	movs	r3, #0
 800655e:	4604      	mov	r4, r0
 8006560:	4608      	mov	r0, r1
 8006562:	602b      	str	r3, [r5, #0]
 8006564:	f7fb fb26 	bl	8001bb4 <_sbrk>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d102      	bne.n	8006572 <_sbrk_r+0x1a>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	b103      	cbz	r3, 8006572 <_sbrk_r+0x1a>
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	2000031c 	.word	0x2000031c

08006578 <atan2>:
 8006578:	f000 b902 	b.w	8006780 <__ieee754_atan2>

0800657c <sqrt>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	ed2d 8b02 	vpush	{d8}
 8006582:	ec55 4b10 	vmov	r4, r5, d0
 8006586:	f000 f825 	bl	80065d4 <__ieee754_sqrt>
 800658a:	4622      	mov	r2, r4
 800658c:	462b      	mov	r3, r5
 800658e:	4620      	mov	r0, r4
 8006590:	4629      	mov	r1, r5
 8006592:	eeb0 8a40 	vmov.f32	s16, s0
 8006596:	eef0 8a60 	vmov.f32	s17, s1
 800659a:	f7fa fabf 	bl	8000b1c <__aeabi_dcmpun>
 800659e:	b990      	cbnz	r0, 80065c6 <sqrt+0x4a>
 80065a0:	2200      	movs	r2, #0
 80065a2:	2300      	movs	r3, #0
 80065a4:	4620      	mov	r0, r4
 80065a6:	4629      	mov	r1, r5
 80065a8:	f7fa fa90 	bl	8000acc <__aeabi_dcmplt>
 80065ac:	b158      	cbz	r0, 80065c6 <sqrt+0x4a>
 80065ae:	f7ff faaf 	bl	8005b10 <__errno>
 80065b2:	2321      	movs	r3, #33	@ 0x21
 80065b4:	6003      	str	r3, [r0, #0]
 80065b6:	2200      	movs	r2, #0
 80065b8:	2300      	movs	r3, #0
 80065ba:	4610      	mov	r0, r2
 80065bc:	4619      	mov	r1, r3
 80065be:	f7fa f93d 	bl	800083c <__aeabi_ddiv>
 80065c2:	ec41 0b18 	vmov	d8, r0, r1
 80065c6:	eeb0 0a48 	vmov.f32	s0, s16
 80065ca:	eef0 0a68 	vmov.f32	s1, s17
 80065ce:	ecbd 8b02 	vpop	{d8}
 80065d2:	bd38      	pop	{r3, r4, r5, pc}

080065d4 <__ieee754_sqrt>:
 80065d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	4a66      	ldr	r2, [pc, #408]	@ (8006774 <__ieee754_sqrt+0x1a0>)
 80065da:	ec55 4b10 	vmov	r4, r5, d0
 80065de:	43aa      	bics	r2, r5
 80065e0:	462b      	mov	r3, r5
 80065e2:	4621      	mov	r1, r4
 80065e4:	d110      	bne.n	8006608 <__ieee754_sqrt+0x34>
 80065e6:	4622      	mov	r2, r4
 80065e8:	4620      	mov	r0, r4
 80065ea:	4629      	mov	r1, r5
 80065ec:	f7f9 fffc 	bl	80005e8 <__aeabi_dmul>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4620      	mov	r0, r4
 80065f6:	4629      	mov	r1, r5
 80065f8:	f7f9 fe40 	bl	800027c <__adddf3>
 80065fc:	4604      	mov	r4, r0
 80065fe:	460d      	mov	r5, r1
 8006600:	ec45 4b10 	vmov	d0, r4, r5
 8006604:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006608:	2d00      	cmp	r5, #0
 800660a:	dc0e      	bgt.n	800662a <__ieee754_sqrt+0x56>
 800660c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006610:	4322      	orrs	r2, r4
 8006612:	d0f5      	beq.n	8006600 <__ieee754_sqrt+0x2c>
 8006614:	b19d      	cbz	r5, 800663e <__ieee754_sqrt+0x6a>
 8006616:	4622      	mov	r2, r4
 8006618:	4620      	mov	r0, r4
 800661a:	4629      	mov	r1, r5
 800661c:	f7f9 fe2c 	bl	8000278 <__aeabi_dsub>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	f7fa f90a 	bl	800083c <__aeabi_ddiv>
 8006628:	e7e8      	b.n	80065fc <__ieee754_sqrt+0x28>
 800662a:	152a      	asrs	r2, r5, #20
 800662c:	d115      	bne.n	800665a <__ieee754_sqrt+0x86>
 800662e:	2000      	movs	r0, #0
 8006630:	e009      	b.n	8006646 <__ieee754_sqrt+0x72>
 8006632:	0acb      	lsrs	r3, r1, #11
 8006634:	3a15      	subs	r2, #21
 8006636:	0549      	lsls	r1, r1, #21
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0fa      	beq.n	8006632 <__ieee754_sqrt+0x5e>
 800663c:	e7f7      	b.n	800662e <__ieee754_sqrt+0x5a>
 800663e:	462a      	mov	r2, r5
 8006640:	e7fa      	b.n	8006638 <__ieee754_sqrt+0x64>
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	3001      	adds	r0, #1
 8006646:	02dc      	lsls	r4, r3, #11
 8006648:	d5fb      	bpl.n	8006642 <__ieee754_sqrt+0x6e>
 800664a:	1e44      	subs	r4, r0, #1
 800664c:	1b12      	subs	r2, r2, r4
 800664e:	f1c0 0420 	rsb	r4, r0, #32
 8006652:	fa21 f404 	lsr.w	r4, r1, r4
 8006656:	4323      	orrs	r3, r4
 8006658:	4081      	lsls	r1, r0
 800665a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800665e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006666:	07d2      	lsls	r2, r2, #31
 8006668:	bf5c      	itt	pl
 800666a:	005b      	lslpl	r3, r3, #1
 800666c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006670:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006674:	bf58      	it	pl
 8006676:	0049      	lslpl	r1, r1, #1
 8006678:	2600      	movs	r6, #0
 800667a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800667e:	107f      	asrs	r7, r7, #1
 8006680:	0049      	lsls	r1, r1, #1
 8006682:	2016      	movs	r0, #22
 8006684:	4632      	mov	r2, r6
 8006686:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800668a:	1915      	adds	r5, r2, r4
 800668c:	429d      	cmp	r5, r3
 800668e:	bfde      	ittt	le
 8006690:	192a      	addle	r2, r5, r4
 8006692:	1b5b      	suble	r3, r3, r5
 8006694:	1936      	addle	r6, r6, r4
 8006696:	0fcd      	lsrs	r5, r1, #31
 8006698:	3801      	subs	r0, #1
 800669a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800669e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80066a2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80066a6:	d1f0      	bne.n	800668a <__ieee754_sqrt+0xb6>
 80066a8:	4605      	mov	r5, r0
 80066aa:	2420      	movs	r4, #32
 80066ac:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80066b0:	4293      	cmp	r3, r2
 80066b2:	eb0c 0e00 	add.w	lr, ip, r0
 80066b6:	dc02      	bgt.n	80066be <__ieee754_sqrt+0xea>
 80066b8:	d113      	bne.n	80066e2 <__ieee754_sqrt+0x10e>
 80066ba:	458e      	cmp	lr, r1
 80066bc:	d811      	bhi.n	80066e2 <__ieee754_sqrt+0x10e>
 80066be:	f1be 0f00 	cmp.w	lr, #0
 80066c2:	eb0e 000c 	add.w	r0, lr, ip
 80066c6:	da3f      	bge.n	8006748 <__ieee754_sqrt+0x174>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	db3d      	blt.n	8006748 <__ieee754_sqrt+0x174>
 80066cc:	f102 0801 	add.w	r8, r2, #1
 80066d0:	1a9b      	subs	r3, r3, r2
 80066d2:	458e      	cmp	lr, r1
 80066d4:	bf88      	it	hi
 80066d6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80066da:	eba1 010e 	sub.w	r1, r1, lr
 80066de:	4465      	add	r5, ip
 80066e0:	4642      	mov	r2, r8
 80066e2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80066e6:	3c01      	subs	r4, #1
 80066e8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80066ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80066f0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80066f4:	d1dc      	bne.n	80066b0 <__ieee754_sqrt+0xdc>
 80066f6:	4319      	orrs	r1, r3
 80066f8:	d01b      	beq.n	8006732 <__ieee754_sqrt+0x15e>
 80066fa:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8006778 <__ieee754_sqrt+0x1a4>
 80066fe:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800677c <__ieee754_sqrt+0x1a8>
 8006702:	e9da 0100 	ldrd	r0, r1, [sl]
 8006706:	e9db 2300 	ldrd	r2, r3, [fp]
 800670a:	f7f9 fdb5 	bl	8000278 <__aeabi_dsub>
 800670e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4640      	mov	r0, r8
 8006718:	4649      	mov	r1, r9
 800671a:	f7fa f9e1 	bl	8000ae0 <__aeabi_dcmple>
 800671e:	b140      	cbz	r0, 8006732 <__ieee754_sqrt+0x15e>
 8006720:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006724:	e9da 0100 	ldrd	r0, r1, [sl]
 8006728:	e9db 2300 	ldrd	r2, r3, [fp]
 800672c:	d10e      	bne.n	800674c <__ieee754_sqrt+0x178>
 800672e:	3601      	adds	r6, #1
 8006730:	4625      	mov	r5, r4
 8006732:	1073      	asrs	r3, r6, #1
 8006734:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8006738:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800673c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8006740:	086b      	lsrs	r3, r5, #1
 8006742:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8006746:	e759      	b.n	80065fc <__ieee754_sqrt+0x28>
 8006748:	4690      	mov	r8, r2
 800674a:	e7c1      	b.n	80066d0 <__ieee754_sqrt+0xfc>
 800674c:	f7f9 fd96 	bl	800027c <__adddf3>
 8006750:	e9da 8900 	ldrd	r8, r9, [sl]
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4640      	mov	r0, r8
 800675a:	4649      	mov	r1, r9
 800675c:	f7fa f9b6 	bl	8000acc <__aeabi_dcmplt>
 8006760:	b120      	cbz	r0, 800676c <__ieee754_sqrt+0x198>
 8006762:	1cab      	adds	r3, r5, #2
 8006764:	bf08      	it	eq
 8006766:	3601      	addeq	r6, #1
 8006768:	3502      	adds	r5, #2
 800676a:	e7e2      	b.n	8006732 <__ieee754_sqrt+0x15e>
 800676c:	1c6b      	adds	r3, r5, #1
 800676e:	f023 0501 	bic.w	r5, r3, #1
 8006772:	e7de      	b.n	8006732 <__ieee754_sqrt+0x15e>
 8006774:	7ff00000 	.word	0x7ff00000
 8006778:	08006e00 	.word	0x08006e00
 800677c:	08006df8 	.word	0x08006df8

08006780 <__ieee754_atan2>:
 8006780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006784:	ec57 6b11 	vmov	r6, r7, d1
 8006788:	4273      	negs	r3, r6
 800678a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8006908 <__ieee754_atan2+0x188>
 800678e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8006792:	4333      	orrs	r3, r6
 8006794:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006798:	4543      	cmp	r3, r8
 800679a:	ec51 0b10 	vmov	r0, r1, d0
 800679e:	4635      	mov	r5, r6
 80067a0:	d809      	bhi.n	80067b6 <__ieee754_atan2+0x36>
 80067a2:	4244      	negs	r4, r0
 80067a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80067a8:	4304      	orrs	r4, r0
 80067aa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80067ae:	4544      	cmp	r4, r8
 80067b0:	468e      	mov	lr, r1
 80067b2:	4681      	mov	r9, r0
 80067b4:	d907      	bls.n	80067c6 <__ieee754_atan2+0x46>
 80067b6:	4632      	mov	r2, r6
 80067b8:	463b      	mov	r3, r7
 80067ba:	f7f9 fd5f 	bl	800027c <__adddf3>
 80067be:	ec41 0b10 	vmov	d0, r0, r1
 80067c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067c6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80067ca:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80067ce:	4334      	orrs	r4, r6
 80067d0:	d103      	bne.n	80067da <__ieee754_atan2+0x5a>
 80067d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067d6:	f000 b89b 	b.w	8006910 <atan>
 80067da:	17bc      	asrs	r4, r7, #30
 80067dc:	f004 0402 	and.w	r4, r4, #2
 80067e0:	ea53 0909 	orrs.w	r9, r3, r9
 80067e4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80067e8:	d107      	bne.n	80067fa <__ieee754_atan2+0x7a>
 80067ea:	2c02      	cmp	r4, #2
 80067ec:	d05f      	beq.n	80068ae <__ieee754_atan2+0x12e>
 80067ee:	2c03      	cmp	r4, #3
 80067f0:	d1e5      	bne.n	80067be <__ieee754_atan2+0x3e>
 80067f2:	a143      	add	r1, pc, #268	@ (adr r1, 8006900 <__ieee754_atan2+0x180>)
 80067f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067f8:	e7e1      	b.n	80067be <__ieee754_atan2+0x3e>
 80067fa:	4315      	orrs	r5, r2
 80067fc:	d106      	bne.n	800680c <__ieee754_atan2+0x8c>
 80067fe:	f1be 0f00 	cmp.w	lr, #0
 8006802:	db5f      	blt.n	80068c4 <__ieee754_atan2+0x144>
 8006804:	a136      	add	r1, pc, #216	@ (adr r1, 80068e0 <__ieee754_atan2+0x160>)
 8006806:	e9d1 0100 	ldrd	r0, r1, [r1]
 800680a:	e7d8      	b.n	80067be <__ieee754_atan2+0x3e>
 800680c:	4542      	cmp	r2, r8
 800680e:	d10f      	bne.n	8006830 <__ieee754_atan2+0xb0>
 8006810:	4293      	cmp	r3, r2
 8006812:	f104 34ff 	add.w	r4, r4, #4294967295
 8006816:	d107      	bne.n	8006828 <__ieee754_atan2+0xa8>
 8006818:	2c02      	cmp	r4, #2
 800681a:	d84c      	bhi.n	80068b6 <__ieee754_atan2+0x136>
 800681c:	4b36      	ldr	r3, [pc, #216]	@ (80068f8 <__ieee754_atan2+0x178>)
 800681e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006822:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006826:	e7ca      	b.n	80067be <__ieee754_atan2+0x3e>
 8006828:	2c02      	cmp	r4, #2
 800682a:	d848      	bhi.n	80068be <__ieee754_atan2+0x13e>
 800682c:	4b33      	ldr	r3, [pc, #204]	@ (80068fc <__ieee754_atan2+0x17c>)
 800682e:	e7f6      	b.n	800681e <__ieee754_atan2+0x9e>
 8006830:	4543      	cmp	r3, r8
 8006832:	d0e4      	beq.n	80067fe <__ieee754_atan2+0x7e>
 8006834:	1a9b      	subs	r3, r3, r2
 8006836:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800683a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800683e:	da1e      	bge.n	800687e <__ieee754_atan2+0xfe>
 8006840:	2f00      	cmp	r7, #0
 8006842:	da01      	bge.n	8006848 <__ieee754_atan2+0xc8>
 8006844:	323c      	adds	r2, #60	@ 0x3c
 8006846:	db1e      	blt.n	8006886 <__ieee754_atan2+0x106>
 8006848:	4632      	mov	r2, r6
 800684a:	463b      	mov	r3, r7
 800684c:	f7f9 fff6 	bl	800083c <__aeabi_ddiv>
 8006850:	ec41 0b10 	vmov	d0, r0, r1
 8006854:	f000 f9f4 	bl	8006c40 <fabs>
 8006858:	f000 f85a 	bl	8006910 <atan>
 800685c:	ec51 0b10 	vmov	r0, r1, d0
 8006860:	2c01      	cmp	r4, #1
 8006862:	d013      	beq.n	800688c <__ieee754_atan2+0x10c>
 8006864:	2c02      	cmp	r4, #2
 8006866:	d015      	beq.n	8006894 <__ieee754_atan2+0x114>
 8006868:	2c00      	cmp	r4, #0
 800686a:	d0a8      	beq.n	80067be <__ieee754_atan2+0x3e>
 800686c:	a318      	add	r3, pc, #96	@ (adr r3, 80068d0 <__ieee754_atan2+0x150>)
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	f7f9 fd01 	bl	8000278 <__aeabi_dsub>
 8006876:	a318      	add	r3, pc, #96	@ (adr r3, 80068d8 <__ieee754_atan2+0x158>)
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	e014      	b.n	80068a8 <__ieee754_atan2+0x128>
 800687e:	a118      	add	r1, pc, #96	@ (adr r1, 80068e0 <__ieee754_atan2+0x160>)
 8006880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006884:	e7ec      	b.n	8006860 <__ieee754_atan2+0xe0>
 8006886:	2000      	movs	r0, #0
 8006888:	2100      	movs	r1, #0
 800688a:	e7e9      	b.n	8006860 <__ieee754_atan2+0xe0>
 800688c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006890:	4619      	mov	r1, r3
 8006892:	e794      	b.n	80067be <__ieee754_atan2+0x3e>
 8006894:	a30e      	add	r3, pc, #56	@ (adr r3, 80068d0 <__ieee754_atan2+0x150>)
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f7f9 fced 	bl	8000278 <__aeabi_dsub>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	a10d      	add	r1, pc, #52	@ (adr r1, 80068d8 <__ieee754_atan2+0x158>)
 80068a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068a8:	f7f9 fce6 	bl	8000278 <__aeabi_dsub>
 80068ac:	e787      	b.n	80067be <__ieee754_atan2+0x3e>
 80068ae:	a10a      	add	r1, pc, #40	@ (adr r1, 80068d8 <__ieee754_atan2+0x158>)
 80068b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068b4:	e783      	b.n	80067be <__ieee754_atan2+0x3e>
 80068b6:	a10c      	add	r1, pc, #48	@ (adr r1, 80068e8 <__ieee754_atan2+0x168>)
 80068b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068bc:	e77f      	b.n	80067be <__ieee754_atan2+0x3e>
 80068be:	2000      	movs	r0, #0
 80068c0:	2100      	movs	r1, #0
 80068c2:	e77c      	b.n	80067be <__ieee754_atan2+0x3e>
 80068c4:	a10a      	add	r1, pc, #40	@ (adr r1, 80068f0 <__ieee754_atan2+0x170>)
 80068c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068ca:	e778      	b.n	80067be <__ieee754_atan2+0x3e>
 80068cc:	f3af 8000 	nop.w
 80068d0:	33145c07 	.word	0x33145c07
 80068d4:	3ca1a626 	.word	0x3ca1a626
 80068d8:	54442d18 	.word	0x54442d18
 80068dc:	400921fb 	.word	0x400921fb
 80068e0:	54442d18 	.word	0x54442d18
 80068e4:	3ff921fb 	.word	0x3ff921fb
 80068e8:	54442d18 	.word	0x54442d18
 80068ec:	3fe921fb 	.word	0x3fe921fb
 80068f0:	54442d18 	.word	0x54442d18
 80068f4:	bff921fb 	.word	0xbff921fb
 80068f8:	08006e20 	.word	0x08006e20
 80068fc:	08006e08 	.word	0x08006e08
 8006900:	54442d18 	.word	0x54442d18
 8006904:	c00921fb 	.word	0xc00921fb
 8006908:	7ff00000 	.word	0x7ff00000
 800690c:	00000000 	.word	0x00000000

08006910 <atan>:
 8006910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	ec55 4b10 	vmov	r4, r5, d0
 8006918:	4bbf      	ldr	r3, [pc, #764]	@ (8006c18 <atan+0x308>)
 800691a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800691e:	429e      	cmp	r6, r3
 8006920:	46ab      	mov	fp, r5
 8006922:	d918      	bls.n	8006956 <atan+0x46>
 8006924:	4bbd      	ldr	r3, [pc, #756]	@ (8006c1c <atan+0x30c>)
 8006926:	429e      	cmp	r6, r3
 8006928:	d801      	bhi.n	800692e <atan+0x1e>
 800692a:	d109      	bne.n	8006940 <atan+0x30>
 800692c:	b144      	cbz	r4, 8006940 <atan+0x30>
 800692e:	4622      	mov	r2, r4
 8006930:	462b      	mov	r3, r5
 8006932:	4620      	mov	r0, r4
 8006934:	4629      	mov	r1, r5
 8006936:	f7f9 fca1 	bl	800027c <__adddf3>
 800693a:	4604      	mov	r4, r0
 800693c:	460d      	mov	r5, r1
 800693e:	e006      	b.n	800694e <atan+0x3e>
 8006940:	f1bb 0f00 	cmp.w	fp, #0
 8006944:	f340 812b 	ble.w	8006b9e <atan+0x28e>
 8006948:	a597      	add	r5, pc, #604	@ (adr r5, 8006ba8 <atan+0x298>)
 800694a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800694e:	ec45 4b10 	vmov	d0, r4, r5
 8006952:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006956:	4bb2      	ldr	r3, [pc, #712]	@ (8006c20 <atan+0x310>)
 8006958:	429e      	cmp	r6, r3
 800695a:	d813      	bhi.n	8006984 <atan+0x74>
 800695c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006960:	429e      	cmp	r6, r3
 8006962:	d80c      	bhi.n	800697e <atan+0x6e>
 8006964:	a392      	add	r3, pc, #584	@ (adr r3, 8006bb0 <atan+0x2a0>)
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	4620      	mov	r0, r4
 800696c:	4629      	mov	r1, r5
 800696e:	f7f9 fc85 	bl	800027c <__adddf3>
 8006972:	4bac      	ldr	r3, [pc, #688]	@ (8006c24 <atan+0x314>)
 8006974:	2200      	movs	r2, #0
 8006976:	f7fa f8c7 	bl	8000b08 <__aeabi_dcmpgt>
 800697a:	2800      	cmp	r0, #0
 800697c:	d1e7      	bne.n	800694e <atan+0x3e>
 800697e:	f04f 3aff 	mov.w	sl, #4294967295
 8006982:	e029      	b.n	80069d8 <atan+0xc8>
 8006984:	f000 f95c 	bl	8006c40 <fabs>
 8006988:	4ba7      	ldr	r3, [pc, #668]	@ (8006c28 <atan+0x318>)
 800698a:	429e      	cmp	r6, r3
 800698c:	ec55 4b10 	vmov	r4, r5, d0
 8006990:	f200 80bc 	bhi.w	8006b0c <atan+0x1fc>
 8006994:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006998:	429e      	cmp	r6, r3
 800699a:	f200 809e 	bhi.w	8006ada <atan+0x1ca>
 800699e:	4622      	mov	r2, r4
 80069a0:	462b      	mov	r3, r5
 80069a2:	4620      	mov	r0, r4
 80069a4:	4629      	mov	r1, r5
 80069a6:	f7f9 fc69 	bl	800027c <__adddf3>
 80069aa:	4b9e      	ldr	r3, [pc, #632]	@ (8006c24 <atan+0x314>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	f7f9 fc63 	bl	8000278 <__aeabi_dsub>
 80069b2:	2200      	movs	r2, #0
 80069b4:	4606      	mov	r6, r0
 80069b6:	460f      	mov	r7, r1
 80069b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80069bc:	4620      	mov	r0, r4
 80069be:	4629      	mov	r1, r5
 80069c0:	f7f9 fc5c 	bl	800027c <__adddf3>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	4630      	mov	r0, r6
 80069ca:	4639      	mov	r1, r7
 80069cc:	f7f9 ff36 	bl	800083c <__aeabi_ddiv>
 80069d0:	f04f 0a00 	mov.w	sl, #0
 80069d4:	4604      	mov	r4, r0
 80069d6:	460d      	mov	r5, r1
 80069d8:	4622      	mov	r2, r4
 80069da:	462b      	mov	r3, r5
 80069dc:	4620      	mov	r0, r4
 80069de:	4629      	mov	r1, r5
 80069e0:	f7f9 fe02 	bl	80005e8 <__aeabi_dmul>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4680      	mov	r8, r0
 80069ea:	4689      	mov	r9, r1
 80069ec:	f7f9 fdfc 	bl	80005e8 <__aeabi_dmul>
 80069f0:	a371      	add	r3, pc, #452	@ (adr r3, 8006bb8 <atan+0x2a8>)
 80069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f6:	4606      	mov	r6, r0
 80069f8:	460f      	mov	r7, r1
 80069fa:	f7f9 fdf5 	bl	80005e8 <__aeabi_dmul>
 80069fe:	a370      	add	r3, pc, #448	@ (adr r3, 8006bc0 <atan+0x2b0>)
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	f7f9 fc3a 	bl	800027c <__adddf3>
 8006a08:	4632      	mov	r2, r6
 8006a0a:	463b      	mov	r3, r7
 8006a0c:	f7f9 fdec 	bl	80005e8 <__aeabi_dmul>
 8006a10:	a36d      	add	r3, pc, #436	@ (adr r3, 8006bc8 <atan+0x2b8>)
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	f7f9 fc31 	bl	800027c <__adddf3>
 8006a1a:	4632      	mov	r2, r6
 8006a1c:	463b      	mov	r3, r7
 8006a1e:	f7f9 fde3 	bl	80005e8 <__aeabi_dmul>
 8006a22:	a36b      	add	r3, pc, #428	@ (adr r3, 8006bd0 <atan+0x2c0>)
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	f7f9 fc28 	bl	800027c <__adddf3>
 8006a2c:	4632      	mov	r2, r6
 8006a2e:	463b      	mov	r3, r7
 8006a30:	f7f9 fdda 	bl	80005e8 <__aeabi_dmul>
 8006a34:	a368      	add	r3, pc, #416	@ (adr r3, 8006bd8 <atan+0x2c8>)
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	f7f9 fc1f 	bl	800027c <__adddf3>
 8006a3e:	4632      	mov	r2, r6
 8006a40:	463b      	mov	r3, r7
 8006a42:	f7f9 fdd1 	bl	80005e8 <__aeabi_dmul>
 8006a46:	a366      	add	r3, pc, #408	@ (adr r3, 8006be0 <atan+0x2d0>)
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	f7f9 fc16 	bl	800027c <__adddf3>
 8006a50:	4642      	mov	r2, r8
 8006a52:	464b      	mov	r3, r9
 8006a54:	f7f9 fdc8 	bl	80005e8 <__aeabi_dmul>
 8006a58:	a363      	add	r3, pc, #396	@ (adr r3, 8006be8 <atan+0x2d8>)
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	4680      	mov	r8, r0
 8006a60:	4689      	mov	r9, r1
 8006a62:	4630      	mov	r0, r6
 8006a64:	4639      	mov	r1, r7
 8006a66:	f7f9 fdbf 	bl	80005e8 <__aeabi_dmul>
 8006a6a:	a361      	add	r3, pc, #388	@ (adr r3, 8006bf0 <atan+0x2e0>)
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f7f9 fc02 	bl	8000278 <__aeabi_dsub>
 8006a74:	4632      	mov	r2, r6
 8006a76:	463b      	mov	r3, r7
 8006a78:	f7f9 fdb6 	bl	80005e8 <__aeabi_dmul>
 8006a7c:	a35e      	add	r3, pc, #376	@ (adr r3, 8006bf8 <atan+0x2e8>)
 8006a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a82:	f7f9 fbf9 	bl	8000278 <__aeabi_dsub>
 8006a86:	4632      	mov	r2, r6
 8006a88:	463b      	mov	r3, r7
 8006a8a:	f7f9 fdad 	bl	80005e8 <__aeabi_dmul>
 8006a8e:	a35c      	add	r3, pc, #368	@ (adr r3, 8006c00 <atan+0x2f0>)
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	f7f9 fbf0 	bl	8000278 <__aeabi_dsub>
 8006a98:	4632      	mov	r2, r6
 8006a9a:	463b      	mov	r3, r7
 8006a9c:	f7f9 fda4 	bl	80005e8 <__aeabi_dmul>
 8006aa0:	a359      	add	r3, pc, #356	@ (adr r3, 8006c08 <atan+0x2f8>)
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	f7f9 fbe7 	bl	8000278 <__aeabi_dsub>
 8006aaa:	4632      	mov	r2, r6
 8006aac:	463b      	mov	r3, r7
 8006aae:	f7f9 fd9b 	bl	80005e8 <__aeabi_dmul>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4640      	mov	r0, r8
 8006ab8:	4649      	mov	r1, r9
 8006aba:	f7f9 fbdf 	bl	800027c <__adddf3>
 8006abe:	4622      	mov	r2, r4
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	f7f9 fd91 	bl	80005e8 <__aeabi_dmul>
 8006ac6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	d148      	bne.n	8006b62 <atan+0x252>
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	f7f9 fbd0 	bl	8000278 <__aeabi_dsub>
 8006ad8:	e72f      	b.n	800693a <atan+0x2a>
 8006ada:	4b52      	ldr	r3, [pc, #328]	@ (8006c24 <atan+0x314>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	4620      	mov	r0, r4
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	f7f9 fbc9 	bl	8000278 <__aeabi_dsub>
 8006ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8006c24 <atan+0x314>)
 8006ae8:	4606      	mov	r6, r0
 8006aea:	460f      	mov	r7, r1
 8006aec:	2200      	movs	r2, #0
 8006aee:	4620      	mov	r0, r4
 8006af0:	4629      	mov	r1, r5
 8006af2:	f7f9 fbc3 	bl	800027c <__adddf3>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4630      	mov	r0, r6
 8006afc:	4639      	mov	r1, r7
 8006afe:	f7f9 fe9d 	bl	800083c <__aeabi_ddiv>
 8006b02:	f04f 0a01 	mov.w	sl, #1
 8006b06:	4604      	mov	r4, r0
 8006b08:	460d      	mov	r5, r1
 8006b0a:	e765      	b.n	80069d8 <atan+0xc8>
 8006b0c:	4b47      	ldr	r3, [pc, #284]	@ (8006c2c <atan+0x31c>)
 8006b0e:	429e      	cmp	r6, r3
 8006b10:	d21c      	bcs.n	8006b4c <atan+0x23c>
 8006b12:	4b47      	ldr	r3, [pc, #284]	@ (8006c30 <atan+0x320>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	4620      	mov	r0, r4
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f7f9 fbad 	bl	8000278 <__aeabi_dsub>
 8006b1e:	4b44      	ldr	r3, [pc, #272]	@ (8006c30 <atan+0x320>)
 8006b20:	4606      	mov	r6, r0
 8006b22:	460f      	mov	r7, r1
 8006b24:	2200      	movs	r2, #0
 8006b26:	4620      	mov	r0, r4
 8006b28:	4629      	mov	r1, r5
 8006b2a:	f7f9 fd5d 	bl	80005e8 <__aeabi_dmul>
 8006b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8006c24 <atan+0x314>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	f7f9 fba3 	bl	800027c <__adddf3>
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	4639      	mov	r1, r7
 8006b3e:	f7f9 fe7d 	bl	800083c <__aeabi_ddiv>
 8006b42:	f04f 0a02 	mov.w	sl, #2
 8006b46:	4604      	mov	r4, r0
 8006b48:	460d      	mov	r5, r1
 8006b4a:	e745      	b.n	80069d8 <atan+0xc8>
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	462b      	mov	r3, r5
 8006b50:	4938      	ldr	r1, [pc, #224]	@ (8006c34 <atan+0x324>)
 8006b52:	2000      	movs	r0, #0
 8006b54:	f7f9 fe72 	bl	800083c <__aeabi_ddiv>
 8006b58:	f04f 0a03 	mov.w	sl, #3
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	460d      	mov	r5, r1
 8006b60:	e73a      	b.n	80069d8 <atan+0xc8>
 8006b62:	4b35      	ldr	r3, [pc, #212]	@ (8006c38 <atan+0x328>)
 8006b64:	4e35      	ldr	r6, [pc, #212]	@ (8006c3c <atan+0x32c>)
 8006b66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	f7f9 fb83 	bl	8000278 <__aeabi_dsub>
 8006b72:	4622      	mov	r2, r4
 8006b74:	462b      	mov	r3, r5
 8006b76:	f7f9 fb7f 	bl	8000278 <__aeabi_dsub>
 8006b7a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006b86:	f7f9 fb77 	bl	8000278 <__aeabi_dsub>
 8006b8a:	f1bb 0f00 	cmp.w	fp, #0
 8006b8e:	4604      	mov	r4, r0
 8006b90:	460d      	mov	r5, r1
 8006b92:	f6bf aedc 	bge.w	800694e <atan+0x3e>
 8006b96:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006b9a:	461d      	mov	r5, r3
 8006b9c:	e6d7      	b.n	800694e <atan+0x3e>
 8006b9e:	a51c      	add	r5, pc, #112	@ (adr r5, 8006c10 <atan+0x300>)
 8006ba0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006ba4:	e6d3      	b.n	800694e <atan+0x3e>
 8006ba6:	bf00      	nop
 8006ba8:	54442d18 	.word	0x54442d18
 8006bac:	3ff921fb 	.word	0x3ff921fb
 8006bb0:	8800759c 	.word	0x8800759c
 8006bb4:	7e37e43c 	.word	0x7e37e43c
 8006bb8:	e322da11 	.word	0xe322da11
 8006bbc:	3f90ad3a 	.word	0x3f90ad3a
 8006bc0:	24760deb 	.word	0x24760deb
 8006bc4:	3fa97b4b 	.word	0x3fa97b4b
 8006bc8:	a0d03d51 	.word	0xa0d03d51
 8006bcc:	3fb10d66 	.word	0x3fb10d66
 8006bd0:	c54c206e 	.word	0xc54c206e
 8006bd4:	3fb745cd 	.word	0x3fb745cd
 8006bd8:	920083ff 	.word	0x920083ff
 8006bdc:	3fc24924 	.word	0x3fc24924
 8006be0:	5555550d 	.word	0x5555550d
 8006be4:	3fd55555 	.word	0x3fd55555
 8006be8:	2c6a6c2f 	.word	0x2c6a6c2f
 8006bec:	bfa2b444 	.word	0xbfa2b444
 8006bf0:	52defd9a 	.word	0x52defd9a
 8006bf4:	3fadde2d 	.word	0x3fadde2d
 8006bf8:	af749a6d 	.word	0xaf749a6d
 8006bfc:	3fb3b0f2 	.word	0x3fb3b0f2
 8006c00:	fe231671 	.word	0xfe231671
 8006c04:	3fbc71c6 	.word	0x3fbc71c6
 8006c08:	9998ebc4 	.word	0x9998ebc4
 8006c0c:	3fc99999 	.word	0x3fc99999
 8006c10:	54442d18 	.word	0x54442d18
 8006c14:	bff921fb 	.word	0xbff921fb
 8006c18:	440fffff 	.word	0x440fffff
 8006c1c:	7ff00000 	.word	0x7ff00000
 8006c20:	3fdbffff 	.word	0x3fdbffff
 8006c24:	3ff00000 	.word	0x3ff00000
 8006c28:	3ff2ffff 	.word	0x3ff2ffff
 8006c2c:	40038000 	.word	0x40038000
 8006c30:	3ff80000 	.word	0x3ff80000
 8006c34:	bff00000 	.word	0xbff00000
 8006c38:	08006e38 	.word	0x08006e38
 8006c3c:	08006e58 	.word	0x08006e58

08006c40 <fabs>:
 8006c40:	ec51 0b10 	vmov	r0, r1, d0
 8006c44:	4602      	mov	r2, r0
 8006c46:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006c4a:	ec43 2b10 	vmov	d0, r2, r3
 8006c4e:	4770      	bx	lr

08006c50 <_init>:
 8006c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c52:	bf00      	nop
 8006c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c56:	bc08      	pop	{r3}
 8006c58:	469e      	mov	lr, r3
 8006c5a:	4770      	bx	lr

08006c5c <_fini>:
 8006c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5e:	bf00      	nop
 8006c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c62:	bc08      	pop	{r3}
 8006c64:	469e      	mov	lr, r3
 8006c66:	4770      	bx	lr
