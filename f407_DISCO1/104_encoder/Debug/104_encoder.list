
104_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008808  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08008990  08008990  00009990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a38  08008a38  0000a068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008a38  08008a38  00009a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a40  08008a40  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a40  08008a40  00009a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a44  08008a44  00009a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008a48  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a068  2**0
                  CONTENTS
 10 .bss          00000384  20000068  20000068  0000a068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ec  200003ec  0000a068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011356  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002551  00000000  00000000  0001b3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001080  00000000  00000000  0001d940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d01  00000000  00000000  0001e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002295b  00000000  00000000  0001f6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001345e  00000000  00000000  0004201c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d00f9  00000000  00000000  0005547a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00125573  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f9c  00000000  00000000  001255b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0012a554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008978 	.word	0x08008978

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08008978 	.word	0x08008978

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b988 	b.w	8000e68 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	468e      	mov	lr, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	4688      	mov	r8, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14a      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d962      	bls.n	8000c4c <__udivmoddi4+0xdc>
 8000b86:	fab2 f682 	clz	r6, r2
 8000b8a:	b14e      	cbz	r6, 8000ba0 <__udivmoddi4+0x30>
 8000b8c:	f1c6 0320 	rsb	r3, r6, #32
 8000b90:	fa01 f806 	lsl.w	r8, r1, r6
 8000b94:	fa20 f303 	lsr.w	r3, r0, r3
 8000b98:	40b7      	lsls	r7, r6
 8000b9a:	ea43 0808 	orr.w	r8, r3, r8
 8000b9e:	40b4      	lsls	r4, r6
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f fc87 	uxth.w	ip, r7
 8000ba8:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bac:	0c23      	lsrs	r3, r4, #16
 8000bae:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb6:	fb01 f20c 	mul.w	r2, r1, ip
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d909      	bls.n	8000bd2 <__udivmoddi4+0x62>
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bc4:	f080 80ea 	bcs.w	8000d9c <__udivmoddi4+0x22c>
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	f240 80e7 	bls.w	8000d9c <__udivmoddi4+0x22c>
 8000bce:	3902      	subs	r1, #2
 8000bd0:	443b      	add	r3, r7
 8000bd2:	1a9a      	subs	r2, r3, r2
 8000bd4:	b2a3      	uxth	r3, r4
 8000bd6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bda:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000be2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be6:	459c      	cmp	ip, r3
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x8e>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf0:	f080 80d6 	bcs.w	8000da0 <__udivmoddi4+0x230>
 8000bf4:	459c      	cmp	ip, r3
 8000bf6:	f240 80d3 	bls.w	8000da0 <__udivmoddi4+0x230>
 8000bfa:	443b      	add	r3, r7
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c02:	eba3 030c 	sub.w	r3, r3, ip
 8000c06:	2100      	movs	r1, #0
 8000c08:	b11d      	cbz	r5, 8000c12 <__udivmoddi4+0xa2>
 8000c0a:	40f3      	lsrs	r3, r6
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d905      	bls.n	8000c26 <__udivmoddi4+0xb6>
 8000c1a:	b10d      	cbz	r5, 8000c20 <__udivmoddi4+0xb0>
 8000c1c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c20:	2100      	movs	r1, #0
 8000c22:	4608      	mov	r0, r1
 8000c24:	e7f5      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000c26:	fab3 f183 	clz	r1, r3
 8000c2a:	2900      	cmp	r1, #0
 8000c2c:	d146      	bne.n	8000cbc <__udivmoddi4+0x14c>
 8000c2e:	4573      	cmp	r3, lr
 8000c30:	d302      	bcc.n	8000c38 <__udivmoddi4+0xc8>
 8000c32:	4282      	cmp	r2, r0
 8000c34:	f200 8105 	bhi.w	8000e42 <__udivmoddi4+0x2d2>
 8000c38:	1a84      	subs	r4, r0, r2
 8000c3a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c3e:	2001      	movs	r0, #1
 8000c40:	4690      	mov	r8, r2
 8000c42:	2d00      	cmp	r5, #0
 8000c44:	d0e5      	beq.n	8000c12 <__udivmoddi4+0xa2>
 8000c46:	e9c5 4800 	strd	r4, r8, [r5]
 8000c4a:	e7e2      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	f000 8090 	beq.w	8000d72 <__udivmoddi4+0x202>
 8000c52:	fab2 f682 	clz	r6, r2
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f040 80a4 	bne.w	8000da4 <__udivmoddi4+0x234>
 8000c5c:	1a8a      	subs	r2, r1, r2
 8000c5e:	0c03      	lsrs	r3, r0, #16
 8000c60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c64:	b280      	uxth	r0, r0
 8000c66:	b2bc      	uxth	r4, r7
 8000c68:	2101      	movs	r1, #1
 8000c6a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c6e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c76:	fb04 f20c 	mul.w	r2, r4, ip
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x11e>
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c84:	d202      	bcs.n	8000c8c <__udivmoddi4+0x11c>
 8000c86:	429a      	cmp	r2, r3
 8000c88:	f200 80e0 	bhi.w	8000e4c <__udivmoddi4+0x2dc>
 8000c8c:	46c4      	mov	ip, r8
 8000c8e:	1a9b      	subs	r3, r3, r2
 8000c90:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c94:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c98:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c9c:	fb02 f404 	mul.w	r4, r2, r4
 8000ca0:	429c      	cmp	r4, r3
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0x144>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f102 30ff 	add.w	r0, r2, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x142>
 8000cac:	429c      	cmp	r4, r3
 8000cae:	f200 80ca 	bhi.w	8000e46 <__udivmoddi4+0x2d6>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	1b1b      	subs	r3, r3, r4
 8000cb6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cba:	e7a5      	b.n	8000c08 <__udivmoddi4+0x98>
 8000cbc:	f1c1 0620 	rsb	r6, r1, #32
 8000cc0:	408b      	lsls	r3, r1
 8000cc2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	fa0e f401 	lsl.w	r4, lr, r1
 8000ccc:	fa20 f306 	lsr.w	r3, r0, r6
 8000cd0:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cd4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cd8:	4323      	orrs	r3, r4
 8000cda:	fa00 f801 	lsl.w	r8, r0, r1
 8000cde:	fa1f fc87 	uxth.w	ip, r7
 8000ce2:	fbbe f0f9 	udiv	r0, lr, r9
 8000ce6:	0c1c      	lsrs	r4, r3, #16
 8000ce8:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cf0:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfa:	d909      	bls.n	8000d10 <__udivmoddi4+0x1a0>
 8000cfc:	193c      	adds	r4, r7, r4
 8000cfe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d02:	f080 809c 	bcs.w	8000e3e <__udivmoddi4+0x2ce>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	f240 8099 	bls.w	8000e3e <__udivmoddi4+0x2ce>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	443c      	add	r4, r7
 8000d10:	eba4 040e 	sub.w	r4, r4, lr
 8000d14:	fa1f fe83 	uxth.w	lr, r3
 8000d18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d20:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d24:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d28:	45a4      	cmp	ip, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x1ce>
 8000d2c:	193c      	adds	r4, r7, r4
 8000d2e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d32:	f080 8082 	bcs.w	8000e3a <__udivmoddi4+0x2ca>
 8000d36:	45a4      	cmp	ip, r4
 8000d38:	d97f      	bls.n	8000e3a <__udivmoddi4+0x2ca>
 8000d3a:	3b02      	subs	r3, #2
 8000d3c:	443c      	add	r4, r7
 8000d3e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d42:	eba4 040c 	sub.w	r4, r4, ip
 8000d46:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d4a:	4564      	cmp	r4, ip
 8000d4c:	4673      	mov	r3, lr
 8000d4e:	46e1      	mov	r9, ip
 8000d50:	d362      	bcc.n	8000e18 <__udivmoddi4+0x2a8>
 8000d52:	d05f      	beq.n	8000e14 <__udivmoddi4+0x2a4>
 8000d54:	b15d      	cbz	r5, 8000d6e <__udivmoddi4+0x1fe>
 8000d56:	ebb8 0203 	subs.w	r2, r8, r3
 8000d5a:	eb64 0409 	sbc.w	r4, r4, r9
 8000d5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d62:	fa22 f301 	lsr.w	r3, r2, r1
 8000d66:	431e      	orrs	r6, r3
 8000d68:	40cc      	lsrs	r4, r1
 8000d6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000d6e:	2100      	movs	r1, #0
 8000d70:	e74f      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000d72:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d76:	0c01      	lsrs	r1, r0, #16
 8000d78:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d82:	463b      	mov	r3, r7
 8000d84:	4638      	mov	r0, r7
 8000d86:	463c      	mov	r4, r7
 8000d88:	46b8      	mov	r8, r7
 8000d8a:	46be      	mov	lr, r7
 8000d8c:	2620      	movs	r6, #32
 8000d8e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d92:	eba2 0208 	sub.w	r2, r2, r8
 8000d96:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d9a:	e766      	b.n	8000c6a <__udivmoddi4+0xfa>
 8000d9c:	4601      	mov	r1, r0
 8000d9e:	e718      	b.n	8000bd2 <__udivmoddi4+0x62>
 8000da0:	4610      	mov	r0, r2
 8000da2:	e72c      	b.n	8000bfe <__udivmoddi4+0x8e>
 8000da4:	f1c6 0220 	rsb	r2, r6, #32
 8000da8:	fa2e f302 	lsr.w	r3, lr, r2
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	40b1      	lsls	r1, r6
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	430a      	orrs	r2, r1
 8000dba:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dbe:	b2bc      	uxth	r4, r7
 8000dc0:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dc4:	0c11      	lsrs	r1, r2, #16
 8000dc6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dca:	fb08 f904 	mul.w	r9, r8, r4
 8000dce:	40b0      	lsls	r0, r6
 8000dd0:	4589      	cmp	r9, r1
 8000dd2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dd6:	b280      	uxth	r0, r0
 8000dd8:	d93e      	bls.n	8000e58 <__udivmoddi4+0x2e8>
 8000dda:	1879      	adds	r1, r7, r1
 8000ddc:	f108 3cff 	add.w	ip, r8, #4294967295
 8000de0:	d201      	bcs.n	8000de6 <__udivmoddi4+0x276>
 8000de2:	4589      	cmp	r9, r1
 8000de4:	d81f      	bhi.n	8000e26 <__udivmoddi4+0x2b6>
 8000de6:	eba1 0109 	sub.w	r1, r1, r9
 8000dea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dee:	fb09 f804 	mul.w	r8, r9, r4
 8000df2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df6:	b292      	uxth	r2, r2
 8000df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dfc:	4542      	cmp	r2, r8
 8000dfe:	d229      	bcs.n	8000e54 <__udivmoddi4+0x2e4>
 8000e00:	18ba      	adds	r2, r7, r2
 8000e02:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e06:	d2c4      	bcs.n	8000d92 <__udivmoddi4+0x222>
 8000e08:	4542      	cmp	r2, r8
 8000e0a:	d2c2      	bcs.n	8000d92 <__udivmoddi4+0x222>
 8000e0c:	f1a9 0102 	sub.w	r1, r9, #2
 8000e10:	443a      	add	r2, r7
 8000e12:	e7be      	b.n	8000d92 <__udivmoddi4+0x222>
 8000e14:	45f0      	cmp	r8, lr
 8000e16:	d29d      	bcs.n	8000d54 <__udivmoddi4+0x1e4>
 8000e18:	ebbe 0302 	subs.w	r3, lr, r2
 8000e1c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e20:	3801      	subs	r0, #1
 8000e22:	46e1      	mov	r9, ip
 8000e24:	e796      	b.n	8000d54 <__udivmoddi4+0x1e4>
 8000e26:	eba7 0909 	sub.w	r9, r7, r9
 8000e2a:	4449      	add	r1, r9
 8000e2c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e30:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e34:	fb09 f804 	mul.w	r8, r9, r4
 8000e38:	e7db      	b.n	8000df2 <__udivmoddi4+0x282>
 8000e3a:	4673      	mov	r3, lr
 8000e3c:	e77f      	b.n	8000d3e <__udivmoddi4+0x1ce>
 8000e3e:	4650      	mov	r0, sl
 8000e40:	e766      	b.n	8000d10 <__udivmoddi4+0x1a0>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e6fd      	b.n	8000c42 <__udivmoddi4+0xd2>
 8000e46:	443b      	add	r3, r7
 8000e48:	3a02      	subs	r2, #2
 8000e4a:	e733      	b.n	8000cb4 <__udivmoddi4+0x144>
 8000e4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	e71c      	b.n	8000c8e <__udivmoddi4+0x11e>
 8000e54:	4649      	mov	r1, r9
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x222>
 8000e58:	eba1 0109 	sub.w	r1, r1, r9
 8000e5c:	46c4      	mov	ip, r8
 8000e5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e62:	fb09 f804 	mul.w	r8, r9, r4
 8000e66:	e7c4      	b.n	8000df2 <__udivmoddi4+0x282>

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <Kalman_Init>:

/**
 * @brief Initializes a Kalman filter instance.
 * @param kf Pointer to the KalmanFilter structure to be initialized.
 */
void Kalman_Init(KalmanFilter *kf) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    kf->angle = 0.0;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
    kf->bias = 0.0;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
    // Initialize the error covariance matrix (P).
    kf->P[0][0] = 1.0;  kf->P[0][1] = 0.0;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
    kf->P[1][0] = 0.0;  kf->P[1][1] = 1.0;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	615a      	str	r2, [r3, #20]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000ea2:	619a      	str	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <Kalman_Update>:
 * @param newAngle New angle measurement from the accelerometer (e.g., in degrees).
 * @param newRate New angular rate measurement from the gyroscope (e.g., in deg/s).
 * @param dt Time step since the last update.
 * @return The updated and filtered angle.
 */
float Kalman_Update(KalmanFilter *kf, float newAngle, float newRate, float dt) {
 8000eb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ebe:	edc7 0a01 	vstr	s1, [r7, #4]
 8000ec2:	ed87 1a00 	vstr	s2, [r7]
    // 1. Prediction Step
    // Update the state estimate using the gyroscope data.
    kf->rate = newRate - kf->bias;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ecc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->angle += dt * kf->rate;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	ed93 7a00 	vldr	s14, [r3]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	edd3 6a02 	vldr	s13, [r3, #8]
 8000ee6:	edd7 7a00 	vldr	s15, [r7]
 8000eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	edc3 7a00 	vstr	s15, [r3]

    // Update the error covariance matrix (P) based on the state transition model.
    // The constants (0.001 and 0.003) represent the process noise Q.
    kf->P[0][0] += dt * (dt * kf->P[1][1] - kf->P[0][1] - kf->P[1][0] + 0.001);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fac7 	bl	8000490 <__aeabi_f2d>
 8000f02:	4604      	mov	r4, r0
 8000f04:	460d      	mov	r5, r1
 8000f06:	6838      	ldr	r0, [r7, #0]
 8000f08:	f7ff fac2 	bl	8000490 <__aeabi_f2d>
 8000f0c:	4680      	mov	r8, r0
 8000f0e:	4689      	mov	r9, r1
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f16:	edd7 7a00 	vldr	s15, [r7]
 8000f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f32:	ee17 0a90 	vmov	r0, s15
 8000f36:	f7ff faab 	bl	8000490 <__aeabi_f2d>
 8000f3a:	a375      	add	r3, pc, #468	@ (adr r3, 8001110 <Kalman_Update+0x260>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f7ff f948 	bl	80001d4 <__adddf3>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4640      	mov	r0, r8
 8000f4a:	4649      	mov	r1, r9
 8000f4c:	f7ff faf8 	bl	8000540 <__aeabi_dmul>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4620      	mov	r0, r4
 8000f56:	4629      	mov	r1, r5
 8000f58:	f7ff f93c 	bl	80001d4 <__adddf3>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fd9c 	bl	8000aa0 <__aeabi_d2f>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	60da      	str	r2, [r3, #12]
    kf->P[0][1] -= dt * kf->P[1][1];
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	edd3 6a06 	vldr	s13, [r3, #24]
 8000f7a:	edd7 7a00 	vldr	s15, [r7]
 8000f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][0] -= dt * kf->P[1][1];
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	edd3 6a06 	vldr	s13, [r3, #24]
 8000f98:	edd7 7a00 	vldr	s15, [r7]
 8000f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->P[1][1] += 0.003;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fa6e 	bl	8000490 <__aeabi_f2d>
 8000fb4:	a358      	add	r3, pc, #352	@ (adr r3, 8001118 <Kalman_Update+0x268>)
 8000fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fba:	f7ff f90b 	bl	80001d4 <__adddf3>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f7ff fd6b 	bl	8000aa0 <__aeabi_d2f>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	619a      	str	r2, [r3, #24]

    // 2. Correction Step
    // Calculate the innovation covariance (S) using the measurement noise R (0.03).
    kf->S = kf->P[0][0] + 0.03;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fa5b 	bl	8000490 <__aeabi_f2d>
 8000fda:	a351      	add	r3, pc, #324	@ (adr r3, 8001120 <Kalman_Update+0x270>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff f8f8 	bl	80001d4 <__adddf3>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f7ff fd58 	bl	8000aa0 <__aeabi_d2f>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	629a      	str	r2, [r3, #40]	@ 0x28
    // Calculate the Kalman gain (K).
    kf->K[0] = kf->P[0][0] / kf->S;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	edd3 6a03 	vldr	s13, [r3, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	edc3 7a07 	vstr	s15, [r3, #28]
    kf->K[1] = kf->P[1][0] / kf->S;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	edd3 6a05 	vldr	s13, [r3, #20]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	edc3 7a08 	vstr	s15, [r3, #32]

    // Calculate the measurement residual (y).
    kf->y = newAngle - kf->angle;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	ed97 7a02 	vldr	s14, [r7, #8]
 800102c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    // Update the state estimate (angle and bias) using the Kalman gain.
    kf->angle += kf->K[0] * kf->y;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	ed93 7a00 	vldr	s14, [r3]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800104c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	edc3 7a00 	vstr	s15, [r3]
    kf->bias += kf->K[1] * kf->y;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	ed93 7a01 	vldr	s14, [r3, #4]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800106c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	edc3 7a01 	vstr	s15, [r3, #4]

    // Update the error covariance matrix after the correction.
    float P00_temp = kf->P[0][0];
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	617b      	str	r3, [r7, #20]
    float P01_temp = kf->P[0][1];
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	613b      	str	r3, [r7, #16]

    kf->P[0][0] -= kf->K[0] * P00_temp;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	ed93 7a03 	vldr	s14, [r3, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	edd3 6a07 	vldr	s13, [r3, #28]
 800108e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->P[0][1] -= kf->K[0] * P01_temp;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	ed93 7a04 	vldr	s14, [r3, #16]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	edd3 6a07 	vldr	s13, [r3, #28]
 80010ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80010b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][0] -= kf->K[1] * P00_temp;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	ed93 7a05 	vldr	s14, [r3, #20]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	edd3 6a08 	vldr	s13, [r3, #32]
 80010ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->P[1][1] -= kf->K[1] * P01_temp;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	ed93 7a06 	vldr	s14, [r3, #24]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	edd3 6a08 	vldr	s13, [r3, #32]
 80010e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	edc3 7a06 	vstr	s15, [r3, #24]

    return kf->angle;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	ee07 3a90 	vmov	s15, r3
}
 8001102:	eeb0 0a67 	vmov.f32	s0, s15
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800110e:	bf00      	nop
 8001110:	d2f1a9fc 	.word	0xd2f1a9fc
 8001114:	3f50624d 	.word	0x3f50624d
 8001118:	bc6a7efa 	.word	0xbc6a7efa
 800111c:	3f689374 	.word	0x3f689374
 8001120:	eb851eb8 	.word	0xeb851eb8
 8001124:	3f9eb851 	.word	0x3f9eb851

08001128 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Redirects printf() to USART2 for debugging
int _write(int file, char *ptr, int len) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	b29a      	uxth	r2, r3
 8001138:	f04f 33ff 	mov.w	r3, #4294967295
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	4804      	ldr	r0, [pc, #16]	@ (8001150 <_write+0x28>)
 8001140:	f005 fbfc 	bl	800693c <HAL_UART_Transmit>
    return len;
 8001144:	687b      	ldr	r3, [r7, #4]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000234 	.word	0x20000234

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115a:	f001 f853 	bl	8002204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115e:	f000 f889 	bl	8001274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001162:	f000 fa69 	bl	8001638 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001166:	f000 f921 	bl	80013ac <MX_I2C1_Init>
  MX_TIM2_Init();
 800116a:	f000 f94d 	bl	8001408 <MX_TIM2_Init>
  MX_TIM3_Init();
 800116e:	f000 f997 	bl	80014a0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001172:	f000 fa37 	bl	80015e4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001176:	f000 f9e1 	bl	800153c <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800117a:	f000 f8e3 	bl	8001344 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800117e:	4828      	ldr	r0, [pc, #160]	@ (8001220 <main+0xcc>)
 8001180:	f004 fe0c 	bl	8005d9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001184:	4827      	ldr	r0, [pc, #156]	@ (8001224 <main+0xd0>)
 8001186:	f004 fe09 	bl	8005d9c <HAL_TIM_Base_Start_IT>
  MPU6050_Init();
 800118a:	f000 fd29 	bl	8001be0 <MPU6050_Init>
  Kalman_Init(&kalman_pitch);
 800118e:	4826      	ldr	r0, [pc, #152]	@ (8001228 <main+0xd4>)
 8001190:	f7ff fe6c 	bl	8000e6c <Kalman_Init>
  Kalman_Init(&kalman_roll);
 8001194:	4825      	ldr	r0, [pc, #148]	@ (800122c <main+0xd8>)
 8001196:	f7ff fe69 	bl	8000e6c <Kalman_Init>
  Kalman_Init(&kalman_yaw);
 800119a:	4825      	ldr	r0, [pc, #148]	@ (8001230 <main+0xdc>)
 800119c:	f7ff fe66 	bl	8000e6c <Kalman_Init>

  HAL_UART_Receive_IT(&huart2, rxData, 1); // ?��?��?��?�� 기반 ?��?�� ?��?��
 80011a0:	2201      	movs	r2, #1
 80011a2:	4924      	ldr	r1, [pc, #144]	@ (8001234 <main+0xe0>)
 80011a4:	4824      	ldr	r0, [pc, #144]	@ (8001238 <main+0xe4>)
 80011a6:	f005 fc54 	bl	8006a52 <HAL_UART_Receive_IT>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);  // 엔코더 인터페이스 시작
 80011aa:	213c      	movs	r1, #60	@ 0x3c
 80011ac:	4823      	ldr	r0, [pc, #140]	@ (800123c <main+0xe8>)
 80011ae:	f004 ff0b 	bl	8005fc8 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(f_imu_read == 1){
 80011b2:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <main+0xec>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d114      	bne.n	80011e4 <main+0x90>
		  MPU6050_ReadAccel(&ax, &ay, &az);
 80011ba:	4a22      	ldr	r2, [pc, #136]	@ (8001244 <main+0xf0>)
 80011bc:	4922      	ldr	r1, [pc, #136]	@ (8001248 <main+0xf4>)
 80011be:	4823      	ldr	r0, [pc, #140]	@ (800124c <main+0xf8>)
 80011c0:	f000 fd3c 	bl	8001c3c <MPU6050_ReadAccel>
		  MPU6050_ReadGyro(&gx, &gy, &gz);
 80011c4:	4a22      	ldr	r2, [pc, #136]	@ (8001250 <main+0xfc>)
 80011c6:	4923      	ldr	r1, [pc, #140]	@ (8001254 <main+0x100>)
 80011c8:	4823      	ldr	r0, [pc, #140]	@ (8001258 <main+0x104>)
 80011ca:	f000 fd66 	bl	8001c9a <MPU6050_ReadGyro>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011d4:	4821      	ldr	r0, [pc, #132]	@ (800125c <main+0x108>)
 80011d6:	f001 fbf9 	bl	80029cc <HAL_GPIO_WritePin>
		  Compute_Orientation_Kalman();
 80011da:	f000 fb51 	bl	8001880 <Compute_Orientation_Kalman>
		  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
		  //printf("Accel X: %d Y: %d Z: %d Gyro: X: %d, Y: %d, Z: %d \r\n", ax, ay, az, gx, gy, gz);
		  //Send_IMU_Data(&ax, &ay, &az, &gx, &gy, &gz);
		  f_imu_read = 0;
 80011de:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <main+0xec>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
	  }
	  if(f_uart_send == 1){
 80011e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <main+0x10c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d1e2      	bne.n	80011b2 <main+0x5e>
		  //printf("Pitch %d Roll %d Yaw %d \r\n", pitch, roll, yaw);
		  Send_IMU_Data(&ax, &ay, &az, &gx, &gy, &gz, &pitch, &roll, &yaw);
 80011ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001264 <main+0x110>)
 80011ee:	9304      	str	r3, [sp, #16]
 80011f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <main+0x114>)
 80011f2:	9303      	str	r3, [sp, #12]
 80011f4:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <main+0x118>)
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <main+0xfc>)
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <main+0x100>)
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <main+0x104>)
 8001202:	4a10      	ldr	r2, [pc, #64]	@ (8001244 <main+0xf0>)
 8001204:	4910      	ldr	r1, [pc, #64]	@ (8001248 <main+0xf4>)
 8001206:	4811      	ldr	r0, [pc, #68]	@ (800124c <main+0xf8>)
 8001208:	f000 fab4 	bl	8001774 <Send_IMU_Data>
		  encoder_count = (int32_t)__HAL_TIM_GET_COUNTER(&htim4);
 800120c:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <main+0xe8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001212:	461a      	mov	r2, r3
 8001214:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <main+0x11c>)
 8001216:	601a      	str	r2, [r3, #0]
		  f_uart_send = 0;
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <main+0x10c>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
	  if(f_imu_read == 1){
 800121e:	e7c8      	b.n	80011b2 <main+0x5e>
 8001220:	2000015c 	.word	0x2000015c
 8001224:	200001a4 	.word	0x200001a4
 8001228:	20000084 	.word	0x20000084
 800122c:	200000b0 	.word	0x200000b0
 8001230:	200000dc 	.word	0x200000dc
 8001234:	20000280 	.word	0x20000280
 8001238:	20000234 	.word	0x20000234
 800123c:	200001ec 	.word	0x200001ec
 8001240:	2000027c 	.word	0x2000027c
 8001244:	20000286 	.word	0x20000286
 8001248:	20000284 	.word	0x20000284
 800124c:	20000282 	.word	0x20000282
 8001250:	2000028c 	.word	0x2000028c
 8001254:	2000028a 	.word	0x2000028a
 8001258:	20000288 	.word	0x20000288
 800125c:	40020c00 	.word	0x40020c00
 8001260:	2000027d 	.word	0x2000027d
 8001264:	20000292 	.word	0x20000292
 8001268:	20000290 	.word	0x20000290
 800126c:	2000028e 	.word	0x2000028e
 8001270:	20000294 	.word	0x20000294

08001274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b094      	sub	sp, #80	@ 0x50
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	2230      	movs	r2, #48	@ 0x30
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f006 fd58 	bl	8007d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	4b27      	ldr	r3, [pc, #156]	@ (800133c <SystemClock_Config+0xc8>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a0:	4a26      	ldr	r2, [pc, #152]	@ (800133c <SystemClock_Config+0xc8>)
 80012a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a8:	4b24      	ldr	r3, [pc, #144]	@ (800133c <SystemClock_Config+0xc8>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <SystemClock_Config+0xcc>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a20      	ldr	r2, [pc, #128]	@ (8001340 <SystemClock_Config+0xcc>)
 80012be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <SystemClock_Config+0xcc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d0:	2302      	movs	r3, #2
 80012d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d4:	2301      	movs	r3, #1
 80012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d8:	2310      	movs	r3, #16
 80012da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012dc:	2302      	movs	r3, #2
 80012de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e0:	2300      	movs	r3, #0
 80012e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012e4:	2310      	movs	r3, #16
 80012e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012e8:	23a8      	movs	r3, #168	@ 0xa8
 80012ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f0:	2304      	movs	r3, #4
 80012f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f4:	f107 0320 	add.w	r3, r7, #32
 80012f8:	4618      	mov	r0, r3
 80012fa:	f004 f8a7 	bl	800544c <HAL_RCC_OscConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001304:	f000 fc14 	bl	8001b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001308:	230f      	movs	r3, #15
 800130a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130c:	2302      	movs	r3, #2
 800130e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001318:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	2102      	movs	r1, #2
 8001324:	4618      	mov	r0, r3
 8001326:	f004 fb09 	bl	800593c <HAL_RCC_ClockConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001330:	f000 fbfe 	bl	8001b30 <Error_Handler>
  }
}
 8001334:	bf00      	nop
 8001336:	3750      	adds	r7, #80	@ 0x50
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40007000 	.word	0x40007000

08001344 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2100      	movs	r1, #0
 800134c:	201c      	movs	r0, #28
 800134e:	f001 f8ca 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001352:	201c      	movs	r0, #28
 8001354:	f001 f8e3 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	201f      	movs	r0, #31
 800135e:	f001 f8c2 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001362:	201f      	movs	r0, #31
 8001364:	f001 f8db 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	2020      	movs	r0, #32
 800136e:	f001 f8ba 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001372:	2020      	movs	r0, #32
 8001374:	f001 f8d3 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	2026      	movs	r0, #38	@ 0x26
 800137e:	f001 f8b2 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001382:	2026      	movs	r0, #38	@ 0x26
 8001384:	f001 f8cb 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	201e      	movs	r0, #30
 800138e:	f001 f8aa 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001392:	201e      	movs	r0, #30
 8001394:	f001 f8c3 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	201d      	movs	r0, #29
 800139e:	f001 f8a2 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013a2:	201d      	movs	r0, #29
 80013a4:	f001 f8bb 	bl	800251e <HAL_NVIC_EnableIRQ>
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013b0:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <MX_I2C1_Init+0x54>)
 80013b2:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <MX_I2C1_Init+0x58>)
 80013b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 80013b6:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <MX_I2C1_Init+0x54>)
 80013b8:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80013bc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <MX_I2C1_Init+0x54>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <MX_I2C1_Init+0x54>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <MX_I2C1_Init+0x54>)
 80013cc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <MX_I2C1_Init+0x54>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013d8:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <MX_I2C1_Init+0x54>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <MX_I2C1_Init+0x54>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <MX_I2C1_Init+0x54>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	@ (8001400 <MX_I2C1_Init+0x54>)
 80013ec:	f001 fb22 	bl	8002a34 <HAL_I2C_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80013f6:	f000 fb9b 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000108 	.word	0x20000108
 8001404:	40005400 	.word	0x40005400

08001408 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	463b      	mov	r3, r7
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001424:	4b1d      	ldr	r3, [pc, #116]	@ (800149c <MX_TIM2_Init+0x94>)
 8001426:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800142a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <MX_TIM2_Init+0x94>)
 800142e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001432:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b19      	ldr	r3, [pc, #100]	@ (800149c <MX_TIM2_Init+0x94>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250-1;
 800143a:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_TIM2_Init+0x94>)
 800143c:	22f9      	movs	r2, #249	@ 0xf9
 800143e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <MX_TIM2_Init+0x94>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <MX_TIM2_Init+0x94>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800144c:	4813      	ldr	r0, [pc, #76]	@ (800149c <MX_TIM2_Init+0x94>)
 800144e:	f004 fc55 	bl	8005cfc <HAL_TIM_Base_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001458:	f000 fb6a 	bl	8001b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001460:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	4619      	mov	r1, r3
 8001468:	480c      	ldr	r0, [pc, #48]	@ (800149c <MX_TIM2_Init+0x94>)
 800146a:	f004 ff2b 	bl	80062c4 <HAL_TIM_ConfigClockSource>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001474:	f000 fb5c 	bl	8001b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001480:	463b      	mov	r3, r7
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_TIM2_Init+0x94>)
 8001486:	f005 f979 	bl	800677c <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001490:	f000 fb4e 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2000015c 	.word	0x2000015c

080014a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	463b      	mov	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001534 <MX_TIM3_Init+0x94>)
 80014be:	4a1e      	ldr	r2, [pc, #120]	@ (8001538 <MX_TIM3_Init+0x98>)
 80014c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <MX_TIM3_Init+0x94>)
 80014c4:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80014c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <MX_TIM3_Init+0x94>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80014d0:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <MX_TIM3_Init+0x94>)
 80014d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <MX_TIM3_Init+0x94>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <MX_TIM3_Init+0x94>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014e4:	4813      	ldr	r0, [pc, #76]	@ (8001534 <MX_TIM3_Init+0x94>)
 80014e6:	f004 fc09 	bl	8005cfc <HAL_TIM_Base_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80014f0:	f000 fb1e 	bl	8001b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	4619      	mov	r1, r3
 8001500:	480c      	ldr	r0, [pc, #48]	@ (8001534 <MX_TIM3_Init+0x94>)
 8001502:	f004 fedf 	bl	80062c4 <HAL_TIM_ConfigClockSource>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800150c:	f000 fb10 	bl	8001b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	@ (8001534 <MX_TIM3_Init+0x94>)
 800151e:	f005 f92d 	bl	800677c <HAL_TIMEx_MasterConfigSynchronization>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001528:	f000 fb02 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200001a4 	.word	0x200001a4
 8001538:	40000400 	.word	0x40000400

0800153c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	2224      	movs	r2, #36	@ 0x24
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f006 fbf4 	bl	8007d38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001558:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <MX_TIM4_Init+0xa0>)
 800155a:	4a21      	ldr	r2, [pc, #132]	@ (80015e0 <MX_TIM4_Init+0xa4>)
 800155c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800155e:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <MX_TIM4_Init+0xa0>)
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <MX_TIM4_Init+0xa0>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800156a:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <MX_TIM4_Init+0xa0>)
 800156c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001570:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <MX_TIM4_Init+0xa0>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <MX_TIM4_Init+0xa0>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800157e:	2301      	movs	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001586:	2301      	movs	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0xf;
 800158e:	230f      	movs	r3, #15
 8001590:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001596:	2301      	movs	r3, #1
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0xf;
 800159e:	230f      	movs	r3, #15
 80015a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	4619      	mov	r1, r3
 80015a8:	480c      	ldr	r0, [pc, #48]	@ (80015dc <MX_TIM4_Init+0xa0>)
 80015aa:	f004 fc67 	bl	8005e7c <HAL_TIM_Encoder_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80015b4:	f000 fabc 	bl	8001b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	@ (80015dc <MX_TIM4_Init+0xa0>)
 80015c6:	f005 f8d9 	bl	800677c <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80015d0:	f000 faae 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	3730      	adds	r7, #48	@ 0x30
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200001ec 	.word	0x200001ec
 80015e0:	40000800 	.word	0x40000800

080015e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e8:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	@ (8001634 <MX_USART2_UART_Init+0x50>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 800161c:	f005 f93e 	bl	800689c <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001626:	f000 fa83 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000234 	.word	0x20000234
 8001634:	40004400 	.word	0x40004400

08001638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b32      	ldr	r3, [pc, #200]	@ (800171c <MX_GPIO_Init+0xe4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a31      	ldr	r2, [pc, #196]	@ (800171c <MX_GPIO_Init+0xe4>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b2f      	ldr	r3, [pc, #188]	@ (800171c <MX_GPIO_Init+0xe4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b2b      	ldr	r3, [pc, #172]	@ (800171c <MX_GPIO_Init+0xe4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a2a      	ldr	r2, [pc, #168]	@ (800171c <MX_GPIO_Init+0xe4>)
 8001674:	f043 0310 	orr.w	r3, r3, #16
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b28      	ldr	r3, [pc, #160]	@ (800171c <MX_GPIO_Init+0xe4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	4b24      	ldr	r3, [pc, #144]	@ (800171c <MX_GPIO_Init+0xe4>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a23      	ldr	r2, [pc, #140]	@ (800171c <MX_GPIO_Init+0xe4>)
 8001690:	f043 0308 	orr.w	r3, r3, #8
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b21      	ldr	r3, [pc, #132]	@ (800171c <MX_GPIO_Init+0xe4>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b1d      	ldr	r3, [pc, #116]	@ (800171c <MX_GPIO_Init+0xe4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a1c      	ldr	r2, [pc, #112]	@ (800171c <MX_GPIO_Init+0xe4>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <MX_GPIO_Init+0xe4>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80016c4:	4816      	ldr	r0, [pc, #88]	@ (8001720 <MX_GPIO_Init+0xe8>)
 80016c6:	f001 f981 	bl	80029cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80016d0:	4814      	ldr	r0, [pc, #80]	@ (8001724 <MX_GPIO_Init+0xec>)
 80016d2:	f001 f97b 	bl	80029cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80016d6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	480c      	ldr	r0, [pc, #48]	@ (8001720 <MX_GPIO_Init+0xe8>)
 80016f0:	f000 ffd0 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80016f4:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	@ (8001724 <MX_GPIO_Init+0xec>)
 800170e:	f000 ffc1 	bl	8002694 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	@ 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40021000 	.word	0x40021000
 8001724:	40020c00 	.word	0x40020c00

08001728 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001738:	d108      	bne.n	800174c <HAL_TIM_PeriodElapsedCallback+0x24>
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800173a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800173e:	4809      	ldr	r0, [pc, #36]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001740:	f001 f95d 	bl	80029fe <HAL_GPIO_TogglePin>
        f_imu_read = 1;
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
    }else if(htim->Instance == TIM3){
    	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
    	f_uart_send = 1;
    }
}
 800174a:	e007      	b.n	800175c <HAL_TIM_PeriodElapsedCallback+0x34>
    }else if(htim->Instance == TIM3){
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a06      	ldr	r2, [pc, #24]	@ (800176c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d102      	bne.n	800175c <HAL_TIM_PeriodElapsedCallback+0x34>
    	f_uart_send = 1;
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40020c00 	.word	0x40020c00
 8001768:	2000027c 	.word	0x2000027c
 800176c:	40000400 	.word	0x40000400
 8001770:	2000027d 	.word	0x2000027d

08001774 <Send_IMU_Data>:



void Send_IMU_Data(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz, int16_t* pitch, int16_t* roll, int16_t* yaw) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	@ 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]

    uint8_t tx_buffer[18];

    // 16비트 ?��?���???????? 바이?�� 배열�???????? �?????????�� (Little Endian)
    tx_buffer[0] = *ax & 0xFF;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	753b      	strb	r3, [r7, #20]
    tx_buffer[1] = (*ax >> 8) & 0xFF;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001792:	121b      	asrs	r3, r3, #8
 8001794:	b21b      	sxth	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	757b      	strb	r3, [r7, #21]
    tx_buffer[2] = *ay & 0xFF;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	75bb      	strb	r3, [r7, #22]
    tx_buffer[3] = (*ay >> 8) & 0xFF;
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017aa:	121b      	asrs	r3, r3, #8
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	75fb      	strb	r3, [r7, #23]
    tx_buffer[4] = *az & 0xFF;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	763b      	strb	r3, [r7, #24]
    tx_buffer[5] = (*az >> 8) & 0xFF;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c2:	121b      	asrs	r3, r3, #8
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	767b      	strb	r3, [r7, #25]
    tx_buffer[6] = *gx & 0xFF;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	76bb      	strb	r3, [r7, #26]
    tx_buffer[7] = (*gx >> 8) & 0xFF;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017da:	121b      	asrs	r3, r3, #8
 80017dc:	b21b      	sxth	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	76fb      	strb	r3, [r7, #27]
    tx_buffer[8] = *gy & 0xFF;
 80017e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	773b      	strb	r3, [r7, #28]
    tx_buffer[9] = (*gy >> 8) & 0xFF;
 80017ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f2:	121b      	asrs	r3, r3, #8
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	777b      	strb	r3, [r7, #29]
    tx_buffer[10] = *gz & 0xFF;
 80017fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	77bb      	strb	r3, [r7, #30]
    tx_buffer[11] = (*gz >> 8) & 0xFF;
 8001804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001806:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180a:	121b      	asrs	r3, r3, #8
 800180c:	b21b      	sxth	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	77fb      	strb	r3, [r7, #31]
    tx_buffer[12] = *pitch & 0xFF;
 8001812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f887 3020 	strb.w	r3, [r7, #32]
    tx_buffer[13] = (*pitch >> 8) & 0xFF;
 800181e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001824:	121b      	asrs	r3, r3, #8
 8001826:	b21b      	sxth	r3, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    tx_buffer[14] = *roll & 0xFF;
 800182e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    tx_buffer[15] = (*roll >> 8) & 0xFF;
 800183a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800183c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001840:	121b      	asrs	r3, r3, #8
 8001842:	b21b      	sxth	r3, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    tx_buffer[16] = *yaw & 0xFF;
 800184a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800184c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    tx_buffer[17] = (*yaw >> 8) & 0xFF;
 8001856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185c:	121b      	asrs	r3, r3, #8
 800185e:	b21b      	sxth	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    // UART ?��?��
    HAL_UART_Transmit(&huart2, tx_buffer, 18, 100);
 8001866:	f107 0114 	add.w	r1, r7, #20
 800186a:	2364      	movs	r3, #100	@ 0x64
 800186c:	2212      	movs	r2, #18
 800186e:	4803      	ldr	r0, [pc, #12]	@ (800187c <Send_IMU_Data+0x108>)
 8001870:	f005 f864 	bl	800693c <HAL_UART_Transmit>
}
 8001874:	bf00      	nop
 8001876:	3728      	adds	r7, #40	@ 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000234 	.word	0x20000234

08001880 <Compute_Orientation_Kalman>:

void Compute_Orientation_Kalman() {
 8001880:	b5b0      	push	{r4, r5, r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
    // �??????��?���????? 기반 pitch, roll 계산
    float acc_pitch = atan2(-ax, sqrt(ay * ay + az * az)) * 57.2958;
 8001886:	4b7e      	ldr	r3, [pc, #504]	@ (8001a80 <Compute_Orientation_Kalman+0x200>)
 8001888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188c:	425b      	negs	r3, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fdec 	bl	800046c <__aeabi_i2d>
 8001894:	4604      	mov	r4, r0
 8001896:	460d      	mov	r5, r1
 8001898:	4b7a      	ldr	r3, [pc, #488]	@ (8001a84 <Compute_Orientation_Kalman+0x204>)
 800189a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189e:	461a      	mov	r2, r3
 80018a0:	4b78      	ldr	r3, [pc, #480]	@ (8001a84 <Compute_Orientation_Kalman+0x204>)
 80018a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a6:	fb03 f202 	mul.w	r2, r3, r2
 80018aa:	4b77      	ldr	r3, [pc, #476]	@ (8001a88 <Compute_Orientation_Kalman+0x208>)
 80018ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b0:	4619      	mov	r1, r3
 80018b2:	4b75      	ldr	r3, [pc, #468]	@ (8001a88 <Compute_Orientation_Kalman+0x208>)
 80018b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4413      	add	r3, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fdd4 	bl	800046c <__aeabi_i2d>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	ec43 2b10 	vmov	d0, r2, r3
 80018cc:	f006 fcea 	bl	80082a4 <sqrt>
 80018d0:	eeb0 7a40 	vmov.f32	s14, s0
 80018d4:	eef0 7a60 	vmov.f32	s15, s1
 80018d8:	eeb0 1a47 	vmov.f32	s2, s14
 80018dc:	eef0 1a67 	vmov.f32	s3, s15
 80018e0:	ec45 4b10 	vmov	d0, r4, r5
 80018e4:	f006 fcdc 	bl	80082a0 <atan2>
 80018e8:	ec51 0b10 	vmov	r0, r1, d0
 80018ec:	a360      	add	r3, pc, #384	@ (adr r3, 8001a70 <Compute_Orientation_Kalman+0x1f0>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fe25 	bl	8000540 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff f8cf 	bl	8000aa0 <__aeabi_d2f>
 8001902:	4603      	mov	r3, r0
 8001904:	61fb      	str	r3, [r7, #28]
    float acc_roll  = atan2(ay, az) * 57.2958;
 8001906:	4b5f      	ldr	r3, [pc, #380]	@ (8001a84 <Compute_Orientation_Kalman+0x204>)
 8001908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fdad 	bl	800046c <__aeabi_i2d>
 8001912:	4604      	mov	r4, r0
 8001914:	460d      	mov	r5, r1
 8001916:	4b5c      	ldr	r3, [pc, #368]	@ (8001a88 <Compute_Orientation_Kalman+0x208>)
 8001918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fda5 	bl	800046c <__aeabi_i2d>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	ec43 2b11 	vmov	d1, r2, r3
 800192a:	ec45 4b10 	vmov	d0, r4, r5
 800192e:	f006 fcb7 	bl	80082a0 <atan2>
 8001932:	ec51 0b10 	vmov	r0, r1, d0
 8001936:	a34e      	add	r3, pc, #312	@ (adr r3, 8001a70 <Compute_Orientation_Kalman+0x1f0>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	f7fe fe00 	bl	8000540 <__aeabi_dmul>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	f7ff f8aa 	bl	8000aa0 <__aeabi_d2f>
 800194c:	4603      	mov	r3, r0
 800194e:	61bb      	str	r3, [r7, #24]

    // ?��?��로스코프 값을 deg/s ?��?���????? �??????��
    float gx_dps = gx / 131.0;
 8001950:	4b4e      	ldr	r3, [pc, #312]	@ (8001a8c <Compute_Orientation_Kalman+0x20c>)
 8001952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fd88 	bl	800046c <__aeabi_i2d>
 800195c:	a346      	add	r3, pc, #280	@ (adr r3, 8001a78 <Compute_Orientation_Kalman+0x1f8>)
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	f7fe ff17 	bl	8000794 <__aeabi_ddiv>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f897 	bl	8000aa0 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	617b      	str	r3, [r7, #20]
    float gy_dps = gy / 131.0;
 8001976:	4b46      	ldr	r3, [pc, #280]	@ (8001a90 <Compute_Orientation_Kalman+0x210>)
 8001978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fd75 	bl	800046c <__aeabi_i2d>
 8001982:	a33d      	add	r3, pc, #244	@ (adr r3, 8001a78 <Compute_Orientation_Kalman+0x1f8>)
 8001984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001988:	f7fe ff04 	bl	8000794 <__aeabi_ddiv>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f7ff f884 	bl	8000aa0 <__aeabi_d2f>
 8001998:	4603      	mov	r3, r0
 800199a:	613b      	str	r3, [r7, #16]
    float gz_dps = gz / 131.0;
 800199c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a94 <Compute_Orientation_Kalman+0x214>)
 800199e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fd62 	bl	800046c <__aeabi_i2d>
 80019a8:	a333      	add	r3, pc, #204	@ (adr r3, 8001a78 <Compute_Orientation_Kalman+0x1f8>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	f7fe fef1 	bl	8000794 <__aeabi_ddiv>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	f7ff f871 	bl	8000aa0 <__aeabi_d2f>
 80019be:	4603      	mov	r3, r0
 80019c0:	60fb      	str	r3, [r7, #12]

    // 칼만 ?��?�� ?��?��
    float pitch_f = Kalman_Update(&kalman_pitch, acc_pitch, gy_dps, dt);
 80019c2:	4b35      	ldr	r3, [pc, #212]	@ (8001a98 <Compute_Orientation_Kalman+0x218>)
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	eeb0 1a67 	vmov.f32	s2, s15
 80019cc:	edd7 0a04 	vldr	s1, [r7, #16]
 80019d0:	ed97 0a07 	vldr	s0, [r7, #28]
 80019d4:	4831      	ldr	r0, [pc, #196]	@ (8001a9c <Compute_Orientation_Kalman+0x21c>)
 80019d6:	f7ff fa6b 	bl	8000eb0 <Kalman_Update>
 80019da:	ed87 0a02 	vstr	s0, [r7, #8]
    float roll_f  = Kalman_Update(&kalman_roll, acc_roll, gx_dps, dt);
 80019de:	4b2e      	ldr	r3, [pc, #184]	@ (8001a98 <Compute_Orientation_Kalman+0x218>)
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	eeb0 1a67 	vmov.f32	s2, s15
 80019e8:	edd7 0a05 	vldr	s1, [r7, #20]
 80019ec:	ed97 0a06 	vldr	s0, [r7, #24]
 80019f0:	482b      	ldr	r0, [pc, #172]	@ (8001aa0 <Compute_Orientation_Kalman+0x220>)
 80019f2:	f7ff fa5d 	bl	8000eb0 <Kalman_Update>
 80019f6:	ed87 0a01 	vstr	s0, [r7, #4]
    float yaw_f   = Kalman_Update(&kalman_yaw, yaw_f, gz_dps, dt);
 80019fa:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <Compute_Orientation_Kalman+0x218>)
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	eeb0 1a67 	vmov.f32	s2, s15
 8001a04:	edd7 0a03 	vldr	s1, [r7, #12]
 8001a08:	ed97 0a00 	vldr	s0, [r7]
 8001a0c:	4825      	ldr	r0, [pc, #148]	@ (8001aa4 <Compute_Orientation_Kalman+0x224>)
 8001a0e:	f7ff fa4f 	bl	8000eb0 <Kalman_Update>
 8001a12:	ed87 0a00 	vstr	s0, [r7]

    // float -> int �??????��
    pitch = (int16_t)(pitch_f * 100);
 8001a16:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a1a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001aa8 <Compute_Orientation_Kalman+0x228>
 8001a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a26:	ee17 3a90 	vmov	r3, s15
 8001a2a:	b21a      	sxth	r2, r3
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001aac <Compute_Orientation_Kalman+0x22c>)
 8001a2e:	801a      	strh	r2, [r3, #0]
    roll  = (int16_t)(roll_f * 100);
 8001a30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a34:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001aa8 <Compute_Orientation_Kalman+0x228>
 8001a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a40:	ee17 3a90 	vmov	r3, s15
 8001a44:	b21a      	sxth	r2, r3
 8001a46:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <Compute_Orientation_Kalman+0x230>)
 8001a48:	801a      	strh	r2, [r3, #0]
    yaw   = (int16_t)(yaw_f * 100);
 8001a4a:	edd7 7a00 	vldr	s15, [r7]
 8001a4e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001aa8 <Compute_Orientation_Kalman+0x228>
 8001a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a5a:	ee17 3a90 	vmov	r3, s15
 8001a5e:	b21a      	sxth	r2, r3
 8001a60:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <Compute_Orientation_Kalman+0x234>)
 8001a62:	801a      	strh	r2, [r3, #0]
}
 8001a64:	bf00      	nop
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a6c:	f3af 8000 	nop.w
 8001a70:	c63f1412 	.word	0xc63f1412
 8001a74:	404ca5dc 	.word	0x404ca5dc
 8001a78:	00000000 	.word	0x00000000
 8001a7c:	40606000 	.word	0x40606000
 8001a80:	20000282 	.word	0x20000282
 8001a84:	20000284 	.word	0x20000284
 8001a88:	20000286 	.word	0x20000286
 8001a8c:	20000288 	.word	0x20000288
 8001a90:	2000028a 	.word	0x2000028a
 8001a94:	2000028c 	.word	0x2000028c
 8001a98:	0800899c 	.word	0x0800899c
 8001a9c:	20000084 	.word	0x20000084
 8001aa0:	200000b0 	.word	0x200000b0
 8001aa4:	200000dc 	.word	0x200000dc
 8001aa8:	42c80000 	.word	0x42c80000
 8001aac:	2000028e 	.word	0x2000028e
 8001ab0:	20000290 	.word	0x20000290
 8001ab4:	20000292 	.word	0x20000292

08001ab8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a16      	ldr	r2, [pc, #88]	@ (8001b20 <HAL_UART_RxCpltCallback+0x68>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d120      	bne.n	8001b0c <HAL_UART_RxCpltCallback+0x54>
        if(rxData[0] == 'a'){
 8001aca:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <HAL_UART_RxCpltCallback+0x6c>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b61      	cmp	r3, #97	@ 0x61
 8001ad0:	d10c      	bne.n	8001aec <HAL_UART_RxCpltCallback+0x34>
        	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ad8:	4813      	ldr	r0, [pc, #76]	@ (8001b28 <HAL_UART_RxCpltCallback+0x70>)
 8001ada:	f000 ff77 	bl	80029cc <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ae4:	4810      	ldr	r0, [pc, #64]	@ (8001b28 <HAL_UART_RxCpltCallback+0x70>)
 8001ae6:	f000 ff71 	bl	80029cc <HAL_GPIO_WritePin>
 8001aea:	e00f      	b.n	8001b0c <HAL_UART_RxCpltCallback+0x54>
        }else if(rxData[0] == 'b'){
 8001aec:	4b0d      	ldr	r3, [pc, #52]	@ (8001b24 <HAL_UART_RxCpltCallback+0x6c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b62      	cmp	r3, #98	@ 0x62
 8001af2:	d10b      	bne.n	8001b0c <HAL_UART_RxCpltCallback+0x54>
        	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001afa:	480b      	ldr	r0, [pc, #44]	@ (8001b28 <HAL_UART_RxCpltCallback+0x70>)
 8001afc:	f000 ff66 	bl	80029cc <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8001b00:	2201      	movs	r2, #1
 8001b02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b06:	4808      	ldr	r0, [pc, #32]	@ (8001b28 <HAL_UART_RxCpltCallback+0x70>)
 8001b08:	f000 ff60 	bl	80029cc <HAL_GPIO_WritePin>
        }
    }
    HAL_UART_Receive_IT(&huart2, rxData, 1); // ?��?�� ?��?�� ?��?��
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4905      	ldr	r1, [pc, #20]	@ (8001b24 <HAL_UART_RxCpltCallback+0x6c>)
 8001b10:	4806      	ldr	r0, [pc, #24]	@ (8001b2c <HAL_UART_RxCpltCallback+0x74>)
 8001b12:	f004 ff9e 	bl	8006a52 <HAL_UART_Receive_IT>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40004400 	.word	0x40004400
 8001b24:	20000280 	.word	0x20000280
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	20000234 	.word	0x20000234

08001b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b34:	b672      	cpsid	i
}
 8001b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <Error_Handler+0x8>

08001b3c <MPU6050_Write>:
	int uga = 0;
	who_am_i =  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, 100);
	return uga;
}

void MPU6050_Write(uint8_t reg, uint8_t data) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af02      	add	r7, sp, #8
 8001b42:	4603      	mov	r3, r0
 8001b44:	460a      	mov	r2, r1
 8001b46:	71fb      	strb	r3, [r7, #7]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg, data};
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	733b      	strb	r3, [r7, #12]
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	737b      	strb	r3, [r7, #13]
    if(HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buffer, 2, 100) != HAL_OK){
 8001b54:	f107 020c 	add.w	r2, r7, #12
 8001b58:	2364      	movs	r3, #100	@ 0x64
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	21d0      	movs	r1, #208	@ 0xd0
 8001b60:	4806      	ldr	r0, [pc, #24]	@ (8001b7c <MPU6050_Write+0x40>)
 8001b62:	f001 f8c1 	bl	8002ce8 <HAL_I2C_Master_Transmit>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d002      	beq.n	8001b72 <MPU6050_Write+0x36>
    	printf("I2C error\n");
 8001b6c:	4804      	ldr	r0, [pc, #16]	@ (8001b80 <MPU6050_Write+0x44>)
 8001b6e:	f006 f803 	bl	8007b78 <puts>
    }
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000108 	.word	0x20000108
 8001b80:	08008990 	.word	0x08008990

08001b84 <MPU6050_Read>:

void MPU6050_Read(uint8_t reg, uint8_t* data, uint8_t length) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
 8001b90:	4613      	mov	r3, r2
 8001b92:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, &reg, 1, 100) != HAL_OK){
 8001b94:	1dfa      	adds	r2, r7, #7
 8001b96:	2364      	movs	r3, #100	@ 0x64
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	21d0      	movs	r1, #208	@ 0xd0
 8001b9e:	480e      	ldr	r0, [pc, #56]	@ (8001bd8 <MPU6050_Read+0x54>)
 8001ba0:	f001 f8a2 	bl	8002ce8 <HAL_I2C_Master_Transmit>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d002      	beq.n	8001bb0 <MPU6050_Read+0x2c>
    	printf("I2C error\n");
 8001baa:	480c      	ldr	r0, [pc, #48]	@ (8001bdc <MPU6050_Read+0x58>)
 8001bac:	f005 ffe4 	bl	8007b78 <puts>
    }
    if(HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, data, length, 100) != HAL_OK){
 8001bb0:	79bb      	ldrb	r3, [r7, #6]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	2264      	movs	r2, #100	@ 0x64
 8001bb6:	9200      	str	r2, [sp, #0]
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	21d0      	movs	r1, #208	@ 0xd0
 8001bbc:	4806      	ldr	r0, [pc, #24]	@ (8001bd8 <MPU6050_Read+0x54>)
 8001bbe:	f001 f991 	bl	8002ee4 <HAL_I2C_Master_Receive>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <MPU6050_Read+0x4a>
    	printf("I2C error\n");
 8001bc8:	4804      	ldr	r0, [pc, #16]	@ (8001bdc <MPU6050_Read+0x58>)
 8001bca:	f005 ffd5 	bl	8007b78 <puts>
    }
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000108 	.word	0x20000108
 8001bdc:	08008990 	.word	0x08008990

08001be0 <MPU6050_Init>:

void MPU6050_Init(void) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
	// MPU6050 software reset
	 MPU6050_Write(PWR_MGMT_1, 0x80);
 8001be4:	2180      	movs	r1, #128	@ 0x80
 8001be6:	206b      	movs	r0, #107	@ 0x6b
 8001be8:	f7ff ffa8 	bl	8001b3c <MPU6050_Write>
	 HAL_Delay(100);
 8001bec:	2064      	movs	r0, #100	@ 0x64
 8001bee:	f000 fb7b 	bl	80022e8 <HAL_Delay>

    // 1️⃣ ?��?�� 모드 ?��?�� (PWR_MGMT_1)
    MPU6050_Write(PWR_MGMT_1, 0x00);
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	206b      	movs	r0, #107	@ 0x6b
 8001bf6:	f7ff ffa1 	bl	8001b3c <MPU6050_Write>
    HAL_Delay(100);
 8001bfa:	2064      	movs	r0, #100	@ 0x64
 8001bfc:	f000 fb74 	bl	80022e8 <HAL_Delay>

    // 2️⃣ �??????????��?�� 범위 ?��?�� (±2g)
    MPU6050_Write(ACCEL_CONFIG, 0x00);  // 00 = ±2g
 8001c00:	2100      	movs	r1, #0
 8001c02:	201c      	movs	r0, #28
 8001c04:	f7ff ff9a 	bl	8001b3c <MPU6050_Write>
    HAL_Delay(10);
 8001c08:	200a      	movs	r0, #10
 8001c0a:	f000 fb6d 	bl	80022e8 <HAL_Delay>

    // 2️⃣ ?��?���???????? 범위 ?��?�� (±250°/s)
    MPU6050_Write(0x1B, 0x00);  // 00 = ±250°/s
 8001c0e:	2100      	movs	r1, #0
 8001c10:	201b      	movs	r0, #27
 8001c12:	f7ff ff93 	bl	8001b3c <MPU6050_Write>
    HAL_Delay(10);
 8001c16:	200a      	movs	r0, #10
 8001c18:	f000 fb66 	bl	80022e8 <HAL_Delay>

    // 3️⃣ ?��?���????????? ?��?�� ?��?�� (SMPLRT_DIV)
    MPU6050_Write(SMPLRT_DIV, 0x07);  // 1kHz / (1 + 7) = 125Hz ?��?���?????????
 8001c1c:	2107      	movs	r1, #7
 8001c1e:	2019      	movs	r0, #25
 8001c20:	f7ff ff8c 	bl	8001b3c <MPU6050_Write>
    HAL_Delay(10);
 8001c24:	200a      	movs	r0, #10
 8001c26:	f000 fb5f 	bl	80022e8 <HAL_Delay>

    // 4️⃣ ???�� ?���????????? ?��?�� ?��?�� (CONFIG)
    MPU6050_Write(CONFIG, 0x03);  // 44Hz ?��?�� ?��?��
 8001c2a:	2103      	movs	r1, #3
 8001c2c:	201a      	movs	r0, #26
 8001c2e:	f7ff ff85 	bl	8001b3c <MPU6050_Write>
    HAL_Delay(10);
 8001c32:	200a      	movs	r0, #10
 8001c34:	f000 fb58 	bl	80022e8 <HAL_Delay>
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <MPU6050_ReadAccel>:

void MPU6050_ReadAccel(int16_t* ax, int16_t* ay, int16_t* az) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];  // �??????????��?�� ?��?��?�� 6바이?�� (X, Y, Z)

    MPU6050_Read(ACCEL_XOUT_H, buffer, 6);
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	2206      	movs	r2, #6
 8001c4e:	4619      	mov	r1, r3
 8001c50:	203b      	movs	r0, #59	@ 0x3b
 8001c52:	f7ff ff97 	bl	8001b84 <MPU6050_Read>

    *ax = (int16_t)(buffer[0] << 8 | buffer[1]);  // X�?????????
 8001c56:	7c3b      	ldrb	r3, [r7, #16]
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	7c7b      	ldrb	r3, [r7, #17]
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b21a      	sxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	801a      	strh	r2, [r3, #0]
    *ay = (int16_t)(buffer[2] << 8 | buffer[3]);  // Y�?????????
 8001c6a:	7cbb      	ldrb	r3, [r7, #18]
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	b21a      	sxth	r2, r3
 8001c72:	7cfb      	ldrb	r3, [r7, #19]
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	4313      	orrs	r3, r2
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	801a      	strh	r2, [r3, #0]
    *az = (int16_t)(buffer[4] << 8 | buffer[5]);  // Z�?????????
 8001c7e:	7d3b      	ldrb	r3, [r7, #20]
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	b21a      	sxth	r2, r3
 8001c86:	7d7b      	ldrb	r3, [r7, #21]
 8001c88:	b21b      	sxth	r3, r3
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	801a      	strh	r2, [r3, #0]
}
 8001c92:	bf00      	nop
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <MPU6050_ReadGyro>:

void MPU6050_ReadGyro(int16_t* gx, int16_t* gy, int16_t* gz) {
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];  // ?��?���???????? ?��?��?�� 6바이?�� (X, Y, Z)

    MPU6050_Read(GYRO_XOUT_H, buffer, 6);
 8001ca6:	f107 0310 	add.w	r3, r7, #16
 8001caa:	2206      	movs	r2, #6
 8001cac:	4619      	mov	r1, r3
 8001cae:	2043      	movs	r0, #67	@ 0x43
 8001cb0:	f7ff ff68 	bl	8001b84 <MPU6050_Read>

    *gx = (int16_t)(buffer[0] << 8 | buffer[1]);  // X�????????
 8001cb4:	7c3b      	ldrb	r3, [r7, #16]
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	b21a      	sxth	r2, r3
 8001cbc:	7c7b      	ldrb	r3, [r7, #17]
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	801a      	strh	r2, [r3, #0]
    *gy = (int16_t)(buffer[2] << 8 | buffer[3]);  // Y�????????
 8001cc8:	7cbb      	ldrb	r3, [r7, #18]
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	b21a      	sxth	r2, r3
 8001cd0:	7cfb      	ldrb	r3, [r7, #19]
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	b21a      	sxth	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	801a      	strh	r2, [r3, #0]
    *gz = (int16_t)(buffer[4] << 8 | buffer[5]);  // Z�????????
 8001cdc:	7d3b      	ldrb	r3, [r7, #20]
 8001cde:	b21b      	sxth	r3, r3
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	b21a      	sxth	r2, r3
 8001ce4:	7d7b      	ldrb	r3, [r7, #21]
 8001ce6:	b21b      	sxth	r3, r3
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	b21a      	sxth	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	801a      	strh	r2, [r3, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <HAL_MspInit+0x4c>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	4a0f      	ldr	r2, [pc, #60]	@ (8001d44 <HAL_MspInit+0x4c>)
 8001d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <HAL_MspInit+0x4c>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <HAL_MspInit+0x4c>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	4a08      	ldr	r2, [pc, #32]	@ (8001d44 <HAL_MspInit+0x4c>)
 8001d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_MspInit+0x4c>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800

08001d48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	@ 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a19      	ldr	r2, [pc, #100]	@ (8001dcc <HAL_I2C_MspInit+0x84>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d12c      	bne.n	8001dc4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <HAL_I2C_MspInit+0x88>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a17      	ldr	r2, [pc, #92]	@ (8001dd0 <HAL_I2C_MspInit+0x88>)
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <HAL_I2C_MspInit+0x88>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001d86:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d8c:	2312      	movs	r3, #18
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d98:	2304      	movs	r3, #4
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	480c      	ldr	r0, [pc, #48]	@ (8001dd4 <HAL_I2C_MspInit+0x8c>)
 8001da4:	f000 fc76 	bl	8002694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <HAL_I2C_MspInit+0x88>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	4a07      	ldr	r2, [pc, #28]	@ (8001dd0 <HAL_I2C_MspInit+0x88>)
 8001db2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001db6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db8:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <HAL_I2C_MspInit+0x88>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001dc4:	bf00      	nop
 8001dc6:	3728      	adds	r7, #40	@ 0x28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40005400 	.word	0x40005400
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020400 	.word	0x40020400

08001dd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de8:	d10e      	bne.n	8001e08 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <HAL_TIM_Base_MspInit+0x64>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	4a12      	ldr	r2, [pc, #72]	@ (8001e3c <HAL_TIM_Base_MspInit+0x64>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dfa:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <HAL_TIM_Base_MspInit+0x64>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e06:	e012      	b.n	8001e2e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e40 <HAL_TIM_Base_MspInit+0x68>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d10d      	bne.n	8001e2e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <HAL_TIM_Base_MspInit+0x64>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	4a08      	ldr	r2, [pc, #32]	@ (8001e3c <HAL_TIM_Base_MspInit+0x64>)
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_TIM_Base_MspInit+0x64>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40000400 	.word	0x40000400

08001e44 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	@ 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a28      	ldr	r2, [pc, #160]	@ (8001f04 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d14a      	bne.n	8001efc <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b27      	ldr	r3, [pc, #156]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	4a26      	ldr	r2, [pc, #152]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e76:	4b24      	ldr	r3, [pc, #144]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b20      	ldr	r3, [pc, #128]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001e8c:	f043 0308 	orr.w	r3, r3, #8
 8001e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e92:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	4b19      	ldr	r3, [pc, #100]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4a18      	ldr	r2, [pc, #96]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4b16      	ldr	r3, [pc, #88]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001eba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	480d      	ldr	r0, [pc, #52]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001ed8:	f000 fbdc 	bl	8002694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001edc:	2340      	movs	r3, #64	@ 0x40
 8001ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001eec:	2302      	movs	r3, #2
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4806      	ldr	r0, [pc, #24]	@ (8001f10 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001ef8:	f000 fbcc 	bl	8002694 <HAL_GPIO_Init>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001efc:	bf00      	nop
 8001efe:	3728      	adds	r7, #40	@ 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40000800 	.word	0x40000800
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020c00 	.word	0x40020c00
 8001f10:	40020400 	.word	0x40020400

08001f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	@ 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a19      	ldr	r2, [pc, #100]	@ (8001f98 <HAL_UART_MspInit+0x84>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d12b      	bne.n	8001f8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b18      	ldr	r3, [pc, #96]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	4a17      	ldr	r2, [pc, #92]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f46:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	4a10      	ldr	r2, [pc, #64]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f62:	4b0e      	ldr	r3, [pc, #56]	@ (8001f9c <HAL_UART_MspInit+0x88>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f6e:	230c      	movs	r3, #12
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f7e:	2307      	movs	r3, #7
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4805      	ldr	r0, [pc, #20]	@ (8001fa0 <HAL_UART_MspInit+0x8c>)
 8001f8a:	f000 fb83 	bl	8002694 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f8e:	bf00      	nop
 8001f90:	3728      	adds	r7, #40	@ 0x28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40004400 	.word	0x40004400
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <NMI_Handler+0x4>

08001fac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <HardFault_Handler+0x4>

08001fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <MemManage_Handler+0x4>

08001fbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ffa:	f000 f955 	bl	80022a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002008:	4802      	ldr	r0, [pc, #8]	@ (8002014 <TIM2_IRQHandler+0x10>)
 800200a:	f004 f86b 	bl	80060e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	2000015c 	.word	0x2000015c

08002018 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800201c:	4802      	ldr	r0, [pc, #8]	@ (8002028 <TIM3_IRQHandler+0x10>)
 800201e:	f004 f861 	bl	80060e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200001a4 	.word	0x200001a4

0800202c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002030:	4802      	ldr	r0, [pc, #8]	@ (800203c <TIM4_IRQHandler+0x10>)
 8002032:	f004 f857 	bl	80060e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200001ec 	.word	0x200001ec

08002040 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002044:	4802      	ldr	r0, [pc, #8]	@ (8002050 <I2C1_EV_IRQHandler+0x10>)
 8002046:	f001 f97f 	bl	8003348 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000108 	.word	0x20000108

08002054 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002058:	4802      	ldr	r0, [pc, #8]	@ (8002064 <I2C1_ER_IRQHandler+0x10>)
 800205a:	f001 fae6 	bl	800362a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000108 	.word	0x20000108

08002068 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800206c:	4802      	ldr	r0, [pc, #8]	@ (8002078 <USART2_IRQHandler+0x10>)
 800206e:	f004 fd15 	bl	8006a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000234 	.word	0x20000234

0800207c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	e00a      	b.n	80020a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800208e:	f3af 8000 	nop.w
 8002092:	4601      	mov	r1, r0
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	60ba      	str	r2, [r7, #8]
 800209a:	b2ca      	uxtb	r2, r1
 800209c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	3301      	adds	r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	dbf0      	blt.n	800208e <_read+0x12>
  }

  return len;
 80020ac:	687b      	ldr	r3, [r7, #4]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020de:	605a      	str	r2, [r3, #4]
  return 0;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <_isatty>:

int _isatty(int file)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020f6:	2301      	movs	r3, #1
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002128:	4a14      	ldr	r2, [pc, #80]	@ (800217c <_sbrk+0x5c>)
 800212a:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <_sbrk+0x60>)
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002134:	4b13      	ldr	r3, [pc, #76]	@ (8002184 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800213c:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <_sbrk+0x64>)
 800213e:	4a12      	ldr	r2, [pc, #72]	@ (8002188 <_sbrk+0x68>)
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	429a      	cmp	r2, r3
 800214e:	d207      	bcs.n	8002160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002150:	f005 fe40 	bl	8007dd4 <__errno>
 8002154:	4603      	mov	r3, r0
 8002156:	220c      	movs	r2, #12
 8002158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	e009      	b.n	8002174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002160:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002166:	4b07      	ldr	r3, [pc, #28]	@ (8002184 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <_sbrk+0x64>)
 8002170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20020000 	.word	0x20020000
 8002180:	00000400 	.word	0x00000400
 8002184:	20000298 	.word	0x20000298
 8002188:	200003f0 	.word	0x200003f0

0800218c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <SystemInit+0x20>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002196:	4a05      	ldr	r2, [pc, #20]	@ (80021ac <SystemInit+0x20>)
 8002198:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800219c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021b4:	f7ff ffea 	bl	800218c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021b8:	480c      	ldr	r0, [pc, #48]	@ (80021ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ba:	490d      	ldr	r1, [pc, #52]	@ (80021f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021bc:	4a0d      	ldr	r2, [pc, #52]	@ (80021f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c0:	e002      	b.n	80021c8 <LoopCopyDataInit>

080021c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c6:	3304      	adds	r3, #4

080021c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021cc:	d3f9      	bcc.n	80021c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ce:	4a0a      	ldr	r2, [pc, #40]	@ (80021f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021d0:	4c0a      	ldr	r4, [pc, #40]	@ (80021fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d4:	e001      	b.n	80021da <LoopFillZerobss>

080021d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d8:	3204      	adds	r2, #4

080021da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021dc:	d3fb      	bcc.n	80021d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021de:	f005 fdff 	bl	8007de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021e2:	f7fe ffb7 	bl	8001154 <main>
  bx  lr    
 80021e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80021f4:	08008a48 	.word	0x08008a48
  ldr r2, =_sbss
 80021f8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80021fc:	200003ec 	.word	0x200003ec

08002200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002200:	e7fe      	b.n	8002200 <ADC_IRQHandler>
	...

08002204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002208:	4b0e      	ldr	r3, [pc, #56]	@ (8002244 <HAL_Init+0x40>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0d      	ldr	r2, [pc, #52]	@ (8002244 <HAL_Init+0x40>)
 800220e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002214:	4b0b      	ldr	r3, [pc, #44]	@ (8002244 <HAL_Init+0x40>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0a      	ldr	r2, [pc, #40]	@ (8002244 <HAL_Init+0x40>)
 800221a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800221e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002220:	4b08      	ldr	r3, [pc, #32]	@ (8002244 <HAL_Init+0x40>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a07      	ldr	r2, [pc, #28]	@ (8002244 <HAL_Init+0x40>)
 8002226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800222c:	2003      	movs	r0, #3
 800222e:	f000 f94f 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002232:	200f      	movs	r0, #15
 8002234:	f000 f808 	bl	8002248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002238:	f7ff fd5e 	bl	8001cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023c00 	.word	0x40023c00

08002248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002250:	4b12      	ldr	r3, [pc, #72]	@ (800229c <HAL_InitTick+0x54>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <HAL_InitTick+0x58>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800225e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f967 	bl	800253a <HAL_SYSTICK_Config>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e00e      	b.n	8002294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b0f      	cmp	r3, #15
 800227a:	d80a      	bhi.n	8002292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800227c:	2200      	movs	r2, #0
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	f04f 30ff 	mov.w	r0, #4294967295
 8002284:	f000 f92f 	bl	80024e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002288:	4a06      	ldr	r2, [pc, #24]	@ (80022a4 <HAL_InitTick+0x5c>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	e000      	b.n	8002294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000000 	.word	0x20000000
 80022a0:	20000008 	.word	0x20000008
 80022a4:	20000004 	.word	0x20000004

080022a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_IncTick+0x20>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_IncTick+0x24>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	4a04      	ldr	r2, [pc, #16]	@ (80022cc <HAL_IncTick+0x24>)
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000008 	.word	0x20000008
 80022cc:	2000029c 	.word	0x2000029c

080022d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return uwTick;
 80022d4:	4b03      	ldr	r3, [pc, #12]	@ (80022e4 <HAL_GetTick+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	2000029c 	.word	0x2000029c

080022e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7ff ffee 	bl	80022d0 <HAL_GetTick>
 80022f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002300:	d005      	beq.n	800230e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002302:	4b0a      	ldr	r3, [pc, #40]	@ (800232c <HAL_Delay+0x44>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800230e:	bf00      	nop
 8002310:	f7ff ffde 	bl	80022d0 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	429a      	cmp	r2, r3
 800231e:	d8f7      	bhi.n	8002310 <HAL_Delay+0x28>
  {
  }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000008 	.word	0x20000008

08002330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002340:	4b0c      	ldr	r3, [pc, #48]	@ (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800234c:	4013      	ands	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800235c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002362:	4a04      	ldr	r2, [pc, #16]	@ (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	60d3      	str	r3, [r2, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800237c:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <__NVIC_GetPriorityGrouping+0x18>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	f003 0307 	and.w	r3, r3, #7
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0b      	blt.n	80023be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4907      	ldr	r1, [pc, #28]	@ (80023cc <__NVIC_EnableIRQ+0x38>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	@ (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	@ (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	@ 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf28      	it	cs
 8002442:	2304      	movcs	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3304      	adds	r3, #4
 800244a:	2b06      	cmp	r3, #6
 800244c:	d902      	bls.n	8002454 <NVIC_EncodePriority+0x30>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3b03      	subs	r3, #3
 8002452:	e000      	b.n	8002456 <NVIC_EncodePriority+0x32>
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	f04f 32ff 	mov.w	r2, #4294967295
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	43d9      	mvns	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	4313      	orrs	r3, r2
         );
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	@ 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800249c:	d301      	bcc.n	80024a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a2:	4a0a      	ldr	r2, [pc, #40]	@ (80024cc <SysTick_Config+0x40>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024aa:	210f      	movs	r1, #15
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f7ff ff8e 	bl	80023d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <SysTick_Config+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ba:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <SysTick_Config+0x40>)
 80024bc:	2207      	movs	r2, #7
 80024be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	e000e010 	.word	0xe000e010

080024d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff29 	bl	8002330 <__NVIC_SetPriorityGrouping>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f8:	f7ff ff3e 	bl	8002378 <__NVIC_GetPriorityGrouping>
 80024fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7ff ff8e 	bl	8002424 <NVIC_EncodePriority>
 8002508:	4602      	mov	r2, r0
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff5d 	bl	80023d0 <__NVIC_SetPriority>
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff31 	bl	8002394 <__NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffa2 	bl	800248c <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002560:	f7ff feb6 	bl	80022d0 <HAL_GetTick>
 8002564:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d008      	beq.n	8002584 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2280      	movs	r2, #128	@ 0x80
 8002576:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e052      	b.n	800262a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0216 	bic.w	r2, r2, #22
 8002592:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d103      	bne.n	80025b4 <HAL_DMA_Abort+0x62>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0208 	bic.w	r2, r2, #8
 80025c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0201 	bic.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d4:	e013      	b.n	80025fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025d6:	f7ff fe7b 	bl	80022d0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b05      	cmp	r3, #5
 80025e2:	d90c      	bls.n	80025fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2203      	movs	r2, #3
 80025ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e015      	b.n	800262a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1e4      	bne.n	80025d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002610:	223f      	movs	r2, #63	@ 0x3f
 8002612:	409a      	lsls	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d004      	beq.n	8002650 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2280      	movs	r2, #128	@ 0x80
 800264a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e00c      	b.n	800266a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2205      	movs	r2, #5
 8002654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002684:	b2db      	uxtb	r3, r3
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	@ 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e16b      	b.n	8002988 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b0:	2201      	movs	r2, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	f040 815a 	bne.w	8002982 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d005      	beq.n	80026e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d130      	bne.n	8002748 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	2203      	movs	r2, #3
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800271c:	2201      	movs	r2, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 0201 	and.w	r2, r3, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b03      	cmp	r3, #3
 8002752:	d017      	beq.n	8002784 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d123      	bne.n	80027d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	08da      	lsrs	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3208      	adds	r2, #8
 8002798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	08da      	lsrs	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3208      	adds	r2, #8
 80027d2:	69b9      	ldr	r1, [r7, #24]
 80027d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0203 	and.w	r2, r3, #3
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80b4 	beq.w	8002982 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b60      	ldr	r3, [pc, #384]	@ (80029a0 <HAL_GPIO_Init+0x30c>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002822:	4a5f      	ldr	r2, [pc, #380]	@ (80029a0 <HAL_GPIO_Init+0x30c>)
 8002824:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002828:	6453      	str	r3, [r2, #68]	@ 0x44
 800282a:	4b5d      	ldr	r3, [pc, #372]	@ (80029a0 <HAL_GPIO_Init+0x30c>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002836:	4a5b      	ldr	r2, [pc, #364]	@ (80029a4 <HAL_GPIO_Init+0x310>)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	3302      	adds	r3, #2
 800283e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a52      	ldr	r2, [pc, #328]	@ (80029a8 <HAL_GPIO_Init+0x314>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d02b      	beq.n	80028ba <HAL_GPIO_Init+0x226>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a51      	ldr	r2, [pc, #324]	@ (80029ac <HAL_GPIO_Init+0x318>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d025      	beq.n	80028b6 <HAL_GPIO_Init+0x222>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a50      	ldr	r2, [pc, #320]	@ (80029b0 <HAL_GPIO_Init+0x31c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01f      	beq.n	80028b2 <HAL_GPIO_Init+0x21e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4f      	ldr	r2, [pc, #316]	@ (80029b4 <HAL_GPIO_Init+0x320>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d019      	beq.n	80028ae <HAL_GPIO_Init+0x21a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4e      	ldr	r2, [pc, #312]	@ (80029b8 <HAL_GPIO_Init+0x324>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_GPIO_Init+0x216>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4d      	ldr	r2, [pc, #308]	@ (80029bc <HAL_GPIO_Init+0x328>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00d      	beq.n	80028a6 <HAL_GPIO_Init+0x212>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4c      	ldr	r2, [pc, #304]	@ (80029c0 <HAL_GPIO_Init+0x32c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d007      	beq.n	80028a2 <HAL_GPIO_Init+0x20e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4b      	ldr	r2, [pc, #300]	@ (80029c4 <HAL_GPIO_Init+0x330>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <HAL_GPIO_Init+0x20a>
 800289a:	2307      	movs	r3, #7
 800289c:	e00e      	b.n	80028bc <HAL_GPIO_Init+0x228>
 800289e:	2308      	movs	r3, #8
 80028a0:	e00c      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028a2:	2306      	movs	r3, #6
 80028a4:	e00a      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028a6:	2305      	movs	r3, #5
 80028a8:	e008      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028aa:	2304      	movs	r3, #4
 80028ac:	e006      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028ae:	2303      	movs	r3, #3
 80028b0:	e004      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e002      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028ba:	2300      	movs	r3, #0
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	f002 0203 	and.w	r2, r2, #3
 80028c2:	0092      	lsls	r2, r2, #2
 80028c4:	4093      	lsls	r3, r2
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028cc:	4935      	ldr	r1, [pc, #212]	@ (80029a4 <HAL_GPIO_Init+0x310>)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	089b      	lsrs	r3, r3, #2
 80028d2:	3302      	adds	r3, #2
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028da:	4b3b      	ldr	r3, [pc, #236]	@ (80029c8 <HAL_GPIO_Init+0x334>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fe:	4a32      	ldr	r2, [pc, #200]	@ (80029c8 <HAL_GPIO_Init+0x334>)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002904:	4b30      	ldr	r3, [pc, #192]	@ (80029c8 <HAL_GPIO_Init+0x334>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002928:	4a27      	ldr	r2, [pc, #156]	@ (80029c8 <HAL_GPIO_Init+0x334>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800292e:	4b26      	ldr	r3, [pc, #152]	@ (80029c8 <HAL_GPIO_Init+0x334>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002952:	4a1d      	ldr	r2, [pc, #116]	@ (80029c8 <HAL_GPIO_Init+0x334>)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002958:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <HAL_GPIO_Init+0x334>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800297c:	4a12      	ldr	r2, [pc, #72]	@ (80029c8 <HAL_GPIO_Init+0x334>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3301      	adds	r3, #1
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	f67f ae90 	bls.w	80026b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	3724      	adds	r7, #36	@ 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40013800 	.word	0x40013800
 80029a8:	40020000 	.word	0x40020000
 80029ac:	40020400 	.word	0x40020400
 80029b0:	40020800 	.word	0x40020800
 80029b4:	40020c00 	.word	0x40020c00
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40021400 	.word	0x40021400
 80029c0:	40021800 	.word	0x40021800
 80029c4:	40021c00 	.word	0x40021c00
 80029c8:	40013c00 	.word	0x40013c00

080029cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
 80029d8:	4613      	mov	r3, r2
 80029da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029dc:	787b      	ldrb	r3, [r7, #1]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029e8:	e003      	b.n	80029f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ea:	887b      	ldrh	r3, [r7, #2]
 80029ec:	041a      	lsls	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	619a      	str	r2, [r3, #24]
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a10:	887a      	ldrh	r2, [r7, #2]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4013      	ands	r3, r2
 8002a16:	041a      	lsls	r2, r3, #16
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	400b      	ands	r3, r1
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	619a      	str	r2, [r3, #24]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e12b      	b.n	8002c9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff f974 	bl	8001d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2224      	movs	r2, #36	@ 0x24
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a98:	f003 f908 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 8002a9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4a81      	ldr	r2, [pc, #516]	@ (8002ca8 <HAL_I2C_Init+0x274>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d807      	bhi.n	8002ab8 <HAL_I2C_Init+0x84>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a80      	ldr	r2, [pc, #512]	@ (8002cac <HAL_I2C_Init+0x278>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	bf94      	ite	ls
 8002ab0:	2301      	movls	r3, #1
 8002ab2:	2300      	movhi	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	e006      	b.n	8002ac6 <HAL_I2C_Init+0x92>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a7d      	ldr	r2, [pc, #500]	@ (8002cb0 <HAL_I2C_Init+0x27c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	bf94      	ite	ls
 8002ac0:	2301      	movls	r3, #1
 8002ac2:	2300      	movhi	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0e7      	b.n	8002c9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4a78      	ldr	r2, [pc, #480]	@ (8002cb4 <HAL_I2C_Init+0x280>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	0c9b      	lsrs	r3, r3, #18
 8002ad8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a6a      	ldr	r2, [pc, #424]	@ (8002ca8 <HAL_I2C_Init+0x274>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d802      	bhi.n	8002b08 <HAL_I2C_Init+0xd4>
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	3301      	adds	r3, #1
 8002b06:	e009      	b.n	8002b1c <HAL_I2C_Init+0xe8>
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	4a69      	ldr	r2, [pc, #420]	@ (8002cb8 <HAL_I2C_Init+0x284>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	495c      	ldr	r1, [pc, #368]	@ (8002ca8 <HAL_I2C_Init+0x274>)
 8002b38:	428b      	cmp	r3, r1
 8002b3a:	d819      	bhi.n	8002b70 <HAL_I2C_Init+0x13c>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1e59      	subs	r1, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b4a:	1c59      	adds	r1, r3, #1
 8002b4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b50:	400b      	ands	r3, r1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_I2C_Init+0x138>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1e59      	subs	r1, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6a:	e051      	b.n	8002c10 <HAL_I2C_Init+0x1dc>
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	e04f      	b.n	8002c10 <HAL_I2C_Init+0x1dc>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d111      	bne.n	8002b9c <HAL_I2C_Init+0x168>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1e58      	subs	r0, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6859      	ldr	r1, [r3, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	440b      	add	r3, r1
 8002b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	e012      	b.n	8002bc2 <HAL_I2C_Init+0x18e>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1e58      	subs	r0, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	0099      	lsls	r1, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_I2C_Init+0x196>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e022      	b.n	8002c10 <HAL_I2C_Init+0x1dc>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_I2C_Init+0x1bc>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1e58      	subs	r0, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6859      	ldr	r1, [r3, #4]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	440b      	add	r3, r1
 8002be0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be4:	3301      	adds	r3, #1
 8002be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bee:	e00f      	b.n	8002c10 <HAL_I2C_Init+0x1dc>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1e58      	subs	r0, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	0099      	lsls	r1, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c06:	3301      	adds	r3, #1
 8002c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	6809      	ldr	r1, [r1, #0]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69da      	ldr	r2, [r3, #28]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6911      	ldr	r1, [r2, #16]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68d2      	ldr	r2, [r2, #12]
 8002c4a:	4311      	orrs	r1, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	430b      	orrs	r3, r1
 8002c52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	000186a0 	.word	0x000186a0
 8002cac:	001e847f 	.word	0x001e847f
 8002cb0:	003d08ff 	.word	0x003d08ff
 8002cb4:	431bde83 	.word	0x431bde83
 8002cb8:	10624dd3 	.word	0x10624dd3

08002cbc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cce:	2b80      	cmp	r3, #128	@ 0x80
 8002cd0:	d103      	bne.n	8002cda <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	611a      	str	r2, [r3, #16]
  }
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	817b      	strh	r3, [r7, #10]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cfc:	f7ff fae8 	bl	80022d0 <HAL_GetTick>
 8002d00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	f040 80e0 	bne.w	8002ed0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	2319      	movs	r3, #25
 8002d16:	2201      	movs	r2, #1
 8002d18:	4970      	ldr	r1, [pc, #448]	@ (8002edc <HAL_I2C_Master_Transmit+0x1f4>)
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f002 f912 	bl	8004f44 <I2C_WaitOnFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d26:	2302      	movs	r3, #2
 8002d28:	e0d3      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_I2C_Master_Transmit+0x50>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e0cc      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d007      	beq.n	8002d5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0201 	orr.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2221      	movs	r2, #33	@ 0x21
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2210      	movs	r2, #16
 8002d7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	893a      	ldrh	r2, [r7, #8]
 8002d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4a50      	ldr	r2, [pc, #320]	@ (8002ee0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002da0:	8979      	ldrh	r1, [r7, #10]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	6a3a      	ldr	r2, [r7, #32]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f001 fed4 	bl	8004b54 <I2C_MasterRequestWrite>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e08d      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002dcc:	e066      	b.n	8002e9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	6a39      	ldr	r1, [r7, #32]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f002 f9d0 	bl	8005178 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00d      	beq.n	8002dfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d107      	bne.n	8002df6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06b      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d11b      	bne.n	8002e70 <HAL_I2C_Master_Transmit+0x188>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d017      	beq.n	8002e70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	6a39      	ldr	r1, [r7, #32]
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f002 f9c7 	bl	8005208 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00d      	beq.n	8002e9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d107      	bne.n	8002e98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e01a      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d194      	bne.n	8002dce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e000      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ed0:	2302      	movs	r3, #2
  }
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	00100002 	.word	0x00100002
 8002ee0:	ffff0000 	.word	0xffff0000

08002ee4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08c      	sub	sp, #48	@ 0x30
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	817b      	strh	r3, [r7, #10]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ef8:	f7ff f9ea 	bl	80022d0 <HAL_GetTick>
 8002efc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	f040 8217 	bne.w	800333a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	2319      	movs	r3, #25
 8002f12:	2201      	movs	r2, #1
 8002f14:	497c      	ldr	r1, [pc, #496]	@ (8003108 <HAL_I2C_Master_Receive+0x224>)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f002 f814 	bl	8004f44 <I2C_WaitOnFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f22:	2302      	movs	r3, #2
 8002f24:	e20a      	b.n	800333c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_I2C_Master_Receive+0x50>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e203      	b.n	800333c <HAL_I2C_Master_Receive+0x458>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d007      	beq.n	8002f5a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2222      	movs	r2, #34	@ 0x22
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2210      	movs	r2, #16
 8002f76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	893a      	ldrh	r2, [r7, #8]
 8002f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4a5c      	ldr	r2, [pc, #368]	@ (800310c <HAL_I2C_Master_Receive+0x228>)
 8002f9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f9c:	8979      	ldrh	r1, [r7, #10]
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f001 fe58 	bl	8004c58 <I2C_MasterRequestRead>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e1c4      	b.n	800333c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d113      	bne.n	8002fe2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	623b      	str	r3, [r7, #32]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	623b      	str	r3, [r7, #32]
 8002fce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	e198      	b.n	8003314 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d11b      	bne.n	8003022 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ff8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e178      	b.n	8003314 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003026:	2b02      	cmp	r3, #2
 8003028:	d11b      	bne.n	8003062 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003038:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003048:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	e158      	b.n	8003314 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003070:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003088:	e144      	b.n	8003314 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308e:	2b03      	cmp	r3, #3
 8003090:	f200 80f1 	bhi.w	8003276 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003098:	2b01      	cmp	r3, #1
 800309a:	d123      	bne.n	80030e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800309e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f002 f92b 	bl	80052fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e145      	b.n	800333c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030e2:	e117      	b.n	8003314 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d14e      	bne.n	800318a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f2:	2200      	movs	r2, #0
 80030f4:	4906      	ldr	r1, [pc, #24]	@ (8003110 <HAL_I2C_Master_Receive+0x22c>)
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f001 ff24 	bl	8004f44 <I2C_WaitOnFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e11a      	b.n	800333c <HAL_I2C_Master_Receive+0x458>
 8003106:	bf00      	nop
 8003108:	00100002 	.word	0x00100002
 800310c:	ffff0000 	.word	0xffff0000
 8003110:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003188:	e0c4      	b.n	8003314 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003190:	2200      	movs	r2, #0
 8003192:	496c      	ldr	r1, [pc, #432]	@ (8003344 <HAL_I2C_Master_Receive+0x460>)
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f001 fed5 	bl	8004f44 <I2C_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0cb      	b.n	800333c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ec:	2200      	movs	r2, #0
 80031ee:	4955      	ldr	r1, [pc, #340]	@ (8003344 <HAL_I2C_Master_Receive+0x460>)
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f001 fea7 	bl	8004f44 <I2C_WaitOnFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e09d      	b.n	800333c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800320e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003274:	e04e      	b.n	8003314 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003278:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f002 f83e 	bl	80052fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e058      	b.n	800333c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d124      	bne.n	8003314 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d107      	bne.n	80032e2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032e0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	f47f aeb6 	bne.w	800308a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	e000      	b.n	800333c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800333a:	2302      	movs	r3, #2
  }
}
 800333c:	4618      	mov	r0, r3
 800333e:	3728      	adds	r7, #40	@ 0x28
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	00010004 	.word	0x00010004

08003348 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003360:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003368:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003370:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	2b10      	cmp	r3, #16
 8003376:	d003      	beq.n	8003380 <HAL_I2C_EV_IRQHandler+0x38>
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b40      	cmp	r3, #64	@ 0x40
 800337c:	f040 80c1 	bne.w	8003502 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10d      	bne.n	80033b6 <HAL_I2C_EV_IRQHandler+0x6e>
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80033a0:	d003      	beq.n	80033aa <HAL_I2C_EV_IRQHandler+0x62>
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80033a8:	d101      	bne.n	80033ae <HAL_I2C_EV_IRQHandler+0x66>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <HAL_I2C_EV_IRQHandler+0x68>
 80033ae:	2300      	movs	r3, #0
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	f000 8132 	beq.w	800361a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00c      	beq.n	80033da <HAL_I2C_EV_IRQHandler+0x92>
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	0a5b      	lsrs	r3, r3, #9
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d006      	beq.n	80033da <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f002 f821 	bl	8005414 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fd9f 	bl	8003f16 <I2C_Master_SB>
 80033d8:	e092      	b.n	8003500 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	08db      	lsrs	r3, r3, #3
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d009      	beq.n	80033fa <HAL_I2C_EV_IRQHandler+0xb2>
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	0a5b      	lsrs	r3, r3, #9
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fe15 	bl	8004022 <I2C_Master_ADD10>
 80033f8:	e082      	b.n	8003500 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	085b      	lsrs	r3, r3, #1
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <HAL_I2C_EV_IRQHandler+0xd2>
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	0a5b      	lsrs	r3, r3, #9
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fe2f 	bl	8004076 <I2C_Master_ADDR>
 8003418:	e072      	b.n	8003500 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d03b      	beq.n	800349e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003434:	f000 80f3 	beq.w	800361e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	09db      	lsrs	r3, r3, #7
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00f      	beq.n	8003464 <HAL_I2C_EV_IRQHandler+0x11c>
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	0a9b      	lsrs	r3, r3, #10
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <HAL_I2C_EV_IRQHandler+0x11c>
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	089b      	lsrs	r3, r3, #2
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d103      	bne.n	8003464 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f9f3 	bl	8003848 <I2C_MasterTransmit_TXE>
 8003462:	e04d      	b.n	8003500 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	089b      	lsrs	r3, r3, #2
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80d6 	beq.w	800361e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	0a5b      	lsrs	r3, r3, #9
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 80cf 	beq.w	800361e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003480:	7bbb      	ldrb	r3, [r7, #14]
 8003482:	2b21      	cmp	r3, #33	@ 0x21
 8003484:	d103      	bne.n	800348e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fa7a 	bl	8003980 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800348c:	e0c7      	b.n	800361e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	2b40      	cmp	r3, #64	@ 0x40
 8003492:	f040 80c4 	bne.w	800361e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fae8 	bl	8003a6c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800349c:	e0bf      	b.n	800361e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034ac:	f000 80b7 	beq.w	800361e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	099b      	lsrs	r3, r3, #6
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00f      	beq.n	80034dc <HAL_I2C_EV_IRQHandler+0x194>
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	0a9b      	lsrs	r3, r3, #10
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d009      	beq.n	80034dc <HAL_I2C_EV_IRQHandler+0x194>
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	089b      	lsrs	r3, r3, #2
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d103      	bne.n	80034dc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fb61 	bl	8003b9c <I2C_MasterReceive_RXNE>
 80034da:	e011      	b.n	8003500 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	089b      	lsrs	r3, r3, #2
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 809a 	beq.w	800361e <HAL_I2C_EV_IRQHandler+0x2d6>
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	0a5b      	lsrs	r3, r3, #9
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8093 	beq.w	800361e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fc17 	bl	8003d2c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034fe:	e08e      	b.n	800361e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003500:	e08d      	b.n	800361e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d004      	beq.n	8003514 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	e007      	b.n	8003524 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	085b      	lsrs	r3, r3, #1
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d012      	beq.n	8003556 <HAL_I2C_EV_IRQHandler+0x20e>
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	0a5b      	lsrs	r3, r3, #9
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00c      	beq.n	8003556 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800354c:	69b9      	ldr	r1, [r7, #24]
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 ffe0 	bl	8004514 <I2C_Slave_ADDR>
 8003554:	e066      	b.n	8003624 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_I2C_EV_IRQHandler+0x22e>
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	0a5b      	lsrs	r3, r3, #9
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f001 f81a 	bl	80045a8 <I2C_Slave_STOPF>
 8003574:	e056      	b.n	8003624 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003576:	7bbb      	ldrb	r3, [r7, #14]
 8003578:	2b21      	cmp	r3, #33	@ 0x21
 800357a:	d002      	beq.n	8003582 <HAL_I2C_EV_IRQHandler+0x23a>
 800357c:	7bbb      	ldrb	r3, [r7, #14]
 800357e:	2b29      	cmp	r3, #41	@ 0x29
 8003580:	d125      	bne.n	80035ce <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	09db      	lsrs	r3, r3, #7
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00f      	beq.n	80035ae <HAL_I2C_EV_IRQHandler+0x266>
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	0a9b      	lsrs	r3, r3, #10
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <HAL_I2C_EV_IRQHandler+0x266>
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	089b      	lsrs	r3, r3, #2
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d103      	bne.n	80035ae <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fef6 	bl	8004398 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035ac:	e039      	b.n	8003622 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	089b      	lsrs	r3, r3, #2
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d033      	beq.n	8003622 <HAL_I2C_EV_IRQHandler+0x2da>
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	0a5b      	lsrs	r3, r3, #9
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d02d      	beq.n	8003622 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 ff23 	bl	8004412 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035cc:	e029      	b.n	8003622 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	099b      	lsrs	r3, r3, #6
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00f      	beq.n	80035fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	0a9b      	lsrs	r3, r3, #10
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	089b      	lsrs	r3, r3, #2
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d103      	bne.n	80035fa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 ff2e 	bl	8004454 <I2C_SlaveReceive_RXNE>
 80035f8:	e014      	b.n	8003624 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	089b      	lsrs	r3, r3, #2
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00e      	beq.n	8003624 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	0a5b      	lsrs	r3, r3, #9
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d008      	beq.n	8003624 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 ff5c 	bl	80044d0 <I2C_SlaveReceive_BTF>
 8003618:	e004      	b.n	8003624 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800361a:	bf00      	nop
 800361c:	e002      	b.n	8003624 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800361e:	bf00      	nop
 8003620:	e000      	b.n	8003624 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003622:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b08a      	sub	sp, #40	@ 0x28
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003642:	2300      	movs	r3, #0
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800364c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00e      	beq.n	8003678 <HAL_I2C_ER_IRQHandler+0x4e>
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	0a1b      	lsrs	r3, r3, #8
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003676:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	0a5b      	lsrs	r3, r3, #9
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00e      	beq.n	80036a2 <HAL_I2C_ER_IRQHandler+0x78>
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80036a0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	0a9b      	lsrs	r3, r3, #10
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d03f      	beq.n	800372e <HAL_I2C_ER_IRQHandler+0x104>
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	0a1b      	lsrs	r3, r3, #8
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d039      	beq.n	800372e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80036ba:	7efb      	ldrb	r3, [r7, #27]
 80036bc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036cc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80036d4:	7ebb      	ldrb	r3, [r7, #26]
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d112      	bne.n	8003700 <HAL_I2C_ER_IRQHandler+0xd6>
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10f      	bne.n	8003700 <HAL_I2C_ER_IRQHandler+0xd6>
 80036e0:	7cfb      	ldrb	r3, [r7, #19]
 80036e2:	2b21      	cmp	r3, #33	@ 0x21
 80036e4:	d008      	beq.n	80036f8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80036e6:	7cfb      	ldrb	r3, [r7, #19]
 80036e8:	2b29      	cmp	r3, #41	@ 0x29
 80036ea:	d005      	beq.n	80036f8 <HAL_I2C_ER_IRQHandler+0xce>
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	2b28      	cmp	r3, #40	@ 0x28
 80036f0:	d106      	bne.n	8003700 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b21      	cmp	r3, #33	@ 0x21
 80036f6:	d103      	bne.n	8003700 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f001 f885 	bl	8004808 <I2C_Slave_AF>
 80036fe:	e016      	b.n	800372e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003708:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800370a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370c:	f043 0304 	orr.w	r3, r3, #4
 8003710:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003712:	7efb      	ldrb	r3, [r7, #27]
 8003714:	2b10      	cmp	r3, #16
 8003716:	d002      	beq.n	800371e <HAL_I2C_ER_IRQHandler+0xf4>
 8003718:	7efb      	ldrb	r3, [r7, #27]
 800371a:	2b40      	cmp	r3, #64	@ 0x40
 800371c:	d107      	bne.n	800372e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800372c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	0adb      	lsrs	r3, r3, #11
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00e      	beq.n	8003758 <HAL_I2C_ER_IRQHandler+0x12e>
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003748:	f043 0308 	orr.w	r3, r3, #8
 800374c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003756:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f001 f8c0 	bl	80048f0 <I2C_ITError>
  }
}
 8003770:	bf00      	nop
 8003772:	3728      	adds	r7, #40	@ 0x28
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	70fb      	strb	r3, [r7, #3]
 80037d4:	4613      	mov	r3, r2
 80037d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003856:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800385e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003864:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	d150      	bne.n	8003910 <I2C_MasterTransmit_TXE+0xc8>
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b21      	cmp	r3, #33	@ 0x21
 8003872:	d14d      	bne.n	8003910 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b08      	cmp	r3, #8
 8003878:	d01d      	beq.n	80038b6 <I2C_MasterTransmit_TXE+0x6e>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b20      	cmp	r3, #32
 800387e:	d01a      	beq.n	80038b6 <I2C_MasterTransmit_TXE+0x6e>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003886:	d016      	beq.n	80038b6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003896:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2211      	movs	r2, #17
 800389c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff ff62 	bl	8003778 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038b4:	e060      	b.n	8003978 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038c4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b40      	cmp	r3, #64	@ 0x40
 80038ee:	d107      	bne.n	8003900 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff ff7d 	bl	80037f8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038fe:	e03b      	b.n	8003978 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff ff35 	bl	8003778 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800390e:	e033      	b.n	8003978 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	2b21      	cmp	r3, #33	@ 0x21
 8003914:	d005      	beq.n	8003922 <I2C_MasterTransmit_TXE+0xda>
 8003916:	7bbb      	ldrb	r3, [r7, #14]
 8003918:	2b40      	cmp	r3, #64	@ 0x40
 800391a:	d12d      	bne.n	8003978 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	2b22      	cmp	r3, #34	@ 0x22
 8003920:	d12a      	bne.n	8003978 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d108      	bne.n	800393e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800393a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800393c:	e01c      	b.n	8003978 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b40      	cmp	r3, #64	@ 0x40
 8003948:	d103      	bne.n	8003952 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f88e 	bl	8003a6c <I2C_MemoryTransmit_TXE_BTF>
}
 8003950:	e012      	b.n	8003978 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	781a      	ldrb	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003976:	e7ff      	b.n	8003978 <I2C_MasterTransmit_TXE+0x130>
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b21      	cmp	r3, #33	@ 0x21
 8003998:	d164      	bne.n	8003a64 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d012      	beq.n	80039ca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80039c8:	e04c      	b.n	8003a64 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d01d      	beq.n	8003a0c <I2C_MasterTransmit_BTF+0x8c>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d01a      	beq.n	8003a0c <I2C_MasterTransmit_BTF+0x8c>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039dc:	d016      	beq.n	8003a0c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039ec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2211      	movs	r2, #17
 80039f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff feb7 	bl	8003778 <HAL_I2C_MasterTxCpltCallback>
}
 8003a0a:	e02b      	b.n	8003a64 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a1a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a2a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b40      	cmp	r3, #64	@ 0x40
 8003a44:	d107      	bne.n	8003a56 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff fed2 	bl	80037f8 <HAL_I2C_MemTxCpltCallback>
}
 8003a54:	e006      	b.n	8003a64 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff fe8a 	bl	8003778 <HAL_I2C_MasterTxCpltCallback>
}
 8003a64:	bf00      	nop
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d11d      	bne.n	8003ac0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d10b      	bne.n	8003aa4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a9c:	1c9a      	adds	r2, r3, #2
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003aa2:	e077      	b.n	8003b94 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	121b      	asrs	r3, r3, #8
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003abe:	e069      	b.n	8003b94 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d10b      	bne.n	8003ae0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ade:	e059      	b.n	8003b94 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d152      	bne.n	8003b8e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b22      	cmp	r3, #34	@ 0x22
 8003aec:	d10d      	bne.n	8003b0a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003afc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b08:	e044      	b.n	8003b94 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d015      	beq.n	8003b40 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b21      	cmp	r3, #33	@ 0x21
 8003b18:	d112      	bne.n	8003b40 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	781a      	ldrb	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b3e:	e029      	b.n	8003b94 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d124      	bne.n	8003b94 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	2b21      	cmp	r3, #33	@ 0x21
 8003b4e:	d121      	bne.n	8003b94 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b5e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b6e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff fe36 	bl	80037f8 <HAL_I2C_MemTxCpltCallback>
}
 8003b8c:	e002      	b.n	8003b94 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff f894 	bl	8002cbc <I2C_Flush_DR>
}
 8003b94:	bf00      	nop
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b22      	cmp	r3, #34	@ 0x22
 8003bae:	f040 80b9 	bne.w	8003d24 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d921      	bls.n	8003c0a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	f040 8096 	bne.w	8003d24 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c06:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003c08:	e08c      	b.n	8003d24 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d07f      	beq.n	8003d12 <I2C_MasterReceive_RXNE+0x176>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d002      	beq.n	8003c1e <I2C_MasterReceive_RXNE+0x82>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d179      	bne.n	8003d12 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f001 fb3a 	bl	8005298 <I2C_WaitOnSTOPRequestThroughIT>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d14c      	bne.n	8003cc4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c38:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c48:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b40      	cmp	r3, #64	@ 0x40
 8003c82:	d10a      	bne.n	8003c9a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff fdba 	bl	800380c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c98:	e044      	b.n	8003d24 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d002      	beq.n	8003cae <I2C_MasterReceive_RXNE+0x112>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	d103      	bne.n	8003cb6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cb4:	e002      	b.n	8003cbc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2212      	movs	r2, #18
 8003cba:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff fd65 	bl	800378c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cc2:	e02f      	b.n	8003d24 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cd2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff fd88 	bl	8003820 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d10:	e008      	b.n	8003d24 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d20:	605a      	str	r2, [r3, #4]
}
 8003d22:	e7ff      	b.n	8003d24 <I2C_MasterReceive_RXNE+0x188>
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d38:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d11b      	bne.n	8003d7c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d52:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003d7a:	e0c8      	b.n	8003f0e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d129      	bne.n	8003dda <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d94:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d00a      	beq.n	8003db2 <I2C_MasterReceive_BTF+0x86>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d007      	beq.n	8003db2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003dd8:	e099      	b.n	8003f0e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	f040 8081 	bne.w	8003ee8 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d002      	beq.n	8003df2 <I2C_MasterReceive_BTF+0xc6>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d108      	bne.n	8003e04 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	e019      	b.n	8003e38 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d002      	beq.n	8003e10 <I2C_MasterReceive_BTF+0xe4>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d108      	bne.n	8003e22 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e00a      	b.n	8003e38 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d007      	beq.n	8003e38 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003e92:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b40      	cmp	r3, #64	@ 0x40
 8003ea6:	d10a      	bne.n	8003ebe <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff fca8 	bl	800380c <HAL_I2C_MemRxCpltCallback>
}
 8003ebc:	e027      	b.n	8003f0e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d002      	beq.n	8003ed2 <I2C_MasterReceive_BTF+0x1a6>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	d103      	bne.n	8003eda <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ed8:	e002      	b.n	8003ee0 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2212      	movs	r2, #18
 8003ede:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff fc53 	bl	800378c <HAL_I2C_MasterRxCpltCallback>
}
 8003ee6:	e012      	b.n	8003f0e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691a      	ldr	r2, [r3, #16]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b40      	cmp	r3, #64	@ 0x40
 8003f28:	d117      	bne.n	8003f5a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f42:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003f44:	e067      	b.n	8004016 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	611a      	str	r2, [r3, #16]
}
 8003f58:	e05d      	b.n	8004016 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f62:	d133      	bne.n	8003fcc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b21      	cmp	r3, #33	@ 0x21
 8003f6e:	d109      	bne.n	8003f84 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f80:	611a      	str	r2, [r3, #16]
 8003f82:	e008      	b.n	8003f96 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d004      	beq.n	8003fa8 <I2C_Master_SB+0x92>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d108      	bne.n	8003fba <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d032      	beq.n	8004016 <I2C_Master_SB+0x100>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d02d      	beq.n	8004016 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fc8:	605a      	str	r2, [r3, #4]
}
 8003fca:	e024      	b.n	8004016 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10e      	bne.n	8003ff2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	11db      	asrs	r3, r3, #7
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	f003 0306 	and.w	r3, r3, #6
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	f063 030f 	orn	r3, r3, #15
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	611a      	str	r2, [r3, #16]
}
 8003ff0:	e011      	b.n	8004016 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d10d      	bne.n	8004016 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	11db      	asrs	r3, r3, #7
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f003 0306 	and.w	r3, r3, #6
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f063 030e 	orn	r3, r3, #14
 800400e:	b2da      	uxtb	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	611a      	str	r2, [r3, #16]
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402e:	b2da      	uxtb	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403a:	2b00      	cmp	r3, #0
 800403c:	d004      	beq.n	8004048 <I2C_Master_ADD10+0x26>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d108      	bne.n	800405a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00c      	beq.n	800406a <I2C_Master_ADD10+0x48>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d007      	beq.n	800406a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004068:	605a      	str	r2, [r3, #4]
  }
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004076:	b480      	push	{r7}
 8004078:	b091      	sub	sp, #68	@ 0x44
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004084:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b22      	cmp	r3, #34	@ 0x22
 800409e:	f040 8169 	bne.w	8004374 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10f      	bne.n	80040ca <I2C_Master_ADDR+0x54>
 80040aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80040ae:	2b40      	cmp	r3, #64	@ 0x40
 80040b0:	d10b      	bne.n	80040ca <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b2:	2300      	movs	r3, #0
 80040b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c8:	e160      	b.n	800438c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d11d      	bne.n	800410e <I2C_Master_ADDR+0x98>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040da:	d118      	bne.n	800410e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040dc:	2300      	movs	r3, #0
 80040de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004100:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	651a      	str	r2, [r3, #80]	@ 0x50
 800410c:	e13e      	b.n	800438c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d113      	bne.n	8004140 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004118:	2300      	movs	r3, #0
 800411a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800412c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	e115      	b.n	800436c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b01      	cmp	r3, #1
 8004148:	f040 808a 	bne.w	8004260 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800414c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004152:	d137      	bne.n	80041c4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004162:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800416e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004172:	d113      	bne.n	800419c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004182:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004184:	2300      	movs	r3, #0
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	e0e7      	b.n	800436c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419c:	2300      	movs	r3, #0
 800419e:	623b      	str	r3, [r7, #32]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	623b      	str	r3, [r7, #32]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	623b      	str	r3, [r7, #32]
 80041b0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e0d3      	b.n	800436c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80041c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d02e      	beq.n	8004228 <I2C_Master_ADDR+0x1b2>
 80041ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d02b      	beq.n	8004228 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80041d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d2:	2b12      	cmp	r3, #18
 80041d4:	d102      	bne.n	80041dc <I2C_Master_ADDR+0x166>
 80041d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d125      	bne.n	8004228 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d00e      	beq.n	8004200 <I2C_Master_ADDR+0x18a>
 80041e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d00b      	beq.n	8004200 <I2C_Master_ADDR+0x18a>
 80041e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ea:	2b10      	cmp	r3, #16
 80041ec:	d008      	beq.n	8004200 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	e007      	b.n	8004210 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800420e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004210:	2300      	movs	r3, #0
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	61fb      	str	r3, [r7, #28]
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	e0a1      	b.n	800436c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004236:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004238:	2300      	movs	r3, #0
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	61bb      	str	r3, [r7, #24]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	e085      	b.n	800436c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d14d      	bne.n	8004306 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800426a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426c:	2b04      	cmp	r3, #4
 800426e:	d016      	beq.n	800429e <I2C_Master_ADDR+0x228>
 8004270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004272:	2b02      	cmp	r3, #2
 8004274:	d013      	beq.n	800429e <I2C_Master_ADDR+0x228>
 8004276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004278:	2b10      	cmp	r3, #16
 800427a:	d010      	beq.n	800429e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800428a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	e007      	b.n	80042ae <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042ac:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042bc:	d117      	bne.n	80042ee <I2C_Master_ADDR+0x278>
 80042be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042c4:	d00b      	beq.n	80042de <I2C_Master_ADDR+0x268>
 80042c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d008      	beq.n	80042de <I2C_Master_ADDR+0x268>
 80042cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d005      	beq.n	80042de <I2C_Master_ADDR+0x268>
 80042d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d4:	2b10      	cmp	r3, #16
 80042d6:	d002      	beq.n	80042de <I2C_Master_ADDR+0x268>
 80042d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d107      	bne.n	80042ee <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	e032      	b.n	800436c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004314:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004324:	d117      	bne.n	8004356 <I2C_Master_ADDR+0x2e0>
 8004326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004328:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800432c:	d00b      	beq.n	8004346 <I2C_Master_ADDR+0x2d0>
 800432e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004330:	2b01      	cmp	r3, #1
 8004332:	d008      	beq.n	8004346 <I2C_Master_ADDR+0x2d0>
 8004334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004336:	2b08      	cmp	r3, #8
 8004338:	d005      	beq.n	8004346 <I2C_Master_ADDR+0x2d0>
 800433a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800433c:	2b10      	cmp	r3, #16
 800433e:	d002      	beq.n	8004346 <I2C_Master_ADDR+0x2d0>
 8004340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004342:	2b20      	cmp	r3, #32
 8004344:	d107      	bne.n	8004356 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004354:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004356:	2300      	movs	r3, #0
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004372:	e00b      	b.n	800438c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
}
 800438a:	e7ff      	b.n	800438c <I2C_Master_ADDR+0x316>
 800438c:	bf00      	nop
 800438e:	3744      	adds	r7, #68	@ 0x44
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d02b      	beq.n	800440a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b6:	781a      	ldrb	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d114      	bne.n	800440a <I2C_SlaveTransmit_TXE+0x72>
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	2b29      	cmp	r3, #41	@ 0x29
 80043e4:	d111      	bne.n	800440a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043f4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2221      	movs	r2, #33	@ 0x21
 80043fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2228      	movs	r2, #40	@ 0x28
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff f9cb 	bl	80037a0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d011      	beq.n	8004448 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	781a      	ldrb	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004462:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d02c      	beq.n	80044c8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d114      	bne.n	80044c8 <I2C_SlaveReceive_RXNE+0x74>
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80044a2:	d111      	bne.n	80044c8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044b2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2222      	movs	r2, #34	@ 0x22
 80044b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2228      	movs	r2, #40	@ 0x28
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff f976 	bl	80037b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044c8:	bf00      	nop
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d012      	beq.n	8004508 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800451e:	2300      	movs	r3, #0
 8004520:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800452e:	2b28      	cmp	r3, #40	@ 0x28
 8004530:	d127      	bne.n	8004582 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004540:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	089b      	lsrs	r3, r3, #2
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800454e:	2301      	movs	r3, #1
 8004550:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	09db      	lsrs	r3, r3, #7
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d103      	bne.n	8004566 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	81bb      	strh	r3, [r7, #12]
 8004564:	e002      	b.n	800456c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004574:	89ba      	ldrh	r2, [r7, #12]
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	4619      	mov	r1, r3
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff f924 	bl	80037c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004580:	e00e      	b.n	80045a0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004582:	2300      	movs	r3, #0
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80045a0:	bf00      	nop
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045c6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80045c8:	2300      	movs	r3, #0
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045f4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004604:	d172      	bne.n	80046ec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	2b22      	cmp	r3, #34	@ 0x22
 800460a:	d002      	beq.n	8004612 <I2C_Slave_STOPF+0x6a>
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004610:	d135      	bne.n	800467e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	b29a      	uxth	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462e:	f043 0204 	orr.w	r2, r3, #4
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004644:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe f813 	bl	8002676 <HAL_DMA_GetState>
 8004650:	4603      	mov	r3, r0
 8004652:	2b01      	cmp	r3, #1
 8004654:	d049      	beq.n	80046ea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465a:	4a69      	ldr	r2, [pc, #420]	@ (8004800 <I2C_Slave_STOPF+0x258>)
 800465c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004662:	4618      	mov	r0, r3
 8004664:	f7fd ffe5 	bl	8002632 <HAL_DMA_Abort_IT>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d03d      	beq.n	80046ea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004678:	4610      	mov	r0, r2
 800467a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800467c:	e035      	b.n	80046ea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	b29a      	uxth	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	f043 0204 	orr.w	r2, r3, #4
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fd ffdd 	bl	8002676 <HAL_DMA_GetState>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d014      	beq.n	80046ec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c6:	4a4e      	ldr	r2, [pc, #312]	@ (8004800 <I2C_Slave_STOPF+0x258>)
 80046c8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fd ffaf 	bl	8002632 <HAL_DMA_Abort_IT>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d008      	beq.n	80046ec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046e4:	4610      	mov	r0, r2
 80046e6:	4798      	blx	r3
 80046e8:	e000      	b.n	80046ec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046ea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d03e      	beq.n	8004774 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b04      	cmp	r3, #4
 8004702:	d112      	bne.n	800472a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004734:	2b40      	cmp	r3, #64	@ 0x40
 8004736:	d112      	bne.n	800475e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	f043 0204 	orr.w	r2, r3, #4
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f8b7 	bl	80048f0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004782:	e039      	b.n	80047f8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	2b2a      	cmp	r3, #42	@ 0x2a
 8004788:	d109      	bne.n	800479e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2228      	movs	r2, #40	@ 0x28
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff f80b 	bl	80037b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b28      	cmp	r3, #40	@ 0x28
 80047a8:	d111      	bne.n	80047ce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a15      	ldr	r2, [pc, #84]	@ (8004804 <I2C_Slave_STOPF+0x25c>)
 80047ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff f80c 	bl	80037e4 <HAL_I2C_ListenCpltCallback>
}
 80047cc:	e014      	b.n	80047f8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d2:	2b22      	cmp	r3, #34	@ 0x22
 80047d4:	d002      	beq.n	80047dc <I2C_Slave_STOPF+0x234>
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	2b22      	cmp	r3, #34	@ 0x22
 80047da:	d10d      	bne.n	80047f8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fe ffde 	bl	80037b4 <HAL_I2C_SlaveRxCpltCallback>
}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	08004df5 	.word	0x08004df5
 8004804:	ffff0000 	.word	0xffff0000

08004808 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004816:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b08      	cmp	r3, #8
 8004822:	d002      	beq.n	800482a <I2C_Slave_AF+0x22>
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b20      	cmp	r3, #32
 8004828:	d129      	bne.n	800487e <I2C_Slave_AF+0x76>
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	2b28      	cmp	r3, #40	@ 0x28
 800482e:	d126      	bne.n	800487e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a2e      	ldr	r2, [pc, #184]	@ (80048ec <I2C_Slave_AF+0xe4>)
 8004834:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004844:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800484e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800485e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fe ffb4 	bl	80037e4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800487c:	e031      	b.n	80048e2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b21      	cmp	r3, #33	@ 0x21
 8004882:	d129      	bne.n	80048d8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a19      	ldr	r2, [pc, #100]	@ (80048ec <I2C_Slave_AF+0xe4>)
 8004888:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2221      	movs	r2, #33	@ 0x21
 800488e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048ae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048b8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048c8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fe f9f6 	bl	8002cbc <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7fe ff65 	bl	80037a0 <HAL_I2C_SlaveTxCpltCallback>
}
 80048d6:	e004      	b.n	80048e2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048e0:	615a      	str	r2, [r3, #20]
}
 80048e2:	bf00      	nop
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	ffff0000 	.word	0xffff0000

080048f0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004906:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004908:	7bbb      	ldrb	r3, [r7, #14]
 800490a:	2b10      	cmp	r3, #16
 800490c:	d002      	beq.n	8004914 <I2C_ITError+0x24>
 800490e:	7bbb      	ldrb	r3, [r7, #14]
 8004910:	2b40      	cmp	r3, #64	@ 0x40
 8004912:	d10a      	bne.n	800492a <I2C_ITError+0x3a>
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	2b22      	cmp	r3, #34	@ 0x22
 8004918:	d107      	bne.n	800492a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004928:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004930:	2b28      	cmp	r3, #40	@ 0x28
 8004932:	d107      	bne.n	8004944 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2228      	movs	r2, #40	@ 0x28
 800493e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004942:	e015      	b.n	8004970 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800494e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004952:	d00a      	beq.n	800496a <I2C_ITError+0x7a>
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b60      	cmp	r3, #96	@ 0x60
 8004958:	d007      	beq.n	800496a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800497a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800497e:	d162      	bne.n	8004a46 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800498e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004994:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b01      	cmp	r3, #1
 800499c:	d020      	beq.n	80049e0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049a2:	4a6a      	ldr	r2, [pc, #424]	@ (8004b4c <I2C_ITError+0x25c>)
 80049a4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fd fe41 	bl	8002632 <HAL_DMA_Abort_IT>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 8089 	beq.w	8004aca <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0201 	bic.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049da:	4610      	mov	r0, r2
 80049dc:	4798      	blx	r3
 80049de:	e074      	b.n	8004aca <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e4:	4a59      	ldr	r2, [pc, #356]	@ (8004b4c <I2C_ITError+0x25c>)
 80049e6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fd fe20 	bl	8002632 <HAL_DMA_Abort_IT>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d068      	beq.n	8004aca <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a02:	2b40      	cmp	r3, #64	@ 0x40
 8004a04:	d10b      	bne.n	8004a1e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691a      	ldr	r2, [r3, #16]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a40:	4610      	mov	r0, r2
 8004a42:	4798      	blx	r3
 8004a44:	e041      	b.n	8004aca <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b60      	cmp	r3, #96	@ 0x60
 8004a50:	d125      	bne.n	8004a9e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6a:	2b40      	cmp	r3, #64	@ 0x40
 8004a6c:	d10b      	bne.n	8004a86 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	b2d2      	uxtb	r2, r2
 8004a7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0201 	bic.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fe fecc 	bl	8003834 <HAL_I2C_AbortCpltCallback>
 8004a9c:	e015      	b.n	8004aca <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa8:	2b40      	cmp	r3, #64	@ 0x40
 8004aaa:	d10b      	bne.n	8004ac4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7fe feab 	bl	8003820 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10e      	bne.n	8004af8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d109      	bne.n	8004af8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d104      	bne.n	8004af8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b06:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b0e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d113      	bne.n	8004b44 <I2C_ITError+0x254>
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	2b28      	cmp	r3, #40	@ 0x28
 8004b20:	d110      	bne.n	8004b44 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a0a      	ldr	r2, [pc, #40]	@ (8004b50 <I2C_ITError+0x260>)
 8004b26:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fe fe50 	bl	80037e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b44:	bf00      	nop
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	08004df5 	.word	0x08004df5
 8004b50:	ffff0000 	.word	0xffff0000

08004b54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af02      	add	r7, sp, #8
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	607a      	str	r2, [r7, #4]
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	460b      	mov	r3, r1
 8004b62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d006      	beq.n	8004b7e <I2C_MasterRequestWrite+0x2a>
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d003      	beq.n	8004b7e <I2C_MasterRequestWrite+0x2a>
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b7c:	d108      	bne.n	8004b90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	e00b      	b.n	8004ba8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b94:	2b12      	cmp	r3, #18
 8004b96:	d107      	bne.n	8004ba8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ba6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f9c5 	bl	8004f44 <I2C_WaitOnFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00d      	beq.n	8004bdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bce:	d103      	bne.n	8004bd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e035      	b.n	8004c48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004be4:	d108      	bne.n	8004bf8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004be6:	897b      	ldrh	r3, [r7, #10]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004bf4:	611a      	str	r2, [r3, #16]
 8004bf6:	e01b      	b.n	8004c30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bf8:	897b      	ldrh	r3, [r7, #10]
 8004bfa:	11db      	asrs	r3, r3, #7
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	f003 0306 	and.w	r3, r3, #6
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f063 030f 	orn	r3, r3, #15
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	490e      	ldr	r1, [pc, #56]	@ (8004c50 <I2C_MasterRequestWrite+0xfc>)
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 fa0e 	bl	8005038 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e010      	b.n	8004c48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c26:	897b      	ldrh	r3, [r7, #10]
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4907      	ldr	r1, [pc, #28]	@ (8004c54 <I2C_MasterRequestWrite+0x100>)
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f9fe 	bl	8005038 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	00010008 	.word	0x00010008
 8004c54:	00010002 	.word	0x00010002

08004c58 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	607a      	str	r2, [r7, #4]
 8004c62:	603b      	str	r3, [r7, #0]
 8004c64:	460b      	mov	r3, r1
 8004c66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c7c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d006      	beq.n	8004c92 <I2C_MasterRequestRead+0x3a>
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d003      	beq.n	8004c92 <I2C_MasterRequestRead+0x3a>
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c90:	d108      	bne.n	8004ca4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	e00b      	b.n	8004cbc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca8:	2b11      	cmp	r3, #17
 8004caa:	d107      	bne.n	8004cbc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 f93b 	bl	8004f44 <I2C_WaitOnFlagUntilTimeout>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00d      	beq.n	8004cf0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ce2:	d103      	bne.n	8004cec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e079      	b.n	8004de4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cf8:	d108      	bne.n	8004d0c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004cfa:	897b      	ldrh	r3, [r7, #10]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	611a      	str	r2, [r3, #16]
 8004d0a:	e05f      	b.n	8004dcc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d0c:	897b      	ldrh	r3, [r7, #10]
 8004d0e:	11db      	asrs	r3, r3, #7
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	f003 0306 	and.w	r3, r3, #6
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	f063 030f 	orn	r3, r3, #15
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	4930      	ldr	r1, [pc, #192]	@ (8004dec <I2C_MasterRequestRead+0x194>)
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f984 	bl	8005038 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e054      	b.n	8004de4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d3a:	897b      	ldrh	r3, [r7, #10]
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	4929      	ldr	r1, [pc, #164]	@ (8004df0 <I2C_MasterRequestRead+0x198>)
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 f974 	bl	8005038 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e044      	b.n	8004de4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	613b      	str	r3, [r7, #16]
 8004d6e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d7e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f8d9 	bl	8004f44 <I2C_WaitOnFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00d      	beq.n	8004db4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004da6:	d103      	bne.n	8004db0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dae:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e017      	b.n	8004de4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004db4:	897b      	ldrh	r3, [r7, #10]
 8004db6:	11db      	asrs	r3, r3, #7
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	f003 0306 	and.w	r3, r3, #6
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	f063 030e 	orn	r3, r3, #14
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	4907      	ldr	r1, [pc, #28]	@ (8004df0 <I2C_MasterRequestRead+0x198>)
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 f930 	bl	8005038 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	00010008 	.word	0x00010008
 8004df0:	00010002 	.word	0x00010002

08004df4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e04:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e0c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8004f3c <I2C_DMAAbort+0x148>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	08db      	lsrs	r3, r3, #3
 8004e14:	4a4a      	ldr	r2, [pc, #296]	@ (8004f40 <I2C_DMAAbort+0x14c>)
 8004e16:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1a:	0a1a      	lsrs	r2, r3, #8
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	00da      	lsls	r2, r3, #3
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e32:	f043 0220 	orr.w	r2, r3, #32
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004e3a:	e00a      	b.n	8004e52 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e50:	d0ea      	beq.n	8004e28 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e5e:	2200      	movs	r2, #0
 8004e60:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6e:	2200      	movs	r2, #0
 8004e70:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e80:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2200      	movs	r2, #0
 8004e86:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e94:	2200      	movs	r2, #0
 8004e96:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0201 	bic.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b60      	cmp	r3, #96	@ 0x60
 8004ec2:	d10e      	bne.n	8004ee2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004eda:	6978      	ldr	r0, [r7, #20]
 8004edc:	f7fe fcaa 	bl	8003834 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ee0:	e027      	b.n	8004f32 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ee2:	7cfb      	ldrb	r3, [r7, #19]
 8004ee4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ee8:	2b28      	cmp	r3, #40	@ 0x28
 8004eea:	d117      	bne.n	8004f1c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f0a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2228      	movs	r2, #40	@ 0x28
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f1a:	e007      	b.n	8004f2c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004f2c:	6978      	ldr	r0, [r7, #20]
 8004f2e:	f7fe fc77 	bl	8003820 <HAL_I2C_ErrorCallback>
}
 8004f32:	bf00      	nop
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20000000 	.word	0x20000000
 8004f40:	14f8b589 	.word	0x14f8b589

08004f44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	4613      	mov	r3, r2
 8004f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f54:	e048      	b.n	8004fe8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5c:	d044      	beq.n	8004fe8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f5e:	f7fd f9b7 	bl	80022d0 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d302      	bcc.n	8004f74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d139      	bne.n	8004fe8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	0c1b      	lsrs	r3, r3, #16
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d10d      	bne.n	8004f9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	43da      	mvns	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	e00c      	b.n	8004fb4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	43da      	mvns	r2, r3
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	bf0c      	ite	eq
 8004fac:	2301      	moveq	r3, #1
 8004fae:	2300      	movne	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d116      	bne.n	8004fe8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd4:	f043 0220 	orr.w	r2, r3, #32
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e023      	b.n	8005030 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	0c1b      	lsrs	r3, r3, #16
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d10d      	bne.n	800500e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	43da      	mvns	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	bf0c      	ite	eq
 8005004:	2301      	moveq	r3, #1
 8005006:	2300      	movne	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	461a      	mov	r2, r3
 800500c:	e00c      	b.n	8005028 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	43da      	mvns	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	4013      	ands	r3, r2
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	bf0c      	ite	eq
 8005020:	2301      	moveq	r3, #1
 8005022:	2300      	movne	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	461a      	mov	r2, r3
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	429a      	cmp	r2, r3
 800502c:	d093      	beq.n	8004f56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005046:	e071      	b.n	800512c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005056:	d123      	bne.n	80050a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005066:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005070:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508c:	f043 0204 	orr.w	r2, r3, #4
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e067      	b.n	8005170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a6:	d041      	beq.n	800512c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a8:	f7fd f912 	bl	80022d0 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d302      	bcc.n	80050be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d136      	bne.n	800512c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	0c1b      	lsrs	r3, r3, #16
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d10c      	bne.n	80050e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	43da      	mvns	r2, r3
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4013      	ands	r3, r2
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bf14      	ite	ne
 80050da:	2301      	movne	r3, #1
 80050dc:	2300      	moveq	r3, #0
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	e00b      	b.n	80050fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	43da      	mvns	r2, r3
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	4013      	ands	r3, r2
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	bf14      	ite	ne
 80050f4:	2301      	movne	r3, #1
 80050f6:	2300      	moveq	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d016      	beq.n	800512c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005118:	f043 0220 	orr.w	r2, r3, #32
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e021      	b.n	8005170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	0c1b      	lsrs	r3, r3, #16
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b01      	cmp	r3, #1
 8005134:	d10c      	bne.n	8005150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	43da      	mvns	r2, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	4013      	ands	r3, r2
 8005142:	b29b      	uxth	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	bf14      	ite	ne
 8005148:	2301      	movne	r3, #1
 800514a:	2300      	moveq	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	e00b      	b.n	8005168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	43da      	mvns	r2, r3
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4013      	ands	r3, r2
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	bf14      	ite	ne
 8005162:	2301      	movne	r3, #1
 8005164:	2300      	moveq	r3, #0
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	f47f af6d 	bne.w	8005048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005184:	e034      	b.n	80051f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 f915 	bl	80053b6 <I2C_IsAcknowledgeFailed>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e034      	b.n	8005200 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d028      	beq.n	80051f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519e:	f7fd f897 	bl	80022d0 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d11d      	bne.n	80051f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051be:	2b80      	cmp	r3, #128	@ 0x80
 80051c0:	d016      	beq.n	80051f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051dc:	f043 0220 	orr.w	r2, r3, #32
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e007      	b.n	8005200 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051fa:	2b80      	cmp	r3, #128	@ 0x80
 80051fc:	d1c3      	bne.n	8005186 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005214:	e034      	b.n	8005280 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f8cd 	bl	80053b6 <I2C_IsAcknowledgeFailed>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e034      	b.n	8005290 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522c:	d028      	beq.n	8005280 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522e:	f7fd f84f 	bl	80022d0 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	429a      	cmp	r2, r3
 800523c:	d302      	bcc.n	8005244 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d11d      	bne.n	8005280 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b04      	cmp	r3, #4
 8005250:	d016      	beq.n	8005280 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e007      	b.n	8005290 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b04      	cmp	r3, #4
 800528c:	d1c3      	bne.n	8005216 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80052a4:	4b13      	ldr	r3, [pc, #76]	@ (80052f4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	08db      	lsrs	r3, r3, #3
 80052aa:	4a13      	ldr	r2, [pc, #76]	@ (80052f8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80052ac:	fba2 2303 	umull	r2, r3, r2, r3
 80052b0:	0a1a      	lsrs	r2, r3, #8
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3b01      	subs	r3, #1
 80052be:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d107      	bne.n	80052d6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ca:	f043 0220 	orr.w	r2, r3, #32
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e008      	b.n	80052e8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052e4:	d0e9      	beq.n	80052ba <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	20000000 	.word	0x20000000
 80052f8:	14f8b589 	.word	0x14f8b589

080052fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005308:	e049      	b.n	800539e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	2b10      	cmp	r3, #16
 8005316:	d119      	bne.n	800534c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0210 	mvn.w	r2, #16
 8005320:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e030      	b.n	80053ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534c:	f7fc ffc0 	bl	80022d0 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	429a      	cmp	r2, r3
 800535a:	d302      	bcc.n	8005362 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d11d      	bne.n	800539e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800536c:	2b40      	cmp	r3, #64	@ 0x40
 800536e:	d016      	beq.n	800539e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2220      	movs	r2, #32
 800537a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538a:	f043 0220 	orr.w	r2, r3, #32
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e007      	b.n	80053ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a8:	2b40      	cmp	r3, #64	@ 0x40
 80053aa:	d1ae      	bne.n	800530a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053cc:	d11b      	bne.n	8005406 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f2:	f043 0204 	orr.w	r2, r3, #4
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005420:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005424:	d103      	bne.n	800542e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800542c:	e007      	b.n	800543e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005432:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005436:	d102      	bne.n	800543e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2208      	movs	r2, #8
 800543c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e267      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d075      	beq.n	8005556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800546a:	4b88      	ldr	r3, [pc, #544]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 030c 	and.w	r3, r3, #12
 8005472:	2b04      	cmp	r3, #4
 8005474:	d00c      	beq.n	8005490 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005476:	4b85      	ldr	r3, [pc, #532]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800547e:	2b08      	cmp	r3, #8
 8005480:	d112      	bne.n	80054a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005482:	4b82      	ldr	r3, [pc, #520]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800548a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800548e:	d10b      	bne.n	80054a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005490:	4b7e      	ldr	r3, [pc, #504]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d05b      	beq.n	8005554 <HAL_RCC_OscConfig+0x108>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d157      	bne.n	8005554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e242      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054b0:	d106      	bne.n	80054c0 <HAL_RCC_OscConfig+0x74>
 80054b2:	4b76      	ldr	r3, [pc, #472]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a75      	ldr	r2, [pc, #468]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 80054b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	e01d      	b.n	80054fc <HAL_RCC_OscConfig+0xb0>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054c8:	d10c      	bne.n	80054e4 <HAL_RCC_OscConfig+0x98>
 80054ca:	4b70      	ldr	r3, [pc, #448]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a6f      	ldr	r2, [pc, #444]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 80054d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	4b6d      	ldr	r3, [pc, #436]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a6c      	ldr	r2, [pc, #432]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 80054dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	e00b      	b.n	80054fc <HAL_RCC_OscConfig+0xb0>
 80054e4:	4b69      	ldr	r3, [pc, #420]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a68      	ldr	r2, [pc, #416]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 80054ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	4b66      	ldr	r3, [pc, #408]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a65      	ldr	r2, [pc, #404]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 80054f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d013      	beq.n	800552c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005504:	f7fc fee4 	bl	80022d0 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800550c:	f7fc fee0 	bl	80022d0 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b64      	cmp	r3, #100	@ 0x64
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e207      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551e:	4b5b      	ldr	r3, [pc, #364]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0f0      	beq.n	800550c <HAL_RCC_OscConfig+0xc0>
 800552a:	e014      	b.n	8005556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552c:	f7fc fed0 	bl	80022d0 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005534:	f7fc fecc 	bl	80022d0 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b64      	cmp	r3, #100	@ 0x64
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e1f3      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005546:	4b51      	ldr	r3, [pc, #324]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f0      	bne.n	8005534 <HAL_RCC_OscConfig+0xe8>
 8005552:	e000      	b.n	8005556 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d063      	beq.n	800562a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005562:	4b4a      	ldr	r3, [pc, #296]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 030c 	and.w	r3, r3, #12
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800556e:	4b47      	ldr	r3, [pc, #284]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005576:	2b08      	cmp	r3, #8
 8005578:	d11c      	bne.n	80055b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800557a:	4b44      	ldr	r3, [pc, #272]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d116      	bne.n	80055b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005586:	4b41      	ldr	r3, [pc, #260]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d005      	beq.n	800559e <HAL_RCC_OscConfig+0x152>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d001      	beq.n	800559e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e1c7      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800559e:	4b3b      	ldr	r3, [pc, #236]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	4937      	ldr	r1, [pc, #220]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055b2:	e03a      	b.n	800562a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d020      	beq.n	80055fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055bc:	4b34      	ldr	r3, [pc, #208]	@ (8005690 <HAL_RCC_OscConfig+0x244>)
 80055be:	2201      	movs	r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c2:	f7fc fe85 	bl	80022d0 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055c8:	e008      	b.n	80055dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ca:	f7fc fe81 	bl	80022d0 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e1a8      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055dc:	4b2b      	ldr	r3, [pc, #172]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0f0      	beq.n	80055ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e8:	4b28      	ldr	r3, [pc, #160]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	4925      	ldr	r1, [pc, #148]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	600b      	str	r3, [r1, #0]
 80055fc:	e015      	b.n	800562a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055fe:	4b24      	ldr	r3, [pc, #144]	@ (8005690 <HAL_RCC_OscConfig+0x244>)
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fc fe64 	bl	80022d0 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800560c:	f7fc fe60 	bl	80022d0 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e187      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800561e:	4b1b      	ldr	r3, [pc, #108]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b00      	cmp	r3, #0
 8005634:	d036      	beq.n	80056a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d016      	beq.n	800566c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800563e:	4b15      	ldr	r3, [pc, #84]	@ (8005694 <HAL_RCC_OscConfig+0x248>)
 8005640:	2201      	movs	r2, #1
 8005642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005644:	f7fc fe44 	bl	80022d0 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800564c:	f7fc fe40 	bl	80022d0 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e167      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800565e:	4b0b      	ldr	r3, [pc, #44]	@ (800568c <HAL_RCC_OscConfig+0x240>)
 8005660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0f0      	beq.n	800564c <HAL_RCC_OscConfig+0x200>
 800566a:	e01b      	b.n	80056a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800566c:	4b09      	ldr	r3, [pc, #36]	@ (8005694 <HAL_RCC_OscConfig+0x248>)
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005672:	f7fc fe2d 	bl	80022d0 <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005678:	e00e      	b.n	8005698 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800567a:	f7fc fe29 	bl	80022d0 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d907      	bls.n	8005698 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e150      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
 800568c:	40023800 	.word	0x40023800
 8005690:	42470000 	.word	0x42470000
 8005694:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005698:	4b88      	ldr	r3, [pc, #544]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 800569a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1ea      	bne.n	800567a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8097 	beq.w	80057e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056b2:	2300      	movs	r3, #0
 80056b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056b6:	4b81      	ldr	r3, [pc, #516]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10f      	bne.n	80056e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c2:	2300      	movs	r3, #0
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	4b7d      	ldr	r3, [pc, #500]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 80056c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ca:	4a7c      	ldr	r2, [pc, #496]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 80056cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80056d2:	4b7a      	ldr	r3, [pc, #488]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056da:	60bb      	str	r3, [r7, #8]
 80056dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056de:	2301      	movs	r3, #1
 80056e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e2:	4b77      	ldr	r3, [pc, #476]	@ (80058c0 <HAL_RCC_OscConfig+0x474>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d118      	bne.n	8005720 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ee:	4b74      	ldr	r3, [pc, #464]	@ (80058c0 <HAL_RCC_OscConfig+0x474>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a73      	ldr	r2, [pc, #460]	@ (80058c0 <HAL_RCC_OscConfig+0x474>)
 80056f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056fa:	f7fc fde9 	bl	80022d0 <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005702:	f7fc fde5 	bl	80022d0 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e10c      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005714:	4b6a      	ldr	r3, [pc, #424]	@ (80058c0 <HAL_RCC_OscConfig+0x474>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0f0      	beq.n	8005702 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d106      	bne.n	8005736 <HAL_RCC_OscConfig+0x2ea>
 8005728:	4b64      	ldr	r3, [pc, #400]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 800572a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800572c:	4a63      	ldr	r2, [pc, #396]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	6713      	str	r3, [r2, #112]	@ 0x70
 8005734:	e01c      	b.n	8005770 <HAL_RCC_OscConfig+0x324>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2b05      	cmp	r3, #5
 800573c:	d10c      	bne.n	8005758 <HAL_RCC_OscConfig+0x30c>
 800573e:	4b5f      	ldr	r3, [pc, #380]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 8005740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005742:	4a5e      	ldr	r2, [pc, #376]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 8005744:	f043 0304 	orr.w	r3, r3, #4
 8005748:	6713      	str	r3, [r2, #112]	@ 0x70
 800574a:	4b5c      	ldr	r3, [pc, #368]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800574e:	4a5b      	ldr	r2, [pc, #364]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	6713      	str	r3, [r2, #112]	@ 0x70
 8005756:	e00b      	b.n	8005770 <HAL_RCC_OscConfig+0x324>
 8005758:	4b58      	ldr	r3, [pc, #352]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 800575a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800575c:	4a57      	ldr	r2, [pc, #348]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	6713      	str	r3, [r2, #112]	@ 0x70
 8005764:	4b55      	ldr	r3, [pc, #340]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005768:	4a54      	ldr	r2, [pc, #336]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 800576a:	f023 0304 	bic.w	r3, r3, #4
 800576e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d015      	beq.n	80057a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005778:	f7fc fdaa 	bl	80022d0 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800577e:	e00a      	b.n	8005796 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005780:	f7fc fda6 	bl	80022d0 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800578e:	4293      	cmp	r3, r2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e0cb      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005796:	4b49      	ldr	r3, [pc, #292]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 8005798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0ee      	beq.n	8005780 <HAL_RCC_OscConfig+0x334>
 80057a2:	e014      	b.n	80057ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057a4:	f7fc fd94 	bl	80022d0 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057aa:	e00a      	b.n	80057c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ac:	f7fc fd90 	bl	80022d0 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e0b5      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057c2:	4b3e      	ldr	r3, [pc, #248]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 80057c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1ee      	bne.n	80057ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d105      	bne.n	80057e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057d4:	4b39      	ldr	r3, [pc, #228]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 80057d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d8:	4a38      	ldr	r2, [pc, #224]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 80057da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80a1 	beq.w	800592c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057ea:	4b34      	ldr	r3, [pc, #208]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 030c 	and.w	r3, r3, #12
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d05c      	beq.n	80058b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d141      	bne.n	8005882 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057fe:	4b31      	ldr	r3, [pc, #196]	@ (80058c4 <HAL_RCC_OscConfig+0x478>)
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005804:	f7fc fd64 	bl	80022d0 <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580c:	f7fc fd60 	bl	80022d0 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e087      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800581e:	4b27      	ldr	r3, [pc, #156]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1f0      	bne.n	800580c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69da      	ldr	r2, [r3, #28]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005838:	019b      	lsls	r3, r3, #6
 800583a:	431a      	orrs	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005840:	085b      	lsrs	r3, r3, #1
 8005842:	3b01      	subs	r3, #1
 8005844:	041b      	lsls	r3, r3, #16
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584c:	061b      	lsls	r3, r3, #24
 800584e:	491b      	ldr	r1, [pc, #108]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 8005850:	4313      	orrs	r3, r2
 8005852:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005854:	4b1b      	ldr	r3, [pc, #108]	@ (80058c4 <HAL_RCC_OscConfig+0x478>)
 8005856:	2201      	movs	r2, #1
 8005858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585a:	f7fc fd39 	bl	80022d0 <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005860:	e008      	b.n	8005874 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005862:	f7fc fd35 	bl	80022d0 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e05c      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005874:	4b11      	ldr	r3, [pc, #68]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0f0      	beq.n	8005862 <HAL_RCC_OscConfig+0x416>
 8005880:	e054      	b.n	800592c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005882:	4b10      	ldr	r3, [pc, #64]	@ (80058c4 <HAL_RCC_OscConfig+0x478>)
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005888:	f7fc fd22 	bl	80022d0 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005890:	f7fc fd1e 	bl	80022d0 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e045      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a2:	4b06      	ldr	r3, [pc, #24]	@ (80058bc <HAL_RCC_OscConfig+0x470>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x444>
 80058ae:	e03d      	b.n	800592c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d107      	bne.n	80058c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e038      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
 80058bc:	40023800 	.word	0x40023800
 80058c0:	40007000 	.word	0x40007000
 80058c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005938 <HAL_RCC_OscConfig+0x4ec>)
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d028      	beq.n	8005928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d121      	bne.n	8005928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d11a      	bne.n	8005928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80058f8:	4013      	ands	r3, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005900:	4293      	cmp	r3, r2
 8005902:	d111      	bne.n	8005928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590e:	085b      	lsrs	r3, r3, #1
 8005910:	3b01      	subs	r3, #1
 8005912:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005914:	429a      	cmp	r2, r3
 8005916:	d107      	bne.n	8005928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005922:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005924:	429a      	cmp	r2, r3
 8005926:	d001      	beq.n	800592c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	40023800 	.word	0x40023800

0800593c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e0cc      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005950:	4b68      	ldr	r3, [pc, #416]	@ (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d90c      	bls.n	8005978 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595e:	4b65      	ldr	r3, [pc, #404]	@ (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005966:	4b63      	ldr	r3, [pc, #396]	@ (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d001      	beq.n	8005978 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0b8      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d020      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d005      	beq.n	800599c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005990:	4b59      	ldr	r3, [pc, #356]	@ (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	4a58      	ldr	r2, [pc, #352]	@ (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005996:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800599a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0308 	and.w	r3, r3, #8
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059a8:	4b53      	ldr	r3, [pc, #332]	@ (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	4a52      	ldr	r2, [pc, #328]	@ (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80059b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059b4:	4b50      	ldr	r3, [pc, #320]	@ (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	494d      	ldr	r1, [pc, #308]	@ (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d044      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d107      	bne.n	80059ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059da:	4b47      	ldr	r3, [pc, #284]	@ (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d119      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e07f      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d003      	beq.n	80059fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d107      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059fa:	4b3f      	ldr	r3, [pc, #252]	@ (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d109      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e06f      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e067      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a1a:	4b37      	ldr	r3, [pc, #220]	@ (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f023 0203 	bic.w	r2, r3, #3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	4934      	ldr	r1, [pc, #208]	@ (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a2c:	f7fc fc50 	bl	80022d0 <HAL_GetTick>
 8005a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a32:	e00a      	b.n	8005a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a34:	f7fc fc4c 	bl	80022d0 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e04f      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 020c 	and.w	r2, r3, #12
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d1eb      	bne.n	8005a34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a5c:	4b25      	ldr	r3, [pc, #148]	@ (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d20c      	bcs.n	8005a84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a6a:	4b22      	ldr	r3, [pc, #136]	@ (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a72:	4b20      	ldr	r3, [pc, #128]	@ (8005af4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d001      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e032      	b.n	8005aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d008      	beq.n	8005aa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a90:	4b19      	ldr	r3, [pc, #100]	@ (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	4916      	ldr	r1, [pc, #88]	@ (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d009      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aae:	4b12      	ldr	r3, [pc, #72]	@ (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	490e      	ldr	r1, [pc, #56]	@ (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ac2:	f000 f821 	bl	8005b08 <HAL_RCC_GetSysClockFreq>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8005af8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	091b      	lsrs	r3, r3, #4
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	490a      	ldr	r1, [pc, #40]	@ (8005afc <HAL_RCC_ClockConfig+0x1c0>)
 8005ad4:	5ccb      	ldrb	r3, [r1, r3]
 8005ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8005ada:	4a09      	ldr	r2, [pc, #36]	@ (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 8005adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005ade:	4b09      	ldr	r3, [pc, #36]	@ (8005b04 <HAL_RCC_ClockConfig+0x1c8>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fc fbb0 	bl	8002248 <HAL_InitTick>

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40023c00 	.word	0x40023c00
 8005af8:	40023800 	.word	0x40023800
 8005afc:	080089a0 	.word	0x080089a0
 8005b00:	20000000 	.word	0x20000000
 8005b04:	20000004 	.word	0x20000004

08005b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b0c:	b090      	sub	sp, #64	@ 0x40
 8005b0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b20:	4b59      	ldr	r3, [pc, #356]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 030c 	and.w	r3, r3, #12
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d00d      	beq.n	8005b48 <HAL_RCC_GetSysClockFreq+0x40>
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	f200 80a1 	bhi.w	8005c74 <HAL_RCC_GetSysClockFreq+0x16c>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <HAL_RCC_GetSysClockFreq+0x34>
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d003      	beq.n	8005b42 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b3a:	e09b      	b.n	8005c74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b3c:	4b53      	ldr	r3, [pc, #332]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0x184>)
 8005b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b40:	e09b      	b.n	8005c7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b42:	4b53      	ldr	r3, [pc, #332]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b46:	e098      	b.n	8005c7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b48:	4b4f      	ldr	r3, [pc, #316]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b50:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b52:	4b4d      	ldr	r3, [pc, #308]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d028      	beq.n	8005bb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b5e:	4b4a      	ldr	r3, [pc, #296]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	099b      	lsrs	r3, r3, #6
 8005b64:	2200      	movs	r2, #0
 8005b66:	623b      	str	r3, [r7, #32]
 8005b68:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b70:	2100      	movs	r1, #0
 8005b72:	4b47      	ldr	r3, [pc, #284]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b74:	fb03 f201 	mul.w	r2, r3, r1
 8005b78:	2300      	movs	r3, #0
 8005b7a:	fb00 f303 	mul.w	r3, r0, r3
 8005b7e:	4413      	add	r3, r2
 8005b80:	4a43      	ldr	r2, [pc, #268]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b82:	fba0 1202 	umull	r1, r2, r0, r2
 8005b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b88:	460a      	mov	r2, r1
 8005b8a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005b8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b8e:	4413      	add	r3, r2
 8005b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b94:	2200      	movs	r2, #0
 8005b96:	61bb      	str	r3, [r7, #24]
 8005b98:	61fa      	str	r2, [r7, #28]
 8005b9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005ba2:	f7fa ffcd 	bl	8000b40 <__aeabi_uldivmod>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4613      	mov	r3, r2
 8005bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bae:	e053      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bb0:	4b35      	ldr	r3, [pc, #212]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	099b      	lsrs	r3, r3, #6
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	613b      	str	r3, [r7, #16]
 8005bba:	617a      	str	r2, [r7, #20]
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005bc2:	f04f 0b00 	mov.w	fp, #0
 8005bc6:	4652      	mov	r2, sl
 8005bc8:	465b      	mov	r3, fp
 8005bca:	f04f 0000 	mov.w	r0, #0
 8005bce:	f04f 0100 	mov.w	r1, #0
 8005bd2:	0159      	lsls	r1, r3, #5
 8005bd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bd8:	0150      	lsls	r0, r2, #5
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	ebb2 080a 	subs.w	r8, r2, sl
 8005be2:	eb63 090b 	sbc.w	r9, r3, fp
 8005be6:	f04f 0200 	mov.w	r2, #0
 8005bea:	f04f 0300 	mov.w	r3, #0
 8005bee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005bf2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005bf6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005bfa:	ebb2 0408 	subs.w	r4, r2, r8
 8005bfe:	eb63 0509 	sbc.w	r5, r3, r9
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	f04f 0300 	mov.w	r3, #0
 8005c0a:	00eb      	lsls	r3, r5, #3
 8005c0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c10:	00e2      	lsls	r2, r4, #3
 8005c12:	4614      	mov	r4, r2
 8005c14:	461d      	mov	r5, r3
 8005c16:	eb14 030a 	adds.w	r3, r4, sl
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	eb45 030b 	adc.w	r3, r5, fp
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c2e:	4629      	mov	r1, r5
 8005c30:	028b      	lsls	r3, r1, #10
 8005c32:	4621      	mov	r1, r4
 8005c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c38:	4621      	mov	r1, r4
 8005c3a:	028a      	lsls	r2, r1, #10
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c42:	2200      	movs	r2, #0
 8005c44:	60bb      	str	r3, [r7, #8]
 8005c46:	60fa      	str	r2, [r7, #12]
 8005c48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c4c:	f7fa ff78 	bl	8000b40 <__aeabi_uldivmod>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4613      	mov	r3, r2
 8005c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c58:	4b0b      	ldr	r3, [pc, #44]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	0c1b      	lsrs	r3, r3, #16
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	3301      	adds	r3, #1
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005c68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c72:	e002      	b.n	8005c7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c74:	4b05      	ldr	r3, [pc, #20]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0x184>)
 8005c76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3740      	adds	r7, #64	@ 0x40
 8005c80:	46bd      	mov	sp, r7
 8005c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c86:	bf00      	nop
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	00f42400 	.word	0x00f42400
 8005c90:	017d7840 	.word	0x017d7840

08005c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c98:	4b03      	ldr	r3, [pc, #12]	@ (8005ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	20000000 	.word	0x20000000

08005cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cb0:	f7ff fff0 	bl	8005c94 <HAL_RCC_GetHCLKFreq>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	4b05      	ldr	r3, [pc, #20]	@ (8005ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	0a9b      	lsrs	r3, r3, #10
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	4903      	ldr	r1, [pc, #12]	@ (8005cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cc2:	5ccb      	ldrb	r3, [r1, r3]
 8005cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	080089b0 	.word	0x080089b0

08005cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cd8:	f7ff ffdc 	bl	8005c94 <HAL_RCC_GetHCLKFreq>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	4b05      	ldr	r3, [pc, #20]	@ (8005cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	0b5b      	lsrs	r3, r3, #13
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	4903      	ldr	r1, [pc, #12]	@ (8005cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cea:	5ccb      	ldrb	r3, [r1, r3]
 8005cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	080089b0 	.word	0x080089b0

08005cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e041      	b.n	8005d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fc f858 	bl	8001dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3304      	adds	r3, #4
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	f000 fbb2 	bl	80064a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d001      	beq.n	8005db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e04e      	b.n	8005e52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a23      	ldr	r2, [pc, #140]	@ (8005e60 <HAL_TIM_Base_Start_IT+0xc4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d022      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x80>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dde:	d01d      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x80>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a1f      	ldr	r2, [pc, #124]	@ (8005e64 <HAL_TIM_Base_Start_IT+0xc8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d018      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x80>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a1e      	ldr	r2, [pc, #120]	@ (8005e68 <HAL_TIM_Base_Start_IT+0xcc>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d013      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x80>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a1c      	ldr	r2, [pc, #112]	@ (8005e6c <HAL_TIM_Base_Start_IT+0xd0>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00e      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x80>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a1b      	ldr	r2, [pc, #108]	@ (8005e70 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d009      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x80>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a19      	ldr	r2, [pc, #100]	@ (8005e74 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d004      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x80>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a18      	ldr	r2, [pc, #96]	@ (8005e78 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d111      	bne.n	8005e40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b06      	cmp	r3, #6
 8005e2c:	d010      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0201 	orr.w	r2, r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e3e:	e007      	b.n	8005e50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0201 	orr.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40010000 	.word	0x40010000
 8005e64:	40000400 	.word	0x40000400
 8005e68:	40000800 	.word	0x40000800
 8005e6c:	40000c00 	.word	0x40000c00
 8005e70:	40010400 	.word	0x40010400
 8005e74:	40014000 	.word	0x40014000
 8005e78:	40001800 	.word	0x40001800

08005e7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e097      	b.n	8005fc0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d106      	bne.n	8005eaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7fb ffcd 	bl	8001e44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2202      	movs	r2, #2
 8005eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6812      	ldr	r2, [r2, #0]
 8005ebc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ec0:	f023 0307 	bic.w	r3, r3, #7
 8005ec4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	f000 fae7 	bl	80064a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005f1c:	f023 030c 	bic.w	r3, r3, #12
 8005f20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	021b      	lsls	r3, r3, #8
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	011a      	lsls	r2, r3, #4
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	031b      	lsls	r3, r3, #12
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005f5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005f62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005fe0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fe8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005ff0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d110      	bne.n	800601a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d102      	bne.n	8006004 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ffe:	7b7b      	ldrb	r3, [r7, #13]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d001      	beq.n	8006008 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e069      	b.n	80060dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006018:	e031      	b.n	800607e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b04      	cmp	r3, #4
 800601e:	d110      	bne.n	8006042 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006020:	7bbb      	ldrb	r3, [r7, #14]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d102      	bne.n	800602c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006026:	7b3b      	ldrb	r3, [r7, #12]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d001      	beq.n	8006030 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e055      	b.n	80060dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006040:	e01d      	b.n	800607e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006042:	7bfb      	ldrb	r3, [r7, #15]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d108      	bne.n	800605a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006048:	7bbb      	ldrb	r3, [r7, #14]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d105      	bne.n	800605a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800604e:	7b7b      	ldrb	r3, [r7, #13]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d102      	bne.n	800605a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006054:	7b3b      	ldrb	r3, [r7, #12]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d001      	beq.n	800605e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e03e      	b.n	80060dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2202      	movs	r2, #2
 8006062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2202      	movs	r2, #2
 800606a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2202      	movs	r2, #2
 8006072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2202      	movs	r2, #2
 800607a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d003      	beq.n	800608c <HAL_TIM_Encoder_Start+0xc4>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b04      	cmp	r3, #4
 8006088:	d008      	beq.n	800609c <HAL_TIM_Encoder_Start+0xd4>
 800608a:	e00f      	b.n	80060ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2201      	movs	r2, #1
 8006092:	2100      	movs	r1, #0
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fb4b 	bl	8006730 <TIM_CCxChannelCmd>
      break;
 800609a:	e016      	b.n	80060ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2201      	movs	r2, #1
 80060a2:	2104      	movs	r1, #4
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 fb43 	bl	8006730 <TIM_CCxChannelCmd>
      break;
 80060aa:	e00e      	b.n	80060ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2201      	movs	r2, #1
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 fb3b 	bl	8006730 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2201      	movs	r2, #1
 80060c0:	2104      	movs	r1, #4
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fb34 	bl	8006730 <TIM_CCxChannelCmd>
      break;
 80060c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0201 	orr.w	r2, r2, #1
 80060d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d020      	beq.n	8006148 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d01b      	beq.n	8006148 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0202 	mvn.w	r2, #2
 8006118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f999 	bl	8006466 <HAL_TIM_IC_CaptureCallback>
 8006134:	e005      	b.n	8006142 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f98b 	bl	8006452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f99c 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b00      	cmp	r3, #0
 8006150:	d020      	beq.n	8006194 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01b      	beq.n	8006194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0204 	mvn.w	r2, #4
 8006164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2202      	movs	r2, #2
 800616a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f973 	bl	8006466 <HAL_TIM_IC_CaptureCallback>
 8006180:	e005      	b.n	800618e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f965 	bl	8006452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f976 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b00      	cmp	r3, #0
 800619c:	d020      	beq.n	80061e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01b      	beq.n	80061e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0208 	mvn.w	r2, #8
 80061b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2204      	movs	r2, #4
 80061b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f94d 	bl	8006466 <HAL_TIM_IC_CaptureCallback>
 80061cc:	e005      	b.n	80061da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f93f 	bl	8006452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f950 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f003 0310 	and.w	r3, r3, #16
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d020      	beq.n	800622c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f003 0310 	and.w	r3, r3, #16
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01b      	beq.n	800622c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0210 	mvn.w	r2, #16
 80061fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2208      	movs	r2, #8
 8006202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f927 	bl	8006466 <HAL_TIM_IC_CaptureCallback>
 8006218:	e005      	b.n	8006226 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f919 	bl	8006452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f92a 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00c      	beq.n	8006250 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d007      	beq.n	8006250 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f06f 0201 	mvn.w	r2, #1
 8006248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fb fa6c 	bl	8001728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00c      	beq.n	8006274 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006260:	2b00      	cmp	r3, #0
 8006262:	d007      	beq.n	8006274 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800626c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fb0a 	bl	8006888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00c      	beq.n	8006298 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	d007      	beq.n	8006298 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f8fb 	bl	800648e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00c      	beq.n	80062bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f003 0320 	and.w	r3, r3, #32
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f06f 0220 	mvn.w	r2, #32
 80062b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fadc 	bl	8006874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062bc:	bf00      	nop
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d101      	bne.n	80062e0 <HAL_TIM_ConfigClockSource+0x1c>
 80062dc:	2302      	movs	r3, #2
 80062de:	e0b4      	b.n	800644a <HAL_TIM_ConfigClockSource+0x186>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006318:	d03e      	beq.n	8006398 <HAL_TIM_ConfigClockSource+0xd4>
 800631a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800631e:	f200 8087 	bhi.w	8006430 <HAL_TIM_ConfigClockSource+0x16c>
 8006322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006326:	f000 8086 	beq.w	8006436 <HAL_TIM_ConfigClockSource+0x172>
 800632a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800632e:	d87f      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x16c>
 8006330:	2b70      	cmp	r3, #112	@ 0x70
 8006332:	d01a      	beq.n	800636a <HAL_TIM_ConfigClockSource+0xa6>
 8006334:	2b70      	cmp	r3, #112	@ 0x70
 8006336:	d87b      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x16c>
 8006338:	2b60      	cmp	r3, #96	@ 0x60
 800633a:	d050      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x11a>
 800633c:	2b60      	cmp	r3, #96	@ 0x60
 800633e:	d877      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x16c>
 8006340:	2b50      	cmp	r3, #80	@ 0x50
 8006342:	d03c      	beq.n	80063be <HAL_TIM_ConfigClockSource+0xfa>
 8006344:	2b50      	cmp	r3, #80	@ 0x50
 8006346:	d873      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x16c>
 8006348:	2b40      	cmp	r3, #64	@ 0x40
 800634a:	d058      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x13a>
 800634c:	2b40      	cmp	r3, #64	@ 0x40
 800634e:	d86f      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x16c>
 8006350:	2b30      	cmp	r3, #48	@ 0x30
 8006352:	d064      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x15a>
 8006354:	2b30      	cmp	r3, #48	@ 0x30
 8006356:	d86b      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x16c>
 8006358:	2b20      	cmp	r3, #32
 800635a:	d060      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x15a>
 800635c:	2b20      	cmp	r3, #32
 800635e:	d867      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x16c>
 8006360:	2b00      	cmp	r3, #0
 8006362:	d05c      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x15a>
 8006364:	2b10      	cmp	r3, #16
 8006366:	d05a      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x15a>
 8006368:	e062      	b.n	8006430 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800637a:	f000 f9b9 	bl	80066f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800638c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	609a      	str	r2, [r3, #8]
      break;
 8006396:	e04f      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063a8:	f000 f9a2 	bl	80066f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063ba:	609a      	str	r2, [r3, #8]
      break;
 80063bc:	e03c      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ca:	461a      	mov	r2, r3
 80063cc:	f000 f916 	bl	80065fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2150      	movs	r1, #80	@ 0x50
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 f96f 	bl	80066ba <TIM_ITRx_SetConfig>
      break;
 80063dc:	e02c      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ea:	461a      	mov	r2, r3
 80063ec:	f000 f935 	bl	800665a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2160      	movs	r1, #96	@ 0x60
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 f95f 	bl	80066ba <TIM_ITRx_SetConfig>
      break;
 80063fc:	e01c      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800640a:	461a      	mov	r2, r3
 800640c:	f000 f8f6 	bl	80065fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2140      	movs	r1, #64	@ 0x40
 8006416:	4618      	mov	r0, r3
 8006418:	f000 f94f 	bl	80066ba <TIM_ITRx_SetConfig>
      break;
 800641c:	e00c      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4619      	mov	r1, r3
 8006428:	4610      	mov	r0, r2
 800642a:	f000 f946 	bl	80066ba <TIM_ITRx_SetConfig>
      break;
 800642e:	e003      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	73fb      	strb	r3, [r7, #15]
      break;
 8006434:	e000      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006448:	7bfb      	ldrb	r3, [r7, #15]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
	...

080064a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a46      	ldr	r2, [pc, #280]	@ (80065d0 <TIM_Base_SetConfig+0x12c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d013      	beq.n	80064e4 <TIM_Base_SetConfig+0x40>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064c2:	d00f      	beq.n	80064e4 <TIM_Base_SetConfig+0x40>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a43      	ldr	r2, [pc, #268]	@ (80065d4 <TIM_Base_SetConfig+0x130>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00b      	beq.n	80064e4 <TIM_Base_SetConfig+0x40>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a42      	ldr	r2, [pc, #264]	@ (80065d8 <TIM_Base_SetConfig+0x134>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d007      	beq.n	80064e4 <TIM_Base_SetConfig+0x40>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a41      	ldr	r2, [pc, #260]	@ (80065dc <TIM_Base_SetConfig+0x138>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d003      	beq.n	80064e4 <TIM_Base_SetConfig+0x40>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a40      	ldr	r2, [pc, #256]	@ (80065e0 <TIM_Base_SetConfig+0x13c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d108      	bne.n	80064f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a35      	ldr	r2, [pc, #212]	@ (80065d0 <TIM_Base_SetConfig+0x12c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d02b      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006504:	d027      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a32      	ldr	r2, [pc, #200]	@ (80065d4 <TIM_Base_SetConfig+0x130>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d023      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a31      	ldr	r2, [pc, #196]	@ (80065d8 <TIM_Base_SetConfig+0x134>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d01f      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a30      	ldr	r2, [pc, #192]	@ (80065dc <TIM_Base_SetConfig+0x138>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d01b      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a2f      	ldr	r2, [pc, #188]	@ (80065e0 <TIM_Base_SetConfig+0x13c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d017      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a2e      	ldr	r2, [pc, #184]	@ (80065e4 <TIM_Base_SetConfig+0x140>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d013      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a2d      	ldr	r2, [pc, #180]	@ (80065e8 <TIM_Base_SetConfig+0x144>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00f      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a2c      	ldr	r2, [pc, #176]	@ (80065ec <TIM_Base_SetConfig+0x148>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00b      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a2b      	ldr	r2, [pc, #172]	@ (80065f0 <TIM_Base_SetConfig+0x14c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d007      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a2a      	ldr	r2, [pc, #168]	@ (80065f4 <TIM_Base_SetConfig+0x150>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d003      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a29      	ldr	r2, [pc, #164]	@ (80065f8 <TIM_Base_SetConfig+0x154>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d108      	bne.n	8006568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800655c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a10      	ldr	r2, [pc, #64]	@ (80065d0 <TIM_Base_SetConfig+0x12c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d003      	beq.n	800659c <TIM_Base_SetConfig+0xf8>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a12      	ldr	r2, [pc, #72]	@ (80065e0 <TIM_Base_SetConfig+0x13c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d103      	bne.n	80065a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d105      	bne.n	80065c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f023 0201 	bic.w	r2, r3, #1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	611a      	str	r2, [r3, #16]
  }
}
 80065c2:	bf00      	nop
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40010000 	.word	0x40010000
 80065d4:	40000400 	.word	0x40000400
 80065d8:	40000800 	.word	0x40000800
 80065dc:	40000c00 	.word	0x40000c00
 80065e0:	40010400 	.word	0x40010400
 80065e4:	40014000 	.word	0x40014000
 80065e8:	40014400 	.word	0x40014400
 80065ec:	40014800 	.word	0x40014800
 80065f0:	40001800 	.word	0x40001800
 80065f4:	40001c00 	.word	0x40001c00
 80065f8:	40002000 	.word	0x40002000

080065fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	f023 0201 	bic.w	r2, r3, #1
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f023 030a 	bic.w	r3, r3, #10
 8006638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	621a      	str	r2, [r3, #32]
}
 800664e:	bf00      	nop
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800665a:	b480      	push	{r7}
 800665c:	b087      	sub	sp, #28
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	f023 0210 	bic.w	r2, r3, #16
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006684:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	031b      	lsls	r3, r3, #12
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	4313      	orrs	r3, r2
 800668e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006696:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	621a      	str	r2, [r3, #32]
}
 80066ae:	bf00      	nop
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b085      	sub	sp, #20
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	f043 0307 	orr.w	r3, r3, #7
 80066dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	609a      	str	r2, [r3, #8]
}
 80066e4:	bf00      	nop
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800670a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	021a      	lsls	r2, r3, #8
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	431a      	orrs	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4313      	orrs	r3, r2
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	4313      	orrs	r3, r2
 800671c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	609a      	str	r2, [r3, #8]
}
 8006724:	bf00      	nop
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f003 031f 	and.w	r3, r3, #31
 8006742:	2201      	movs	r2, #1
 8006744:	fa02 f303 	lsl.w	r3, r2, r3
 8006748:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6a1a      	ldr	r2, [r3, #32]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	43db      	mvns	r3, r3
 8006752:	401a      	ands	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a1a      	ldr	r2, [r3, #32]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	fa01 f303 	lsl.w	r3, r1, r3
 8006768:	431a      	orrs	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
	...

0800677c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800678c:	2b01      	cmp	r3, #1
 800678e:	d101      	bne.n	8006794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006790:	2302      	movs	r3, #2
 8006792:	e05a      	b.n	800684a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2202      	movs	r2, #2
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a21      	ldr	r2, [pc, #132]	@ (8006858 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d022      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e0:	d01d      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a1d      	ldr	r2, [pc, #116]	@ (800685c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d018      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006860 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d013      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006864 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d00e      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a18      	ldr	r2, [pc, #96]	@ (8006868 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d009      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a17      	ldr	r2, [pc, #92]	@ (800686c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d004      	beq.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a15      	ldr	r2, [pc, #84]	@ (8006870 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d10c      	bne.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006824:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	4313      	orrs	r3, r2
 800682e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40010000 	.word	0x40010000
 800685c:	40000400 	.word	0x40000400
 8006860:	40000800 	.word	0x40000800
 8006864:	40000c00 	.word	0x40000c00
 8006868:	40010400 	.word	0x40010400
 800686c:	40014000 	.word	0x40014000
 8006870:	40001800 	.word	0x40001800

08006874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e042      	b.n	8006934 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d106      	bne.n	80068c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7fb fb26 	bl	8001f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2224      	movs	r2, #36	@ 0x24
 80068cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fdbd 	bl	8007460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	691a      	ldr	r2, [r3, #16]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	695a      	ldr	r2, [r3, #20]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2220      	movs	r2, #32
 8006920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08a      	sub	sp, #40	@ 0x28
 8006940:	af02      	add	r7, sp, #8
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	4613      	mov	r3, r2
 800694a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b20      	cmp	r3, #32
 800695a:	d175      	bne.n	8006a48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <HAL_UART_Transmit+0x2c>
 8006962:	88fb      	ldrh	r3, [r7, #6]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e06e      	b.n	8006a4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2221      	movs	r2, #33	@ 0x21
 8006976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800697a:	f7fb fca9 	bl	80022d0 <HAL_GetTick>
 800697e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	88fa      	ldrh	r2, [r7, #6]
 8006984:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	88fa      	ldrh	r2, [r7, #6]
 800698a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006994:	d108      	bne.n	80069a8 <HAL_UART_Transmit+0x6c>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d104      	bne.n	80069a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800699e:	2300      	movs	r3, #0
 80069a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	61bb      	str	r3, [r7, #24]
 80069a6:	e003      	b.n	80069b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069ac:	2300      	movs	r3, #0
 80069ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069b0:	e02e      	b.n	8006a10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2200      	movs	r2, #0
 80069ba:	2180      	movs	r1, #128	@ 0x80
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 fb1f 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d005      	beq.n	80069d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e03a      	b.n	8006a4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10b      	bne.n	80069f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	3302      	adds	r3, #2
 80069ee:	61bb      	str	r3, [r7, #24]
 80069f0:	e007      	b.n	8006a02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	781a      	ldrb	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	3301      	adds	r3, #1
 8006a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1cb      	bne.n	80069b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2200      	movs	r2, #0
 8006a22:	2140      	movs	r1, #64	@ 0x40
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 faeb 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d005      	beq.n	8006a3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e006      	b.n	8006a4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	e000      	b.n	8006a4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006a48:	2302      	movs	r3, #2
  }
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3720      	adds	r7, #32
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	60f8      	str	r0, [r7, #12]
 8006a5a:	60b9      	str	r1, [r7, #8]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b20      	cmp	r3, #32
 8006a6a:	d112      	bne.n	8006a92 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <HAL_UART_Receive_IT+0x26>
 8006a72:	88fb      	ldrh	r3, [r7, #6]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e00b      	b.n	8006a94 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a82:	88fb      	ldrh	r3, [r7, #6]
 8006a84:	461a      	mov	r2, r3
 8006a86:	68b9      	ldr	r1, [r7, #8]
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 fb12 	bl	80070b2 <UART_Start_Receive_IT>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	e000      	b.n	8006a94 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006a92:	2302      	movs	r3, #2
  }
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b0ba      	sub	sp, #232	@ 0xe8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10f      	bne.n	8006b02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d009      	beq.n	8006b02 <HAL_UART_IRQHandler+0x66>
 8006aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fbf2 	bl	80072e4 <UART_Receive_IT>
      return;
 8006b00:	e25b      	b.n	8006fba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 80de 	beq.w	8006cc8 <HAL_UART_IRQHandler+0x22c>
 8006b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d106      	bne.n	8006b26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b1c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 80d1 	beq.w	8006cc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00b      	beq.n	8006b4a <HAL_UART_IRQHandler+0xae>
 8006b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d005      	beq.n	8006b4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b42:	f043 0201 	orr.w	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b4e:	f003 0304 	and.w	r3, r3, #4
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00b      	beq.n	8006b6e <HAL_UART_IRQHandler+0xd2>
 8006b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d005      	beq.n	8006b6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b66:	f043 0202 	orr.w	r2, r3, #2
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00b      	beq.n	8006b92 <HAL_UART_IRQHandler+0xf6>
 8006b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d005      	beq.n	8006b92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b8a:	f043 0204 	orr.w	r2, r3, #4
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d011      	beq.n	8006bc2 <HAL_UART_IRQHandler+0x126>
 8006b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ba2:	f003 0320 	and.w	r3, r3, #32
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d105      	bne.n	8006bb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d005      	beq.n	8006bc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bba:	f043 0208 	orr.w	r2, r3, #8
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 81f2 	beq.w	8006fb0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d008      	beq.n	8006bea <HAL_UART_IRQHandler+0x14e>
 8006bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bdc:	f003 0320 	and.w	r3, r3, #32
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fb7d 	bl	80072e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf4:	2b40      	cmp	r3, #64	@ 0x40
 8006bf6:	bf0c      	ite	eq
 8006bf8:	2301      	moveq	r3, #1
 8006bfa:	2300      	movne	r3, #0
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d103      	bne.n	8006c16 <HAL_UART_IRQHandler+0x17a>
 8006c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d04f      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa85 	bl	8007126 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c26:	2b40      	cmp	r3, #64	@ 0x40
 8006c28:	d141      	bne.n	8006cae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3314      	adds	r3, #20
 8006c30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3314      	adds	r3, #20
 8006c52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1d9      	bne.n	8006c2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d013      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c82:	4a7e      	ldr	r2, [pc, #504]	@ (8006e7c <HAL_UART_IRQHandler+0x3e0>)
 8006c84:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fb fcd1 	bl	8002632 <HAL_DMA_Abort_IT>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d016      	beq.n	8006cc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca4:	e00e      	b.n	8006cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f994 	bl	8006fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cac:	e00a      	b.n	8006cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f990 	bl	8006fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb4:	e006      	b.n	8006cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f98c 	bl	8006fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006cc2:	e175      	b.n	8006fb0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc4:	bf00      	nop
    return;
 8006cc6:	e173      	b.n	8006fb0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	f040 814f 	bne.w	8006f70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cd6:	f003 0310 	and.w	r3, r3, #16
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 8148 	beq.w	8006f70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ce4:	f003 0310 	and.w	r3, r3, #16
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 8141 	beq.w	8006f70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60bb      	str	r3, [r7, #8]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	60bb      	str	r3, [r7, #8]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	60bb      	str	r3, [r7, #8]
 8006d02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d0e:	2b40      	cmp	r3, #64	@ 0x40
 8006d10:	f040 80b6 	bne.w	8006e80 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 8145 	beq.w	8006fb4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d32:	429a      	cmp	r2, r3
 8006d34:	f080 813e 	bcs.w	8006fb4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d4a:	f000 8088 	beq.w	8006e5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	330c      	adds	r3, #12
 8006d54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	330c      	adds	r3, #12
 8006d76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006d7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1d9      	bne.n	8006d4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3314      	adds	r3, #20
 8006da0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006daa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dac:	f023 0301 	bic.w	r3, r3, #1
 8006db0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3314      	adds	r3, #20
 8006dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006dbe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006dc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006dc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006dca:	e841 2300 	strex	r3, r2, [r1]
 8006dce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006dd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1e1      	bne.n	8006d9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3314      	adds	r3, #20
 8006ddc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006de6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006de8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3314      	adds	r3, #20
 8006df6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006dfa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e3      	bne.n	8006dd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	330c      	adds	r3, #12
 8006e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e2e:	f023 0310 	bic.w	r3, r3, #16
 8006e32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	330c      	adds	r3, #12
 8006e3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006e40:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006e42:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e3      	bne.n	8006e1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fb fb7a 	bl	8002552 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2202      	movs	r2, #2
 8006e62:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f8b7 	bl	8006fe8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e7a:	e09b      	b.n	8006fb4 <HAL_UART_IRQHandler+0x518>
 8006e7c:	080071ed 	.word	0x080071ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 808e 	beq.w	8006fb8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006e9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8089 	beq.w	8006fb8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	330c      	adds	r3, #12
 8006eac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb0:	e853 3f00 	ldrex	r3, [r3]
 8006eb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	330c      	adds	r3, #12
 8006ec6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006eca:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ecc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ece:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ed0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ed2:	e841 2300 	strex	r3, r2, [r1]
 8006ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e3      	bne.n	8006ea6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3314      	adds	r3, #20
 8006ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee8:	e853 3f00 	ldrex	r3, [r3]
 8006eec:	623b      	str	r3, [r7, #32]
   return(result);
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	f023 0301 	bic.w	r3, r3, #1
 8006ef4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3314      	adds	r3, #20
 8006efe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f02:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e3      	bne.n	8006ede <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	330c      	adds	r3, #12
 8006f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f023 0310 	bic.w	r3, r3, #16
 8006f3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	330c      	adds	r3, #12
 8006f44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006f48:	61fa      	str	r2, [r7, #28]
 8006f4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	69b9      	ldr	r1, [r7, #24]
 8006f4e:	69fa      	ldr	r2, [r7, #28]
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	617b      	str	r3, [r7, #20]
   return(result);
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e3      	bne.n	8006f24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f83d 	bl	8006fe8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f6e:	e023      	b.n	8006fb8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d009      	beq.n	8006f90 <HAL_UART_IRQHandler+0x4f4>
 8006f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d003      	beq.n	8006f90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f943 	bl	8007214 <UART_Transmit_IT>
    return;
 8006f8e:	e014      	b.n	8006fba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00e      	beq.n	8006fba <HAL_UART_IRQHandler+0x51e>
 8006f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d008      	beq.n	8006fba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f983 	bl	80072b4 <UART_EndTransmit_IT>
    return;
 8006fae:	e004      	b.n	8006fba <HAL_UART_IRQHandler+0x51e>
    return;
 8006fb0:	bf00      	nop
 8006fb2:	e002      	b.n	8006fba <HAL_UART_IRQHandler+0x51e>
      return;
 8006fb4:	bf00      	nop
 8006fb6:	e000      	b.n	8006fba <HAL_UART_IRQHandler+0x51e>
      return;
 8006fb8:	bf00      	nop
  }
}
 8006fba:	37e8      	adds	r7, #232	@ 0xe8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007010:	e03b      	b.n	800708a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007018:	d037      	beq.n	800708a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701a:	f7fb f959 	bl	80022d0 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	6a3a      	ldr	r2, [r7, #32]
 8007026:	429a      	cmp	r2, r3
 8007028:	d302      	bcc.n	8007030 <UART_WaitOnFlagUntilTimeout+0x30>
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e03a      	b.n	80070aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d023      	beq.n	800708a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b80      	cmp	r3, #128	@ 0x80
 8007046:	d020      	beq.n	800708a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b40      	cmp	r3, #64	@ 0x40
 800704c:	d01d      	beq.n	800708a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b08      	cmp	r3, #8
 800705a:	d116      	bne.n	800708a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800705c:	2300      	movs	r3, #0
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 f857 	bl	8007126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2208      	movs	r2, #8
 800707c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e00f      	b.n	80070aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4013      	ands	r3, r2
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	429a      	cmp	r2, r3
 8007098:	bf0c      	ite	eq
 800709a:	2301      	moveq	r3, #1
 800709c:	2300      	movne	r3, #0
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	79fb      	ldrb	r3, [r7, #7]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d0b4      	beq.n	8007012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b085      	sub	sp, #20
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	4613      	mov	r3, r2
 80070be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	88fa      	ldrh	r2, [r7, #6]
 80070ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	88fa      	ldrh	r2, [r7, #6]
 80070d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2222      	movs	r2, #34	@ 0x22
 80070dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d007      	beq.n	80070f8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	695a      	ldr	r2, [r3, #20]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f042 0201 	orr.w	r2, r2, #1
 8007106:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0220 	orr.w	r2, r2, #32
 8007116:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007126:	b480      	push	{r7}
 8007128:	b095      	sub	sp, #84	@ 0x54
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	330c      	adds	r3, #12
 8007134:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800713e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007140:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007144:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	330c      	adds	r3, #12
 800714c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800714e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007150:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007152:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007154:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800715c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1e5      	bne.n	800712e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3314      	adds	r3, #20
 8007168:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	61fb      	str	r3, [r7, #28]
   return(result);
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	f023 0301 	bic.w	r3, r3, #1
 8007178:	64bb      	str	r3, [r7, #72]	@ 0x48
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3314      	adds	r3, #20
 8007180:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007182:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007184:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007188:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800718a:	e841 2300 	strex	r3, r2, [r1]
 800718e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e5      	bne.n	8007162 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719a:	2b01      	cmp	r3, #1
 800719c:	d119      	bne.n	80071d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	330c      	adds	r3, #12
 80071a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	f023 0310 	bic.w	r3, r3, #16
 80071b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	330c      	adds	r3, #12
 80071bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071be:	61ba      	str	r2, [r7, #24]
 80071c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	6979      	ldr	r1, [r7, #20]
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	613b      	str	r3, [r7, #16]
   return(result);
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e5      	bne.n	800719e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80071e0:	bf00      	nop
 80071e2:	3754      	adds	r7, #84	@ 0x54
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f7ff fee4 	bl	8006fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800720c:	bf00      	nop
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b21      	cmp	r3, #33	@ 0x21
 8007226:	d13e      	bne.n	80072a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007230:	d114      	bne.n	800725c <UART_Transmit_IT+0x48>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d110      	bne.n	800725c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800724e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a1b      	ldr	r3, [r3, #32]
 8007254:	1c9a      	adds	r2, r3, #2
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	621a      	str	r2, [r3, #32]
 800725a:	e008      	b.n	800726e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	1c59      	adds	r1, r3, #1
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	6211      	str	r1, [r2, #32]
 8007266:	781a      	ldrb	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007272:	b29b      	uxth	r3, r3
 8007274:	3b01      	subs	r3, #1
 8007276:	b29b      	uxth	r3, r3
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	4619      	mov	r1, r3
 800727c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10f      	bne.n	80072a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007290:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68da      	ldr	r2, [r3, #12]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	e000      	b.n	80072a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072a6:	2302      	movs	r3, #2
  }
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7ff fe73 	bl	8006fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08c      	sub	sp, #48	@ 0x30
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b22      	cmp	r3, #34	@ 0x22
 80072f6:	f040 80ae 	bne.w	8007456 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007302:	d117      	bne.n	8007334 <UART_Receive_IT+0x50>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d113      	bne.n	8007334 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800730c:	2300      	movs	r3, #0
 800730e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007314:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	b29b      	uxth	r3, r3
 800731e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007322:	b29a      	uxth	r2, r3
 8007324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007326:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732c:	1c9a      	adds	r2, r3, #2
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	629a      	str	r2, [r3, #40]	@ 0x28
 8007332:	e026      	b.n	8007382 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007338:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800733a:	2300      	movs	r3, #0
 800733c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007346:	d007      	beq.n	8007358 <UART_Receive_IT+0x74>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10a      	bne.n	8007366 <UART_Receive_IT+0x82>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d106      	bne.n	8007366 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	b2da      	uxtb	r2, r3
 8007360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	e008      	b.n	8007378 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	b2db      	uxtb	r3, r3
 800736e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007372:	b2da      	uxtb	r2, r3
 8007374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007376:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007386:	b29b      	uxth	r3, r3
 8007388:	3b01      	subs	r3, #1
 800738a:	b29b      	uxth	r3, r3
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	4619      	mov	r1, r3
 8007390:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007392:	2b00      	cmp	r3, #0
 8007394:	d15d      	bne.n	8007452 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0220 	bic.w	r2, r2, #32
 80073a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80073b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	695a      	ldr	r2, [r3, #20]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 0201 	bic.w	r2, r2, #1
 80073c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d135      	bne.n	8007448 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	330c      	adds	r3, #12
 80073e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	613b      	str	r3, [r7, #16]
   return(result);
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f023 0310 	bic.w	r3, r3, #16
 80073f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	330c      	adds	r3, #12
 8007400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007402:	623a      	str	r2, [r7, #32]
 8007404:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	69f9      	ldr	r1, [r7, #28]
 8007408:	6a3a      	ldr	r2, [r7, #32]
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e5      	bne.n	80073e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0310 	and.w	r3, r3, #16
 8007420:	2b10      	cmp	r3, #16
 8007422:	d10a      	bne.n	800743a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007424:	2300      	movs	r3, #0
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff fdd1 	bl	8006fe8 <HAL_UARTEx_RxEventCallback>
 8007446:	e002      	b.n	800744e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7fa fb35 	bl	8001ab8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	e002      	b.n	8007458 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	e000      	b.n	8007458 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007456:	2302      	movs	r3, #2
  }
}
 8007458:	4618      	mov	r0, r3
 800745a:	3730      	adds	r7, #48	@ 0x30
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007464:	b0c0      	sub	sp, #256	@ 0x100
 8007466:	af00      	add	r7, sp, #0
 8007468:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800746c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800747c:	68d9      	ldr	r1, [r3, #12]
 800747e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	ea40 0301 	orr.w	r3, r0, r1
 8007488:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800748a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	431a      	orrs	r2, r3
 8007498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	431a      	orrs	r2, r3
 80074a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80074b8:	f021 010c 	bic.w	r1, r1, #12
 80074bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80074c6:	430b      	orrs	r3, r1
 80074c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80074d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074da:	6999      	ldr	r1, [r3, #24]
 80074dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	ea40 0301 	orr.w	r3, r0, r1
 80074e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	4b8f      	ldr	r3, [pc, #572]	@ (800772c <UART_SetConfig+0x2cc>)
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d005      	beq.n	8007500 <UART_SetConfig+0xa0>
 80074f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4b8d      	ldr	r3, [pc, #564]	@ (8007730 <UART_SetConfig+0x2d0>)
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d104      	bne.n	800750a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007500:	f7fe fbe8 	bl	8005cd4 <HAL_RCC_GetPCLK2Freq>
 8007504:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007508:	e003      	b.n	8007512 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800750a:	f7fe fbcf 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 800750e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800751c:	f040 810c 	bne.w	8007738 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007524:	2200      	movs	r2, #0
 8007526:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800752a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800752e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007532:	4622      	mov	r2, r4
 8007534:	462b      	mov	r3, r5
 8007536:	1891      	adds	r1, r2, r2
 8007538:	65b9      	str	r1, [r7, #88]	@ 0x58
 800753a:	415b      	adcs	r3, r3
 800753c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800753e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007542:	4621      	mov	r1, r4
 8007544:	eb12 0801 	adds.w	r8, r2, r1
 8007548:	4629      	mov	r1, r5
 800754a:	eb43 0901 	adc.w	r9, r3, r1
 800754e:	f04f 0200 	mov.w	r2, #0
 8007552:	f04f 0300 	mov.w	r3, #0
 8007556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800755a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800755e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007562:	4690      	mov	r8, r2
 8007564:	4699      	mov	r9, r3
 8007566:	4623      	mov	r3, r4
 8007568:	eb18 0303 	adds.w	r3, r8, r3
 800756c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007570:	462b      	mov	r3, r5
 8007572:	eb49 0303 	adc.w	r3, r9, r3
 8007576:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800757a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007586:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800758a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800758e:	460b      	mov	r3, r1
 8007590:	18db      	adds	r3, r3, r3
 8007592:	653b      	str	r3, [r7, #80]	@ 0x50
 8007594:	4613      	mov	r3, r2
 8007596:	eb42 0303 	adc.w	r3, r2, r3
 800759a:	657b      	str	r3, [r7, #84]	@ 0x54
 800759c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80075a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80075a4:	f7f9 facc 	bl	8000b40 <__aeabi_uldivmod>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4b61      	ldr	r3, [pc, #388]	@ (8007734 <UART_SetConfig+0x2d4>)
 80075ae:	fba3 2302 	umull	r2, r3, r3, r2
 80075b2:	095b      	lsrs	r3, r3, #5
 80075b4:	011c      	lsls	r4, r3, #4
 80075b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80075c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80075c8:	4642      	mov	r2, r8
 80075ca:	464b      	mov	r3, r9
 80075cc:	1891      	adds	r1, r2, r2
 80075ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80075d0:	415b      	adcs	r3, r3
 80075d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80075d8:	4641      	mov	r1, r8
 80075da:	eb12 0a01 	adds.w	sl, r2, r1
 80075de:	4649      	mov	r1, r9
 80075e0:	eb43 0b01 	adc.w	fp, r3, r1
 80075e4:	f04f 0200 	mov.w	r2, #0
 80075e8:	f04f 0300 	mov.w	r3, #0
 80075ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80075f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80075f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075f8:	4692      	mov	sl, r2
 80075fa:	469b      	mov	fp, r3
 80075fc:	4643      	mov	r3, r8
 80075fe:	eb1a 0303 	adds.w	r3, sl, r3
 8007602:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007606:	464b      	mov	r3, r9
 8007608:	eb4b 0303 	adc.w	r3, fp, r3
 800760c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800761c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007620:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007624:	460b      	mov	r3, r1
 8007626:	18db      	adds	r3, r3, r3
 8007628:	643b      	str	r3, [r7, #64]	@ 0x40
 800762a:	4613      	mov	r3, r2
 800762c:	eb42 0303 	adc.w	r3, r2, r3
 8007630:	647b      	str	r3, [r7, #68]	@ 0x44
 8007632:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007636:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800763a:	f7f9 fa81 	bl	8000b40 <__aeabi_uldivmod>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	4611      	mov	r1, r2
 8007644:	4b3b      	ldr	r3, [pc, #236]	@ (8007734 <UART_SetConfig+0x2d4>)
 8007646:	fba3 2301 	umull	r2, r3, r3, r1
 800764a:	095b      	lsrs	r3, r3, #5
 800764c:	2264      	movs	r2, #100	@ 0x64
 800764e:	fb02 f303 	mul.w	r3, r2, r3
 8007652:	1acb      	subs	r3, r1, r3
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800765a:	4b36      	ldr	r3, [pc, #216]	@ (8007734 <UART_SetConfig+0x2d4>)
 800765c:	fba3 2302 	umull	r2, r3, r3, r2
 8007660:	095b      	lsrs	r3, r3, #5
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007668:	441c      	add	r4, r3
 800766a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800766e:	2200      	movs	r2, #0
 8007670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007674:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007678:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800767c:	4642      	mov	r2, r8
 800767e:	464b      	mov	r3, r9
 8007680:	1891      	adds	r1, r2, r2
 8007682:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007684:	415b      	adcs	r3, r3
 8007686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007688:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800768c:	4641      	mov	r1, r8
 800768e:	1851      	adds	r1, r2, r1
 8007690:	6339      	str	r1, [r7, #48]	@ 0x30
 8007692:	4649      	mov	r1, r9
 8007694:	414b      	adcs	r3, r1
 8007696:	637b      	str	r3, [r7, #52]	@ 0x34
 8007698:	f04f 0200 	mov.w	r2, #0
 800769c:	f04f 0300 	mov.w	r3, #0
 80076a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80076a4:	4659      	mov	r1, fp
 80076a6:	00cb      	lsls	r3, r1, #3
 80076a8:	4651      	mov	r1, sl
 80076aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076ae:	4651      	mov	r1, sl
 80076b0:	00ca      	lsls	r2, r1, #3
 80076b2:	4610      	mov	r0, r2
 80076b4:	4619      	mov	r1, r3
 80076b6:	4603      	mov	r3, r0
 80076b8:	4642      	mov	r2, r8
 80076ba:	189b      	adds	r3, r3, r2
 80076bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076c0:	464b      	mov	r3, r9
 80076c2:	460a      	mov	r2, r1
 80076c4:	eb42 0303 	adc.w	r3, r2, r3
 80076c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80076d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80076dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80076e0:	460b      	mov	r3, r1
 80076e2:	18db      	adds	r3, r3, r3
 80076e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076e6:	4613      	mov	r3, r2
 80076e8:	eb42 0303 	adc.w	r3, r2, r3
 80076ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80076f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80076f6:	f7f9 fa23 	bl	8000b40 <__aeabi_uldivmod>
 80076fa:	4602      	mov	r2, r0
 80076fc:	460b      	mov	r3, r1
 80076fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007734 <UART_SetConfig+0x2d4>)
 8007700:	fba3 1302 	umull	r1, r3, r3, r2
 8007704:	095b      	lsrs	r3, r3, #5
 8007706:	2164      	movs	r1, #100	@ 0x64
 8007708:	fb01 f303 	mul.w	r3, r1, r3
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	00db      	lsls	r3, r3, #3
 8007710:	3332      	adds	r3, #50	@ 0x32
 8007712:	4a08      	ldr	r2, [pc, #32]	@ (8007734 <UART_SetConfig+0x2d4>)
 8007714:	fba2 2303 	umull	r2, r3, r2, r3
 8007718:	095b      	lsrs	r3, r3, #5
 800771a:	f003 0207 	and.w	r2, r3, #7
 800771e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4422      	add	r2, r4
 8007726:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007728:	e106      	b.n	8007938 <UART_SetConfig+0x4d8>
 800772a:	bf00      	nop
 800772c:	40011000 	.word	0x40011000
 8007730:	40011400 	.word	0x40011400
 8007734:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800773c:	2200      	movs	r2, #0
 800773e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007742:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007746:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800774a:	4642      	mov	r2, r8
 800774c:	464b      	mov	r3, r9
 800774e:	1891      	adds	r1, r2, r2
 8007750:	6239      	str	r1, [r7, #32]
 8007752:	415b      	adcs	r3, r3
 8007754:	627b      	str	r3, [r7, #36]	@ 0x24
 8007756:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800775a:	4641      	mov	r1, r8
 800775c:	1854      	adds	r4, r2, r1
 800775e:	4649      	mov	r1, r9
 8007760:	eb43 0501 	adc.w	r5, r3, r1
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	f04f 0300 	mov.w	r3, #0
 800776c:	00eb      	lsls	r3, r5, #3
 800776e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007772:	00e2      	lsls	r2, r4, #3
 8007774:	4614      	mov	r4, r2
 8007776:	461d      	mov	r5, r3
 8007778:	4643      	mov	r3, r8
 800777a:	18e3      	adds	r3, r4, r3
 800777c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007780:	464b      	mov	r3, r9
 8007782:	eb45 0303 	adc.w	r3, r5, r3
 8007786:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800778a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007796:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800779a:	f04f 0200 	mov.w	r2, #0
 800779e:	f04f 0300 	mov.w	r3, #0
 80077a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80077a6:	4629      	mov	r1, r5
 80077a8:	008b      	lsls	r3, r1, #2
 80077aa:	4621      	mov	r1, r4
 80077ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077b0:	4621      	mov	r1, r4
 80077b2:	008a      	lsls	r2, r1, #2
 80077b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80077b8:	f7f9 f9c2 	bl	8000b40 <__aeabi_uldivmod>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	4b60      	ldr	r3, [pc, #384]	@ (8007944 <UART_SetConfig+0x4e4>)
 80077c2:	fba3 2302 	umull	r2, r3, r3, r2
 80077c6:	095b      	lsrs	r3, r3, #5
 80077c8:	011c      	lsls	r4, r3, #4
 80077ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80077d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80077dc:	4642      	mov	r2, r8
 80077de:	464b      	mov	r3, r9
 80077e0:	1891      	adds	r1, r2, r2
 80077e2:	61b9      	str	r1, [r7, #24]
 80077e4:	415b      	adcs	r3, r3
 80077e6:	61fb      	str	r3, [r7, #28]
 80077e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077ec:	4641      	mov	r1, r8
 80077ee:	1851      	adds	r1, r2, r1
 80077f0:	6139      	str	r1, [r7, #16]
 80077f2:	4649      	mov	r1, r9
 80077f4:	414b      	adcs	r3, r1
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	f04f 0200 	mov.w	r2, #0
 80077fc:	f04f 0300 	mov.w	r3, #0
 8007800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007804:	4659      	mov	r1, fp
 8007806:	00cb      	lsls	r3, r1, #3
 8007808:	4651      	mov	r1, sl
 800780a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800780e:	4651      	mov	r1, sl
 8007810:	00ca      	lsls	r2, r1, #3
 8007812:	4610      	mov	r0, r2
 8007814:	4619      	mov	r1, r3
 8007816:	4603      	mov	r3, r0
 8007818:	4642      	mov	r2, r8
 800781a:	189b      	adds	r3, r3, r2
 800781c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007820:	464b      	mov	r3, r9
 8007822:	460a      	mov	r2, r1
 8007824:	eb42 0303 	adc.w	r3, r2, r3
 8007828:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800782c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007836:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007838:	f04f 0200 	mov.w	r2, #0
 800783c:	f04f 0300 	mov.w	r3, #0
 8007840:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007844:	4649      	mov	r1, r9
 8007846:	008b      	lsls	r3, r1, #2
 8007848:	4641      	mov	r1, r8
 800784a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800784e:	4641      	mov	r1, r8
 8007850:	008a      	lsls	r2, r1, #2
 8007852:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007856:	f7f9 f973 	bl	8000b40 <__aeabi_uldivmod>
 800785a:	4602      	mov	r2, r0
 800785c:	460b      	mov	r3, r1
 800785e:	4611      	mov	r1, r2
 8007860:	4b38      	ldr	r3, [pc, #224]	@ (8007944 <UART_SetConfig+0x4e4>)
 8007862:	fba3 2301 	umull	r2, r3, r3, r1
 8007866:	095b      	lsrs	r3, r3, #5
 8007868:	2264      	movs	r2, #100	@ 0x64
 800786a:	fb02 f303 	mul.w	r3, r2, r3
 800786e:	1acb      	subs	r3, r1, r3
 8007870:	011b      	lsls	r3, r3, #4
 8007872:	3332      	adds	r3, #50	@ 0x32
 8007874:	4a33      	ldr	r2, [pc, #204]	@ (8007944 <UART_SetConfig+0x4e4>)
 8007876:	fba2 2303 	umull	r2, r3, r2, r3
 800787a:	095b      	lsrs	r3, r3, #5
 800787c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007880:	441c      	add	r4, r3
 8007882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007886:	2200      	movs	r2, #0
 8007888:	673b      	str	r3, [r7, #112]	@ 0x70
 800788a:	677a      	str	r2, [r7, #116]	@ 0x74
 800788c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007890:	4642      	mov	r2, r8
 8007892:	464b      	mov	r3, r9
 8007894:	1891      	adds	r1, r2, r2
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	415b      	adcs	r3, r3
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078a0:	4641      	mov	r1, r8
 80078a2:	1851      	adds	r1, r2, r1
 80078a4:	6039      	str	r1, [r7, #0]
 80078a6:	4649      	mov	r1, r9
 80078a8:	414b      	adcs	r3, r1
 80078aa:	607b      	str	r3, [r7, #4]
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	f04f 0300 	mov.w	r3, #0
 80078b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078b8:	4659      	mov	r1, fp
 80078ba:	00cb      	lsls	r3, r1, #3
 80078bc:	4651      	mov	r1, sl
 80078be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078c2:	4651      	mov	r1, sl
 80078c4:	00ca      	lsls	r2, r1, #3
 80078c6:	4610      	mov	r0, r2
 80078c8:	4619      	mov	r1, r3
 80078ca:	4603      	mov	r3, r0
 80078cc:	4642      	mov	r2, r8
 80078ce:	189b      	adds	r3, r3, r2
 80078d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078d2:	464b      	mov	r3, r9
 80078d4:	460a      	mov	r2, r1
 80078d6:	eb42 0303 	adc.w	r3, r2, r3
 80078da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80078e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80078e8:	f04f 0200 	mov.w	r2, #0
 80078ec:	f04f 0300 	mov.w	r3, #0
 80078f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80078f4:	4649      	mov	r1, r9
 80078f6:	008b      	lsls	r3, r1, #2
 80078f8:	4641      	mov	r1, r8
 80078fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078fe:	4641      	mov	r1, r8
 8007900:	008a      	lsls	r2, r1, #2
 8007902:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007906:	f7f9 f91b 	bl	8000b40 <__aeabi_uldivmod>
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	4b0d      	ldr	r3, [pc, #52]	@ (8007944 <UART_SetConfig+0x4e4>)
 8007910:	fba3 1302 	umull	r1, r3, r3, r2
 8007914:	095b      	lsrs	r3, r3, #5
 8007916:	2164      	movs	r1, #100	@ 0x64
 8007918:	fb01 f303 	mul.w	r3, r1, r3
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	011b      	lsls	r3, r3, #4
 8007920:	3332      	adds	r3, #50	@ 0x32
 8007922:	4a08      	ldr	r2, [pc, #32]	@ (8007944 <UART_SetConfig+0x4e4>)
 8007924:	fba2 2303 	umull	r2, r3, r2, r3
 8007928:	095b      	lsrs	r3, r3, #5
 800792a:	f003 020f 	and.w	r2, r3, #15
 800792e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4422      	add	r2, r4
 8007936:	609a      	str	r2, [r3, #8]
}
 8007938:	bf00      	nop
 800793a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800793e:	46bd      	mov	sp, r7
 8007940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007944:	51eb851f 	.word	0x51eb851f

08007948 <std>:
 8007948:	2300      	movs	r3, #0
 800794a:	b510      	push	{r4, lr}
 800794c:	4604      	mov	r4, r0
 800794e:	e9c0 3300 	strd	r3, r3, [r0]
 8007952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007956:	6083      	str	r3, [r0, #8]
 8007958:	8181      	strh	r1, [r0, #12]
 800795a:	6643      	str	r3, [r0, #100]	@ 0x64
 800795c:	81c2      	strh	r2, [r0, #14]
 800795e:	6183      	str	r3, [r0, #24]
 8007960:	4619      	mov	r1, r3
 8007962:	2208      	movs	r2, #8
 8007964:	305c      	adds	r0, #92	@ 0x5c
 8007966:	f000 f9e7 	bl	8007d38 <memset>
 800796a:	4b0d      	ldr	r3, [pc, #52]	@ (80079a0 <std+0x58>)
 800796c:	6263      	str	r3, [r4, #36]	@ 0x24
 800796e:	4b0d      	ldr	r3, [pc, #52]	@ (80079a4 <std+0x5c>)
 8007970:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007972:	4b0d      	ldr	r3, [pc, #52]	@ (80079a8 <std+0x60>)
 8007974:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007976:	4b0d      	ldr	r3, [pc, #52]	@ (80079ac <std+0x64>)
 8007978:	6323      	str	r3, [r4, #48]	@ 0x30
 800797a:	4b0d      	ldr	r3, [pc, #52]	@ (80079b0 <std+0x68>)
 800797c:	6224      	str	r4, [r4, #32]
 800797e:	429c      	cmp	r4, r3
 8007980:	d006      	beq.n	8007990 <std+0x48>
 8007982:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007986:	4294      	cmp	r4, r2
 8007988:	d002      	beq.n	8007990 <std+0x48>
 800798a:	33d0      	adds	r3, #208	@ 0xd0
 800798c:	429c      	cmp	r4, r3
 800798e:	d105      	bne.n	800799c <std+0x54>
 8007990:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007998:	f000 ba46 	b.w	8007e28 <__retarget_lock_init_recursive>
 800799c:	bd10      	pop	{r4, pc}
 800799e:	bf00      	nop
 80079a0:	08007b89 	.word	0x08007b89
 80079a4:	08007bab 	.word	0x08007bab
 80079a8:	08007be3 	.word	0x08007be3
 80079ac:	08007c07 	.word	0x08007c07
 80079b0:	200002a0 	.word	0x200002a0

080079b4 <stdio_exit_handler>:
 80079b4:	4a02      	ldr	r2, [pc, #8]	@ (80079c0 <stdio_exit_handler+0xc>)
 80079b6:	4903      	ldr	r1, [pc, #12]	@ (80079c4 <stdio_exit_handler+0x10>)
 80079b8:	4803      	ldr	r0, [pc, #12]	@ (80079c8 <stdio_exit_handler+0x14>)
 80079ba:	f000 b869 	b.w	8007a90 <_fwalk_sglue>
 80079be:	bf00      	nop
 80079c0:	2000000c 	.word	0x2000000c
 80079c4:	08008129 	.word	0x08008129
 80079c8:	2000001c 	.word	0x2000001c

080079cc <cleanup_stdio>:
 80079cc:	6841      	ldr	r1, [r0, #4]
 80079ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007a00 <cleanup_stdio+0x34>)
 80079d0:	4299      	cmp	r1, r3
 80079d2:	b510      	push	{r4, lr}
 80079d4:	4604      	mov	r4, r0
 80079d6:	d001      	beq.n	80079dc <cleanup_stdio+0x10>
 80079d8:	f000 fba6 	bl	8008128 <_fflush_r>
 80079dc:	68a1      	ldr	r1, [r4, #8]
 80079de:	4b09      	ldr	r3, [pc, #36]	@ (8007a04 <cleanup_stdio+0x38>)
 80079e0:	4299      	cmp	r1, r3
 80079e2:	d002      	beq.n	80079ea <cleanup_stdio+0x1e>
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 fb9f 	bl	8008128 <_fflush_r>
 80079ea:	68e1      	ldr	r1, [r4, #12]
 80079ec:	4b06      	ldr	r3, [pc, #24]	@ (8007a08 <cleanup_stdio+0x3c>)
 80079ee:	4299      	cmp	r1, r3
 80079f0:	d004      	beq.n	80079fc <cleanup_stdio+0x30>
 80079f2:	4620      	mov	r0, r4
 80079f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079f8:	f000 bb96 	b.w	8008128 <_fflush_r>
 80079fc:	bd10      	pop	{r4, pc}
 80079fe:	bf00      	nop
 8007a00:	200002a0 	.word	0x200002a0
 8007a04:	20000308 	.word	0x20000308
 8007a08:	20000370 	.word	0x20000370

08007a0c <global_stdio_init.part.0>:
 8007a0c:	b510      	push	{r4, lr}
 8007a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a3c <global_stdio_init.part.0+0x30>)
 8007a10:	4c0b      	ldr	r4, [pc, #44]	@ (8007a40 <global_stdio_init.part.0+0x34>)
 8007a12:	4a0c      	ldr	r2, [pc, #48]	@ (8007a44 <global_stdio_init.part.0+0x38>)
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	4620      	mov	r0, r4
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2104      	movs	r1, #4
 8007a1c:	f7ff ff94 	bl	8007948 <std>
 8007a20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a24:	2201      	movs	r2, #1
 8007a26:	2109      	movs	r1, #9
 8007a28:	f7ff ff8e 	bl	8007948 <std>
 8007a2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a30:	2202      	movs	r2, #2
 8007a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a36:	2112      	movs	r1, #18
 8007a38:	f7ff bf86 	b.w	8007948 <std>
 8007a3c:	200003d8 	.word	0x200003d8
 8007a40:	200002a0 	.word	0x200002a0
 8007a44:	080079b5 	.word	0x080079b5

08007a48 <__sfp_lock_acquire>:
 8007a48:	4801      	ldr	r0, [pc, #4]	@ (8007a50 <__sfp_lock_acquire+0x8>)
 8007a4a:	f000 b9ee 	b.w	8007e2a <__retarget_lock_acquire_recursive>
 8007a4e:	bf00      	nop
 8007a50:	200003e1 	.word	0x200003e1

08007a54 <__sfp_lock_release>:
 8007a54:	4801      	ldr	r0, [pc, #4]	@ (8007a5c <__sfp_lock_release+0x8>)
 8007a56:	f000 b9e9 	b.w	8007e2c <__retarget_lock_release_recursive>
 8007a5a:	bf00      	nop
 8007a5c:	200003e1 	.word	0x200003e1

08007a60 <__sinit>:
 8007a60:	b510      	push	{r4, lr}
 8007a62:	4604      	mov	r4, r0
 8007a64:	f7ff fff0 	bl	8007a48 <__sfp_lock_acquire>
 8007a68:	6a23      	ldr	r3, [r4, #32]
 8007a6a:	b11b      	cbz	r3, 8007a74 <__sinit+0x14>
 8007a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a70:	f7ff bff0 	b.w	8007a54 <__sfp_lock_release>
 8007a74:	4b04      	ldr	r3, [pc, #16]	@ (8007a88 <__sinit+0x28>)
 8007a76:	6223      	str	r3, [r4, #32]
 8007a78:	4b04      	ldr	r3, [pc, #16]	@ (8007a8c <__sinit+0x2c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1f5      	bne.n	8007a6c <__sinit+0xc>
 8007a80:	f7ff ffc4 	bl	8007a0c <global_stdio_init.part.0>
 8007a84:	e7f2      	b.n	8007a6c <__sinit+0xc>
 8007a86:	bf00      	nop
 8007a88:	080079cd 	.word	0x080079cd
 8007a8c:	200003d8 	.word	0x200003d8

08007a90 <_fwalk_sglue>:
 8007a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a94:	4607      	mov	r7, r0
 8007a96:	4688      	mov	r8, r1
 8007a98:	4614      	mov	r4, r2
 8007a9a:	2600      	movs	r6, #0
 8007a9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007aa0:	f1b9 0901 	subs.w	r9, r9, #1
 8007aa4:	d505      	bpl.n	8007ab2 <_fwalk_sglue+0x22>
 8007aa6:	6824      	ldr	r4, [r4, #0]
 8007aa8:	2c00      	cmp	r4, #0
 8007aaa:	d1f7      	bne.n	8007a9c <_fwalk_sglue+0xc>
 8007aac:	4630      	mov	r0, r6
 8007aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ab2:	89ab      	ldrh	r3, [r5, #12]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d907      	bls.n	8007ac8 <_fwalk_sglue+0x38>
 8007ab8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007abc:	3301      	adds	r3, #1
 8007abe:	d003      	beq.n	8007ac8 <_fwalk_sglue+0x38>
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	47c0      	blx	r8
 8007ac6:	4306      	orrs	r6, r0
 8007ac8:	3568      	adds	r5, #104	@ 0x68
 8007aca:	e7e9      	b.n	8007aa0 <_fwalk_sglue+0x10>

08007acc <_puts_r>:
 8007acc:	6a03      	ldr	r3, [r0, #32]
 8007ace:	b570      	push	{r4, r5, r6, lr}
 8007ad0:	6884      	ldr	r4, [r0, #8]
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	460e      	mov	r6, r1
 8007ad6:	b90b      	cbnz	r3, 8007adc <_puts_r+0x10>
 8007ad8:	f7ff ffc2 	bl	8007a60 <__sinit>
 8007adc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ade:	07db      	lsls	r3, r3, #31
 8007ae0:	d405      	bmi.n	8007aee <_puts_r+0x22>
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	0598      	lsls	r0, r3, #22
 8007ae6:	d402      	bmi.n	8007aee <_puts_r+0x22>
 8007ae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007aea:	f000 f99e 	bl	8007e2a <__retarget_lock_acquire_recursive>
 8007aee:	89a3      	ldrh	r3, [r4, #12]
 8007af0:	0719      	lsls	r1, r3, #28
 8007af2:	d502      	bpl.n	8007afa <_puts_r+0x2e>
 8007af4:	6923      	ldr	r3, [r4, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d135      	bne.n	8007b66 <_puts_r+0x9a>
 8007afa:	4621      	mov	r1, r4
 8007afc:	4628      	mov	r0, r5
 8007afe:	f000 f8c5 	bl	8007c8c <__swsetup_r>
 8007b02:	b380      	cbz	r0, 8007b66 <_puts_r+0x9a>
 8007b04:	f04f 35ff 	mov.w	r5, #4294967295
 8007b08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b0a:	07da      	lsls	r2, r3, #31
 8007b0c:	d405      	bmi.n	8007b1a <_puts_r+0x4e>
 8007b0e:	89a3      	ldrh	r3, [r4, #12]
 8007b10:	059b      	lsls	r3, r3, #22
 8007b12:	d402      	bmi.n	8007b1a <_puts_r+0x4e>
 8007b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b16:	f000 f989 	bl	8007e2c <__retarget_lock_release_recursive>
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	bd70      	pop	{r4, r5, r6, pc}
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	da04      	bge.n	8007b2c <_puts_r+0x60>
 8007b22:	69a2      	ldr	r2, [r4, #24]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	dc17      	bgt.n	8007b58 <_puts_r+0x8c>
 8007b28:	290a      	cmp	r1, #10
 8007b2a:	d015      	beq.n	8007b58 <_puts_r+0x8c>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	1c5a      	adds	r2, r3, #1
 8007b30:	6022      	str	r2, [r4, #0]
 8007b32:	7019      	strb	r1, [r3, #0]
 8007b34:	68a3      	ldr	r3, [r4, #8]
 8007b36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	60a3      	str	r3, [r4, #8]
 8007b3e:	2900      	cmp	r1, #0
 8007b40:	d1ed      	bne.n	8007b1e <_puts_r+0x52>
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	da11      	bge.n	8007b6a <_puts_r+0x9e>
 8007b46:	4622      	mov	r2, r4
 8007b48:	210a      	movs	r1, #10
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f000 f85f 	bl	8007c0e <__swbuf_r>
 8007b50:	3001      	adds	r0, #1
 8007b52:	d0d7      	beq.n	8007b04 <_puts_r+0x38>
 8007b54:	250a      	movs	r5, #10
 8007b56:	e7d7      	b.n	8007b08 <_puts_r+0x3c>
 8007b58:	4622      	mov	r2, r4
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f000 f857 	bl	8007c0e <__swbuf_r>
 8007b60:	3001      	adds	r0, #1
 8007b62:	d1e7      	bne.n	8007b34 <_puts_r+0x68>
 8007b64:	e7ce      	b.n	8007b04 <_puts_r+0x38>
 8007b66:	3e01      	subs	r6, #1
 8007b68:	e7e4      	b.n	8007b34 <_puts_r+0x68>
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	6022      	str	r2, [r4, #0]
 8007b70:	220a      	movs	r2, #10
 8007b72:	701a      	strb	r2, [r3, #0]
 8007b74:	e7ee      	b.n	8007b54 <_puts_r+0x88>
	...

08007b78 <puts>:
 8007b78:	4b02      	ldr	r3, [pc, #8]	@ (8007b84 <puts+0xc>)
 8007b7a:	4601      	mov	r1, r0
 8007b7c:	6818      	ldr	r0, [r3, #0]
 8007b7e:	f7ff bfa5 	b.w	8007acc <_puts_r>
 8007b82:	bf00      	nop
 8007b84:	20000018 	.word	0x20000018

08007b88 <__sread>:
 8007b88:	b510      	push	{r4, lr}
 8007b8a:	460c      	mov	r4, r1
 8007b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b90:	f000 f8fc 	bl	8007d8c <_read_r>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	bfab      	itete	ge
 8007b98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b9a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b9c:	181b      	addge	r3, r3, r0
 8007b9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ba2:	bfac      	ite	ge
 8007ba4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007ba6:	81a3      	strhlt	r3, [r4, #12]
 8007ba8:	bd10      	pop	{r4, pc}

08007baa <__swrite>:
 8007baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bae:	461f      	mov	r7, r3
 8007bb0:	898b      	ldrh	r3, [r1, #12]
 8007bb2:	05db      	lsls	r3, r3, #23
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	4616      	mov	r6, r2
 8007bba:	d505      	bpl.n	8007bc8 <__swrite+0x1e>
 8007bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f000 f8d0 	bl	8007d68 <_lseek_r>
 8007bc8:	89a3      	ldrh	r3, [r4, #12]
 8007bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bd2:	81a3      	strh	r3, [r4, #12]
 8007bd4:	4632      	mov	r2, r6
 8007bd6:	463b      	mov	r3, r7
 8007bd8:	4628      	mov	r0, r5
 8007bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bde:	f000 b8e7 	b.w	8007db0 <_write_r>

08007be2 <__sseek>:
 8007be2:	b510      	push	{r4, lr}
 8007be4:	460c      	mov	r4, r1
 8007be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bea:	f000 f8bd 	bl	8007d68 <_lseek_r>
 8007bee:	1c43      	adds	r3, r0, #1
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	bf15      	itete	ne
 8007bf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007bf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007bfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007bfe:	81a3      	strheq	r3, [r4, #12]
 8007c00:	bf18      	it	ne
 8007c02:	81a3      	strhne	r3, [r4, #12]
 8007c04:	bd10      	pop	{r4, pc}

08007c06 <__sclose>:
 8007c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0a:	f000 b89d 	b.w	8007d48 <_close_r>

08007c0e <__swbuf_r>:
 8007c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c10:	460e      	mov	r6, r1
 8007c12:	4614      	mov	r4, r2
 8007c14:	4605      	mov	r5, r0
 8007c16:	b118      	cbz	r0, 8007c20 <__swbuf_r+0x12>
 8007c18:	6a03      	ldr	r3, [r0, #32]
 8007c1a:	b90b      	cbnz	r3, 8007c20 <__swbuf_r+0x12>
 8007c1c:	f7ff ff20 	bl	8007a60 <__sinit>
 8007c20:	69a3      	ldr	r3, [r4, #24]
 8007c22:	60a3      	str	r3, [r4, #8]
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	071a      	lsls	r2, r3, #28
 8007c28:	d501      	bpl.n	8007c2e <__swbuf_r+0x20>
 8007c2a:	6923      	ldr	r3, [r4, #16]
 8007c2c:	b943      	cbnz	r3, 8007c40 <__swbuf_r+0x32>
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4628      	mov	r0, r5
 8007c32:	f000 f82b 	bl	8007c8c <__swsetup_r>
 8007c36:	b118      	cbz	r0, 8007c40 <__swbuf_r+0x32>
 8007c38:	f04f 37ff 	mov.w	r7, #4294967295
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	6922      	ldr	r2, [r4, #16]
 8007c44:	1a98      	subs	r0, r3, r2
 8007c46:	6963      	ldr	r3, [r4, #20]
 8007c48:	b2f6      	uxtb	r6, r6
 8007c4a:	4283      	cmp	r3, r0
 8007c4c:	4637      	mov	r7, r6
 8007c4e:	dc05      	bgt.n	8007c5c <__swbuf_r+0x4e>
 8007c50:	4621      	mov	r1, r4
 8007c52:	4628      	mov	r0, r5
 8007c54:	f000 fa68 	bl	8008128 <_fflush_r>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d1ed      	bne.n	8007c38 <__swbuf_r+0x2a>
 8007c5c:	68a3      	ldr	r3, [r4, #8]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	60a3      	str	r3, [r4, #8]
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	1c5a      	adds	r2, r3, #1
 8007c66:	6022      	str	r2, [r4, #0]
 8007c68:	701e      	strb	r6, [r3, #0]
 8007c6a:	6962      	ldr	r2, [r4, #20]
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d004      	beq.n	8007c7c <__swbuf_r+0x6e>
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	07db      	lsls	r3, r3, #31
 8007c76:	d5e1      	bpl.n	8007c3c <__swbuf_r+0x2e>
 8007c78:	2e0a      	cmp	r6, #10
 8007c7a:	d1df      	bne.n	8007c3c <__swbuf_r+0x2e>
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f000 fa52 	bl	8008128 <_fflush_r>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d0d9      	beq.n	8007c3c <__swbuf_r+0x2e>
 8007c88:	e7d6      	b.n	8007c38 <__swbuf_r+0x2a>
	...

08007c8c <__swsetup_r>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	4b29      	ldr	r3, [pc, #164]	@ (8007d34 <__swsetup_r+0xa8>)
 8007c90:	4605      	mov	r5, r0
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	460c      	mov	r4, r1
 8007c96:	b118      	cbz	r0, 8007ca0 <__swsetup_r+0x14>
 8007c98:	6a03      	ldr	r3, [r0, #32]
 8007c9a:	b90b      	cbnz	r3, 8007ca0 <__swsetup_r+0x14>
 8007c9c:	f7ff fee0 	bl	8007a60 <__sinit>
 8007ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca4:	0719      	lsls	r1, r3, #28
 8007ca6:	d422      	bmi.n	8007cee <__swsetup_r+0x62>
 8007ca8:	06da      	lsls	r2, r3, #27
 8007caa:	d407      	bmi.n	8007cbc <__swsetup_r+0x30>
 8007cac:	2209      	movs	r2, #9
 8007cae:	602a      	str	r2, [r5, #0]
 8007cb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cb4:	81a3      	strh	r3, [r4, #12]
 8007cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cba:	e033      	b.n	8007d24 <__swsetup_r+0x98>
 8007cbc:	0758      	lsls	r0, r3, #29
 8007cbe:	d512      	bpl.n	8007ce6 <__swsetup_r+0x5a>
 8007cc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cc2:	b141      	cbz	r1, 8007cd6 <__swsetup_r+0x4a>
 8007cc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cc8:	4299      	cmp	r1, r3
 8007cca:	d002      	beq.n	8007cd2 <__swsetup_r+0x46>
 8007ccc:	4628      	mov	r0, r5
 8007cce:	f000 f8af 	bl	8007e30 <_free_r>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cd6:	89a3      	ldrh	r3, [r4, #12]
 8007cd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007cdc:	81a3      	strh	r3, [r4, #12]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	6063      	str	r3, [r4, #4]
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	f043 0308 	orr.w	r3, r3, #8
 8007cec:	81a3      	strh	r3, [r4, #12]
 8007cee:	6923      	ldr	r3, [r4, #16]
 8007cf0:	b94b      	cbnz	r3, 8007d06 <__swsetup_r+0x7a>
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cfc:	d003      	beq.n	8007d06 <__swsetup_r+0x7a>
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4628      	mov	r0, r5
 8007d02:	f000 fa5f 	bl	80081c4 <__smakebuf_r>
 8007d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d0a:	f013 0201 	ands.w	r2, r3, #1
 8007d0e:	d00a      	beq.n	8007d26 <__swsetup_r+0x9a>
 8007d10:	2200      	movs	r2, #0
 8007d12:	60a2      	str	r2, [r4, #8]
 8007d14:	6962      	ldr	r2, [r4, #20]
 8007d16:	4252      	negs	r2, r2
 8007d18:	61a2      	str	r2, [r4, #24]
 8007d1a:	6922      	ldr	r2, [r4, #16]
 8007d1c:	b942      	cbnz	r2, 8007d30 <__swsetup_r+0xa4>
 8007d1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d22:	d1c5      	bne.n	8007cb0 <__swsetup_r+0x24>
 8007d24:	bd38      	pop	{r3, r4, r5, pc}
 8007d26:	0799      	lsls	r1, r3, #30
 8007d28:	bf58      	it	pl
 8007d2a:	6962      	ldrpl	r2, [r4, #20]
 8007d2c:	60a2      	str	r2, [r4, #8]
 8007d2e:	e7f4      	b.n	8007d1a <__swsetup_r+0x8e>
 8007d30:	2000      	movs	r0, #0
 8007d32:	e7f7      	b.n	8007d24 <__swsetup_r+0x98>
 8007d34:	20000018 	.word	0x20000018

08007d38 <memset>:
 8007d38:	4402      	add	r2, r0
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d100      	bne.n	8007d42 <memset+0xa>
 8007d40:	4770      	bx	lr
 8007d42:	f803 1b01 	strb.w	r1, [r3], #1
 8007d46:	e7f9      	b.n	8007d3c <memset+0x4>

08007d48 <_close_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	4d06      	ldr	r5, [pc, #24]	@ (8007d64 <_close_r+0x1c>)
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	4604      	mov	r4, r0
 8007d50:	4608      	mov	r0, r1
 8007d52:	602b      	str	r3, [r5, #0]
 8007d54:	f7fa f9af 	bl	80020b6 <_close>
 8007d58:	1c43      	adds	r3, r0, #1
 8007d5a:	d102      	bne.n	8007d62 <_close_r+0x1a>
 8007d5c:	682b      	ldr	r3, [r5, #0]
 8007d5e:	b103      	cbz	r3, 8007d62 <_close_r+0x1a>
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	bd38      	pop	{r3, r4, r5, pc}
 8007d64:	200003dc 	.word	0x200003dc

08007d68 <_lseek_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4d07      	ldr	r5, [pc, #28]	@ (8007d88 <_lseek_r+0x20>)
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	4608      	mov	r0, r1
 8007d70:	4611      	mov	r1, r2
 8007d72:	2200      	movs	r2, #0
 8007d74:	602a      	str	r2, [r5, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	f7fa f9c4 	bl	8002104 <_lseek>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	d102      	bne.n	8007d86 <_lseek_r+0x1e>
 8007d80:	682b      	ldr	r3, [r5, #0]
 8007d82:	b103      	cbz	r3, 8007d86 <_lseek_r+0x1e>
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	bd38      	pop	{r3, r4, r5, pc}
 8007d88:	200003dc 	.word	0x200003dc

08007d8c <_read_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	4d07      	ldr	r5, [pc, #28]	@ (8007dac <_read_r+0x20>)
 8007d90:	4604      	mov	r4, r0
 8007d92:	4608      	mov	r0, r1
 8007d94:	4611      	mov	r1, r2
 8007d96:	2200      	movs	r2, #0
 8007d98:	602a      	str	r2, [r5, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f7fa f96e 	bl	800207c <_read>
 8007da0:	1c43      	adds	r3, r0, #1
 8007da2:	d102      	bne.n	8007daa <_read_r+0x1e>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	b103      	cbz	r3, 8007daa <_read_r+0x1e>
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	200003dc 	.word	0x200003dc

08007db0 <_write_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4d07      	ldr	r5, [pc, #28]	@ (8007dd0 <_write_r+0x20>)
 8007db4:	4604      	mov	r4, r0
 8007db6:	4608      	mov	r0, r1
 8007db8:	4611      	mov	r1, r2
 8007dba:	2200      	movs	r2, #0
 8007dbc:	602a      	str	r2, [r5, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f7f9 f9b2 	bl	8001128 <_write>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d102      	bne.n	8007dce <_write_r+0x1e>
 8007dc8:	682b      	ldr	r3, [r5, #0]
 8007dca:	b103      	cbz	r3, 8007dce <_write_r+0x1e>
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	bd38      	pop	{r3, r4, r5, pc}
 8007dd0:	200003dc 	.word	0x200003dc

08007dd4 <__errno>:
 8007dd4:	4b01      	ldr	r3, [pc, #4]	@ (8007ddc <__errno+0x8>)
 8007dd6:	6818      	ldr	r0, [r3, #0]
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	20000018 	.word	0x20000018

08007de0 <__libc_init_array>:
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	4d0d      	ldr	r5, [pc, #52]	@ (8007e18 <__libc_init_array+0x38>)
 8007de4:	4c0d      	ldr	r4, [pc, #52]	@ (8007e1c <__libc_init_array+0x3c>)
 8007de6:	1b64      	subs	r4, r4, r5
 8007de8:	10a4      	asrs	r4, r4, #2
 8007dea:	2600      	movs	r6, #0
 8007dec:	42a6      	cmp	r6, r4
 8007dee:	d109      	bne.n	8007e04 <__libc_init_array+0x24>
 8007df0:	4d0b      	ldr	r5, [pc, #44]	@ (8007e20 <__libc_init_array+0x40>)
 8007df2:	4c0c      	ldr	r4, [pc, #48]	@ (8007e24 <__libc_init_array+0x44>)
 8007df4:	f000 fdc0 	bl	8008978 <_init>
 8007df8:	1b64      	subs	r4, r4, r5
 8007dfa:	10a4      	asrs	r4, r4, #2
 8007dfc:	2600      	movs	r6, #0
 8007dfe:	42a6      	cmp	r6, r4
 8007e00:	d105      	bne.n	8007e0e <__libc_init_array+0x2e>
 8007e02:	bd70      	pop	{r4, r5, r6, pc}
 8007e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e08:	4798      	blx	r3
 8007e0a:	3601      	adds	r6, #1
 8007e0c:	e7ee      	b.n	8007dec <__libc_init_array+0xc>
 8007e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e12:	4798      	blx	r3
 8007e14:	3601      	adds	r6, #1
 8007e16:	e7f2      	b.n	8007dfe <__libc_init_array+0x1e>
 8007e18:	08008a40 	.word	0x08008a40
 8007e1c:	08008a40 	.word	0x08008a40
 8007e20:	08008a40 	.word	0x08008a40
 8007e24:	08008a44 	.word	0x08008a44

08007e28 <__retarget_lock_init_recursive>:
 8007e28:	4770      	bx	lr

08007e2a <__retarget_lock_acquire_recursive>:
 8007e2a:	4770      	bx	lr

08007e2c <__retarget_lock_release_recursive>:
 8007e2c:	4770      	bx	lr
	...

08007e30 <_free_r>:
 8007e30:	b538      	push	{r3, r4, r5, lr}
 8007e32:	4605      	mov	r5, r0
 8007e34:	2900      	cmp	r1, #0
 8007e36:	d041      	beq.n	8007ebc <_free_r+0x8c>
 8007e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e3c:	1f0c      	subs	r4, r1, #4
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	bfb8      	it	lt
 8007e42:	18e4      	addlt	r4, r4, r3
 8007e44:	f000 f8e0 	bl	8008008 <__malloc_lock>
 8007e48:	4a1d      	ldr	r2, [pc, #116]	@ (8007ec0 <_free_r+0x90>)
 8007e4a:	6813      	ldr	r3, [r2, #0]
 8007e4c:	b933      	cbnz	r3, 8007e5c <_free_r+0x2c>
 8007e4e:	6063      	str	r3, [r4, #4]
 8007e50:	6014      	str	r4, [r2, #0]
 8007e52:	4628      	mov	r0, r5
 8007e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e58:	f000 b8dc 	b.w	8008014 <__malloc_unlock>
 8007e5c:	42a3      	cmp	r3, r4
 8007e5e:	d908      	bls.n	8007e72 <_free_r+0x42>
 8007e60:	6820      	ldr	r0, [r4, #0]
 8007e62:	1821      	adds	r1, r4, r0
 8007e64:	428b      	cmp	r3, r1
 8007e66:	bf01      	itttt	eq
 8007e68:	6819      	ldreq	r1, [r3, #0]
 8007e6a:	685b      	ldreq	r3, [r3, #4]
 8007e6c:	1809      	addeq	r1, r1, r0
 8007e6e:	6021      	streq	r1, [r4, #0]
 8007e70:	e7ed      	b.n	8007e4e <_free_r+0x1e>
 8007e72:	461a      	mov	r2, r3
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	b10b      	cbz	r3, 8007e7c <_free_r+0x4c>
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	d9fa      	bls.n	8007e72 <_free_r+0x42>
 8007e7c:	6811      	ldr	r1, [r2, #0]
 8007e7e:	1850      	adds	r0, r2, r1
 8007e80:	42a0      	cmp	r0, r4
 8007e82:	d10b      	bne.n	8007e9c <_free_r+0x6c>
 8007e84:	6820      	ldr	r0, [r4, #0]
 8007e86:	4401      	add	r1, r0
 8007e88:	1850      	adds	r0, r2, r1
 8007e8a:	4283      	cmp	r3, r0
 8007e8c:	6011      	str	r1, [r2, #0]
 8007e8e:	d1e0      	bne.n	8007e52 <_free_r+0x22>
 8007e90:	6818      	ldr	r0, [r3, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	6053      	str	r3, [r2, #4]
 8007e96:	4408      	add	r0, r1
 8007e98:	6010      	str	r0, [r2, #0]
 8007e9a:	e7da      	b.n	8007e52 <_free_r+0x22>
 8007e9c:	d902      	bls.n	8007ea4 <_free_r+0x74>
 8007e9e:	230c      	movs	r3, #12
 8007ea0:	602b      	str	r3, [r5, #0]
 8007ea2:	e7d6      	b.n	8007e52 <_free_r+0x22>
 8007ea4:	6820      	ldr	r0, [r4, #0]
 8007ea6:	1821      	adds	r1, r4, r0
 8007ea8:	428b      	cmp	r3, r1
 8007eaa:	bf04      	itt	eq
 8007eac:	6819      	ldreq	r1, [r3, #0]
 8007eae:	685b      	ldreq	r3, [r3, #4]
 8007eb0:	6063      	str	r3, [r4, #4]
 8007eb2:	bf04      	itt	eq
 8007eb4:	1809      	addeq	r1, r1, r0
 8007eb6:	6021      	streq	r1, [r4, #0]
 8007eb8:	6054      	str	r4, [r2, #4]
 8007eba:	e7ca      	b.n	8007e52 <_free_r+0x22>
 8007ebc:	bd38      	pop	{r3, r4, r5, pc}
 8007ebe:	bf00      	nop
 8007ec0:	200003e8 	.word	0x200003e8

08007ec4 <sbrk_aligned>:
 8007ec4:	b570      	push	{r4, r5, r6, lr}
 8007ec6:	4e0f      	ldr	r6, [pc, #60]	@ (8007f04 <sbrk_aligned+0x40>)
 8007ec8:	460c      	mov	r4, r1
 8007eca:	6831      	ldr	r1, [r6, #0]
 8007ecc:	4605      	mov	r5, r0
 8007ece:	b911      	cbnz	r1, 8007ed6 <sbrk_aligned+0x12>
 8007ed0:	f000 f9d6 	bl	8008280 <_sbrk_r>
 8007ed4:	6030      	str	r0, [r6, #0]
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f000 f9d1 	bl	8008280 <_sbrk_r>
 8007ede:	1c43      	adds	r3, r0, #1
 8007ee0:	d103      	bne.n	8007eea <sbrk_aligned+0x26>
 8007ee2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	bd70      	pop	{r4, r5, r6, pc}
 8007eea:	1cc4      	adds	r4, r0, #3
 8007eec:	f024 0403 	bic.w	r4, r4, #3
 8007ef0:	42a0      	cmp	r0, r4
 8007ef2:	d0f8      	beq.n	8007ee6 <sbrk_aligned+0x22>
 8007ef4:	1a21      	subs	r1, r4, r0
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f000 f9c2 	bl	8008280 <_sbrk_r>
 8007efc:	3001      	adds	r0, #1
 8007efe:	d1f2      	bne.n	8007ee6 <sbrk_aligned+0x22>
 8007f00:	e7ef      	b.n	8007ee2 <sbrk_aligned+0x1e>
 8007f02:	bf00      	nop
 8007f04:	200003e4 	.word	0x200003e4

08007f08 <_malloc_r>:
 8007f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f0c:	1ccd      	adds	r5, r1, #3
 8007f0e:	f025 0503 	bic.w	r5, r5, #3
 8007f12:	3508      	adds	r5, #8
 8007f14:	2d0c      	cmp	r5, #12
 8007f16:	bf38      	it	cc
 8007f18:	250c      	movcc	r5, #12
 8007f1a:	2d00      	cmp	r5, #0
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	db01      	blt.n	8007f24 <_malloc_r+0x1c>
 8007f20:	42a9      	cmp	r1, r5
 8007f22:	d904      	bls.n	8007f2e <_malloc_r+0x26>
 8007f24:	230c      	movs	r3, #12
 8007f26:	6033      	str	r3, [r6, #0]
 8007f28:	2000      	movs	r0, #0
 8007f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008004 <_malloc_r+0xfc>
 8007f32:	f000 f869 	bl	8008008 <__malloc_lock>
 8007f36:	f8d8 3000 	ldr.w	r3, [r8]
 8007f3a:	461c      	mov	r4, r3
 8007f3c:	bb44      	cbnz	r4, 8007f90 <_malloc_r+0x88>
 8007f3e:	4629      	mov	r1, r5
 8007f40:	4630      	mov	r0, r6
 8007f42:	f7ff ffbf 	bl	8007ec4 <sbrk_aligned>
 8007f46:	1c43      	adds	r3, r0, #1
 8007f48:	4604      	mov	r4, r0
 8007f4a:	d158      	bne.n	8007ffe <_malloc_r+0xf6>
 8007f4c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f50:	4627      	mov	r7, r4
 8007f52:	2f00      	cmp	r7, #0
 8007f54:	d143      	bne.n	8007fde <_malloc_r+0xd6>
 8007f56:	2c00      	cmp	r4, #0
 8007f58:	d04b      	beq.n	8007ff2 <_malloc_r+0xea>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	4639      	mov	r1, r7
 8007f5e:	4630      	mov	r0, r6
 8007f60:	eb04 0903 	add.w	r9, r4, r3
 8007f64:	f000 f98c 	bl	8008280 <_sbrk_r>
 8007f68:	4581      	cmp	r9, r0
 8007f6a:	d142      	bne.n	8007ff2 <_malloc_r+0xea>
 8007f6c:	6821      	ldr	r1, [r4, #0]
 8007f6e:	1a6d      	subs	r5, r5, r1
 8007f70:	4629      	mov	r1, r5
 8007f72:	4630      	mov	r0, r6
 8007f74:	f7ff ffa6 	bl	8007ec4 <sbrk_aligned>
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d03a      	beq.n	8007ff2 <_malloc_r+0xea>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	442b      	add	r3, r5
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	f8d8 3000 	ldr.w	r3, [r8]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	bb62      	cbnz	r2, 8007fe4 <_malloc_r+0xdc>
 8007f8a:	f8c8 7000 	str.w	r7, [r8]
 8007f8e:	e00f      	b.n	8007fb0 <_malloc_r+0xa8>
 8007f90:	6822      	ldr	r2, [r4, #0]
 8007f92:	1b52      	subs	r2, r2, r5
 8007f94:	d420      	bmi.n	8007fd8 <_malloc_r+0xd0>
 8007f96:	2a0b      	cmp	r2, #11
 8007f98:	d917      	bls.n	8007fca <_malloc_r+0xc2>
 8007f9a:	1961      	adds	r1, r4, r5
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	6025      	str	r5, [r4, #0]
 8007fa0:	bf18      	it	ne
 8007fa2:	6059      	strne	r1, [r3, #4]
 8007fa4:	6863      	ldr	r3, [r4, #4]
 8007fa6:	bf08      	it	eq
 8007fa8:	f8c8 1000 	streq.w	r1, [r8]
 8007fac:	5162      	str	r2, [r4, r5]
 8007fae:	604b      	str	r3, [r1, #4]
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f000 f82f 	bl	8008014 <__malloc_unlock>
 8007fb6:	f104 000b 	add.w	r0, r4, #11
 8007fba:	1d23      	adds	r3, r4, #4
 8007fbc:	f020 0007 	bic.w	r0, r0, #7
 8007fc0:	1ac2      	subs	r2, r0, r3
 8007fc2:	bf1c      	itt	ne
 8007fc4:	1a1b      	subne	r3, r3, r0
 8007fc6:	50a3      	strne	r3, [r4, r2]
 8007fc8:	e7af      	b.n	8007f2a <_malloc_r+0x22>
 8007fca:	6862      	ldr	r2, [r4, #4]
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	bf0c      	ite	eq
 8007fd0:	f8c8 2000 	streq.w	r2, [r8]
 8007fd4:	605a      	strne	r2, [r3, #4]
 8007fd6:	e7eb      	b.n	8007fb0 <_malloc_r+0xa8>
 8007fd8:	4623      	mov	r3, r4
 8007fda:	6864      	ldr	r4, [r4, #4]
 8007fdc:	e7ae      	b.n	8007f3c <_malloc_r+0x34>
 8007fde:	463c      	mov	r4, r7
 8007fe0:	687f      	ldr	r7, [r7, #4]
 8007fe2:	e7b6      	b.n	8007f52 <_malloc_r+0x4a>
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	42a3      	cmp	r3, r4
 8007fea:	d1fb      	bne.n	8007fe4 <_malloc_r+0xdc>
 8007fec:	2300      	movs	r3, #0
 8007fee:	6053      	str	r3, [r2, #4]
 8007ff0:	e7de      	b.n	8007fb0 <_malloc_r+0xa8>
 8007ff2:	230c      	movs	r3, #12
 8007ff4:	6033      	str	r3, [r6, #0]
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	f000 f80c 	bl	8008014 <__malloc_unlock>
 8007ffc:	e794      	b.n	8007f28 <_malloc_r+0x20>
 8007ffe:	6005      	str	r5, [r0, #0]
 8008000:	e7d6      	b.n	8007fb0 <_malloc_r+0xa8>
 8008002:	bf00      	nop
 8008004:	200003e8 	.word	0x200003e8

08008008 <__malloc_lock>:
 8008008:	4801      	ldr	r0, [pc, #4]	@ (8008010 <__malloc_lock+0x8>)
 800800a:	f7ff bf0e 	b.w	8007e2a <__retarget_lock_acquire_recursive>
 800800e:	bf00      	nop
 8008010:	200003e0 	.word	0x200003e0

08008014 <__malloc_unlock>:
 8008014:	4801      	ldr	r0, [pc, #4]	@ (800801c <__malloc_unlock+0x8>)
 8008016:	f7ff bf09 	b.w	8007e2c <__retarget_lock_release_recursive>
 800801a:	bf00      	nop
 800801c:	200003e0 	.word	0x200003e0

08008020 <__sflush_r>:
 8008020:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008028:	0716      	lsls	r6, r2, #28
 800802a:	4605      	mov	r5, r0
 800802c:	460c      	mov	r4, r1
 800802e:	d454      	bmi.n	80080da <__sflush_r+0xba>
 8008030:	684b      	ldr	r3, [r1, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	dc02      	bgt.n	800803c <__sflush_r+0x1c>
 8008036:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008038:	2b00      	cmp	r3, #0
 800803a:	dd48      	ble.n	80080ce <__sflush_r+0xae>
 800803c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800803e:	2e00      	cmp	r6, #0
 8008040:	d045      	beq.n	80080ce <__sflush_r+0xae>
 8008042:	2300      	movs	r3, #0
 8008044:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008048:	682f      	ldr	r7, [r5, #0]
 800804a:	6a21      	ldr	r1, [r4, #32]
 800804c:	602b      	str	r3, [r5, #0]
 800804e:	d030      	beq.n	80080b2 <__sflush_r+0x92>
 8008050:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	0759      	lsls	r1, r3, #29
 8008056:	d505      	bpl.n	8008064 <__sflush_r+0x44>
 8008058:	6863      	ldr	r3, [r4, #4]
 800805a:	1ad2      	subs	r2, r2, r3
 800805c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800805e:	b10b      	cbz	r3, 8008064 <__sflush_r+0x44>
 8008060:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008062:	1ad2      	subs	r2, r2, r3
 8008064:	2300      	movs	r3, #0
 8008066:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008068:	6a21      	ldr	r1, [r4, #32]
 800806a:	4628      	mov	r0, r5
 800806c:	47b0      	blx	r6
 800806e:	1c43      	adds	r3, r0, #1
 8008070:	89a3      	ldrh	r3, [r4, #12]
 8008072:	d106      	bne.n	8008082 <__sflush_r+0x62>
 8008074:	6829      	ldr	r1, [r5, #0]
 8008076:	291d      	cmp	r1, #29
 8008078:	d82b      	bhi.n	80080d2 <__sflush_r+0xb2>
 800807a:	4a2a      	ldr	r2, [pc, #168]	@ (8008124 <__sflush_r+0x104>)
 800807c:	40ca      	lsrs	r2, r1
 800807e:	07d6      	lsls	r6, r2, #31
 8008080:	d527      	bpl.n	80080d2 <__sflush_r+0xb2>
 8008082:	2200      	movs	r2, #0
 8008084:	6062      	str	r2, [r4, #4]
 8008086:	04d9      	lsls	r1, r3, #19
 8008088:	6922      	ldr	r2, [r4, #16]
 800808a:	6022      	str	r2, [r4, #0]
 800808c:	d504      	bpl.n	8008098 <__sflush_r+0x78>
 800808e:	1c42      	adds	r2, r0, #1
 8008090:	d101      	bne.n	8008096 <__sflush_r+0x76>
 8008092:	682b      	ldr	r3, [r5, #0]
 8008094:	b903      	cbnz	r3, 8008098 <__sflush_r+0x78>
 8008096:	6560      	str	r0, [r4, #84]	@ 0x54
 8008098:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800809a:	602f      	str	r7, [r5, #0]
 800809c:	b1b9      	cbz	r1, 80080ce <__sflush_r+0xae>
 800809e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080a2:	4299      	cmp	r1, r3
 80080a4:	d002      	beq.n	80080ac <__sflush_r+0x8c>
 80080a6:	4628      	mov	r0, r5
 80080a8:	f7ff fec2 	bl	8007e30 <_free_r>
 80080ac:	2300      	movs	r3, #0
 80080ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80080b0:	e00d      	b.n	80080ce <__sflush_r+0xae>
 80080b2:	2301      	movs	r3, #1
 80080b4:	4628      	mov	r0, r5
 80080b6:	47b0      	blx	r6
 80080b8:	4602      	mov	r2, r0
 80080ba:	1c50      	adds	r0, r2, #1
 80080bc:	d1c9      	bne.n	8008052 <__sflush_r+0x32>
 80080be:	682b      	ldr	r3, [r5, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d0c6      	beq.n	8008052 <__sflush_r+0x32>
 80080c4:	2b1d      	cmp	r3, #29
 80080c6:	d001      	beq.n	80080cc <__sflush_r+0xac>
 80080c8:	2b16      	cmp	r3, #22
 80080ca:	d11e      	bne.n	800810a <__sflush_r+0xea>
 80080cc:	602f      	str	r7, [r5, #0]
 80080ce:	2000      	movs	r0, #0
 80080d0:	e022      	b.n	8008118 <__sflush_r+0xf8>
 80080d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080d6:	b21b      	sxth	r3, r3
 80080d8:	e01b      	b.n	8008112 <__sflush_r+0xf2>
 80080da:	690f      	ldr	r7, [r1, #16]
 80080dc:	2f00      	cmp	r7, #0
 80080de:	d0f6      	beq.n	80080ce <__sflush_r+0xae>
 80080e0:	0793      	lsls	r3, r2, #30
 80080e2:	680e      	ldr	r6, [r1, #0]
 80080e4:	bf08      	it	eq
 80080e6:	694b      	ldreq	r3, [r1, #20]
 80080e8:	600f      	str	r7, [r1, #0]
 80080ea:	bf18      	it	ne
 80080ec:	2300      	movne	r3, #0
 80080ee:	eba6 0807 	sub.w	r8, r6, r7
 80080f2:	608b      	str	r3, [r1, #8]
 80080f4:	f1b8 0f00 	cmp.w	r8, #0
 80080f8:	dde9      	ble.n	80080ce <__sflush_r+0xae>
 80080fa:	6a21      	ldr	r1, [r4, #32]
 80080fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80080fe:	4643      	mov	r3, r8
 8008100:	463a      	mov	r2, r7
 8008102:	4628      	mov	r0, r5
 8008104:	47b0      	blx	r6
 8008106:	2800      	cmp	r0, #0
 8008108:	dc08      	bgt.n	800811c <__sflush_r+0xfc>
 800810a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800810e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	f04f 30ff 	mov.w	r0, #4294967295
 8008118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800811c:	4407      	add	r7, r0
 800811e:	eba8 0800 	sub.w	r8, r8, r0
 8008122:	e7e7      	b.n	80080f4 <__sflush_r+0xd4>
 8008124:	20400001 	.word	0x20400001

08008128 <_fflush_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	690b      	ldr	r3, [r1, #16]
 800812c:	4605      	mov	r5, r0
 800812e:	460c      	mov	r4, r1
 8008130:	b913      	cbnz	r3, 8008138 <_fflush_r+0x10>
 8008132:	2500      	movs	r5, #0
 8008134:	4628      	mov	r0, r5
 8008136:	bd38      	pop	{r3, r4, r5, pc}
 8008138:	b118      	cbz	r0, 8008142 <_fflush_r+0x1a>
 800813a:	6a03      	ldr	r3, [r0, #32]
 800813c:	b90b      	cbnz	r3, 8008142 <_fflush_r+0x1a>
 800813e:	f7ff fc8f 	bl	8007a60 <__sinit>
 8008142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0f3      	beq.n	8008132 <_fflush_r+0xa>
 800814a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800814c:	07d0      	lsls	r0, r2, #31
 800814e:	d404      	bmi.n	800815a <_fflush_r+0x32>
 8008150:	0599      	lsls	r1, r3, #22
 8008152:	d402      	bmi.n	800815a <_fflush_r+0x32>
 8008154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008156:	f7ff fe68 	bl	8007e2a <__retarget_lock_acquire_recursive>
 800815a:	4628      	mov	r0, r5
 800815c:	4621      	mov	r1, r4
 800815e:	f7ff ff5f 	bl	8008020 <__sflush_r>
 8008162:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008164:	07da      	lsls	r2, r3, #31
 8008166:	4605      	mov	r5, r0
 8008168:	d4e4      	bmi.n	8008134 <_fflush_r+0xc>
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	059b      	lsls	r3, r3, #22
 800816e:	d4e1      	bmi.n	8008134 <_fflush_r+0xc>
 8008170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008172:	f7ff fe5b 	bl	8007e2c <__retarget_lock_release_recursive>
 8008176:	e7dd      	b.n	8008134 <_fflush_r+0xc>

08008178 <__swhatbuf_r>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	460c      	mov	r4, r1
 800817c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008180:	2900      	cmp	r1, #0
 8008182:	b096      	sub	sp, #88	@ 0x58
 8008184:	4615      	mov	r5, r2
 8008186:	461e      	mov	r6, r3
 8008188:	da0d      	bge.n	80081a6 <__swhatbuf_r+0x2e>
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008190:	f04f 0100 	mov.w	r1, #0
 8008194:	bf14      	ite	ne
 8008196:	2340      	movne	r3, #64	@ 0x40
 8008198:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800819c:	2000      	movs	r0, #0
 800819e:	6031      	str	r1, [r6, #0]
 80081a0:	602b      	str	r3, [r5, #0]
 80081a2:	b016      	add	sp, #88	@ 0x58
 80081a4:	bd70      	pop	{r4, r5, r6, pc}
 80081a6:	466a      	mov	r2, sp
 80081a8:	f000 f848 	bl	800823c <_fstat_r>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	dbec      	blt.n	800818a <__swhatbuf_r+0x12>
 80081b0:	9901      	ldr	r1, [sp, #4]
 80081b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80081b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80081ba:	4259      	negs	r1, r3
 80081bc:	4159      	adcs	r1, r3
 80081be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081c2:	e7eb      	b.n	800819c <__swhatbuf_r+0x24>

080081c4 <__smakebuf_r>:
 80081c4:	898b      	ldrh	r3, [r1, #12]
 80081c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081c8:	079d      	lsls	r5, r3, #30
 80081ca:	4606      	mov	r6, r0
 80081cc:	460c      	mov	r4, r1
 80081ce:	d507      	bpl.n	80081e0 <__smakebuf_r+0x1c>
 80081d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	2301      	movs	r3, #1
 80081da:	6163      	str	r3, [r4, #20]
 80081dc:	b003      	add	sp, #12
 80081de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081e0:	ab01      	add	r3, sp, #4
 80081e2:	466a      	mov	r2, sp
 80081e4:	f7ff ffc8 	bl	8008178 <__swhatbuf_r>
 80081e8:	9f00      	ldr	r7, [sp, #0]
 80081ea:	4605      	mov	r5, r0
 80081ec:	4639      	mov	r1, r7
 80081ee:	4630      	mov	r0, r6
 80081f0:	f7ff fe8a 	bl	8007f08 <_malloc_r>
 80081f4:	b948      	cbnz	r0, 800820a <__smakebuf_r+0x46>
 80081f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081fa:	059a      	lsls	r2, r3, #22
 80081fc:	d4ee      	bmi.n	80081dc <__smakebuf_r+0x18>
 80081fe:	f023 0303 	bic.w	r3, r3, #3
 8008202:	f043 0302 	orr.w	r3, r3, #2
 8008206:	81a3      	strh	r3, [r4, #12]
 8008208:	e7e2      	b.n	80081d0 <__smakebuf_r+0xc>
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	6020      	str	r0, [r4, #0]
 800820e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008212:	81a3      	strh	r3, [r4, #12]
 8008214:	9b01      	ldr	r3, [sp, #4]
 8008216:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800821a:	b15b      	cbz	r3, 8008234 <__smakebuf_r+0x70>
 800821c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008220:	4630      	mov	r0, r6
 8008222:	f000 f81d 	bl	8008260 <_isatty_r>
 8008226:	b128      	cbz	r0, 8008234 <__smakebuf_r+0x70>
 8008228:	89a3      	ldrh	r3, [r4, #12]
 800822a:	f023 0303 	bic.w	r3, r3, #3
 800822e:	f043 0301 	orr.w	r3, r3, #1
 8008232:	81a3      	strh	r3, [r4, #12]
 8008234:	89a3      	ldrh	r3, [r4, #12]
 8008236:	431d      	orrs	r5, r3
 8008238:	81a5      	strh	r5, [r4, #12]
 800823a:	e7cf      	b.n	80081dc <__smakebuf_r+0x18>

0800823c <_fstat_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	4d07      	ldr	r5, [pc, #28]	@ (800825c <_fstat_r+0x20>)
 8008240:	2300      	movs	r3, #0
 8008242:	4604      	mov	r4, r0
 8008244:	4608      	mov	r0, r1
 8008246:	4611      	mov	r1, r2
 8008248:	602b      	str	r3, [r5, #0]
 800824a:	f7f9 ff40 	bl	80020ce <_fstat>
 800824e:	1c43      	adds	r3, r0, #1
 8008250:	d102      	bne.n	8008258 <_fstat_r+0x1c>
 8008252:	682b      	ldr	r3, [r5, #0]
 8008254:	b103      	cbz	r3, 8008258 <_fstat_r+0x1c>
 8008256:	6023      	str	r3, [r4, #0]
 8008258:	bd38      	pop	{r3, r4, r5, pc}
 800825a:	bf00      	nop
 800825c:	200003dc 	.word	0x200003dc

08008260 <_isatty_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4d06      	ldr	r5, [pc, #24]	@ (800827c <_isatty_r+0x1c>)
 8008264:	2300      	movs	r3, #0
 8008266:	4604      	mov	r4, r0
 8008268:	4608      	mov	r0, r1
 800826a:	602b      	str	r3, [r5, #0]
 800826c:	f7f9 ff3f 	bl	80020ee <_isatty>
 8008270:	1c43      	adds	r3, r0, #1
 8008272:	d102      	bne.n	800827a <_isatty_r+0x1a>
 8008274:	682b      	ldr	r3, [r5, #0]
 8008276:	b103      	cbz	r3, 800827a <_isatty_r+0x1a>
 8008278:	6023      	str	r3, [r4, #0]
 800827a:	bd38      	pop	{r3, r4, r5, pc}
 800827c:	200003dc 	.word	0x200003dc

08008280 <_sbrk_r>:
 8008280:	b538      	push	{r3, r4, r5, lr}
 8008282:	4d06      	ldr	r5, [pc, #24]	@ (800829c <_sbrk_r+0x1c>)
 8008284:	2300      	movs	r3, #0
 8008286:	4604      	mov	r4, r0
 8008288:	4608      	mov	r0, r1
 800828a:	602b      	str	r3, [r5, #0]
 800828c:	f7f9 ff48 	bl	8002120 <_sbrk>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d102      	bne.n	800829a <_sbrk_r+0x1a>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	b103      	cbz	r3, 800829a <_sbrk_r+0x1a>
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	200003dc 	.word	0x200003dc

080082a0 <atan2>:
 80082a0:	f000 b902 	b.w	80084a8 <__ieee754_atan2>

080082a4 <sqrt>:
 80082a4:	b538      	push	{r3, r4, r5, lr}
 80082a6:	ed2d 8b02 	vpush	{d8}
 80082aa:	ec55 4b10 	vmov	r4, r5, d0
 80082ae:	f000 f825 	bl	80082fc <__ieee754_sqrt>
 80082b2:	4622      	mov	r2, r4
 80082b4:	462b      	mov	r3, r5
 80082b6:	4620      	mov	r0, r4
 80082b8:	4629      	mov	r1, r5
 80082ba:	eeb0 8a40 	vmov.f32	s16, s0
 80082be:	eef0 8a60 	vmov.f32	s17, s1
 80082c2:	f7f8 fbd7 	bl	8000a74 <__aeabi_dcmpun>
 80082c6:	b990      	cbnz	r0, 80082ee <sqrt+0x4a>
 80082c8:	2200      	movs	r2, #0
 80082ca:	2300      	movs	r3, #0
 80082cc:	4620      	mov	r0, r4
 80082ce:	4629      	mov	r1, r5
 80082d0:	f7f8 fba8 	bl	8000a24 <__aeabi_dcmplt>
 80082d4:	b158      	cbz	r0, 80082ee <sqrt+0x4a>
 80082d6:	f7ff fd7d 	bl	8007dd4 <__errno>
 80082da:	2321      	movs	r3, #33	@ 0x21
 80082dc:	6003      	str	r3, [r0, #0]
 80082de:	2200      	movs	r2, #0
 80082e0:	2300      	movs	r3, #0
 80082e2:	4610      	mov	r0, r2
 80082e4:	4619      	mov	r1, r3
 80082e6:	f7f8 fa55 	bl	8000794 <__aeabi_ddiv>
 80082ea:	ec41 0b18 	vmov	d8, r0, r1
 80082ee:	eeb0 0a48 	vmov.f32	s0, s16
 80082f2:	eef0 0a68 	vmov.f32	s1, s17
 80082f6:	ecbd 8b02 	vpop	{d8}
 80082fa:	bd38      	pop	{r3, r4, r5, pc}

080082fc <__ieee754_sqrt>:
 80082fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008300:	4a66      	ldr	r2, [pc, #408]	@ (800849c <__ieee754_sqrt+0x1a0>)
 8008302:	ec55 4b10 	vmov	r4, r5, d0
 8008306:	43aa      	bics	r2, r5
 8008308:	462b      	mov	r3, r5
 800830a:	4621      	mov	r1, r4
 800830c:	d110      	bne.n	8008330 <__ieee754_sqrt+0x34>
 800830e:	4622      	mov	r2, r4
 8008310:	4620      	mov	r0, r4
 8008312:	4629      	mov	r1, r5
 8008314:	f7f8 f914 	bl	8000540 <__aeabi_dmul>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	4620      	mov	r0, r4
 800831e:	4629      	mov	r1, r5
 8008320:	f7f7 ff58 	bl	80001d4 <__adddf3>
 8008324:	4604      	mov	r4, r0
 8008326:	460d      	mov	r5, r1
 8008328:	ec45 4b10 	vmov	d0, r4, r5
 800832c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008330:	2d00      	cmp	r5, #0
 8008332:	dc0e      	bgt.n	8008352 <__ieee754_sqrt+0x56>
 8008334:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008338:	4322      	orrs	r2, r4
 800833a:	d0f5      	beq.n	8008328 <__ieee754_sqrt+0x2c>
 800833c:	b19d      	cbz	r5, 8008366 <__ieee754_sqrt+0x6a>
 800833e:	4622      	mov	r2, r4
 8008340:	4620      	mov	r0, r4
 8008342:	4629      	mov	r1, r5
 8008344:	f7f7 ff44 	bl	80001d0 <__aeabi_dsub>
 8008348:	4602      	mov	r2, r0
 800834a:	460b      	mov	r3, r1
 800834c:	f7f8 fa22 	bl	8000794 <__aeabi_ddiv>
 8008350:	e7e8      	b.n	8008324 <__ieee754_sqrt+0x28>
 8008352:	152a      	asrs	r2, r5, #20
 8008354:	d115      	bne.n	8008382 <__ieee754_sqrt+0x86>
 8008356:	2000      	movs	r0, #0
 8008358:	e009      	b.n	800836e <__ieee754_sqrt+0x72>
 800835a:	0acb      	lsrs	r3, r1, #11
 800835c:	3a15      	subs	r2, #21
 800835e:	0549      	lsls	r1, r1, #21
 8008360:	2b00      	cmp	r3, #0
 8008362:	d0fa      	beq.n	800835a <__ieee754_sqrt+0x5e>
 8008364:	e7f7      	b.n	8008356 <__ieee754_sqrt+0x5a>
 8008366:	462a      	mov	r2, r5
 8008368:	e7fa      	b.n	8008360 <__ieee754_sqrt+0x64>
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	3001      	adds	r0, #1
 800836e:	02dc      	lsls	r4, r3, #11
 8008370:	d5fb      	bpl.n	800836a <__ieee754_sqrt+0x6e>
 8008372:	1e44      	subs	r4, r0, #1
 8008374:	1b12      	subs	r2, r2, r4
 8008376:	f1c0 0420 	rsb	r4, r0, #32
 800837a:	fa21 f404 	lsr.w	r4, r1, r4
 800837e:	4323      	orrs	r3, r4
 8008380:	4081      	lsls	r1, r0
 8008382:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008386:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800838a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800838e:	07d2      	lsls	r2, r2, #31
 8008390:	bf5c      	itt	pl
 8008392:	005b      	lslpl	r3, r3, #1
 8008394:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008398:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800839c:	bf58      	it	pl
 800839e:	0049      	lslpl	r1, r1, #1
 80083a0:	2600      	movs	r6, #0
 80083a2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80083a6:	107f      	asrs	r7, r7, #1
 80083a8:	0049      	lsls	r1, r1, #1
 80083aa:	2016      	movs	r0, #22
 80083ac:	4632      	mov	r2, r6
 80083ae:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80083b2:	1915      	adds	r5, r2, r4
 80083b4:	429d      	cmp	r5, r3
 80083b6:	bfde      	ittt	le
 80083b8:	192a      	addle	r2, r5, r4
 80083ba:	1b5b      	suble	r3, r3, r5
 80083bc:	1936      	addle	r6, r6, r4
 80083be:	0fcd      	lsrs	r5, r1, #31
 80083c0:	3801      	subs	r0, #1
 80083c2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80083c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80083ca:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80083ce:	d1f0      	bne.n	80083b2 <__ieee754_sqrt+0xb6>
 80083d0:	4605      	mov	r5, r0
 80083d2:	2420      	movs	r4, #32
 80083d4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80083d8:	4293      	cmp	r3, r2
 80083da:	eb0c 0e00 	add.w	lr, ip, r0
 80083de:	dc02      	bgt.n	80083e6 <__ieee754_sqrt+0xea>
 80083e0:	d113      	bne.n	800840a <__ieee754_sqrt+0x10e>
 80083e2:	458e      	cmp	lr, r1
 80083e4:	d811      	bhi.n	800840a <__ieee754_sqrt+0x10e>
 80083e6:	f1be 0f00 	cmp.w	lr, #0
 80083ea:	eb0e 000c 	add.w	r0, lr, ip
 80083ee:	da3f      	bge.n	8008470 <__ieee754_sqrt+0x174>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	db3d      	blt.n	8008470 <__ieee754_sqrt+0x174>
 80083f4:	f102 0801 	add.w	r8, r2, #1
 80083f8:	1a9b      	subs	r3, r3, r2
 80083fa:	458e      	cmp	lr, r1
 80083fc:	bf88      	it	hi
 80083fe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008402:	eba1 010e 	sub.w	r1, r1, lr
 8008406:	4465      	add	r5, ip
 8008408:	4642      	mov	r2, r8
 800840a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800840e:	3c01      	subs	r4, #1
 8008410:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008414:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008418:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800841c:	d1dc      	bne.n	80083d8 <__ieee754_sqrt+0xdc>
 800841e:	4319      	orrs	r1, r3
 8008420:	d01b      	beq.n	800845a <__ieee754_sqrt+0x15e>
 8008422:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80084a0 <__ieee754_sqrt+0x1a4>
 8008426:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80084a4 <__ieee754_sqrt+0x1a8>
 800842a:	e9da 0100 	ldrd	r0, r1, [sl]
 800842e:	e9db 2300 	ldrd	r2, r3, [fp]
 8008432:	f7f7 fecd 	bl	80001d0 <__aeabi_dsub>
 8008436:	e9da 8900 	ldrd	r8, r9, [sl]
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	4640      	mov	r0, r8
 8008440:	4649      	mov	r1, r9
 8008442:	f7f8 faf9 	bl	8000a38 <__aeabi_dcmple>
 8008446:	b140      	cbz	r0, 800845a <__ieee754_sqrt+0x15e>
 8008448:	f1b5 3fff 	cmp.w	r5, #4294967295
 800844c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008450:	e9db 2300 	ldrd	r2, r3, [fp]
 8008454:	d10e      	bne.n	8008474 <__ieee754_sqrt+0x178>
 8008456:	3601      	adds	r6, #1
 8008458:	4625      	mov	r5, r4
 800845a:	1073      	asrs	r3, r6, #1
 800845c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8008460:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8008464:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8008468:	086b      	lsrs	r3, r5, #1
 800846a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800846e:	e759      	b.n	8008324 <__ieee754_sqrt+0x28>
 8008470:	4690      	mov	r8, r2
 8008472:	e7c1      	b.n	80083f8 <__ieee754_sqrt+0xfc>
 8008474:	f7f7 feae 	bl	80001d4 <__adddf3>
 8008478:	e9da 8900 	ldrd	r8, r9, [sl]
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	4640      	mov	r0, r8
 8008482:	4649      	mov	r1, r9
 8008484:	f7f8 face 	bl	8000a24 <__aeabi_dcmplt>
 8008488:	b120      	cbz	r0, 8008494 <__ieee754_sqrt+0x198>
 800848a:	1cab      	adds	r3, r5, #2
 800848c:	bf08      	it	eq
 800848e:	3601      	addeq	r6, #1
 8008490:	3502      	adds	r5, #2
 8008492:	e7e2      	b.n	800845a <__ieee754_sqrt+0x15e>
 8008494:	1c6b      	adds	r3, r5, #1
 8008496:	f023 0501 	bic.w	r5, r3, #1
 800849a:	e7de      	b.n	800845a <__ieee754_sqrt+0x15e>
 800849c:	7ff00000 	.word	0x7ff00000
 80084a0:	080089c0 	.word	0x080089c0
 80084a4:	080089b8 	.word	0x080089b8

080084a8 <__ieee754_atan2>:
 80084a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084ac:	ec57 6b11 	vmov	r6, r7, d1
 80084b0:	4273      	negs	r3, r6
 80084b2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8008630 <__ieee754_atan2+0x188>
 80084b6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80084ba:	4333      	orrs	r3, r6
 80084bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80084c0:	4543      	cmp	r3, r8
 80084c2:	ec51 0b10 	vmov	r0, r1, d0
 80084c6:	4635      	mov	r5, r6
 80084c8:	d809      	bhi.n	80084de <__ieee754_atan2+0x36>
 80084ca:	4244      	negs	r4, r0
 80084cc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80084d0:	4304      	orrs	r4, r0
 80084d2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80084d6:	4544      	cmp	r4, r8
 80084d8:	468e      	mov	lr, r1
 80084da:	4681      	mov	r9, r0
 80084dc:	d907      	bls.n	80084ee <__ieee754_atan2+0x46>
 80084de:	4632      	mov	r2, r6
 80084e0:	463b      	mov	r3, r7
 80084e2:	f7f7 fe77 	bl	80001d4 <__adddf3>
 80084e6:	ec41 0b10 	vmov	d0, r0, r1
 80084ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ee:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80084f2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80084f6:	4334      	orrs	r4, r6
 80084f8:	d103      	bne.n	8008502 <__ieee754_atan2+0x5a>
 80084fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084fe:	f000 b89b 	b.w	8008638 <atan>
 8008502:	17bc      	asrs	r4, r7, #30
 8008504:	f004 0402 	and.w	r4, r4, #2
 8008508:	ea53 0909 	orrs.w	r9, r3, r9
 800850c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008510:	d107      	bne.n	8008522 <__ieee754_atan2+0x7a>
 8008512:	2c02      	cmp	r4, #2
 8008514:	d05f      	beq.n	80085d6 <__ieee754_atan2+0x12e>
 8008516:	2c03      	cmp	r4, #3
 8008518:	d1e5      	bne.n	80084e6 <__ieee754_atan2+0x3e>
 800851a:	a143      	add	r1, pc, #268	@ (adr r1, 8008628 <__ieee754_atan2+0x180>)
 800851c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008520:	e7e1      	b.n	80084e6 <__ieee754_atan2+0x3e>
 8008522:	4315      	orrs	r5, r2
 8008524:	d106      	bne.n	8008534 <__ieee754_atan2+0x8c>
 8008526:	f1be 0f00 	cmp.w	lr, #0
 800852a:	db5f      	blt.n	80085ec <__ieee754_atan2+0x144>
 800852c:	a136      	add	r1, pc, #216	@ (adr r1, 8008608 <__ieee754_atan2+0x160>)
 800852e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008532:	e7d8      	b.n	80084e6 <__ieee754_atan2+0x3e>
 8008534:	4542      	cmp	r2, r8
 8008536:	d10f      	bne.n	8008558 <__ieee754_atan2+0xb0>
 8008538:	4293      	cmp	r3, r2
 800853a:	f104 34ff 	add.w	r4, r4, #4294967295
 800853e:	d107      	bne.n	8008550 <__ieee754_atan2+0xa8>
 8008540:	2c02      	cmp	r4, #2
 8008542:	d84c      	bhi.n	80085de <__ieee754_atan2+0x136>
 8008544:	4b36      	ldr	r3, [pc, #216]	@ (8008620 <__ieee754_atan2+0x178>)
 8008546:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800854a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800854e:	e7ca      	b.n	80084e6 <__ieee754_atan2+0x3e>
 8008550:	2c02      	cmp	r4, #2
 8008552:	d848      	bhi.n	80085e6 <__ieee754_atan2+0x13e>
 8008554:	4b33      	ldr	r3, [pc, #204]	@ (8008624 <__ieee754_atan2+0x17c>)
 8008556:	e7f6      	b.n	8008546 <__ieee754_atan2+0x9e>
 8008558:	4543      	cmp	r3, r8
 800855a:	d0e4      	beq.n	8008526 <__ieee754_atan2+0x7e>
 800855c:	1a9b      	subs	r3, r3, r2
 800855e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8008562:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008566:	da1e      	bge.n	80085a6 <__ieee754_atan2+0xfe>
 8008568:	2f00      	cmp	r7, #0
 800856a:	da01      	bge.n	8008570 <__ieee754_atan2+0xc8>
 800856c:	323c      	adds	r2, #60	@ 0x3c
 800856e:	db1e      	blt.n	80085ae <__ieee754_atan2+0x106>
 8008570:	4632      	mov	r2, r6
 8008572:	463b      	mov	r3, r7
 8008574:	f7f8 f90e 	bl	8000794 <__aeabi_ddiv>
 8008578:	ec41 0b10 	vmov	d0, r0, r1
 800857c:	f000 f9f4 	bl	8008968 <fabs>
 8008580:	f000 f85a 	bl	8008638 <atan>
 8008584:	ec51 0b10 	vmov	r0, r1, d0
 8008588:	2c01      	cmp	r4, #1
 800858a:	d013      	beq.n	80085b4 <__ieee754_atan2+0x10c>
 800858c:	2c02      	cmp	r4, #2
 800858e:	d015      	beq.n	80085bc <__ieee754_atan2+0x114>
 8008590:	2c00      	cmp	r4, #0
 8008592:	d0a8      	beq.n	80084e6 <__ieee754_atan2+0x3e>
 8008594:	a318      	add	r3, pc, #96	@ (adr r3, 80085f8 <__ieee754_atan2+0x150>)
 8008596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859a:	f7f7 fe19 	bl	80001d0 <__aeabi_dsub>
 800859e:	a318      	add	r3, pc, #96	@ (adr r3, 8008600 <__ieee754_atan2+0x158>)
 80085a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a4:	e014      	b.n	80085d0 <__ieee754_atan2+0x128>
 80085a6:	a118      	add	r1, pc, #96	@ (adr r1, 8008608 <__ieee754_atan2+0x160>)
 80085a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085ac:	e7ec      	b.n	8008588 <__ieee754_atan2+0xe0>
 80085ae:	2000      	movs	r0, #0
 80085b0:	2100      	movs	r1, #0
 80085b2:	e7e9      	b.n	8008588 <__ieee754_atan2+0xe0>
 80085b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80085b8:	4619      	mov	r1, r3
 80085ba:	e794      	b.n	80084e6 <__ieee754_atan2+0x3e>
 80085bc:	a30e      	add	r3, pc, #56	@ (adr r3, 80085f8 <__ieee754_atan2+0x150>)
 80085be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c2:	f7f7 fe05 	bl	80001d0 <__aeabi_dsub>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	a10d      	add	r1, pc, #52	@ (adr r1, 8008600 <__ieee754_atan2+0x158>)
 80085cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085d0:	f7f7 fdfe 	bl	80001d0 <__aeabi_dsub>
 80085d4:	e787      	b.n	80084e6 <__ieee754_atan2+0x3e>
 80085d6:	a10a      	add	r1, pc, #40	@ (adr r1, 8008600 <__ieee754_atan2+0x158>)
 80085d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085dc:	e783      	b.n	80084e6 <__ieee754_atan2+0x3e>
 80085de:	a10c      	add	r1, pc, #48	@ (adr r1, 8008610 <__ieee754_atan2+0x168>)
 80085e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085e4:	e77f      	b.n	80084e6 <__ieee754_atan2+0x3e>
 80085e6:	2000      	movs	r0, #0
 80085e8:	2100      	movs	r1, #0
 80085ea:	e77c      	b.n	80084e6 <__ieee754_atan2+0x3e>
 80085ec:	a10a      	add	r1, pc, #40	@ (adr r1, 8008618 <__ieee754_atan2+0x170>)
 80085ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085f2:	e778      	b.n	80084e6 <__ieee754_atan2+0x3e>
 80085f4:	f3af 8000 	nop.w
 80085f8:	33145c07 	.word	0x33145c07
 80085fc:	3ca1a626 	.word	0x3ca1a626
 8008600:	54442d18 	.word	0x54442d18
 8008604:	400921fb 	.word	0x400921fb
 8008608:	54442d18 	.word	0x54442d18
 800860c:	3ff921fb 	.word	0x3ff921fb
 8008610:	54442d18 	.word	0x54442d18
 8008614:	3fe921fb 	.word	0x3fe921fb
 8008618:	54442d18 	.word	0x54442d18
 800861c:	bff921fb 	.word	0xbff921fb
 8008620:	080089e0 	.word	0x080089e0
 8008624:	080089c8 	.word	0x080089c8
 8008628:	54442d18 	.word	0x54442d18
 800862c:	c00921fb 	.word	0xc00921fb
 8008630:	7ff00000 	.word	0x7ff00000
 8008634:	00000000 	.word	0x00000000

08008638 <atan>:
 8008638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863c:	ec55 4b10 	vmov	r4, r5, d0
 8008640:	4bbf      	ldr	r3, [pc, #764]	@ (8008940 <atan+0x308>)
 8008642:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8008646:	429e      	cmp	r6, r3
 8008648:	46ab      	mov	fp, r5
 800864a:	d918      	bls.n	800867e <atan+0x46>
 800864c:	4bbd      	ldr	r3, [pc, #756]	@ (8008944 <atan+0x30c>)
 800864e:	429e      	cmp	r6, r3
 8008650:	d801      	bhi.n	8008656 <atan+0x1e>
 8008652:	d109      	bne.n	8008668 <atan+0x30>
 8008654:	b144      	cbz	r4, 8008668 <atan+0x30>
 8008656:	4622      	mov	r2, r4
 8008658:	462b      	mov	r3, r5
 800865a:	4620      	mov	r0, r4
 800865c:	4629      	mov	r1, r5
 800865e:	f7f7 fdb9 	bl	80001d4 <__adddf3>
 8008662:	4604      	mov	r4, r0
 8008664:	460d      	mov	r5, r1
 8008666:	e006      	b.n	8008676 <atan+0x3e>
 8008668:	f1bb 0f00 	cmp.w	fp, #0
 800866c:	f340 812b 	ble.w	80088c6 <atan+0x28e>
 8008670:	a597      	add	r5, pc, #604	@ (adr r5, 80088d0 <atan+0x298>)
 8008672:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008676:	ec45 4b10 	vmov	d0, r4, r5
 800867a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867e:	4bb2      	ldr	r3, [pc, #712]	@ (8008948 <atan+0x310>)
 8008680:	429e      	cmp	r6, r3
 8008682:	d813      	bhi.n	80086ac <atan+0x74>
 8008684:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8008688:	429e      	cmp	r6, r3
 800868a:	d80c      	bhi.n	80086a6 <atan+0x6e>
 800868c:	a392      	add	r3, pc, #584	@ (adr r3, 80088d8 <atan+0x2a0>)
 800868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008692:	4620      	mov	r0, r4
 8008694:	4629      	mov	r1, r5
 8008696:	f7f7 fd9d 	bl	80001d4 <__adddf3>
 800869a:	4bac      	ldr	r3, [pc, #688]	@ (800894c <atan+0x314>)
 800869c:	2200      	movs	r2, #0
 800869e:	f7f8 f9df 	bl	8000a60 <__aeabi_dcmpgt>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d1e7      	bne.n	8008676 <atan+0x3e>
 80086a6:	f04f 3aff 	mov.w	sl, #4294967295
 80086aa:	e029      	b.n	8008700 <atan+0xc8>
 80086ac:	f000 f95c 	bl	8008968 <fabs>
 80086b0:	4ba7      	ldr	r3, [pc, #668]	@ (8008950 <atan+0x318>)
 80086b2:	429e      	cmp	r6, r3
 80086b4:	ec55 4b10 	vmov	r4, r5, d0
 80086b8:	f200 80bc 	bhi.w	8008834 <atan+0x1fc>
 80086bc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80086c0:	429e      	cmp	r6, r3
 80086c2:	f200 809e 	bhi.w	8008802 <atan+0x1ca>
 80086c6:	4622      	mov	r2, r4
 80086c8:	462b      	mov	r3, r5
 80086ca:	4620      	mov	r0, r4
 80086cc:	4629      	mov	r1, r5
 80086ce:	f7f7 fd81 	bl	80001d4 <__adddf3>
 80086d2:	4b9e      	ldr	r3, [pc, #632]	@ (800894c <atan+0x314>)
 80086d4:	2200      	movs	r2, #0
 80086d6:	f7f7 fd7b 	bl	80001d0 <__aeabi_dsub>
 80086da:	2200      	movs	r2, #0
 80086dc:	4606      	mov	r6, r0
 80086de:	460f      	mov	r7, r1
 80086e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80086e4:	4620      	mov	r0, r4
 80086e6:	4629      	mov	r1, r5
 80086e8:	f7f7 fd74 	bl	80001d4 <__adddf3>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	4630      	mov	r0, r6
 80086f2:	4639      	mov	r1, r7
 80086f4:	f7f8 f84e 	bl	8000794 <__aeabi_ddiv>
 80086f8:	f04f 0a00 	mov.w	sl, #0
 80086fc:	4604      	mov	r4, r0
 80086fe:	460d      	mov	r5, r1
 8008700:	4622      	mov	r2, r4
 8008702:	462b      	mov	r3, r5
 8008704:	4620      	mov	r0, r4
 8008706:	4629      	mov	r1, r5
 8008708:	f7f7 ff1a 	bl	8000540 <__aeabi_dmul>
 800870c:	4602      	mov	r2, r0
 800870e:	460b      	mov	r3, r1
 8008710:	4680      	mov	r8, r0
 8008712:	4689      	mov	r9, r1
 8008714:	f7f7 ff14 	bl	8000540 <__aeabi_dmul>
 8008718:	a371      	add	r3, pc, #452	@ (adr r3, 80088e0 <atan+0x2a8>)
 800871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871e:	4606      	mov	r6, r0
 8008720:	460f      	mov	r7, r1
 8008722:	f7f7 ff0d 	bl	8000540 <__aeabi_dmul>
 8008726:	a370      	add	r3, pc, #448	@ (adr r3, 80088e8 <atan+0x2b0>)
 8008728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872c:	f7f7 fd52 	bl	80001d4 <__adddf3>
 8008730:	4632      	mov	r2, r6
 8008732:	463b      	mov	r3, r7
 8008734:	f7f7 ff04 	bl	8000540 <__aeabi_dmul>
 8008738:	a36d      	add	r3, pc, #436	@ (adr r3, 80088f0 <atan+0x2b8>)
 800873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873e:	f7f7 fd49 	bl	80001d4 <__adddf3>
 8008742:	4632      	mov	r2, r6
 8008744:	463b      	mov	r3, r7
 8008746:	f7f7 fefb 	bl	8000540 <__aeabi_dmul>
 800874a:	a36b      	add	r3, pc, #428	@ (adr r3, 80088f8 <atan+0x2c0>)
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	f7f7 fd40 	bl	80001d4 <__adddf3>
 8008754:	4632      	mov	r2, r6
 8008756:	463b      	mov	r3, r7
 8008758:	f7f7 fef2 	bl	8000540 <__aeabi_dmul>
 800875c:	a368      	add	r3, pc, #416	@ (adr r3, 8008900 <atan+0x2c8>)
 800875e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008762:	f7f7 fd37 	bl	80001d4 <__adddf3>
 8008766:	4632      	mov	r2, r6
 8008768:	463b      	mov	r3, r7
 800876a:	f7f7 fee9 	bl	8000540 <__aeabi_dmul>
 800876e:	a366      	add	r3, pc, #408	@ (adr r3, 8008908 <atan+0x2d0>)
 8008770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008774:	f7f7 fd2e 	bl	80001d4 <__adddf3>
 8008778:	4642      	mov	r2, r8
 800877a:	464b      	mov	r3, r9
 800877c:	f7f7 fee0 	bl	8000540 <__aeabi_dmul>
 8008780:	a363      	add	r3, pc, #396	@ (adr r3, 8008910 <atan+0x2d8>)
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	4680      	mov	r8, r0
 8008788:	4689      	mov	r9, r1
 800878a:	4630      	mov	r0, r6
 800878c:	4639      	mov	r1, r7
 800878e:	f7f7 fed7 	bl	8000540 <__aeabi_dmul>
 8008792:	a361      	add	r3, pc, #388	@ (adr r3, 8008918 <atan+0x2e0>)
 8008794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008798:	f7f7 fd1a 	bl	80001d0 <__aeabi_dsub>
 800879c:	4632      	mov	r2, r6
 800879e:	463b      	mov	r3, r7
 80087a0:	f7f7 fece 	bl	8000540 <__aeabi_dmul>
 80087a4:	a35e      	add	r3, pc, #376	@ (adr r3, 8008920 <atan+0x2e8>)
 80087a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087aa:	f7f7 fd11 	bl	80001d0 <__aeabi_dsub>
 80087ae:	4632      	mov	r2, r6
 80087b0:	463b      	mov	r3, r7
 80087b2:	f7f7 fec5 	bl	8000540 <__aeabi_dmul>
 80087b6:	a35c      	add	r3, pc, #368	@ (adr r3, 8008928 <atan+0x2f0>)
 80087b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087bc:	f7f7 fd08 	bl	80001d0 <__aeabi_dsub>
 80087c0:	4632      	mov	r2, r6
 80087c2:	463b      	mov	r3, r7
 80087c4:	f7f7 febc 	bl	8000540 <__aeabi_dmul>
 80087c8:	a359      	add	r3, pc, #356	@ (adr r3, 8008930 <atan+0x2f8>)
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	f7f7 fcff 	bl	80001d0 <__aeabi_dsub>
 80087d2:	4632      	mov	r2, r6
 80087d4:	463b      	mov	r3, r7
 80087d6:	f7f7 feb3 	bl	8000540 <__aeabi_dmul>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	4640      	mov	r0, r8
 80087e0:	4649      	mov	r1, r9
 80087e2:	f7f7 fcf7 	bl	80001d4 <__adddf3>
 80087e6:	4622      	mov	r2, r4
 80087e8:	462b      	mov	r3, r5
 80087ea:	f7f7 fea9 	bl	8000540 <__aeabi_dmul>
 80087ee:	f1ba 3fff 	cmp.w	sl, #4294967295
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	d148      	bne.n	800888a <atan+0x252>
 80087f8:	4620      	mov	r0, r4
 80087fa:	4629      	mov	r1, r5
 80087fc:	f7f7 fce8 	bl	80001d0 <__aeabi_dsub>
 8008800:	e72f      	b.n	8008662 <atan+0x2a>
 8008802:	4b52      	ldr	r3, [pc, #328]	@ (800894c <atan+0x314>)
 8008804:	2200      	movs	r2, #0
 8008806:	4620      	mov	r0, r4
 8008808:	4629      	mov	r1, r5
 800880a:	f7f7 fce1 	bl	80001d0 <__aeabi_dsub>
 800880e:	4b4f      	ldr	r3, [pc, #316]	@ (800894c <atan+0x314>)
 8008810:	4606      	mov	r6, r0
 8008812:	460f      	mov	r7, r1
 8008814:	2200      	movs	r2, #0
 8008816:	4620      	mov	r0, r4
 8008818:	4629      	mov	r1, r5
 800881a:	f7f7 fcdb 	bl	80001d4 <__adddf3>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	4630      	mov	r0, r6
 8008824:	4639      	mov	r1, r7
 8008826:	f7f7 ffb5 	bl	8000794 <__aeabi_ddiv>
 800882a:	f04f 0a01 	mov.w	sl, #1
 800882e:	4604      	mov	r4, r0
 8008830:	460d      	mov	r5, r1
 8008832:	e765      	b.n	8008700 <atan+0xc8>
 8008834:	4b47      	ldr	r3, [pc, #284]	@ (8008954 <atan+0x31c>)
 8008836:	429e      	cmp	r6, r3
 8008838:	d21c      	bcs.n	8008874 <atan+0x23c>
 800883a:	4b47      	ldr	r3, [pc, #284]	@ (8008958 <atan+0x320>)
 800883c:	2200      	movs	r2, #0
 800883e:	4620      	mov	r0, r4
 8008840:	4629      	mov	r1, r5
 8008842:	f7f7 fcc5 	bl	80001d0 <__aeabi_dsub>
 8008846:	4b44      	ldr	r3, [pc, #272]	@ (8008958 <atan+0x320>)
 8008848:	4606      	mov	r6, r0
 800884a:	460f      	mov	r7, r1
 800884c:	2200      	movs	r2, #0
 800884e:	4620      	mov	r0, r4
 8008850:	4629      	mov	r1, r5
 8008852:	f7f7 fe75 	bl	8000540 <__aeabi_dmul>
 8008856:	4b3d      	ldr	r3, [pc, #244]	@ (800894c <atan+0x314>)
 8008858:	2200      	movs	r2, #0
 800885a:	f7f7 fcbb 	bl	80001d4 <__adddf3>
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	4630      	mov	r0, r6
 8008864:	4639      	mov	r1, r7
 8008866:	f7f7 ff95 	bl	8000794 <__aeabi_ddiv>
 800886a:	f04f 0a02 	mov.w	sl, #2
 800886e:	4604      	mov	r4, r0
 8008870:	460d      	mov	r5, r1
 8008872:	e745      	b.n	8008700 <atan+0xc8>
 8008874:	4622      	mov	r2, r4
 8008876:	462b      	mov	r3, r5
 8008878:	4938      	ldr	r1, [pc, #224]	@ (800895c <atan+0x324>)
 800887a:	2000      	movs	r0, #0
 800887c:	f7f7 ff8a 	bl	8000794 <__aeabi_ddiv>
 8008880:	f04f 0a03 	mov.w	sl, #3
 8008884:	4604      	mov	r4, r0
 8008886:	460d      	mov	r5, r1
 8008888:	e73a      	b.n	8008700 <atan+0xc8>
 800888a:	4b35      	ldr	r3, [pc, #212]	@ (8008960 <atan+0x328>)
 800888c:	4e35      	ldr	r6, [pc, #212]	@ (8008964 <atan+0x32c>)
 800888e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	f7f7 fc9b 	bl	80001d0 <__aeabi_dsub>
 800889a:	4622      	mov	r2, r4
 800889c:	462b      	mov	r3, r5
 800889e:	f7f7 fc97 	bl	80001d0 <__aeabi_dsub>
 80088a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	e9d6 0100 	ldrd	r0, r1, [r6]
 80088ae:	f7f7 fc8f 	bl	80001d0 <__aeabi_dsub>
 80088b2:	f1bb 0f00 	cmp.w	fp, #0
 80088b6:	4604      	mov	r4, r0
 80088b8:	460d      	mov	r5, r1
 80088ba:	f6bf aedc 	bge.w	8008676 <atan+0x3e>
 80088be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80088c2:	461d      	mov	r5, r3
 80088c4:	e6d7      	b.n	8008676 <atan+0x3e>
 80088c6:	a51c      	add	r5, pc, #112	@ (adr r5, 8008938 <atan+0x300>)
 80088c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80088cc:	e6d3      	b.n	8008676 <atan+0x3e>
 80088ce:	bf00      	nop
 80088d0:	54442d18 	.word	0x54442d18
 80088d4:	3ff921fb 	.word	0x3ff921fb
 80088d8:	8800759c 	.word	0x8800759c
 80088dc:	7e37e43c 	.word	0x7e37e43c
 80088e0:	e322da11 	.word	0xe322da11
 80088e4:	3f90ad3a 	.word	0x3f90ad3a
 80088e8:	24760deb 	.word	0x24760deb
 80088ec:	3fa97b4b 	.word	0x3fa97b4b
 80088f0:	a0d03d51 	.word	0xa0d03d51
 80088f4:	3fb10d66 	.word	0x3fb10d66
 80088f8:	c54c206e 	.word	0xc54c206e
 80088fc:	3fb745cd 	.word	0x3fb745cd
 8008900:	920083ff 	.word	0x920083ff
 8008904:	3fc24924 	.word	0x3fc24924
 8008908:	5555550d 	.word	0x5555550d
 800890c:	3fd55555 	.word	0x3fd55555
 8008910:	2c6a6c2f 	.word	0x2c6a6c2f
 8008914:	bfa2b444 	.word	0xbfa2b444
 8008918:	52defd9a 	.word	0x52defd9a
 800891c:	3fadde2d 	.word	0x3fadde2d
 8008920:	af749a6d 	.word	0xaf749a6d
 8008924:	3fb3b0f2 	.word	0x3fb3b0f2
 8008928:	fe231671 	.word	0xfe231671
 800892c:	3fbc71c6 	.word	0x3fbc71c6
 8008930:	9998ebc4 	.word	0x9998ebc4
 8008934:	3fc99999 	.word	0x3fc99999
 8008938:	54442d18 	.word	0x54442d18
 800893c:	bff921fb 	.word	0xbff921fb
 8008940:	440fffff 	.word	0x440fffff
 8008944:	7ff00000 	.word	0x7ff00000
 8008948:	3fdbffff 	.word	0x3fdbffff
 800894c:	3ff00000 	.word	0x3ff00000
 8008950:	3ff2ffff 	.word	0x3ff2ffff
 8008954:	40038000 	.word	0x40038000
 8008958:	3ff80000 	.word	0x3ff80000
 800895c:	bff00000 	.word	0xbff00000
 8008960:	080089f8 	.word	0x080089f8
 8008964:	08008a18 	.word	0x08008a18

08008968 <fabs>:
 8008968:	ec51 0b10 	vmov	r0, r1, d0
 800896c:	4602      	mov	r2, r0
 800896e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008972:	ec43 2b10 	vmov	d0, r2, r3
 8008976:	4770      	bx	lr

08008978 <_init>:
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897a:	bf00      	nop
 800897c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800897e:	bc08      	pop	{r3}
 8008980:	469e      	mov	lr, r3
 8008982:	4770      	bx	lr

08008984 <_fini>:
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008986:	bf00      	nop
 8008988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898a:	bc08      	pop	{r3}
 800898c:	469e      	mov	lr, r3
 800898e:	4770      	bx	lr
