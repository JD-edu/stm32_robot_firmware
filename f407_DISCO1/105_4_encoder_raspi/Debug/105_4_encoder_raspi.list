
105_4_encoder_raspi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008838  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080089c0  080089c0  000099c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a58  08008a58  0000a078  2**0
                  CONTENTS
  4 .ARM          00000008  08008a58  08008a58  00009a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a60  08008a60  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a60  08008a60  00009a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a64  08008a64  00009a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008a68  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a078  2**0
                  CONTENTS
 10 .bss          00000388  20000078  20000078  0000a078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000400  20000400  0000a078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c68  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002257  00000000  00000000  0001ad10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001050  00000000  00000000  0001cf68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce7  00000000  00000000  0001dfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220dc  00000000  00000000  0001ec9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f0a  00000000  00000000  00040d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf7af  00000000  00000000  00053c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123434  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f7c  00000000  00000000  00123478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  001283f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080089a8 	.word	0x080089a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	080089a8 	.word	0x080089a8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96a 	b.w	8000e2c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	460c      	mov	r4, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14e      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b7c:	4694      	mov	ip, r2
 8000b7e:	458c      	cmp	ip, r1
 8000b80:	4686      	mov	lr, r0
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	d962      	bls.n	8000c4e <__udivmoddi4+0xde>
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0320 	rsb	r3, r2, #32
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f f68c 	uxth.w	r6, ip
 8000ba6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000baa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bae:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb6:	fb04 f106 	mul.w	r1, r4, r6
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x64>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bc6:	f080 8112 	bcs.w	8000dee <__udivmoddi4+0x27e>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 810f 	bls.w	8000dee <__udivmoddi4+0x27e>
 8000bd0:	3c02      	subs	r4, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1a59      	subs	r1, r3, r1
 8000bd6:	fa1f f38e 	uxth.w	r3, lr
 8000bda:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bde:	fb07 1110 	mls	r1, r7, r0, r1
 8000be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be6:	fb00 f606 	mul.w	r6, r0, r6
 8000bea:	429e      	cmp	r6, r3
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf6:	f080 80fc 	bcs.w	8000df2 <__udivmoddi4+0x282>
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	f240 80f9 	bls.w	8000df2 <__udivmoddi4+0x282>
 8000c00:	4463      	add	r3, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	1b9b      	subs	r3, r3, r6
 8000c06:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	b11d      	cbz	r5, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40d3      	lsrs	r3, r2
 8000c10:	2200      	movs	r2, #0
 8000c12:	e9c5 3200 	strd	r3, r2, [r5]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d905      	bls.n	8000c2a <__udivmoddi4+0xba>
 8000c1e:	b10d      	cbz	r5, 8000c24 <__udivmoddi4+0xb4>
 8000c20:	e9c5 0100 	strd	r0, r1, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	4608      	mov	r0, r1
 8000c28:	e7f5      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c2a:	fab3 f183 	clz	r1, r3
 8000c2e:	2900      	cmp	r1, #0
 8000c30:	d146      	bne.n	8000cc0 <__udivmoddi4+0x150>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xcc>
 8000c36:	4290      	cmp	r0, r2
 8000c38:	f0c0 80f0 	bcc.w	8000e1c <__udivmoddi4+0x2ac>
 8000c3c:	1a86      	subs	r6, r0, r2
 8000c3e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d0e6      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c48:	e9c5 6300 	strd	r6, r3, [r5]
 8000c4c:	e7e3      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	f040 8090 	bne.w	8000d74 <__udivmoddi4+0x204>
 8000c54:	eba1 040c 	sub.w	r4, r1, ip
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	fa1f f78c 	uxth.w	r7, ip
 8000c60:	2101      	movs	r1, #1
 8000c62:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c72:	fb07 f006 	mul.w	r0, r7, r6
 8000c76:	4298      	cmp	r0, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x11c>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x11a>
 8000c84:	4298      	cmp	r0, r3
 8000c86:	f200 80cd 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	1a1c      	subs	r4, r3, r0
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c96:	fb08 4410 	mls	r4, r8, r0, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb00 f707 	mul.w	r7, r0, r7
 8000ca2:	429f      	cmp	r7, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x148>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x146>
 8000cb0:	429f      	cmp	r7, r3
 8000cb2:	f200 80b0 	bhi.w	8000e16 <__udivmoddi4+0x2a6>
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	1bdb      	subs	r3, r3, r7
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cc0:	f1c1 0620 	rsb	r6, r1, #32
 8000cc4:	408b      	lsls	r3, r1
 8000cc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cca:	431f      	orrs	r7, r3
 8000ccc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cd0:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd4:	ea43 030c 	orr.w	r3, r3, ip
 8000cd8:	40f4      	lsrs	r4, r6
 8000cda:	fa00 f801 	lsl.w	r8, r0, r1
 8000cde:	0c38      	lsrs	r0, r7, #16
 8000ce0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	fb00 441e 	mls	r4, r0, lr, r4
 8000cf0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf4:	fb0e f90c 	mul.w	r9, lr, ip
 8000cf8:	45a1      	cmp	r9, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	d90a      	bls.n	8000d16 <__udivmoddi4+0x1a6>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d06:	f080 8084 	bcs.w	8000e12 <__udivmoddi4+0x2a2>
 8000d0a:	45a1      	cmp	r9, r4
 8000d0c:	f240 8081 	bls.w	8000e12 <__udivmoddi4+0x2a2>
 8000d10:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d14:	443c      	add	r4, r7
 8000d16:	eba4 0409 	sub.w	r4, r4, r9
 8000d1a:	fa1f f983 	uxth.w	r9, r3
 8000d1e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d22:	fb00 4413 	mls	r4, r0, r3, r4
 8000d26:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d2e:	45a4      	cmp	ip, r4
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x1d2>
 8000d32:	193c      	adds	r4, r7, r4
 8000d34:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d38:	d267      	bcs.n	8000e0a <__udivmoddi4+0x29a>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0x29a>
 8000d3e:	3b02      	subs	r3, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d46:	fba0 9302 	umull	r9, r3, r0, r2
 8000d4a:	eba4 040c 	sub.w	r4, r4, ip
 8000d4e:	429c      	cmp	r4, r3
 8000d50:	46ce      	mov	lr, r9
 8000d52:	469c      	mov	ip, r3
 8000d54:	d351      	bcc.n	8000dfa <__udivmoddi4+0x28a>
 8000d56:	d04e      	beq.n	8000df6 <__udivmoddi4+0x286>
 8000d58:	b155      	cbz	r5, 8000d70 <__udivmoddi4+0x200>
 8000d5a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d5e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d62:	fa04 f606 	lsl.w	r6, r4, r6
 8000d66:	40cb      	lsrs	r3, r1
 8000d68:	431e      	orrs	r6, r3
 8000d6a:	40cc      	lsrs	r4, r1
 8000d6c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e750      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d74:	f1c2 0320 	rsb	r3, r2, #32
 8000d78:	fa20 f103 	lsr.w	r1, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	fa24 f303 	lsr.w	r3, r4, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	430c      	orrs	r4, r1
 8000d88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d8c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d90:	fa1f f78c 	uxth.w	r7, ip
 8000d94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d98:	fb08 3110 	mls	r1, r8, r0, r3
 8000d9c:	0c23      	lsrs	r3, r4, #16
 8000d9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da2:	fb00 f107 	mul.w	r1, r0, r7
 8000da6:	4299      	cmp	r1, r3
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x24c>
 8000daa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dae:	f100 36ff 	add.w	r6, r0, #4294967295
 8000db2:	d22c      	bcs.n	8000e0e <__udivmoddi4+0x29e>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	d92a      	bls.n	8000e0e <__udivmoddi4+0x29e>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc4:	fb08 3311 	mls	r3, r8, r1, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb01 f307 	mul.w	r3, r1, r7
 8000dd0:	42a3      	cmp	r3, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x276>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ddc:	d213      	bcs.n	8000e06 <__udivmoddi4+0x296>
 8000dde:	42a3      	cmp	r3, r4
 8000de0:	d911      	bls.n	8000e06 <__udivmoddi4+0x296>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	1ae4      	subs	r4, r4, r3
 8000de8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dec:	e739      	b.n	8000c62 <__udivmoddi4+0xf2>
 8000dee:	4604      	mov	r4, r0
 8000df0:	e6f0      	b.n	8000bd4 <__udivmoddi4+0x64>
 8000df2:	4608      	mov	r0, r1
 8000df4:	e706      	b.n	8000c04 <__udivmoddi4+0x94>
 8000df6:	45c8      	cmp	r8, r9
 8000df8:	d2ae      	bcs.n	8000d58 <__udivmoddi4+0x1e8>
 8000dfa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dfe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e02:	3801      	subs	r0, #1
 8000e04:	e7a8      	b.n	8000d58 <__udivmoddi4+0x1e8>
 8000e06:	4631      	mov	r1, r6
 8000e08:	e7ed      	b.n	8000de6 <__udivmoddi4+0x276>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	e799      	b.n	8000d42 <__udivmoddi4+0x1d2>
 8000e0e:	4630      	mov	r0, r6
 8000e10:	e7d4      	b.n	8000dbc <__udivmoddi4+0x24c>
 8000e12:	46d6      	mov	lr, sl
 8000e14:	e77f      	b.n	8000d16 <__udivmoddi4+0x1a6>
 8000e16:	4463      	add	r3, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e74d      	b.n	8000cb8 <__udivmoddi4+0x148>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	4623      	mov	r3, r4
 8000e20:	4608      	mov	r0, r1
 8000e22:	e70f      	b.n	8000c44 <__udivmoddi4+0xd4>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	e730      	b.n	8000c8c <__udivmoddi4+0x11c>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <_write>:
float Kalman_Update(KalmanFilter *kf, float newAngle, float newRate, float dt);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	f04f 33ff 	mov.w	r3, #4294967295
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <_write+0x28>)
 8000e48:	f005 fd8a 	bl	8006960 <HAL_UART_Transmit>
    return len;
 8000e4c:	687b      	ldr	r3, [r7, #4]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200001c0 	.word	0x200001c0

08000e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e62:	f001 fa09 	bl	8002278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e66:	f000 f8a3 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6a:	f000 fa83 	bl	8001374 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e6e:	f000 f93b 	bl	80010e8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000e72:	f000 f967 	bl	8001144 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e76:	f000 f9b1 	bl	80011dc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e7a:	f000 f9fd 	bl	8001278 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000e7e:	f000 fa4f 	bl	8001320 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000e82:	f000 f8fd 	bl	8001080 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e86:	4833      	ldr	r0, [pc, #204]	@ (8000f54 <main+0xf8>)
 8000e88:	f004 ff9a 	bl	8005dc0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000e8c:	4832      	ldr	r0, [pc, #200]	@ (8000f58 <main+0xfc>)
 8000e8e:	f004 ff97 	bl	8005dc0 <HAL_TIM_Base_Start_IT>
  MPU6050_Init();
 8000e92:	f000 fb5f 	bl	8001554 <MPU6050_Init>
  Kalman_Init(&kalman_pitch);
 8000e96:	4831      	ldr	r0, [pc, #196]	@ (8000f5c <main+0x100>)
 8000e98:	f000 fcae 	bl	80017f8 <Kalman_Init>
  Kalman_Init(&kalman_roll);
 8000e9c:	4830      	ldr	r0, [pc, #192]	@ (8000f60 <main+0x104>)
 8000e9e:	f000 fcab 	bl	80017f8 <Kalman_Init>
  Kalman_Init(&kalman_yaw);
 8000ea2:	4830      	ldr	r0, [pc, #192]	@ (8000f64 <main+0x108>)
 8000ea4:	f000 fca8 	bl	80017f8 <Kalman_Init>

  HAL_UART_Receive_IT(&huart2, rxData, 1); // ?��?��?��?�� 기반 ?��?�� ?��?��
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	492f      	ldr	r1, [pc, #188]	@ (8000f68 <main+0x10c>)
 8000eac:	482f      	ldr	r0, [pc, #188]	@ (8000f6c <main+0x110>)
 8000eae:	f005 fde2 	bl	8006a76 <HAL_UART_Receive_IT>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);  // ?��코더 ?��?��?��?��?�� ?��?��
 8000eb2:	213c      	movs	r1, #60	@ 0x3c
 8000eb4:	482e      	ldr	r0, [pc, #184]	@ (8000f70 <main+0x114>)
 8000eb6:	f005 f899 	bl	8005fec <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(f_imu_read == 1){
 8000eba:	4b2e      	ldr	r3, [pc, #184]	@ (8000f74 <main+0x118>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d10e      	bne.n	8000ee0 <main+0x84>
		  MPU6050_ReadAccel(&ax, &ay, &az);
 8000ec2:	4a2d      	ldr	r2, [pc, #180]	@ (8000f78 <main+0x11c>)
 8000ec4:	492d      	ldr	r1, [pc, #180]	@ (8000f7c <main+0x120>)
 8000ec6:	482e      	ldr	r0, [pc, #184]	@ (8000f80 <main+0x124>)
 8000ec8:	f000 fb72 	bl	80015b0 <MPU6050_ReadAccel>
		  MPU6050_ReadGyro(&gx, &gy, &gz);
 8000ecc:	4a2d      	ldr	r2, [pc, #180]	@ (8000f84 <main+0x128>)
 8000ece:	492e      	ldr	r1, [pc, #184]	@ (8000f88 <main+0x12c>)
 8000ed0:	482e      	ldr	r0, [pc, #184]	@ (8000f8c <main+0x130>)
 8000ed2:	f000 fb99 	bl	8001608 <MPU6050_ReadGyro>
		  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
		  Compute_Orientation_Kalman();
 8000ed6:	f000 fdef 	bl	8001ab8 <Compute_Orientation_Kalman>
		  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
		  //printf("Accel X: %d Y: %d Z: %d Gyro: X: %d, Y: %d, Z: %d \r\n", ax, ay, az, gx, gy, gz);
		  //Send_IMU_Data(&ax, &ay, &az, &gx, &gy, &gz);
		  f_imu_read = 0;
 8000eda:	4b26      	ldr	r3, [pc, #152]	@ (8000f74 <main+0x118>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
	  }
	  if(f_uart_send == 1){
 8000ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f90 <main+0x134>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d1e8      	bne.n	8000eba <main+0x5e>
		  //printf("Pitch %d Roll %d Yaw %d \r\n", pitch, roll, yaw);
		  Send_IMU_Data(&ax, &ay, &az, &gx, &gy, &gz, &pitch, &roll, &yaw);
 8000ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f94 <main+0x138>)
 8000eea:	9304      	str	r3, [sp, #16]
 8000eec:	4b2a      	ldr	r3, [pc, #168]	@ (8000f98 <main+0x13c>)
 8000eee:	9303      	str	r3, [sp, #12]
 8000ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f9c <main+0x140>)
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	4b23      	ldr	r3, [pc, #140]	@ (8000f84 <main+0x128>)
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <main+0x12c>)
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	4b23      	ldr	r3, [pc, #140]	@ (8000f8c <main+0x130>)
 8000efe:	4a1e      	ldr	r2, [pc, #120]	@ (8000f78 <main+0x11c>)
 8000f00:	491e      	ldr	r1, [pc, #120]	@ (8000f7c <main+0x120>)
 8000f02:	481f      	ldr	r0, [pc, #124]	@ (8000f80 <main+0x124>)
 8000f04:	f000 fbac 	bl	8001660 <Send_IMU_Data>
		  encoder1 = (int16_t)__HAL_TIM_GET_COUNTER(&htim4);
 8000f08:	4b19      	ldr	r3, [pc, #100]	@ (8000f70 <main+0x114>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	4b23      	ldr	r3, [pc, #140]	@ (8000fa0 <main+0x144>)
 8000f12:	801a      	strh	r2, [r3, #0]
		  encoder2++;
 8000f14:	4b23      	ldr	r3, [pc, #140]	@ (8000fa4 <main+0x148>)
 8000f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	b21a      	sxth	r2, r3
 8000f22:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <main+0x148>)
 8000f24:	801a      	strh	r2, [r3, #0]
		  encoder3++;
 8000f26:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <main+0x14c>)
 8000f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	3301      	adds	r3, #1
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <main+0x14c>)
 8000f36:	801a      	strh	r2, [r3, #0]
		  encoder4++;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <main+0x150>)
 8000f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <main+0x150>)
 8000f48:	801a      	strh	r2, [r3, #0]
		  f_uart_send = 0;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <main+0x134>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
	  if(f_imu_read == 1){
 8000f50:	e7b3      	b.n	8000eba <main+0x5e>
 8000f52:	bf00      	nop
 8000f54:	200000e8 	.word	0x200000e8
 8000f58:	20000130 	.word	0x20000130
 8000f5c:	20000228 	.word	0x20000228
 8000f60:	20000254 	.word	0x20000254
 8000f64:	20000280 	.word	0x20000280
 8000f68:	2000021c 	.word	0x2000021c
 8000f6c:	200001c0 	.word	0x200001c0
 8000f70:	20000178 	.word	0x20000178
 8000f74:	20000208 	.word	0x20000208
 8000f78:	2000020e 	.word	0x2000020e
 8000f7c:	2000020c 	.word	0x2000020c
 8000f80:	2000020a 	.word	0x2000020a
 8000f84:	20000214 	.word	0x20000214
 8000f88:	20000212 	.word	0x20000212
 8000f8c:	20000210 	.word	0x20000210
 8000f90:	20000209 	.word	0x20000209
 8000f94:	2000021a 	.word	0x2000021a
 8000f98:	20000218 	.word	0x20000218
 8000f9c:	20000216 	.word	0x20000216
 8000fa0:	2000021e 	.word	0x2000021e
 8000fa4:	20000220 	.word	0x20000220
 8000fa8:	20000222 	.word	0x20000222
 8000fac:	20000224 	.word	0x20000224

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	@ 0x50
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	2230      	movs	r2, #48	@ 0x30
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 fecc 	bl	8007d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	4b27      	ldr	r3, [pc, #156]	@ (8001078 <SystemClock_Config+0xc8>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	4a26      	ldr	r2, [pc, #152]	@ (8001078 <SystemClock_Config+0xc8>)
 8000fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe4:	4b24      	ldr	r3, [pc, #144]	@ (8001078 <SystemClock_Config+0xc8>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4b21      	ldr	r3, [pc, #132]	@ (800107c <SystemClock_Config+0xcc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a20      	ldr	r2, [pc, #128]	@ (800107c <SystemClock_Config+0xcc>)
 8000ffa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b1e      	ldr	r3, [pc, #120]	@ (800107c <SystemClock_Config+0xcc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100c:	2302      	movs	r3, #2
 800100e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001010:	2301      	movs	r3, #1
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001014:	2310      	movs	r3, #16
 8001016:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001018:	2302      	movs	r3, #2
 800101a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800101c:	2300      	movs	r3, #0
 800101e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001020:	2310      	movs	r3, #16
 8001022:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001024:	23a8      	movs	r3, #168	@ 0xa8
 8001026:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001028:	2302      	movs	r3, #2
 800102a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800102c:	2304      	movs	r3, #4
 800102e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	4618      	mov	r0, r3
 8001036:	f004 fa1b 	bl	8005470 <HAL_RCC_OscConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001040:	f000 fe8e 	bl	8001d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001044:	230f      	movs	r3, #15
 8001046:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001048:	2302      	movs	r3, #2
 800104a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001054:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2102      	movs	r1, #2
 8001060:	4618      	mov	r0, r3
 8001062:	f004 fc7d 	bl	8005960 <HAL_RCC_ClockConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800106c:	f000 fe78 	bl	8001d60 <Error_Handler>
  }
}
 8001070:	bf00      	nop
 8001072:	3750      	adds	r7, #80	@ 0x50
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40023800 	.word	0x40023800
 800107c:	40007000 	.word	0x40007000

08001080 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	201c      	movs	r0, #28
 800108a:	f001 fa66 	bl	800255a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800108e:	201c      	movs	r0, #28
 8001090:	f001 fa7f 	bl	8002592 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	201d      	movs	r0, #29
 800109a:	f001 fa5e 	bl	800255a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800109e:	201d      	movs	r0, #29
 80010a0:	f001 fa77 	bl	8002592 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	201f      	movs	r0, #31
 80010aa:	f001 fa56 	bl	800255a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010ae:	201f      	movs	r0, #31
 80010b0:	f001 fa6f 	bl	8002592 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	2020      	movs	r0, #32
 80010ba:	f001 fa4e 	bl	800255a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80010be:	2020      	movs	r0, #32
 80010c0:	f001 fa67 	bl	8002592 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	2026      	movs	r0, #38	@ 0x26
 80010ca:	f001 fa46 	bl	800255a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010ce:	2026      	movs	r0, #38	@ 0x26
 80010d0:	f001 fa5f 	bl	8002592 <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	201e      	movs	r0, #30
 80010da:	f001 fa3e 	bl	800255a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010de:	201e      	movs	r0, #30
 80010e0:	f001 fa57 	bl	8002592 <HAL_NVIC_EnableIRQ>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_I2C1_Init+0x54>)
 80010ee:	4a14      	ldr	r2, [pc, #80]	@ (8001140 <MX_I2C1_Init+0x58>)
 80010f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <MX_I2C1_Init+0x54>)
 80010f4:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80010f8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <MX_I2C1_Init+0x54>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_I2C1_Init+0x54>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001106:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <MX_I2C1_Init+0x54>)
 8001108:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800110c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <MX_I2C1_Init+0x54>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_I2C1_Init+0x54>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <MX_I2C1_Init+0x54>)
 800111c:	2200      	movs	r2, #0
 800111e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_I2C1_Init+0x54>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_I2C1_Init+0x54>)
 8001128:	f001 fcbe 	bl	8002aa8 <HAL_I2C_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001132:	f000 fe15 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000094 	.word	0x20000094
 8001140:	40005400 	.word	0x40005400

08001144 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	463b      	mov	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001160:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <MX_TIM2_Init+0x94>)
 8001162:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001166:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001168:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <MX_TIM2_Init+0x94>)
 800116a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800116e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001170:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <MX_TIM2_Init+0x94>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250-1;
 8001176:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <MX_TIM2_Init+0x94>)
 8001178:	22f9      	movs	r2, #249	@ 0xf9
 800117a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117c:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <MX_TIM2_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001182:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <MX_TIM2_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001188:	4813      	ldr	r0, [pc, #76]	@ (80011d8 <MX_TIM2_Init+0x94>)
 800118a:	f004 fdc9 	bl	8005d20 <HAL_TIM_Base_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001194:	f000 fde4 	bl	8001d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	4619      	mov	r1, r3
 80011a4:	480c      	ldr	r0, [pc, #48]	@ (80011d8 <MX_TIM2_Init+0x94>)
 80011a6:	f005 f89f 	bl	80062e8 <HAL_TIM_ConfigClockSource>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011b0:	f000 fdd6 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <MX_TIM2_Init+0x94>)
 80011c2:	f005 faed 	bl	80067a0 <HAL_TIMEx_MasterConfigSynchronization>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011cc:	f000 fdc8 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200000e8 	.word	0x200000e8

080011dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	463b      	mov	r3, r7
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001270 <MX_TIM3_Init+0x94>)
 80011fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001274 <MX_TIM3_Init+0x98>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <MX_TIM3_Init+0x94>)
 8001200:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001204:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b1a      	ldr	r3, [pc, #104]	@ (8001270 <MX_TIM3_Init+0x94>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800120c:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <MX_TIM3_Init+0x94>)
 800120e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001212:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <MX_TIM3_Init+0x94>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <MX_TIM3_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001220:	4813      	ldr	r0, [pc, #76]	@ (8001270 <MX_TIM3_Init+0x94>)
 8001222:	f004 fd7d 	bl	8005d20 <HAL_TIM_Base_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800122c:	f000 fd98 	bl	8001d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001230:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001234:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	4619      	mov	r1, r3
 800123c:	480c      	ldr	r0, [pc, #48]	@ (8001270 <MX_TIM3_Init+0x94>)
 800123e:	f005 f853 	bl	80062e8 <HAL_TIM_ConfigClockSource>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001248:	f000 fd8a 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	@ (8001270 <MX_TIM3_Init+0x94>)
 800125a:	f005 faa1 	bl	80067a0 <HAL_TIMEx_MasterConfigSynchronization>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001264:	f000 fd7c 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000130 	.word	0x20000130
 8001274:	40000400 	.word	0x40000400

08001278 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08c      	sub	sp, #48	@ 0x30
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	2224      	movs	r2, #36	@ 0x24
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f006 fd68 	bl	8007d5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001294:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <MX_TIM4_Init+0xa0>)
 8001296:	4a21      	ldr	r2, [pc, #132]	@ (800131c <MX_TIM4_Init+0xa4>)
 8001298:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800129a:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <MX_TIM4_Init+0xa0>)
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <MX_TIM4_Init+0xa0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <MX_TIM4_Init+0xa0>)
 80012a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012ac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <MX_TIM4_Init+0xa0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b4:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <MX_TIM4_Init+0xa0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012c2:	2301      	movs	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012d2:	2301      	movs	r3, #1
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	4619      	mov	r1, r3
 80012e4:	480c      	ldr	r0, [pc, #48]	@ (8001318 <MX_TIM4_Init+0xa0>)
 80012e6:	f004 fddb 	bl	8005ea0 <HAL_TIM_Encoder_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80012f0:	f000 fd36 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_TIM4_Init+0xa0>)
 8001302:	f005 fa4d 	bl	80067a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800130c:	f000 fd28 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3730      	adds	r7, #48	@ 0x30
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000178 	.word	0x20000178
 800131c:	40000800 	.word	0x40000800

08001320 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001326:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <MX_USART2_UART_Init+0x50>)
 8001328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 800132c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b09      	ldr	r3, [pc, #36]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b08      	ldr	r3, [pc, #32]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001358:	f005 fab2 	bl	80068c0 <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001362:	f000 fcfd 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001c0 	.word	0x200001c0
 8001370:	40004400 	.word	0x40004400

08001374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b32      	ldr	r3, [pc, #200]	@ (8001458 <MX_GPIO_Init+0xe4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a31      	ldr	r2, [pc, #196]	@ (8001458 <MX_GPIO_Init+0xe4>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b2f      	ldr	r3, [pc, #188]	@ (8001458 <MX_GPIO_Init+0xe4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001458 <MX_GPIO_Init+0xe4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001458 <MX_GPIO_Init+0xe4>)
 80013b0:	f043 0310 	orr.w	r3, r3, #16
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b28      	ldr	r3, [pc, #160]	@ (8001458 <MX_GPIO_Init+0xe4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <MX_GPIO_Init+0xe4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	4a23      	ldr	r2, [pc, #140]	@ (8001458 <MX_GPIO_Init+0xe4>)
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d2:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <MX_GPIO_Init+0xe4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <MX_GPIO_Init+0xe4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001458 <MX_GPIO_Init+0xe4>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <MX_GPIO_Init+0xe4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001400:	4816      	ldr	r0, [pc, #88]	@ (800145c <MX_GPIO_Init+0xe8>)
 8001402:	f001 fb1d 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800140c:	4814      	ldr	r0, [pc, #80]	@ (8001460 <MX_GPIO_Init+0xec>)
 800140e:	f001 fb17 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001412:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	2301      	movs	r3, #1
 800141a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	480c      	ldr	r0, [pc, #48]	@ (800145c <MX_GPIO_Init+0xe8>)
 800142c:	f001 f96c 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001430:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	@ (8001460 <MX_GPIO_Init+0xec>)
 800144a:	f001 f95d 	bl	8002708 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800144e:	bf00      	nop
 8001450:	3728      	adds	r7, #40	@ 0x28
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40021000 	.word	0x40021000
 8001460:	40020c00 	.word	0x40020c00

08001464 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001474:	d108      	bne.n	8001488 <HAL_TIM_PeriodElapsedCallback+0x24>
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001476:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800147a:	4809      	ldr	r0, [pc, #36]	@ (80014a0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800147c:	f001 faf9 	bl	8002a72 <HAL_GPIO_TogglePin>
        f_imu_read = 1;
 8001480:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
    }else if(htim->Instance == TIM3){
    	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
    	f_uart_send = 1;
    }
}
 8001486:	e007      	b.n	8001498 <HAL_TIM_PeriodElapsedCallback+0x34>
    }else if(htim->Instance == TIM3){
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a06      	ldr	r2, [pc, #24]	@ (80014a8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d102      	bne.n	8001498 <HAL_TIM_PeriodElapsedCallback+0x34>
    	f_uart_send = 1;
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40020c00 	.word	0x40020c00
 80014a4:	20000208 	.word	0x20000208
 80014a8:	40000400 	.word	0x40000400
 80014ac:	20000209 	.word	0x20000209

080014b0 <MPU6050_Write>:
	int uga = 0;
	who_am_i =  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, 100);
	return uga;
}

void MPU6050_Write(uint8_t reg, uint8_t data) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	4603      	mov	r3, r0
 80014b8:	460a      	mov	r2, r1
 80014ba:	71fb      	strb	r3, [r7, #7]
 80014bc:	4613      	mov	r3, r2
 80014be:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg, data};
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	733b      	strb	r3, [r7, #12]
 80014c4:	79bb      	ldrb	r3, [r7, #6]
 80014c6:	737b      	strb	r3, [r7, #13]
    if(HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buffer, 2, 100) != HAL_OK){
 80014c8:	f107 020c 	add.w	r2, r7, #12
 80014cc:	2364      	movs	r3, #100	@ 0x64
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2302      	movs	r3, #2
 80014d2:	21d0      	movs	r1, #208	@ 0xd0
 80014d4:	4806      	ldr	r0, [pc, #24]	@ (80014f0 <MPU6050_Write+0x40>)
 80014d6:	f001 fc41 	bl	8002d5c <HAL_I2C_Master_Transmit>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <MPU6050_Write+0x36>
    	printf("I2C error\n");
 80014e0:	4804      	ldr	r0, [pc, #16]	@ (80014f4 <MPU6050_Write+0x44>)
 80014e2:	f006 fb5b 	bl	8007b9c <puts>
    }
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000094 	.word	0x20000094
 80014f4:	080089c0 	.word	0x080089c0

080014f8 <MPU6050_Read>:

void MPU6050_Read(uint8_t reg, uint8_t* data, uint8_t length) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af02      	add	r7, sp, #8
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	4613      	mov	r3, r2
 8001506:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, &reg, 1, 100) != HAL_OK){
 8001508:	1dfa      	adds	r2, r7, #7
 800150a:	2364      	movs	r3, #100	@ 0x64
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2301      	movs	r3, #1
 8001510:	21d0      	movs	r1, #208	@ 0xd0
 8001512:	480e      	ldr	r0, [pc, #56]	@ (800154c <MPU6050_Read+0x54>)
 8001514:	f001 fc22 	bl	8002d5c <HAL_I2C_Master_Transmit>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <MPU6050_Read+0x2c>
    	printf("I2C error\n");
 800151e:	480c      	ldr	r0, [pc, #48]	@ (8001550 <MPU6050_Read+0x58>)
 8001520:	f006 fb3c 	bl	8007b9c <puts>
    }
    if(HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, data, length, 100) != HAL_OK){
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	b29b      	uxth	r3, r3
 8001528:	2264      	movs	r2, #100	@ 0x64
 800152a:	9200      	str	r2, [sp, #0]
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	21d0      	movs	r1, #208	@ 0xd0
 8001530:	4806      	ldr	r0, [pc, #24]	@ (800154c <MPU6050_Read+0x54>)
 8001532:	f001 fd11 	bl	8002f58 <HAL_I2C_Master_Receive>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <MPU6050_Read+0x4a>
    	printf("I2C error\n");
 800153c:	4804      	ldr	r0, [pc, #16]	@ (8001550 <MPU6050_Read+0x58>)
 800153e:	f006 fb2d 	bl	8007b9c <puts>
    }
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000094 	.word	0x20000094
 8001550:	080089c0 	.word	0x080089c0

08001554 <MPU6050_Init>:

void MPU6050_Init(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	// MPU6050 software reset
	 MPU6050_Write(PWR_MGMT_1, 0x80);
 8001558:	2180      	movs	r1, #128	@ 0x80
 800155a:	206b      	movs	r0, #107	@ 0x6b
 800155c:	f7ff ffa8 	bl	80014b0 <MPU6050_Write>
	 HAL_Delay(100);
 8001560:	2064      	movs	r0, #100	@ 0x64
 8001562:	f000 fefb 	bl	800235c <HAL_Delay>

    // 1️⃣ ?��?�� 모드 ?��?�� (PWR_MGMT_1)
    MPU6050_Write(PWR_MGMT_1, 0x00);
 8001566:	2100      	movs	r1, #0
 8001568:	206b      	movs	r0, #107	@ 0x6b
 800156a:	f7ff ffa1 	bl	80014b0 <MPU6050_Write>
    HAL_Delay(100);
 800156e:	2064      	movs	r0, #100	@ 0x64
 8001570:	f000 fef4 	bl	800235c <HAL_Delay>

    // 2️⃣ �???????????��?�� 범위 ?��?�� (±2g)
    MPU6050_Write(ACCEL_CONFIG, 0x00);  // 00 = ±2g
 8001574:	2100      	movs	r1, #0
 8001576:	201c      	movs	r0, #28
 8001578:	f7ff ff9a 	bl	80014b0 <MPU6050_Write>
    HAL_Delay(10);
 800157c:	200a      	movs	r0, #10
 800157e:	f000 feed 	bl	800235c <HAL_Delay>

    // 2️⃣ ?��?���????????? 범위 ?��?�� (±250°/s)
    MPU6050_Write(0x1B, 0x00);  // 00 = ±250°/s
 8001582:	2100      	movs	r1, #0
 8001584:	201b      	movs	r0, #27
 8001586:	f7ff ff93 	bl	80014b0 <MPU6050_Write>
    HAL_Delay(10);
 800158a:	200a      	movs	r0, #10
 800158c:	f000 fee6 	bl	800235c <HAL_Delay>

    // 3️⃣ ?��?���?????????? ?��?�� ?��?�� (SMPLRT_DIV)
    MPU6050_Write(SMPLRT_DIV, 0x07);  // 1kHz / (1 + 7) = 125Hz ?��?���??????????
 8001590:	2107      	movs	r1, #7
 8001592:	2019      	movs	r0, #25
 8001594:	f7ff ff8c 	bl	80014b0 <MPU6050_Write>
    HAL_Delay(10);
 8001598:	200a      	movs	r0, #10
 800159a:	f000 fedf 	bl	800235c <HAL_Delay>

    // 4️⃣ ???�� ?���?????????? ?��?�� ?��?�� (CONFIG)
    MPU6050_Write(CONFIG, 0x03);  // 44Hz ?��?�� ?��?��
 800159e:	2103      	movs	r1, #3
 80015a0:	201a      	movs	r0, #26
 80015a2:	f7ff ff85 	bl	80014b0 <MPU6050_Write>
    HAL_Delay(10);
 80015a6:	200a      	movs	r0, #10
 80015a8:	f000 fed8 	bl	800235c <HAL_Delay>
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <MPU6050_ReadAccel>:

void MPU6050_ReadAccel(int16_t* ax, int16_t* ay, int16_t* az) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];  // �???????????��?�� ?��?��?�� 6바이?�� (X, Y, Z)

    MPU6050_Read(ACCEL_XOUT_H, buffer, 6);
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	2206      	movs	r2, #6
 80015c2:	4619      	mov	r1, r3
 80015c4:	203b      	movs	r0, #59	@ 0x3b
 80015c6:	f7ff ff97 	bl	80014f8 <MPU6050_Read>

    *ax = (int16_t)(buffer[0] << 8 | buffer[1]);  // X�??????????
 80015ca:	7c3b      	ldrb	r3, [r7, #16]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	7c7b      	ldrb	r3, [r7, #17]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	801a      	strh	r2, [r3, #0]
    *ay = (int16_t)(buffer[2] << 8 | buffer[3]);  // Y�??????????
 80015dc:	7cbb      	ldrb	r3, [r7, #18]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	7cfb      	ldrb	r3, [r7, #19]
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	801a      	strh	r2, [r3, #0]
    *az = (int16_t)(buffer[4] << 8 | buffer[5]);  // Z�??????????
 80015ee:	7d3b      	ldrb	r3, [r7, #20]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	7d7b      	ldrb	r3, [r7, #21]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	801a      	strh	r2, [r3, #0]
}
 8001600:	bf00      	nop
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <MPU6050_ReadGyro>:

void MPU6050_ReadGyro(int16_t* gx, int16_t* gy, int16_t* gz) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];  // ?��?���????????? ?��?��?�� 6바이?�� (X, Y, Z)

    MPU6050_Read(GYRO_XOUT_H, buffer, 6);
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	2206      	movs	r2, #6
 800161a:	4619      	mov	r1, r3
 800161c:	2043      	movs	r0, #67	@ 0x43
 800161e:	f7ff ff6b 	bl	80014f8 <MPU6050_Read>

    *gx = (int16_t)(buffer[0] << 8 | buffer[1]);  // X�?????????
 8001622:	7c3b      	ldrb	r3, [r7, #16]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	b21a      	sxth	r2, r3
 8001628:	7c7b      	ldrb	r3, [r7, #17]
 800162a:	b21b      	sxth	r3, r3
 800162c:	4313      	orrs	r3, r2
 800162e:	b21a      	sxth	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	801a      	strh	r2, [r3, #0]
    *gy = (int16_t)(buffer[2] << 8 | buffer[3]);  // Y�?????????
 8001634:	7cbb      	ldrb	r3, [r7, #18]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	b21a      	sxth	r2, r3
 800163a:	7cfb      	ldrb	r3, [r7, #19]
 800163c:	b21b      	sxth	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b21a      	sxth	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	801a      	strh	r2, [r3, #0]
    *gz = (int16_t)(buffer[4] << 8 | buffer[5]);  // Z�?????????
 8001646:	7d3b      	ldrb	r3, [r7, #20]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	b21a      	sxth	r2, r3
 800164c:	7d7b      	ldrb	r3, [r7, #21]
 800164e:	b21b      	sxth	r3, r3
 8001650:	4313      	orrs	r3, r2
 8001652:	b21a      	sxth	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	801a      	strh	r2, [r3, #0]
}
 8001658:	bf00      	nop
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <Send_IMU_Data>:

void Send_IMU_Data(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz, int16_t* pitch, int16_t* roll, int16_t* yaw) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	@ 0x30
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]

    uint8_t tx_buffer[29];

    // 16비트 ?��?���????????? 바이?�� 배열�????????? �??????????�� (Little Endian)
    tx_buffer[0] = 0xf5;
 800166e:	23f5      	movs	r3, #245	@ 0xf5
 8001670:	743b      	strb	r3, [r7, #16]
    tx_buffer[1] = 26;
 8001672:	231a      	movs	r3, #26
 8001674:	747b      	strb	r3, [r7, #17]
    tx_buffer[2] = *ax & 0xFF;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	74bb      	strb	r3, [r7, #18]
    tx_buffer[3] = (*ax >> 8) & 0xFF;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001686:	121b      	asrs	r3, r3, #8
 8001688:	b21b      	sxth	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	74fb      	strb	r3, [r7, #19]
    tx_buffer[4] = *ay & 0xFF;
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	753b      	strb	r3, [r7, #20]
    tx_buffer[5] = (*ay >> 8) & 0xFF;
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169e:	121b      	asrs	r3, r3, #8
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	757b      	strb	r3, [r7, #21]
    tx_buffer[6] = *az & 0xFF;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	75bb      	strb	r3, [r7, #22]
    tx_buffer[7] = (*az >> 8) & 0xFF;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b6:	121b      	asrs	r3, r3, #8
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	75fb      	strb	r3, [r7, #23]
    tx_buffer[8] = *gx & 0xFF;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	763b      	strb	r3, [r7, #24]
    tx_buffer[9] = (*gx >> 8) & 0xFF;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ce:	121b      	asrs	r3, r3, #8
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	767b      	strb	r3, [r7, #25]
    tx_buffer[10] = *gy & 0xFF;
 80016d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	76bb      	strb	r3, [r7, #26]
    tx_buffer[11] = (*gy >> 8) & 0xFF;
 80016e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e6:	121b      	asrs	r3, r3, #8
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	76fb      	strb	r3, [r7, #27]
    tx_buffer[12] = *gz & 0xFF;
 80016ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	773b      	strb	r3, [r7, #28]
    tx_buffer[13] = (*gz >> 8) & 0xFF;
 80016f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fe:	121b      	asrs	r3, r3, #8
 8001700:	b21b      	sxth	r3, r3
 8001702:	b2db      	uxtb	r3, r3
 8001704:	777b      	strb	r3, [r7, #29]
    tx_buffer[14] = *pitch & 0xFF;
 8001706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	77bb      	strb	r3, [r7, #30]
    tx_buffer[15] = (*pitch >> 8) & 0xFF;
 8001710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001716:	121b      	asrs	r3, r3, #8
 8001718:	b21b      	sxth	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	77fb      	strb	r3, [r7, #31]
    tx_buffer[16] = *roll & 0xFF;
 800171e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	f887 3020 	strb.w	r3, [r7, #32]
    tx_buffer[17] = (*roll >> 8) & 0xFF;
 800172a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800172c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001730:	121b      	asrs	r3, r3, #8
 8001732:	b21b      	sxth	r3, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    tx_buffer[18] = *yaw & 0xFF;
 800173a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800173c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    tx_buffer[19] = (*yaw >> 8) & 0xFF;
 8001746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174c:	121b      	asrs	r3, r3, #8
 800174e:	b21b      	sxth	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    tx_buffer[20] = (encoder1 >> 8) & 0xff;
 8001756:	4b23      	ldr	r3, [pc, #140]	@ (80017e4 <Send_IMU_Data+0x184>)
 8001758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175c:	121b      	asrs	r3, r3, #8
 800175e:	b21b      	sxth	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    tx_buffer[21] = encoder1 & 0xff;
 8001766:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <Send_IMU_Data+0x184>)
 8001768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    tx_buffer[22] = (encoder2 >> 8) & 0xff;
 8001772:	4b1d      	ldr	r3, [pc, #116]	@ (80017e8 <Send_IMU_Data+0x188>)
 8001774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001778:	121b      	asrs	r3, r3, #8
 800177a:	b21b      	sxth	r3, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    tx_buffer[23] = encoder2 & 0xff;
 8001782:	4b19      	ldr	r3, [pc, #100]	@ (80017e8 <Send_IMU_Data+0x188>)
 8001784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tx_buffer[24] = (encoder3 >> 8) & 0xff;
 800178e:	4b17      	ldr	r3, [pc, #92]	@ (80017ec <Send_IMU_Data+0x18c>)
 8001790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001794:	121b      	asrs	r3, r3, #8
 8001796:	b21b      	sxth	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    tx_buffer[25] = encoder3 & 0xff;
 800179e:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <Send_IMU_Data+0x18c>)
 80017a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    tx_buffer[26] = (encoder4 >> 8) & 0xff;
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <Send_IMU_Data+0x190>)
 80017ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b0:	121b      	asrs	r3, r3, #8
 80017b2:	b21b      	sxth	r3, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    tx_buffer[27] = encoder4 & 0xff;
 80017ba:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <Send_IMU_Data+0x190>)
 80017bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    tx_buffer[28] = 0x00;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c


    // UART ?��?��
    HAL_UART_Transmit(&huart2, tx_buffer, 29, 100);
 80017cc:	f107 0110 	add.w	r1, r7, #16
 80017d0:	2364      	movs	r3, #100	@ 0x64
 80017d2:	221d      	movs	r2, #29
 80017d4:	4807      	ldr	r0, [pc, #28]	@ (80017f4 <Send_IMU_Data+0x194>)
 80017d6:	f005 f8c3 	bl	8006960 <HAL_UART_Transmit>
}
 80017da:	bf00      	nop
 80017dc:	3730      	adds	r7, #48	@ 0x30
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2000021e 	.word	0x2000021e
 80017e8:	20000220 	.word	0x20000220
 80017ec:	20000222 	.word	0x20000222
 80017f0:	20000224 	.word	0x20000224
 80017f4:	200001c0 	.word	0x200001c0

080017f8 <Kalman_Init>:

void Kalman_Init(KalmanFilter *kf) {
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
    kf->angle = 0.0;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
    kf->bias = 0.0;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
    kf->P[0][0] = 1.0;  kf->P[0][1] = 0.0;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001816:	60da      	str	r2, [r3, #12]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
    kf->P[1][0] = 0.0;  kf->P[1][1] = 1.0;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800182e:	619a      	str	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	0000      	movs	r0, r0
	...

08001840 <Kalman_Update>:

float Kalman_Update(KalmanFilter *kf, float newAngle, float newRate, float dt) {
 8001840:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	ed87 0a02 	vstr	s0, [r7, #8]
 800184e:	edc7 0a01 	vstr	s1, [r7, #4]
 8001852:	ed87 1a00 	vstr	s2, [r7]
    // 1️⃣ ?���?????? ?���??????
    kf->rate = newRate - kf->bias;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	edd3 7a01 	vldr	s15, [r3, #4]
 800185c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->angle += dt * kf->rate;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	ed93 7a00 	vldr	s14, [r3]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	edd3 6a02 	vldr	s13, [r3, #8]
 8001876:	edd7 7a00 	vldr	s15, [r7]
 800187a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800187e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	edc3 7a00 	vstr	s15, [r3]

    // ?���?????? 공분?�� ?��?�� ?��?��?��?��
    kf->P[0][0] += dt * (dt * kf->P[1][1] - kf->P[0][1] - kf->P[1][0] + 0.001);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fdff 	bl	8000490 <__aeabi_f2d>
 8001892:	4604      	mov	r4, r0
 8001894:	460d      	mov	r5, r1
 8001896:	6838      	ldr	r0, [r7, #0]
 8001898:	f7fe fdfa 	bl	8000490 <__aeabi_f2d>
 800189c:	4680      	mov	r8, r0
 800189e:	4689      	mov	r9, r1
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	ed93 7a06 	vldr	s14, [r3, #24]
 80018a6:	edd7 7a00 	vldr	s15, [r7]
 80018aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80018b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80018be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c2:	ee17 0a90 	vmov	r0, s15
 80018c6:	f7fe fde3 	bl	8000490 <__aeabi_f2d>
 80018ca:	a375      	add	r3, pc, #468	@ (adr r3, 8001aa0 <Kalman_Update+0x260>)
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	f7fe fc80 	bl	80001d4 <__adddf3>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4640      	mov	r0, r8
 80018da:	4649      	mov	r1, r9
 80018dc:	f7fe fe30 	bl	8000540 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4620      	mov	r0, r4
 80018e6:	4629      	mov	r1, r5
 80018e8:	f7fe fc74 	bl	80001d4 <__adddf3>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7ff f8d4 	bl	8000aa0 <__aeabi_d2f>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	60da      	str	r2, [r3, #12]
    kf->P[0][1] -= dt * kf->P[1][1];
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	ed93 7a04 	vldr	s14, [r3, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	edd3 6a06 	vldr	s13, [r3, #24]
 800190a:	edd7 7a00 	vldr	s15, [r7]
 800190e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][0] -= dt * kf->P[1][1];
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	edd3 6a06 	vldr	s13, [r3, #24]
 8001928:	edd7 7a00 	vldr	s15, [r7]
 800192c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->P[1][1] += 0.003;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fda6 	bl	8000490 <__aeabi_f2d>
 8001944:	a358      	add	r3, pc, #352	@ (adr r3, 8001aa8 <Kalman_Update+0x268>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe fc43 	bl	80001d4 <__adddf3>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f7ff f8a3 	bl	8000aa0 <__aeabi_d2f>
 800195a:	4602      	mov	r2, r0
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	619a      	str	r2, [r3, #24]

    // 2️⃣ 보정 ?���??????
    kf->S = kf->P[0][0] + 0.03;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fd93 	bl	8000490 <__aeabi_f2d>
 800196a:	a351      	add	r3, pc, #324	@ (adr r3, 8001ab0 <Kalman_Update+0x270>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	f7fe fc30 	bl	80001d4 <__adddf3>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff f890 	bl	8000aa0 <__aeabi_d2f>
 8001980:	4602      	mov	r2, r0
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	629a      	str	r2, [r3, #40]	@ 0x28
    kf->K[0] = kf->P[0][0] / kf->S;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	edd3 6a03 	vldr	s13, [r3, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	edc3 7a07 	vstr	s15, [r3, #28]
    kf->K[1] = kf->P[1][0] / kf->S;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	edd3 6a05 	vldr	s13, [r3, #20]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80019a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	edc3 7a08 	vstr	s15, [r3, #32]

    kf->y = newAngle - kf->angle;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80019bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    kf->angle += kf->K[0] * kf->y;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	ed93 7a00 	vldr	s14, [r3]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	edd3 6a07 	vldr	s13, [r3, #28]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80019d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	edc3 7a00 	vstr	s15, [r3]
    kf->bias += kf->K[1] * kf->y;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	edd3 6a08 	vldr	s13, [r3, #32]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80019f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	edc3 7a01 	vstr	s15, [r3, #4]

    // ?���?????? 공분?�� ?��?��?��?��
    float P00_temp = kf->P[0][0];
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	617b      	str	r3, [r7, #20]
    float P01_temp = kf->P[0][1];
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	613b      	str	r3, [r7, #16]

    kf->P[0][0] -= kf->K[0] * P00_temp;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	edd3 6a07 	vldr	s13, [r3, #28]
 8001a1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->P[0][1] -= kf->K[0] * P01_temp;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	edd3 6a07 	vldr	s13, [r3, #28]
 8001a3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][0] -= kf->K[1] * P00_temp;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	edd3 6a08 	vldr	s13, [r3, #32]
 8001a5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->P[1][1] -= kf->K[1] * P01_temp;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	edd3 6a08 	vldr	s13, [r3, #32]
 8001a78:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	edc3 7a06 	vstr	s15, [r3, #24]

    return kf->angle;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	ee07 3a90 	vmov	s15, r3
}
 8001a92:	eeb0 0a67 	vmov.f32	s0, s15
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a9e:	bf00      	nop
 8001aa0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001aa4:	3f50624d 	.word	0x3f50624d
 8001aa8:	bc6a7efa 	.word	0xbc6a7efa
 8001aac:	3f689374 	.word	0x3f689374
 8001ab0:	eb851eb8 	.word	0xeb851eb8
 8001ab4:	3f9eb851 	.word	0x3f9eb851

08001ab8 <Compute_Orientation_Kalman>:

void Compute_Orientation_Kalman() {
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
    // �???????��?���?????? 기반 pitch, roll 계산
    float acc_pitch = atan2(-ax, sqrt(ay * ay + az * az)) * 57.2958;
 8001abe:	4b7c      	ldr	r3, [pc, #496]	@ (8001cb0 <Compute_Orientation_Kalman+0x1f8>)
 8001ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac4:	425b      	negs	r3, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fcd0 	bl	800046c <__aeabi_i2d>
 8001acc:	4604      	mov	r4, r0
 8001ace:	460d      	mov	r5, r1
 8001ad0:	4b78      	ldr	r3, [pc, #480]	@ (8001cb4 <Compute_Orientation_Kalman+0x1fc>)
 8001ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b76      	ldr	r3, [pc, #472]	@ (8001cb4 <Compute_Orientation_Kalman+0x1fc>)
 8001ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ade:	fb03 f202 	mul.w	r2, r3, r2
 8001ae2:	4b75      	ldr	r3, [pc, #468]	@ (8001cb8 <Compute_Orientation_Kalman+0x200>)
 8001ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4b73      	ldr	r3, [pc, #460]	@ (8001cb8 <Compute_Orientation_Kalman+0x200>)
 8001aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af0:	fb01 f303 	mul.w	r3, r1, r3
 8001af4:	4413      	add	r3, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fcb8 	bl	800046c <__aeabi_i2d>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	ec43 2b10 	vmov	d0, r2, r3
 8001b04:	f006 fbe0 	bl	80082c8 <sqrt>
 8001b08:	eeb0 7a40 	vmov.f32	s14, s0
 8001b0c:	eef0 7a60 	vmov.f32	s15, s1
 8001b10:	eeb0 1a47 	vmov.f32	s2, s14
 8001b14:	eef0 1a67 	vmov.f32	s3, s15
 8001b18:	ec45 4b10 	vmov	d0, r4, r5
 8001b1c:	f006 fbd2 	bl	80082c4 <atan2>
 8001b20:	ec51 0b10 	vmov	r0, r1, d0
 8001b24:	a35e      	add	r3, pc, #376	@ (adr r3, 8001ca0 <Compute_Orientation_Kalman+0x1e8>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	f7fe fd09 	bl	8000540 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f7fe ffb3 	bl	8000aa0 <__aeabi_d2f>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	61fb      	str	r3, [r7, #28]
    float acc_roll  = atan2(ay, az) * 57.2958;
 8001b3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb4 <Compute_Orientation_Kalman+0x1fc>)
 8001b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fc91 	bl	800046c <__aeabi_i2d>
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	460d      	mov	r5, r1
 8001b4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb8 <Compute_Orientation_Kalman+0x200>)
 8001b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fc89 	bl	800046c <__aeabi_i2d>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	ec43 2b11 	vmov	d1, r2, r3
 8001b62:	ec45 4b10 	vmov	d0, r4, r5
 8001b66:	f006 fbad 	bl	80082c4 <atan2>
 8001b6a:	ec51 0b10 	vmov	r0, r1, d0
 8001b6e:	a34c      	add	r3, pc, #304	@ (adr r3, 8001ca0 <Compute_Orientation_Kalman+0x1e8>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	f7fe fce4 	bl	8000540 <__aeabi_dmul>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f7fe ff8e 	bl	8000aa0 <__aeabi_d2f>
 8001b84:	4603      	mov	r3, r0
 8001b86:	61bb      	str	r3, [r7, #24]

    // ?��?��로스코프 값을 deg/s ?��?���?????? �???????��
    float gx_dps = gx / 131.0;
 8001b88:	4b4c      	ldr	r3, [pc, #304]	@ (8001cbc <Compute_Orientation_Kalman+0x204>)
 8001b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fc6c 	bl	800046c <__aeabi_i2d>
 8001b94:	a344      	add	r3, pc, #272	@ (adr r3, 8001ca8 <Compute_Orientation_Kalman+0x1f0>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	f7fe fdfb 	bl	8000794 <__aeabi_ddiv>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f7fe ff7b 	bl	8000aa0 <__aeabi_d2f>
 8001baa:	4603      	mov	r3, r0
 8001bac:	617b      	str	r3, [r7, #20]
    float gy_dps = gy / 131.0;
 8001bae:	4b44      	ldr	r3, [pc, #272]	@ (8001cc0 <Compute_Orientation_Kalman+0x208>)
 8001bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fc59 	bl	800046c <__aeabi_i2d>
 8001bba:	a33b      	add	r3, pc, #236	@ (adr r3, 8001ca8 <Compute_Orientation_Kalman+0x1f0>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	f7fe fde8 	bl	8000794 <__aeabi_ddiv>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7fe ff68 	bl	8000aa0 <__aeabi_d2f>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	613b      	str	r3, [r7, #16]
    float gz_dps = gz / 131.0;
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc4 <Compute_Orientation_Kalman+0x20c>)
 8001bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fc46 	bl	800046c <__aeabi_i2d>
 8001be0:	a331      	add	r3, pc, #196	@ (adr r3, 8001ca8 <Compute_Orientation_Kalman+0x1f0>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe fdd5 	bl	8000794 <__aeabi_ddiv>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe ff55 	bl	8000aa0 <__aeabi_d2f>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	60fb      	str	r3, [r7, #12]

    // 칼만 ?��?�� ?��?��
    float pitch_f = Kalman_Update(&kalman_pitch, acc_pitch, gy_dps, dt);
 8001bfa:	eddf 7a33 	vldr	s15, [pc, #204]	@ 8001cc8 <Compute_Orientation_Kalman+0x210>
 8001bfe:	eeb0 1a67 	vmov.f32	s2, s15
 8001c02:	edd7 0a04 	vldr	s1, [r7, #16]
 8001c06:	ed97 0a07 	vldr	s0, [r7, #28]
 8001c0a:	4830      	ldr	r0, [pc, #192]	@ (8001ccc <Compute_Orientation_Kalman+0x214>)
 8001c0c:	f7ff fe18 	bl	8001840 <Kalman_Update>
 8001c10:	ed87 0a02 	vstr	s0, [r7, #8]
    float roll_f  = Kalman_Update(&kalman_roll, acc_roll, gx_dps, dt);
 8001c14:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8001cc8 <Compute_Orientation_Kalman+0x210>
 8001c18:	eeb0 1a67 	vmov.f32	s2, s15
 8001c1c:	edd7 0a05 	vldr	s1, [r7, #20]
 8001c20:	ed97 0a06 	vldr	s0, [r7, #24]
 8001c24:	482a      	ldr	r0, [pc, #168]	@ (8001cd0 <Compute_Orientation_Kalman+0x218>)
 8001c26:	f7ff fe0b 	bl	8001840 <Kalman_Update>
 8001c2a:	ed87 0a01 	vstr	s0, [r7, #4]
    float yaw_f   = Kalman_Update(&kalman_yaw, yaw_f, gz_dps, dt);
 8001c2e:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8001cc8 <Compute_Orientation_Kalman+0x210>
 8001c32:	eeb0 1a67 	vmov.f32	s2, s15
 8001c36:	edd7 0a03 	vldr	s1, [r7, #12]
 8001c3a:	ed97 0a00 	vldr	s0, [r7]
 8001c3e:	4825      	ldr	r0, [pc, #148]	@ (8001cd4 <Compute_Orientation_Kalman+0x21c>)
 8001c40:	f7ff fdfe 	bl	8001840 <Kalman_Update>
 8001c44:	ed87 0a00 	vstr	s0, [r7]

    // float -> int �???????��
    pitch = (int16_t)(pitch_f * 100);
 8001c48:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c4c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001cd8 <Compute_Orientation_Kalman+0x220>
 8001c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c58:	ee17 3a90 	vmov	r3, s15
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cdc <Compute_Orientation_Kalman+0x224>)
 8001c60:	801a      	strh	r2, [r3, #0]
    roll  = (int16_t)(roll_f * 100);
 8001c62:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c66:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001cd8 <Compute_Orientation_Kalman+0x220>
 8001c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c72:	ee17 3a90 	vmov	r3, s15
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	4b19      	ldr	r3, [pc, #100]	@ (8001ce0 <Compute_Orientation_Kalman+0x228>)
 8001c7a:	801a      	strh	r2, [r3, #0]
    yaw   = (int16_t)(yaw_f * 100);
 8001c7c:	edd7 7a00 	vldr	s15, [r7]
 8001c80:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001cd8 <Compute_Orientation_Kalman+0x220>
 8001c84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c8c:	ee17 3a90 	vmov	r3, s15
 8001c90:	b21a      	sxth	r2, r3
 8001c92:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <Compute_Orientation_Kalman+0x22c>)
 8001c94:	801a      	strh	r2, [r3, #0]
}
 8001c96:	bf00      	nop
 8001c98:	3720      	adds	r7, #32
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	c63f1412 	.word	0xc63f1412
 8001ca4:	404ca5dc 	.word	0x404ca5dc
 8001ca8:	00000000 	.word	0x00000000
 8001cac:	40606000 	.word	0x40606000
 8001cb0:	2000020a 	.word	0x2000020a
 8001cb4:	2000020c 	.word	0x2000020c
 8001cb8:	2000020e 	.word	0x2000020e
 8001cbc:	20000210 	.word	0x20000210
 8001cc0:	20000212 	.word	0x20000212
 8001cc4:	20000214 	.word	0x20000214
 8001cc8:	3ccccccd 	.word	0x3ccccccd
 8001ccc:	20000228 	.word	0x20000228
 8001cd0:	20000254 	.word	0x20000254
 8001cd4:	20000280 	.word	0x20000280
 8001cd8:	42c80000 	.word	0x42c80000
 8001cdc:	20000216 	.word	0x20000216
 8001ce0:	20000218 	.word	0x20000218
 8001ce4:	2000021a 	.word	0x2000021a

08001ce8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a16      	ldr	r2, [pc, #88]	@ (8001d50 <HAL_UART_RxCpltCallback+0x68>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d120      	bne.n	8001d3c <HAL_UART_RxCpltCallback+0x54>
        if(rxData[0] == 'a'){
 8001cfa:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <HAL_UART_RxCpltCallback+0x6c>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b61      	cmp	r3, #97	@ 0x61
 8001d00:	d10c      	bne.n	8001d1c <HAL_UART_RxCpltCallback+0x34>
        	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d08:	4813      	ldr	r0, [pc, #76]	@ (8001d58 <HAL_UART_RxCpltCallback+0x70>)
 8001d0a:	f000 fe99 	bl	8002a40 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d14:	4810      	ldr	r0, [pc, #64]	@ (8001d58 <HAL_UART_RxCpltCallback+0x70>)
 8001d16:	f000 fe93 	bl	8002a40 <HAL_GPIO_WritePin>
 8001d1a:	e00f      	b.n	8001d3c <HAL_UART_RxCpltCallback+0x54>
        }else if(rxData[0] == 'b'){
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d54 <HAL_UART_RxCpltCallback+0x6c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b62      	cmp	r3, #98	@ 0x62
 8001d22:	d10b      	bne.n	8001d3c <HAL_UART_RxCpltCallback+0x54>
        	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d2a:	480b      	ldr	r0, [pc, #44]	@ (8001d58 <HAL_UART_RxCpltCallback+0x70>)
 8001d2c:	f000 fe88 	bl	8002a40 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8001d30:	2201      	movs	r2, #1
 8001d32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d36:	4808      	ldr	r0, [pc, #32]	@ (8001d58 <HAL_UART_RxCpltCallback+0x70>)
 8001d38:	f000 fe82 	bl	8002a40 <HAL_GPIO_WritePin>
        }
    }
    HAL_UART_Receive_IT(&huart2, rxData, 1); // ?��?�� ?��?�� ?��?��
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	4905      	ldr	r1, [pc, #20]	@ (8001d54 <HAL_UART_RxCpltCallback+0x6c>)
 8001d40:	4806      	ldr	r0, [pc, #24]	@ (8001d5c <HAL_UART_RxCpltCallback+0x74>)
 8001d42:	f004 fe98 	bl	8006a76 <HAL_UART_Receive_IT>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40004400 	.word	0x40004400
 8001d54:	2000021c 	.word	0x2000021c
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	200001c0 	.word	0x200001c0

08001d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d64:	b672      	cpsid	i
}
 8001d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <Error_Handler+0x8>

08001d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d82:	4b0d      	ldr	r3, [pc, #52]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	4a08      	ldr	r2, [pc, #32]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	@ 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	@ (8001e40 <HAL_I2C_MspInit+0x84>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d12c      	bne.n	8001e38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <HAL_I2C_MspInit+0x88>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	4a17      	ldr	r2, [pc, #92]	@ (8001e44 <HAL_I2C_MspInit+0x88>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dee:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <HAL_I2C_MspInit+0x88>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001dfa:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e00:	2312      	movs	r3, #18
 8001e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4619      	mov	r1, r3
 8001e16:	480c      	ldr	r0, [pc, #48]	@ (8001e48 <HAL_I2C_MspInit+0x8c>)
 8001e18:	f000 fc76 	bl	8002708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <HAL_I2C_MspInit+0x88>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	4a07      	ldr	r2, [pc, #28]	@ (8001e44 <HAL_I2C_MspInit+0x88>)
 8001e26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2c:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <HAL_I2C_MspInit+0x88>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e38:	bf00      	nop
 8001e3a:	3728      	adds	r7, #40	@ 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40005400 	.word	0x40005400
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020400 	.word	0x40020400

08001e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b13      	ldr	r3, [pc, #76]	@ (8001eb0 <HAL_TIM_Base_MspInit+0x64>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	4a12      	ldr	r2, [pc, #72]	@ (8001eb0 <HAL_TIM_Base_MspInit+0x64>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6e:	4b10      	ldr	r3, [pc, #64]	@ (8001eb0 <HAL_TIM_Base_MspInit+0x64>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e7a:	e012      	b.n	8001ea2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb4 <HAL_TIM_Base_MspInit+0x68>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d10d      	bne.n	8001ea2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <HAL_TIM_Base_MspInit+0x64>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	4a08      	ldr	r2, [pc, #32]	@ (8001eb0 <HAL_TIM_Base_MspInit+0x64>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e96:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_TIM_Base_MspInit+0x64>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40000400 	.word	0x40000400

08001eb8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	@ 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a28      	ldr	r2, [pc, #160]	@ (8001f78 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d14a      	bne.n	8001f70 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	4b27      	ldr	r3, [pc, #156]	@ (8001f7c <HAL_TIM_Encoder_MspInit+0xc4>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	4a26      	ldr	r2, [pc, #152]	@ (8001f7c <HAL_TIM_Encoder_MspInit+0xc4>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eea:	4b24      	ldr	r3, [pc, #144]	@ (8001f7c <HAL_TIM_Encoder_MspInit+0xc4>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4b20      	ldr	r3, [pc, #128]	@ (8001f7c <HAL_TIM_Encoder_MspInit+0xc4>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	4a1f      	ldr	r2, [pc, #124]	@ (8001f7c <HAL_TIM_Encoder_MspInit+0xc4>)
 8001f00:	f043 0308 	orr.w	r3, r3, #8
 8001f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f06:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <HAL_TIM_Encoder_MspInit+0xc4>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <HAL_TIM_Encoder_MspInit+0xc4>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	4a18      	ldr	r2, [pc, #96]	@ (8001f7c <HAL_TIM_Encoder_MspInit+0xc4>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f22:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <HAL_TIM_Encoder_MspInit+0xc4>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f40:	2302      	movs	r3, #2
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	4619      	mov	r1, r3
 8001f4a:	480d      	ldr	r0, [pc, #52]	@ (8001f80 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f4c:	f000 fbdc 	bl	8002708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f50:	2340      	movs	r3, #64	@ 0x40
 8001f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f60:	2302      	movs	r3, #2
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4806      	ldr	r0, [pc, #24]	@ (8001f84 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f6c:	f000 fbcc 	bl	8002708 <HAL_GPIO_Init>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001f70:	bf00      	nop
 8001f72:	3728      	adds	r7, #40	@ 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40000800 	.word	0x40000800
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020c00 	.word	0x40020c00
 8001f84:	40020400 	.word	0x40020400

08001f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	@ 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a19      	ldr	r2, [pc, #100]	@ (800200c <HAL_UART_MspInit+0x84>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d12b      	bne.n	8002002 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	4b18      	ldr	r3, [pc, #96]	@ (8002010 <HAL_UART_MspInit+0x88>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	4a17      	ldr	r2, [pc, #92]	@ (8002010 <HAL_UART_MspInit+0x88>)
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fba:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <HAL_UART_MspInit+0x88>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <HAL_UART_MspInit+0x88>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	4a10      	ldr	r2, [pc, #64]	@ (8002010 <HAL_UART_MspInit+0x88>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002010 <HAL_UART_MspInit+0x88>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fe2:	230c      	movs	r3, #12
 8001fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ff2:	2307      	movs	r3, #7
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4805      	ldr	r0, [pc, #20]	@ (8002014 <HAL_UART_MspInit+0x8c>)
 8001ffe:	f000 fb83 	bl	8002708 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002002:	bf00      	nop
 8002004:	3728      	adds	r7, #40	@ 0x28
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40004400 	.word	0x40004400
 8002010:	40023800 	.word	0x40023800
 8002014:	40020000 	.word	0x40020000

08002018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <NMI_Handler+0x4>

08002020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <HardFault_Handler+0x4>

08002028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <MemManage_Handler+0x4>

08002030 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <BusFault_Handler+0x4>

08002038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <UsageFault_Handler+0x4>

08002040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800206e:	f000 f955 	bl	800231c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <TIM2_IRQHandler+0x10>)
 800207e:	f004 f843 	bl	8006108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200000e8 	.word	0x200000e8

0800208c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002090:	4802      	ldr	r0, [pc, #8]	@ (800209c <TIM3_IRQHandler+0x10>)
 8002092:	f004 f839 	bl	8006108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000130 	.word	0x20000130

080020a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020a4:	4802      	ldr	r0, [pc, #8]	@ (80020b0 <TIM4_IRQHandler+0x10>)
 80020a6:	f004 f82f 	bl	8006108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000178 	.word	0x20000178

080020b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80020b8:	4802      	ldr	r0, [pc, #8]	@ (80020c4 <I2C1_EV_IRQHandler+0x10>)
 80020ba:	f001 f97f 	bl	80033bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000094 	.word	0x20000094

080020c8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80020cc:	4802      	ldr	r0, [pc, #8]	@ (80020d8 <I2C1_ER_IRQHandler+0x10>)
 80020ce:	f001 fac8 	bl	8003662 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000094 	.word	0x20000094

080020dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020e0:	4802      	ldr	r0, [pc, #8]	@ (80020ec <USART2_IRQHandler+0x10>)
 80020e2:	f004 fced 	bl	8006ac0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200001c0 	.word	0x200001c0

080020f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	e00a      	b.n	8002118 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002102:	f3af 8000 	nop.w
 8002106:	4601      	mov	r1, r0
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	60ba      	str	r2, [r7, #8]
 800210e:	b2ca      	uxtb	r2, r1
 8002110:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3301      	adds	r3, #1
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	429a      	cmp	r2, r3
 800211e:	dbf0      	blt.n	8002102 <_read+0x12>
  }

  return len;
 8002120:	687b      	ldr	r3, [r7, #4]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <_close>:
  }
  return len;
}

int _close(int file)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002152:	605a      	str	r2, [r3, #4]
  return 0;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <_isatty>:

int _isatty(int file)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800216a:	2301      	movs	r3, #1
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800219c:	4a14      	ldr	r2, [pc, #80]	@ (80021f0 <_sbrk+0x5c>)
 800219e:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <_sbrk+0x60>)
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a8:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <_sbrk+0x64>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d102      	bne.n	80021b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b0:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <_sbrk+0x64>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	@ (80021fc <_sbrk+0x68>)
 80021b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021b6:	4b10      	ldr	r3, [pc, #64]	@ (80021f8 <_sbrk+0x64>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d207      	bcs.n	80021d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c4:	f005 fe18 	bl	8007df8 <__errno>
 80021c8:	4603      	mov	r3, r0
 80021ca:	220c      	movs	r2, #12
 80021cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
 80021d2:	e009      	b.n	80021e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d4:	4b08      	ldr	r3, [pc, #32]	@ (80021f8 <_sbrk+0x64>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021da:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	4a05      	ldr	r2, [pc, #20]	@ (80021f8 <_sbrk+0x64>)
 80021e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021e6:	68fb      	ldr	r3, [r7, #12]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20020000 	.word	0x20020000
 80021f4:	00000400 	.word	0x00000400
 80021f8:	200002ac 	.word	0x200002ac
 80021fc:	20000400 	.word	0x20000400

08002200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <SystemInit+0x20>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220a:	4a05      	ldr	r2, [pc, #20]	@ (8002220 <SystemInit+0x20>)
 800220c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002210:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002224:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800225c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002228:	f7ff ffea 	bl	8002200 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800222c:	480c      	ldr	r0, [pc, #48]	@ (8002260 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800222e:	490d      	ldr	r1, [pc, #52]	@ (8002264 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002230:	4a0d      	ldr	r2, [pc, #52]	@ (8002268 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002234:	e002      	b.n	800223c <LoopCopyDataInit>

08002236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223a:	3304      	adds	r3, #4

0800223c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800223c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002240:	d3f9      	bcc.n	8002236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002242:	4a0a      	ldr	r2, [pc, #40]	@ (800226c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002244:	4c0a      	ldr	r4, [pc, #40]	@ (8002270 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002248:	e001      	b.n	800224e <LoopFillZerobss>

0800224a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800224c:	3204      	adds	r2, #4

0800224e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002250:	d3fb      	bcc.n	800224a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002252:	f005 fdd7 	bl	8007e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002256:	f7fe fe01 	bl	8000e5c <main>
  bx  lr    
 800225a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800225c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002264:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002268:	08008a68 	.word	0x08008a68
  ldr r2, =_sbss
 800226c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002270:	20000400 	.word	0x20000400

08002274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002274:	e7fe      	b.n	8002274 <ADC_IRQHandler>
	...

08002278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800227c:	4b0e      	ldr	r3, [pc, #56]	@ (80022b8 <HAL_Init+0x40>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0d      	ldr	r2, [pc, #52]	@ (80022b8 <HAL_Init+0x40>)
 8002282:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002286:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002288:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0a      	ldr	r2, [pc, #40]	@ (80022b8 <HAL_Init+0x40>)
 800228e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002292:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002294:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <HAL_Init+0x40>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a07      	ldr	r2, [pc, #28]	@ (80022b8 <HAL_Init+0x40>)
 800229a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800229e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a0:	2003      	movs	r0, #3
 80022a2:	f000 f94f 	bl	8002544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a6:	200f      	movs	r0, #15
 80022a8:	f000 f808 	bl	80022bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022ac:	f7ff fd5e 	bl	8001d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023c00 	.word	0x40023c00

080022bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c4:	4b12      	ldr	r3, [pc, #72]	@ (8002310 <HAL_InitTick+0x54>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b12      	ldr	r3, [pc, #72]	@ (8002314 <HAL_InitTick+0x58>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4619      	mov	r1, r3
 80022ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f967 	bl	80025ae <HAL_SYSTICK_Config>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00e      	b.n	8002308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b0f      	cmp	r3, #15
 80022ee:	d80a      	bhi.n	8002306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f0:	2200      	movs	r2, #0
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f000 f92f 	bl	800255a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022fc:	4a06      	ldr	r2, [pc, #24]	@ (8002318 <HAL_InitTick+0x5c>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000000 	.word	0x20000000
 8002314:	20000008 	.word	0x20000008
 8002318:	20000004 	.word	0x20000004

0800231c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002320:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_IncTick+0x20>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_IncTick+0x24>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4413      	add	r3, r2
 800232c:	4a04      	ldr	r2, [pc, #16]	@ (8002340 <HAL_IncTick+0x24>)
 800232e:	6013      	str	r3, [r2, #0]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000008 	.word	0x20000008
 8002340:	200002b0 	.word	0x200002b0

08002344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return uwTick;
 8002348:	4b03      	ldr	r3, [pc, #12]	@ (8002358 <HAL_GetTick+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	200002b0 	.word	0x200002b0

0800235c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff ffee 	bl	8002344 <HAL_GetTick>
 8002368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002374:	d005      	beq.n	8002382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002376:	4b0a      	ldr	r3, [pc, #40]	@ (80023a0 <HAL_Delay+0x44>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002382:	bf00      	nop
 8002384:	f7ff ffde 	bl	8002344 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	429a      	cmp	r2, r3
 8002392:	d8f7      	bhi.n	8002384 <HAL_Delay+0x28>
  {
  }
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000008 	.word	0x20000008

080023a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b4:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023c0:	4013      	ands	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d6:	4a04      	ldr	r2, [pc, #16]	@ (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	60d3      	str	r3, [r2, #12]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f0:	4b04      	ldr	r3, [pc, #16]	@ (8002404 <__NVIC_GetPriorityGrouping+0x18>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	f003 0307 	and.w	r3, r3, #7
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	2b00      	cmp	r3, #0
 8002418:	db0b      	blt.n	8002432 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	f003 021f 	and.w	r2, r3, #31
 8002420:	4907      	ldr	r1, [pc, #28]	@ (8002440 <__NVIC_EnableIRQ+0x38>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	2001      	movs	r0, #1
 800242a:	fa00 f202 	lsl.w	r2, r0, r2
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000e100 	.word	0xe000e100

08002444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	6039      	str	r1, [r7, #0]
 800244e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002454:	2b00      	cmp	r3, #0
 8002456:	db0a      	blt.n	800246e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	b2da      	uxtb	r2, r3
 800245c:	490c      	ldr	r1, [pc, #48]	@ (8002490 <__NVIC_SetPriority+0x4c>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	0112      	lsls	r2, r2, #4
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	440b      	add	r3, r1
 8002468:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800246c:	e00a      	b.n	8002484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4908      	ldr	r1, [pc, #32]	@ (8002494 <__NVIC_SetPriority+0x50>)
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	3b04      	subs	r3, #4
 800247c:	0112      	lsls	r2, r2, #4
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	440b      	add	r3, r1
 8002482:	761a      	strb	r2, [r3, #24]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000e100 	.word	0xe000e100
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	@ 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f1c3 0307 	rsb	r3, r3, #7
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	bf28      	it	cs
 80024b6:	2304      	movcs	r3, #4
 80024b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3304      	adds	r3, #4
 80024be:	2b06      	cmp	r3, #6
 80024c0:	d902      	bls.n	80024c8 <NVIC_EncodePriority+0x30>
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3b03      	subs	r3, #3
 80024c6:	e000      	b.n	80024ca <NVIC_EncodePriority+0x32>
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	f04f 32ff 	mov.w	r2, #4294967295
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43da      	mvns	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	401a      	ands	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e0:	f04f 31ff 	mov.w	r1, #4294967295
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	43d9      	mvns	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	4313      	orrs	r3, r2
         );
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3724      	adds	r7, #36	@ 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002510:	d301      	bcc.n	8002516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002512:	2301      	movs	r3, #1
 8002514:	e00f      	b.n	8002536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002516:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <SysTick_Config+0x40>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800251e:	210f      	movs	r1, #15
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	f7ff ff8e 	bl	8002444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002528:	4b05      	ldr	r3, [pc, #20]	@ (8002540 <SysTick_Config+0x40>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800252e:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <SysTick_Config+0x40>)
 8002530:	2207      	movs	r2, #7
 8002532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	e000e010 	.word	0xe000e010

08002544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ff29 	bl	80023a4 <__NVIC_SetPriorityGrouping>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800255a:	b580      	push	{r7, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800256c:	f7ff ff3e 	bl	80023ec <__NVIC_GetPriorityGrouping>
 8002570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	6978      	ldr	r0, [r7, #20]
 8002578:	f7ff ff8e 	bl	8002498 <NVIC_EncodePriority>
 800257c:	4602      	mov	r2, r0
 800257e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff5d 	bl	8002444 <__NVIC_SetPriority>
}
 800258a:	bf00      	nop
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800259c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff31 	bl	8002408 <__NVIC_EnableIRQ>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff ffa2 	bl	8002500 <SysTick_Config>
 80025bc:	4603      	mov	r3, r0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7ff feb6 	bl	8002344 <HAL_GetTick>
 80025d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d008      	beq.n	80025f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2280      	movs	r2, #128	@ 0x80
 80025ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e052      	b.n	800269e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0216 	bic.w	r2, r2, #22
 8002606:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695a      	ldr	r2, [r3, #20]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002616:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	d103      	bne.n	8002628 <HAL_DMA_Abort+0x62>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0208 	bic.w	r2, r2, #8
 8002636:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0201 	bic.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002648:	e013      	b.n	8002672 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800264a:	f7ff fe7b 	bl	8002344 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b05      	cmp	r3, #5
 8002656:	d90c      	bls.n	8002672 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2203      	movs	r2, #3
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e015      	b.n	800269e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e4      	bne.n	800264a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002684:	223f      	movs	r2, #63	@ 0x3f
 8002686:	409a      	lsls	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d004      	beq.n	80026c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2280      	movs	r2, #128	@ 0x80
 80026be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e00c      	b.n	80026de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2205      	movs	r2, #5
 80026c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0201 	bic.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026f8:	b2db      	uxtb	r3, r3
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	@ 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	e16b      	b.n	80029fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002724:	2201      	movs	r2, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	429a      	cmp	r2, r3
 800273e:	f040 815a 	bne.w	80029f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d005      	beq.n	800275a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002756:	2b02      	cmp	r3, #2
 8002758:	d130      	bne.n	80027bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2203      	movs	r2, #3
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002790:	2201      	movs	r2, #1
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 0201 	and.w	r2, r3, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d017      	beq.n	80027f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d123      	bne.n	800284c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	08da      	lsrs	r2, r3, #3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3208      	adds	r2, #8
 800280c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	220f      	movs	r2, #15
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	08da      	lsrs	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3208      	adds	r2, #8
 8002846:	69b9      	ldr	r1, [r7, #24]
 8002848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2203      	movs	r2, #3
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0203 	and.w	r2, r3, #3
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80b4 	beq.w	80029f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	4b60      	ldr	r3, [pc, #384]	@ (8002a14 <HAL_GPIO_Init+0x30c>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	4a5f      	ldr	r2, [pc, #380]	@ (8002a14 <HAL_GPIO_Init+0x30c>)
 8002898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800289c:	6453      	str	r3, [r2, #68]	@ 0x44
 800289e:	4b5d      	ldr	r3, [pc, #372]	@ (8002a14 <HAL_GPIO_Init+0x30c>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002a18 <HAL_GPIO_Init+0x310>)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	3302      	adds	r3, #2
 80028b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	220f      	movs	r2, #15
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a52      	ldr	r2, [pc, #328]	@ (8002a1c <HAL_GPIO_Init+0x314>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d02b      	beq.n	800292e <HAL_GPIO_Init+0x226>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a51      	ldr	r2, [pc, #324]	@ (8002a20 <HAL_GPIO_Init+0x318>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d025      	beq.n	800292a <HAL_GPIO_Init+0x222>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a50      	ldr	r2, [pc, #320]	@ (8002a24 <HAL_GPIO_Init+0x31c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d01f      	beq.n	8002926 <HAL_GPIO_Init+0x21e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002a28 <HAL_GPIO_Init+0x320>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d019      	beq.n	8002922 <HAL_GPIO_Init+0x21a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4e      	ldr	r2, [pc, #312]	@ (8002a2c <HAL_GPIO_Init+0x324>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_GPIO_Init+0x216>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002a30 <HAL_GPIO_Init+0x328>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00d      	beq.n	800291a <HAL_GPIO_Init+0x212>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4c      	ldr	r2, [pc, #304]	@ (8002a34 <HAL_GPIO_Init+0x32c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <HAL_GPIO_Init+0x20e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4b      	ldr	r2, [pc, #300]	@ (8002a38 <HAL_GPIO_Init+0x330>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d101      	bne.n	8002912 <HAL_GPIO_Init+0x20a>
 800290e:	2307      	movs	r3, #7
 8002910:	e00e      	b.n	8002930 <HAL_GPIO_Init+0x228>
 8002912:	2308      	movs	r3, #8
 8002914:	e00c      	b.n	8002930 <HAL_GPIO_Init+0x228>
 8002916:	2306      	movs	r3, #6
 8002918:	e00a      	b.n	8002930 <HAL_GPIO_Init+0x228>
 800291a:	2305      	movs	r3, #5
 800291c:	e008      	b.n	8002930 <HAL_GPIO_Init+0x228>
 800291e:	2304      	movs	r3, #4
 8002920:	e006      	b.n	8002930 <HAL_GPIO_Init+0x228>
 8002922:	2303      	movs	r3, #3
 8002924:	e004      	b.n	8002930 <HAL_GPIO_Init+0x228>
 8002926:	2302      	movs	r3, #2
 8002928:	e002      	b.n	8002930 <HAL_GPIO_Init+0x228>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_GPIO_Init+0x228>
 800292e:	2300      	movs	r3, #0
 8002930:	69fa      	ldr	r2, [r7, #28]
 8002932:	f002 0203 	and.w	r2, r2, #3
 8002936:	0092      	lsls	r2, r2, #2
 8002938:	4093      	lsls	r3, r2
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002940:	4935      	ldr	r1, [pc, #212]	@ (8002a18 <HAL_GPIO_Init+0x310>)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	089b      	lsrs	r3, r3, #2
 8002946:	3302      	adds	r3, #2
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800294e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a3c <HAL_GPIO_Init+0x334>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002972:	4a32      	ldr	r2, [pc, #200]	@ (8002a3c <HAL_GPIO_Init+0x334>)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002978:	4b30      	ldr	r3, [pc, #192]	@ (8002a3c <HAL_GPIO_Init+0x334>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800299c:	4a27      	ldr	r2, [pc, #156]	@ (8002a3c <HAL_GPIO_Init+0x334>)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029a2:	4b26      	ldr	r3, [pc, #152]	@ (8002a3c <HAL_GPIO_Init+0x334>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029c6:	4a1d      	ldr	r2, [pc, #116]	@ (8002a3c <HAL_GPIO_Init+0x334>)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029cc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <HAL_GPIO_Init+0x334>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029f0:	4a12      	ldr	r2, [pc, #72]	@ (8002a3c <HAL_GPIO_Init+0x334>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3301      	adds	r3, #1
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2b0f      	cmp	r3, #15
 8002a00:	f67f ae90 	bls.w	8002724 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	3724      	adds	r7, #36	@ 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40013800 	.word	0x40013800
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	40020400 	.word	0x40020400
 8002a24:	40020800 	.word	0x40020800
 8002a28:	40020c00 	.word	0x40020c00
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40021400 	.word	0x40021400
 8002a34:	40021800 	.word	0x40021800
 8002a38:	40021c00 	.word	0x40021c00
 8002a3c:	40013c00 	.word	0x40013c00

08002a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a50:	787b      	ldrb	r3, [r7, #1]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a56:	887a      	ldrh	r2, [r7, #2]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a5c:	e003      	b.n	8002a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a5e:	887b      	ldrh	r3, [r7, #2]
 8002a60:	041a      	lsls	r2, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	619a      	str	r2, [r3, #24]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a84:	887a      	ldrh	r2, [r7, #2]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	041a      	lsls	r2, r3, #16
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	43d9      	mvns	r1, r3
 8002a90:	887b      	ldrh	r3, [r7, #2]
 8002a92:	400b      	ands	r3, r1
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	619a      	str	r2, [r3, #24]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e12b      	b.n	8002d12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff f974 	bl	8001dbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2224      	movs	r2, #36	@ 0x24
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0201 	bic.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002afa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b0c:	f003 f8e0 	bl	8005cd0 <HAL_RCC_GetPCLK1Freq>
 8002b10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4a81      	ldr	r2, [pc, #516]	@ (8002d1c <HAL_I2C_Init+0x274>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d807      	bhi.n	8002b2c <HAL_I2C_Init+0x84>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4a80      	ldr	r2, [pc, #512]	@ (8002d20 <HAL_I2C_Init+0x278>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	bf94      	ite	ls
 8002b24:	2301      	movls	r3, #1
 8002b26:	2300      	movhi	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e006      	b.n	8002b3a <HAL_I2C_Init+0x92>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4a7d      	ldr	r2, [pc, #500]	@ (8002d24 <HAL_I2C_Init+0x27c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	bf94      	ite	ls
 8002b34:	2301      	movls	r3, #1
 8002b36:	2300      	movhi	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e0e7      	b.n	8002d12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4a78      	ldr	r2, [pc, #480]	@ (8002d28 <HAL_I2C_Init+0x280>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	0c9b      	lsrs	r3, r3, #18
 8002b4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a6a      	ldr	r2, [pc, #424]	@ (8002d1c <HAL_I2C_Init+0x274>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d802      	bhi.n	8002b7c <HAL_I2C_Init+0xd4>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	e009      	b.n	8002b90 <HAL_I2C_Init+0xe8>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b82:	fb02 f303 	mul.w	r3, r2, r3
 8002b86:	4a69      	ldr	r2, [pc, #420]	@ (8002d2c <HAL_I2C_Init+0x284>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	099b      	lsrs	r3, r3, #6
 8002b8e:	3301      	adds	r3, #1
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	430b      	orrs	r3, r1
 8002b96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ba2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	495c      	ldr	r1, [pc, #368]	@ (8002d1c <HAL_I2C_Init+0x274>)
 8002bac:	428b      	cmp	r3, r1
 8002bae:	d819      	bhi.n	8002be4 <HAL_I2C_Init+0x13c>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1e59      	subs	r1, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bbe:	1c59      	adds	r1, r3, #1
 8002bc0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002bc4:	400b      	ands	r3, r1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_I2C_Init+0x138>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1e59      	subs	r1, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bd8:	3301      	adds	r3, #1
 8002bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bde:	e051      	b.n	8002c84 <HAL_I2C_Init+0x1dc>
 8002be0:	2304      	movs	r3, #4
 8002be2:	e04f      	b.n	8002c84 <HAL_I2C_Init+0x1dc>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d111      	bne.n	8002c10 <HAL_I2C_Init+0x168>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1e58      	subs	r0, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	440b      	add	r3, r1
 8002bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	e012      	b.n	8002c36 <HAL_I2C_Init+0x18e>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1e58      	subs	r0, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6859      	ldr	r1, [r3, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	0099      	lsls	r1, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c26:	3301      	adds	r3, #1
 8002c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_I2C_Init+0x196>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e022      	b.n	8002c84 <HAL_I2C_Init+0x1dc>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10e      	bne.n	8002c64 <HAL_I2C_Init+0x1bc>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1e58      	subs	r0, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6859      	ldr	r1, [r3, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	440b      	add	r3, r1
 8002c54:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c62:	e00f      	b.n	8002c84 <HAL_I2C_Init+0x1dc>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1e58      	subs	r0, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	0099      	lsls	r1, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	6809      	ldr	r1, [r1, #0]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69da      	ldr	r2, [r3, #28]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002cb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6911      	ldr	r1, [r2, #16]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68d2      	ldr	r2, [r2, #12]
 8002cbe:	4311      	orrs	r1, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	000186a0 	.word	0x000186a0
 8002d20:	001e847f 	.word	0x001e847f
 8002d24:	003d08ff 	.word	0x003d08ff
 8002d28:	431bde83 	.word	0x431bde83
 8002d2c:	10624dd3 	.word	0x10624dd3

08002d30 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d42:	2b80      	cmp	r3, #128	@ 0x80
 8002d44:	d103      	bne.n	8002d4e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
  }
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	461a      	mov	r2, r3
 8002d68:	460b      	mov	r3, r1
 8002d6a:	817b      	strh	r3, [r7, #10]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d70:	f7ff fae8 	bl	8002344 <HAL_GetTick>
 8002d74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b20      	cmp	r3, #32
 8002d80:	f040 80e0 	bne.w	8002f44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	2319      	movs	r3, #25
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4970      	ldr	r1, [pc, #448]	@ (8002f50 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f002 f8ea 	bl	8004f68 <I2C_WaitOnFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e0d3      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_I2C_Master_Transmit+0x50>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e0cc      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x1ea>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d007      	beq.n	8002dd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002de0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2221      	movs	r2, #33	@ 0x21
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2210      	movs	r2, #16
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	893a      	ldrh	r2, [r7, #8]
 8002e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4a50      	ldr	r2, [pc, #320]	@ (8002f54 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e14:	8979      	ldrh	r1, [r7, #10]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	6a3a      	ldr	r2, [r7, #32]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f001 feac 	bl	8004b78 <I2C_MasterRequestWrite>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e08d      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e40:	e066      	b.n	8002f10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	6a39      	ldr	r1, [r7, #32]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f002 f9a8 	bl	800519c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d107      	bne.n	8002e6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e06b      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e72:	781a      	ldrb	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d11b      	bne.n	8002ee4 <HAL_I2C_Master_Transmit+0x188>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d017      	beq.n	8002ee4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	6a39      	ldr	r1, [r7, #32]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f002 f99f 	bl	800522c <I2C_WaitOnBTFFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00d      	beq.n	8002f10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d107      	bne.n	8002f0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e01a      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d194      	bne.n	8002e42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e000      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f44:	2302      	movs	r3, #2
  }
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	00100002 	.word	0x00100002
 8002f54:	ffff0000 	.word	0xffff0000

08002f58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08c      	sub	sp, #48	@ 0x30
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	461a      	mov	r2, r3
 8002f64:	460b      	mov	r3, r1
 8002f66:	817b      	strh	r3, [r7, #10]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f6c:	f7ff f9ea 	bl	8002344 <HAL_GetTick>
 8002f70:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	f040 8217 	bne.w	80033ae <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	2319      	movs	r3, #25
 8002f86:	2201      	movs	r2, #1
 8002f88:	497c      	ldr	r1, [pc, #496]	@ (800317c <HAL_I2C_Master_Receive+0x224>)
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f001 ffec 	bl	8004f68 <I2C_WaitOnFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f96:	2302      	movs	r3, #2
 8002f98:	e20a      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_I2C_Master_Receive+0x50>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e203      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d007      	beq.n	8002fce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0201 	orr.w	r2, r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2222      	movs	r2, #34	@ 0x22
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2210      	movs	r2, #16
 8002fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	893a      	ldrh	r2, [r7, #8]
 8002ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4a5c      	ldr	r2, [pc, #368]	@ (8003180 <HAL_I2C_Master_Receive+0x228>)
 800300e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003010:	8979      	ldrh	r1, [r7, #10]
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f001 fe30 	bl	8004c7c <I2C_MasterRequestRead>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e1c4      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302a:	2b00      	cmp	r3, #0
 800302c:	d113      	bne.n	8003056 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800302e:	2300      	movs	r3, #0
 8003030:	623b      	str	r3, [r7, #32]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	623b      	str	r3, [r7, #32]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	623b      	str	r3, [r7, #32]
 8003042:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	e198      	b.n	8003388 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305a:	2b01      	cmp	r3, #1
 800305c:	d11b      	bne.n	8003096 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800306c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	61fb      	str	r3, [r7, #28]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	e178      	b.n	8003388 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309a:	2b02      	cmp	r3, #2
 800309c:	d11b      	bne.n	80030d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	e158      	b.n	8003388 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030fc:	e144      	b.n	8003388 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003102:	2b03      	cmp	r3, #3
 8003104:	f200 80f1 	bhi.w	80032ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310c:	2b01      	cmp	r3, #1
 800310e:	d123      	bne.n	8003158 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003112:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f002 f903 	bl	8005320 <I2C_WaitOnRXNEFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e145      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003156:	e117      	b.n	8003388 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800315c:	2b02      	cmp	r3, #2
 800315e:	d14e      	bne.n	80031fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003166:	2200      	movs	r2, #0
 8003168:	4906      	ldr	r1, [pc, #24]	@ (8003184 <HAL_I2C_Master_Receive+0x22c>)
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f001 fefc 	bl	8004f68 <I2C_WaitOnFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e11a      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
 800317a:	bf00      	nop
 800317c:	00100002 	.word	0x00100002
 8003180:	ffff0000 	.word	0xffff0000
 8003184:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003196:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691a      	ldr	r2, [r3, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031fc:	e0c4      	b.n	8003388 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003204:	2200      	movs	r2, #0
 8003206:	496c      	ldr	r1, [pc, #432]	@ (80033b8 <HAL_I2C_Master_Receive+0x460>)
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f001 fead 	bl	8004f68 <I2C_WaitOnFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0cb      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003226:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691a      	ldr	r2, [r3, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003260:	2200      	movs	r2, #0
 8003262:	4955      	ldr	r1, [pc, #340]	@ (80033b8 <HAL_I2C_Master_Receive+0x460>)
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f001 fe7f 	bl	8004f68 <I2C_WaitOnFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e09d      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003282:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032e8:	e04e      	b.n	8003388 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f002 f816 	bl	8005320 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e058      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d124      	bne.n	8003388 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003342:	2b03      	cmp	r3, #3
 8003344:	d107      	bne.n	8003356 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003354:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338c:	2b00      	cmp	r3, #0
 800338e:	f47f aeb6 	bne.w	80030fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	e000      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80033ae:	2302      	movs	r3, #2
  }
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3728      	adds	r7, #40	@ 0x28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	00010004 	.word	0x00010004

080033bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033e4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	2b10      	cmp	r3, #16
 80033ea:	d003      	beq.n	80033f4 <HAL_I2C_EV_IRQHandler+0x38>
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	2b40      	cmp	r3, #64	@ 0x40
 80033f0:	f040 80b1 	bne.w	8003556 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10d      	bne.n	800342a <HAL_I2C_EV_IRQHandler+0x6e>
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003414:	d003      	beq.n	800341e <HAL_I2C_EV_IRQHandler+0x62>
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800341c:	d101      	bne.n	8003422 <HAL_I2C_EV_IRQHandler+0x66>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <HAL_I2C_EV_IRQHandler+0x68>
 8003422:	2300      	movs	r3, #0
 8003424:	2b01      	cmp	r3, #1
 8003426:	f000 8114 	beq.w	8003652 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00b      	beq.n	800344c <HAL_I2C_EV_IRQHandler+0x90>
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f001 fffa 	bl	8005438 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fd7a 	bl	8003f3e <I2C_Master_SB>
 800344a:	e083      	b.n	8003554 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d008      	beq.n	8003468 <HAL_I2C_EV_IRQHandler+0xac>
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fdf2 	bl	800404a <I2C_Master_ADD10>
 8003466:	e075      	b.n	8003554 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d008      	beq.n	8003484 <HAL_I2C_EV_IRQHandler+0xc8>
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fe0e 	bl	800409e <I2C_Master_ADDR>
 8003482:	e067      	b.n	8003554 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d036      	beq.n	80034fc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800349c:	f000 80db 	beq.w	8003656 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00d      	beq.n	80034c6 <HAL_I2C_EV_IRQHandler+0x10a>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_I2C_EV_IRQHandler+0x10a>
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d103      	bne.n	80034c6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f9d6 	bl	8003870 <I2C_MasterTransmit_TXE>
 80034c4:	e046      	b.n	8003554 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80c2 	beq.w	8003656 <HAL_I2C_EV_IRQHandler+0x29a>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80bc 	beq.w	8003656 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80034de:	7bbb      	ldrb	r3, [r7, #14]
 80034e0:	2b21      	cmp	r3, #33	@ 0x21
 80034e2:	d103      	bne.n	80034ec <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fa5f 	bl	80039a8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ea:	e0b4      	b.n	8003656 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	2b40      	cmp	r3, #64	@ 0x40
 80034f0:	f040 80b1 	bne.w	8003656 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 facd 	bl	8003a94 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034fa:	e0ac      	b.n	8003656 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003506:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800350a:	f000 80a4 	beq.w	8003656 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00d      	beq.n	8003534 <HAL_I2C_EV_IRQHandler+0x178>
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <HAL_I2C_EV_IRQHandler+0x178>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d103      	bne.n	8003534 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fb49 	bl	8003bc4 <I2C_MasterReceive_RXNE>
 8003532:	e00f      	b.n	8003554 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 808b 	beq.w	8003656 <HAL_I2C_EV_IRQHandler+0x29a>
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8085 	beq.w	8003656 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fc01 	bl	8003d54 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003552:	e080      	b.n	8003656 <HAL_I2C_EV_IRQHandler+0x29a>
 8003554:	e07f      	b.n	8003656 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d004      	beq.n	8003568 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	e007      	b.n	8003578 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d011      	beq.n	80035a6 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00c      	beq.n	80035a6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800359c:	69b9      	ldr	r1, [r7, #24]
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 ffcc 	bl	800453c <I2C_Slave_ADDR>
 80035a4:	e05a      	b.n	800365c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_I2C_EV_IRQHandler+0x206>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f001 f806 	bl	80045cc <I2C_Slave_STOPF>
 80035c0:	e04c      	b.n	800365c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035c2:	7bbb      	ldrb	r3, [r7, #14]
 80035c4:	2b21      	cmp	r3, #33	@ 0x21
 80035c6:	d002      	beq.n	80035ce <HAL_I2C_EV_IRQHandler+0x212>
 80035c8:	7bbb      	ldrb	r3, [r7, #14]
 80035ca:	2b29      	cmp	r3, #41	@ 0x29
 80035cc:	d120      	bne.n	8003610 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00d      	beq.n	80035f4 <HAL_I2C_EV_IRQHandler+0x238>
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <HAL_I2C_EV_IRQHandler+0x238>
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d103      	bne.n	80035f4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fee7 	bl	80043c0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035f2:	e032      	b.n	800365a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d02d      	beq.n	800365a <HAL_I2C_EV_IRQHandler+0x29e>
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003604:	2b00      	cmp	r3, #0
 8003606:	d028      	beq.n	800365a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 ff16 	bl	800443a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800360e:	e024      	b.n	800365a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00d      	beq.n	8003636 <HAL_I2C_EV_IRQHandler+0x27a>
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_I2C_EV_IRQHandler+0x27a>
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b00      	cmp	r3, #0
 800362c:	d103      	bne.n	8003636 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 ff24 	bl	800447c <I2C_SlaveReceive_RXNE>
 8003634:	e012      	b.n	800365c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 ff54 	bl	80044f8 <I2C_SlaveReceive_BTF>
 8003650:	e004      	b.n	800365c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003652:	bf00      	nop
 8003654:	e002      	b.n	800365c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003656:	bf00      	nop
 8003658:	e000      	b.n	800365c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800365a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800365c:	3720      	adds	r7, #32
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b08a      	sub	sp, #40	@ 0x28
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800367a:	2300      	movs	r3, #0
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003684:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <HAL_I2C_ER_IRQHandler+0x4a>
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80036aa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00d      	beq.n	80036d2 <HAL_I2C_ER_IRQHandler+0x70>
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	f043 0302 	orr.w	r3, r3, #2
 80036c6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80036d0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d03e      	beq.n	800375a <HAL_I2C_ER_IRQHandler+0xf8>
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d039      	beq.n	800375a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80036e6:	7efb      	ldrb	r3, [r7, #27]
 80036e8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003700:	7ebb      	ldrb	r3, [r7, #26]
 8003702:	2b20      	cmp	r3, #32
 8003704:	d112      	bne.n	800372c <HAL_I2C_ER_IRQHandler+0xca>
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10f      	bne.n	800372c <HAL_I2C_ER_IRQHandler+0xca>
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	2b21      	cmp	r3, #33	@ 0x21
 8003710:	d008      	beq.n	8003724 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	2b29      	cmp	r3, #41	@ 0x29
 8003716:	d005      	beq.n	8003724 <HAL_I2C_ER_IRQHandler+0xc2>
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	2b28      	cmp	r3, #40	@ 0x28
 800371c:	d106      	bne.n	800372c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b21      	cmp	r3, #33	@ 0x21
 8003722:	d103      	bne.n	800372c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f001 f881 	bl	800482c <I2C_Slave_AF>
 800372a:	e016      	b.n	800375a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003734:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	f043 0304 	orr.w	r3, r3, #4
 800373c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800373e:	7efb      	ldrb	r3, [r7, #27]
 8003740:	2b10      	cmp	r3, #16
 8003742:	d002      	beq.n	800374a <HAL_I2C_ER_IRQHandler+0xe8>
 8003744:	7efb      	ldrb	r3, [r7, #27]
 8003746:	2b40      	cmp	r3, #64	@ 0x40
 8003748:	d107      	bne.n	800375a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003758:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00d      	beq.n	8003780 <HAL_I2C_ER_IRQHandler+0x11e>
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376a:	2b00      	cmp	r3, #0
 800376c:	d008      	beq.n	8003780 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	f043 0308 	orr.w	r3, r3, #8
 8003774:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800377e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f001 f8be 	bl	8004914 <I2C_ITError>
  }
}
 8003798:	bf00      	nop
 800379a:	3728      	adds	r7, #40	@ 0x28
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	70fb      	strb	r3, [r7, #3]
 80037fc:	4613      	mov	r3, r2
 80037fe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800387e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003886:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003892:	2b00      	cmp	r3, #0
 8003894:	d150      	bne.n	8003938 <I2C_MasterTransmit_TXE+0xc8>
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	2b21      	cmp	r3, #33	@ 0x21
 800389a:	d14d      	bne.n	8003938 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d01d      	beq.n	80038de <I2C_MasterTransmit_TXE+0x6e>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d01a      	beq.n	80038de <I2C_MasterTransmit_TXE+0x6e>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038ae:	d016      	beq.n	80038de <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038be:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2211      	movs	r2, #17
 80038c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff ff62 	bl	80037a0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038dc:	e060      	b.n	80039a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038ec:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b40      	cmp	r3, #64	@ 0x40
 8003916:	d107      	bne.n	8003928 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ff7d 	bl	8003820 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003926:	e03b      	b.n	80039a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ff35 	bl	80037a0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003936:	e033      	b.n	80039a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b21      	cmp	r3, #33	@ 0x21
 800393c:	d005      	beq.n	800394a <I2C_MasterTransmit_TXE+0xda>
 800393e:	7bbb      	ldrb	r3, [r7, #14]
 8003940:	2b40      	cmp	r3, #64	@ 0x40
 8003942:	d12d      	bne.n	80039a0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b22      	cmp	r3, #34	@ 0x22
 8003948:	d12a      	bne.n	80039a0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d108      	bne.n	8003966 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003962:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003964:	e01c      	b.n	80039a0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b40      	cmp	r3, #64	@ 0x40
 8003970:	d103      	bne.n	800397a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f88e 	bl	8003a94 <I2C_MemoryTransmit_TXE_BTF>
}
 8003978:	e012      	b.n	80039a0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397e:	781a      	ldrb	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800399e:	e7ff      	b.n	80039a0 <I2C_MasterTransmit_TXE+0x130>
 80039a0:	bf00      	nop
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b21      	cmp	r3, #33	@ 0x21
 80039c0:	d164      	bne.n	8003a8c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d012      	beq.n	80039f2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	781a      	ldrb	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80039f0:	e04c      	b.n	8003a8c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d01d      	beq.n	8003a34 <I2C_MasterTransmit_BTF+0x8c>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d01a      	beq.n	8003a34 <I2C_MasterTransmit_BTF+0x8c>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a04:	d016      	beq.n	8003a34 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a14:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2211      	movs	r2, #17
 8003a1a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff feb7 	bl	80037a0 <HAL_I2C_MasterTxCpltCallback>
}
 8003a32:	e02b      	b.n	8003a8c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a42:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a52:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b40      	cmp	r3, #64	@ 0x40
 8003a6c:	d107      	bne.n	8003a7e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff fed2 	bl	8003820 <HAL_I2C_MemTxCpltCallback>
}
 8003a7c:	e006      	b.n	8003a8c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fe8a 	bl	80037a0 <HAL_I2C_MasterTxCpltCallback>
}
 8003a8c:	bf00      	nop
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d11d      	bne.n	8003ae8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d10b      	bne.n	8003acc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac4:	1c9a      	adds	r2, r3, #2
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003aca:	e077      	b.n	8003bbc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	121b      	asrs	r3, r3, #8
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ae6:	e069      	b.n	8003bbc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d10b      	bne.n	8003b08 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b06:	e059      	b.n	8003bbc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d152      	bne.n	8003bb6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	2b22      	cmp	r3, #34	@ 0x22
 8003b14:	d10d      	bne.n	8003b32 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b24:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b30:	e044      	b.n	8003bbc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d015      	beq.n	8003b68 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b21      	cmp	r3, #33	@ 0x21
 8003b40:	d112      	bne.n	8003b68 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b46:	781a      	ldrb	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b66:	e029      	b.n	8003bbc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d124      	bne.n	8003bbc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	2b21      	cmp	r3, #33	@ 0x21
 8003b76:	d121      	bne.n	8003bbc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b86:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b96:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff fe36 	bl	8003820 <HAL_I2C_MemTxCpltCallback>
}
 8003bb4:	e002      	b.n	8003bbc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff f8ba 	bl	8002d30 <I2C_Flush_DR>
}
 8003bbc:	bf00      	nop
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b22      	cmp	r3, #34	@ 0x22
 8003bd6:	f040 80b9 	bne.w	8003d4c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bde:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d921      	bls.n	8003c32 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	f040 8096 	bne.w	8003d4c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c2e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003c30:	e08c      	b.n	8003d4c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d07f      	beq.n	8003d3a <I2C_MasterReceive_RXNE+0x176>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d002      	beq.n	8003c46 <I2C_MasterReceive_RXNE+0x82>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d179      	bne.n	8003d3a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f001 fb38 	bl	80052bc <I2C_WaitOnSTOPRequestThroughIT>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d14c      	bne.n	8003cec <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c60:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c70:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b40      	cmp	r3, #64	@ 0x40
 8003caa:	d10a      	bne.n	8003cc2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff fdba 	bl	8003834 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cc0:	e044      	b.n	8003d4c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d002      	beq.n	8003cd6 <I2C_MasterReceive_RXNE+0x112>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d103      	bne.n	8003cde <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cdc:	e002      	b.n	8003ce4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2212      	movs	r2, #18
 8003ce2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff fd65 	bl	80037b4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cea:	e02f      	b.n	8003d4c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cfa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff fd88 	bl	8003848 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d38:	e008      	b.n	8003d4c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d48:	605a      	str	r2, [r3, #4]
}
 8003d4a:	e7ff      	b.n	8003d4c <I2C_MasterReceive_RXNE+0x188>
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d11b      	bne.n	8003da4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d7a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003da2:	e0c8      	b.n	8003f36 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d129      	bne.n	8003e02 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dbc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d00a      	beq.n	8003dda <I2C_MasterReceive_BTF+0x86>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d007      	beq.n	8003dda <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dd8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e00:	e099      	b.n	8003f36 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	f040 8081 	bne.w	8003f10 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d002      	beq.n	8003e1a <I2C_MasterReceive_BTF+0xc6>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b10      	cmp	r3, #16
 8003e18:	d108      	bne.n	8003e2c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e019      	b.n	8003e60 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d002      	beq.n	8003e38 <I2C_MasterReceive_BTF+0xe4>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d108      	bne.n	8003e4a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e00a      	b.n	8003e60 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	d007      	beq.n	8003e60 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e5e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003eba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b40      	cmp	r3, #64	@ 0x40
 8003ece:	d10a      	bne.n	8003ee6 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff fca8 	bl	8003834 <HAL_I2C_MemRxCpltCallback>
}
 8003ee4:	e027      	b.n	8003f36 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d002      	beq.n	8003efa <I2C_MasterReceive_BTF+0x1a6>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d103      	bne.n	8003f02 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f00:	e002      	b.n	8003f08 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2212      	movs	r2, #18
 8003f06:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff fc53 	bl	80037b4 <HAL_I2C_MasterRxCpltCallback>
}
 8003f0e:	e012      	b.n	8003f36 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b40      	cmp	r3, #64	@ 0x40
 8003f50:	d117      	bne.n	8003f82 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f6a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003f6c:	e067      	b.n	800403e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f043 0301 	orr.w	r3, r3, #1
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	611a      	str	r2, [r3, #16]
}
 8003f80:	e05d      	b.n	800403e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f8a:	d133      	bne.n	8003ff4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b21      	cmp	r3, #33	@ 0x21
 8003f96:	d109      	bne.n	8003fac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fa8:	611a      	str	r2, [r3, #16]
 8003faa:	e008      	b.n	8003fbe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d004      	beq.n	8003fd0 <I2C_Master_SB+0x92>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d108      	bne.n	8003fe2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d032      	beq.n	800403e <I2C_Master_SB+0x100>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d02d      	beq.n	800403e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ff0:	605a      	str	r2, [r3, #4]
}
 8003ff2:	e024      	b.n	800403e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10e      	bne.n	800401a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004000:	b29b      	uxth	r3, r3
 8004002:	11db      	asrs	r3, r3, #7
 8004004:	b2db      	uxtb	r3, r3
 8004006:	f003 0306 	and.w	r3, r3, #6
 800400a:	b2db      	uxtb	r3, r3
 800400c:	f063 030f 	orn	r3, r3, #15
 8004010:	b2da      	uxtb	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	611a      	str	r2, [r3, #16]
}
 8004018:	e011      	b.n	800403e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800401e:	2b01      	cmp	r3, #1
 8004020:	d10d      	bne.n	800403e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004026:	b29b      	uxth	r3, r3
 8004028:	11db      	asrs	r3, r3, #7
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f003 0306 	and.w	r3, r3, #6
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f063 030e 	orn	r3, r3, #14
 8004036:	b2da      	uxtb	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	611a      	str	r2, [r3, #16]
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004056:	b2da      	uxtb	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004062:	2b00      	cmp	r3, #0
 8004064:	d004      	beq.n	8004070 <I2C_Master_ADD10+0x26>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800406a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d108      	bne.n	8004082 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00c      	beq.n	8004092 <I2C_Master_ADD10+0x48>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004090:	605a      	str	r2, [r3, #4]
  }
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800409e:	b480      	push	{r7}
 80040a0:	b091      	sub	sp, #68	@ 0x44
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ba:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b22      	cmp	r3, #34	@ 0x22
 80040c6:	f040 8169 	bne.w	800439c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10f      	bne.n	80040f2 <I2C_Master_ADDR+0x54>
 80040d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80040d6:	2b40      	cmp	r3, #64	@ 0x40
 80040d8:	d10b      	bne.n	80040f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040da:	2300      	movs	r3, #0
 80040dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f0:	e160      	b.n	80043b4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d11d      	bne.n	8004136 <I2C_Master_ADDR+0x98>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004102:	d118      	bne.n	8004136 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004104:	2300      	movs	r3, #0
 8004106:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004128:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	651a      	str	r2, [r3, #80]	@ 0x50
 8004134:	e13e      	b.n	80043b4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d113      	bne.n	8004168 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004140:	2300      	movs	r3, #0
 8004142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004154:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e115      	b.n	8004394 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b01      	cmp	r3, #1
 8004170:	f040 808a 	bne.w	8004288 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004176:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800417a:	d137      	bne.n	80041ec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800418a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004196:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800419a:	d113      	bne.n	80041c4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041aa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ac:	2300      	movs	r3, #0
 80041ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c2:	e0e7      	b.n	8004394 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c4:	2300      	movs	r3, #0
 80041c6:	623b      	str	r3, [r7, #32]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	623b      	str	r3, [r7, #32]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	e0d3      	b.n	8004394 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80041ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d02e      	beq.n	8004250 <I2C_Master_ADDR+0x1b2>
 80041f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d02b      	beq.n	8004250 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80041f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041fa:	2b12      	cmp	r3, #18
 80041fc:	d102      	bne.n	8004204 <I2C_Master_ADDR+0x166>
 80041fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004200:	2b01      	cmp	r3, #1
 8004202:	d125      	bne.n	8004250 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004206:	2b04      	cmp	r3, #4
 8004208:	d00e      	beq.n	8004228 <I2C_Master_ADDR+0x18a>
 800420a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800420c:	2b02      	cmp	r3, #2
 800420e:	d00b      	beq.n	8004228 <I2C_Master_ADDR+0x18a>
 8004210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004212:	2b10      	cmp	r3, #16
 8004214:	d008      	beq.n	8004228 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	e007      	b.n	8004238 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004236:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004238:	2300      	movs	r3, #0
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	61fb      	str	r3, [r7, #28]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	e0a1      	b.n	8004394 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800425e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004260:	2300      	movs	r3, #0
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	61bb      	str	r3, [r7, #24]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e085      	b.n	8004394 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d14d      	bne.n	800432e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004294:	2b04      	cmp	r3, #4
 8004296:	d016      	beq.n	80042c6 <I2C_Master_ADDR+0x228>
 8004298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429a:	2b02      	cmp	r3, #2
 800429c:	d013      	beq.n	80042c6 <I2C_Master_ADDR+0x228>
 800429e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d010      	beq.n	80042c6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042b2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	e007      	b.n	80042d6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042d4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042e4:	d117      	bne.n	8004316 <I2C_Master_ADDR+0x278>
 80042e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042ec:	d00b      	beq.n	8004306 <I2C_Master_ADDR+0x268>
 80042ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d008      	beq.n	8004306 <I2C_Master_ADDR+0x268>
 80042f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d005      	beq.n	8004306 <I2C_Master_ADDR+0x268>
 80042fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042fc:	2b10      	cmp	r3, #16
 80042fe:	d002      	beq.n	8004306 <I2C_Master_ADDR+0x268>
 8004300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004302:	2b20      	cmp	r3, #32
 8004304:	d107      	bne.n	8004316 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004314:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	e032      	b.n	8004394 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800433c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004348:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800434c:	d117      	bne.n	800437e <I2C_Master_ADDR+0x2e0>
 800434e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004350:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004354:	d00b      	beq.n	800436e <I2C_Master_ADDR+0x2d0>
 8004356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004358:	2b01      	cmp	r3, #1
 800435a:	d008      	beq.n	800436e <I2C_Master_ADDR+0x2d0>
 800435c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435e:	2b08      	cmp	r3, #8
 8004360:	d005      	beq.n	800436e <I2C_Master_ADDR+0x2d0>
 8004362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004364:	2b10      	cmp	r3, #16
 8004366:	d002      	beq.n	800436e <I2C_Master_ADDR+0x2d0>
 8004368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800436a:	2b20      	cmp	r3, #32
 800436c:	d107      	bne.n	800437e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800437c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437e:	2300      	movs	r3, #0
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800439a:	e00b      	b.n	80043b4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]
}
 80043b2:	e7ff      	b.n	80043b4 <I2C_Master_ADDR+0x316>
 80043b4:	bf00      	nop
 80043b6:	3744      	adds	r7, #68	@ 0x44
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d02b      	beq.n	8004432 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	781a      	ldrb	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d114      	bne.n	8004432 <I2C_SlaveTransmit_TXE+0x72>
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b29      	cmp	r3, #41	@ 0x29
 800440c:	d111      	bne.n	8004432 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800441c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2221      	movs	r2, #33	@ 0x21
 8004422:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2228      	movs	r2, #40	@ 0x28
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff f9cb 	bl	80037c8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d011      	beq.n	8004470 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004450:	781a      	ldrb	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800448a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d02c      	beq.n	80044f0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d114      	bne.n	80044f0 <I2C_SlaveReceive_RXNE+0x74>
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80044ca:	d111      	bne.n	80044f0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2222      	movs	r2, #34	@ 0x22
 80044e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2228      	movs	r2, #40	@ 0x28
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff f976 	bl	80037dc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044f0:	bf00      	nop
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d012      	beq.n	8004530 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004526:	b29b      	uxth	r3, r3
 8004528:	3b01      	subs	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004546:	2300      	movs	r3, #0
 8004548:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004556:	2b28      	cmp	r3, #40	@ 0x28
 8004558:	d125      	bne.n	80045a6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004568:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	81bb      	strh	r3, [r7, #12]
 8004588:	e002      	b.n	8004590 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004598:	89ba      	ldrh	r2, [r7, #12]
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff f926 	bl	80037f0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80045a4:	e00e      	b.n	80045c4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a6:	2300      	movs	r3, #0
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045da:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045ea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80045ec:	2300      	movs	r3, #0
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	60bb      	str	r3, [r7, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004618:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004628:	d172      	bne.n	8004710 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	2b22      	cmp	r3, #34	@ 0x22
 800462e:	d002      	beq.n	8004636 <I2C_Slave_STOPF+0x6a>
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	2b2a      	cmp	r3, #42	@ 0x2a
 8004634:	d135      	bne.n	80046a2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	b29a      	uxth	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d005      	beq.n	800465a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	f043 0204 	orr.w	r2, r3, #4
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004668:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe f83b 	bl	80026ea <HAL_DMA_GetState>
 8004674:	4603      	mov	r3, r0
 8004676:	2b01      	cmp	r3, #1
 8004678:	d049      	beq.n	800470e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467e:	4a69      	ldr	r2, [pc, #420]	@ (8004824 <I2C_Slave_STOPF+0x258>)
 8004680:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004686:	4618      	mov	r0, r3
 8004688:	f7fe f80d 	bl	80026a6 <HAL_DMA_Abort_IT>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d03d      	beq.n	800470e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800469c:	4610      	mov	r0, r2
 800469e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046a0:	e035      	b.n	800470e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046be:	f043 0204 	orr.w	r2, r3, #4
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe f805 	bl	80026ea <HAL_DMA_GetState>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d014      	beq.n	8004710 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ea:	4a4e      	ldr	r2, [pc, #312]	@ (8004824 <I2C_Slave_STOPF+0x258>)
 80046ec:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fd ffd7 	bl	80026a6 <HAL_DMA_Abort_IT>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004708:	4610      	mov	r0, r2
 800470a:	4798      	blx	r3
 800470c:	e000      	b.n	8004710 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800470e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d03e      	beq.n	8004798 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b04      	cmp	r3, #4
 8004726:	d112      	bne.n	800474e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004758:	2b40      	cmp	r3, #64	@ 0x40
 800475a:	d112      	bne.n	8004782 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004790:	f043 0204 	orr.w	r2, r3, #4
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f8b7 	bl	8004914 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80047a6:	e039      	b.n	800481c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80047ac:	d109      	bne.n	80047c2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2228      	movs	r2, #40	@ 0x28
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff f80d 	bl	80037dc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b28      	cmp	r3, #40	@ 0x28
 80047cc:	d111      	bne.n	80047f2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a15      	ldr	r2, [pc, #84]	@ (8004828 <I2C_Slave_STOPF+0x25c>)
 80047d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff f80e 	bl	800380c <HAL_I2C_ListenCpltCallback>
}
 80047f0:	e014      	b.n	800481c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f6:	2b22      	cmp	r3, #34	@ 0x22
 80047f8:	d002      	beq.n	8004800 <I2C_Slave_STOPF+0x234>
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	2b22      	cmp	r3, #34	@ 0x22
 80047fe:	d10d      	bne.n	800481c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fe ffe0 	bl	80037dc <HAL_I2C_SlaveRxCpltCallback>
}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	08004e19 	.word	0x08004e19
 8004828:	ffff0000 	.word	0xffff0000

0800482c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800483a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b08      	cmp	r3, #8
 8004846:	d002      	beq.n	800484e <I2C_Slave_AF+0x22>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b20      	cmp	r3, #32
 800484c:	d129      	bne.n	80048a2 <I2C_Slave_AF+0x76>
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	2b28      	cmp	r3, #40	@ 0x28
 8004852:	d126      	bne.n	80048a2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a2e      	ldr	r2, [pc, #184]	@ (8004910 <I2C_Slave_AF+0xe4>)
 8004858:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004868:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004872:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004882:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fe ffb6 	bl	800380c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80048a0:	e031      	b.n	8004906 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	2b21      	cmp	r3, #33	@ 0x21
 80048a6:	d129      	bne.n	80048fc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a19      	ldr	r2, [pc, #100]	@ (8004910 <I2C_Slave_AF+0xe4>)
 80048ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2221      	movs	r2, #33	@ 0x21
 80048b2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048d2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048dc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048ec:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fe fa1e 	bl	8002d30 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7fe ff67 	bl	80037c8 <HAL_I2C_SlaveTxCpltCallback>
}
 80048fa:	e004      	b.n	8004906 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004904:	615a      	str	r2, [r3, #20]
}
 8004906:	bf00      	nop
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	ffff0000 	.word	0xffff0000

08004914 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004922:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800492a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800492c:	7bbb      	ldrb	r3, [r7, #14]
 800492e:	2b10      	cmp	r3, #16
 8004930:	d002      	beq.n	8004938 <I2C_ITError+0x24>
 8004932:	7bbb      	ldrb	r3, [r7, #14]
 8004934:	2b40      	cmp	r3, #64	@ 0x40
 8004936:	d10a      	bne.n	800494e <I2C_ITError+0x3a>
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	2b22      	cmp	r3, #34	@ 0x22
 800493c:	d107      	bne.n	800494e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800494c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004954:	2b28      	cmp	r3, #40	@ 0x28
 8004956:	d107      	bne.n	8004968 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2228      	movs	r2, #40	@ 0x28
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004966:	e015      	b.n	8004994 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004972:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004976:	d00a      	beq.n	800498e <I2C_ITError+0x7a>
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	2b60      	cmp	r3, #96	@ 0x60
 800497c:	d007      	beq.n	800498e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800499e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049a2:	d162      	bne.n	8004a6a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049b2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d020      	beq.n	8004a04 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c6:	4a6a      	ldr	r2, [pc, #424]	@ (8004b70 <I2C_ITError+0x25c>)
 80049c8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fd fe69 	bl	80026a6 <HAL_DMA_Abort_IT>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8089 	beq.w	8004aee <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0201 	bic.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049fe:	4610      	mov	r0, r2
 8004a00:	4798      	blx	r3
 8004a02:	e074      	b.n	8004aee <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a08:	4a59      	ldr	r2, [pc, #356]	@ (8004b70 <I2C_ITError+0x25c>)
 8004a0a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fd fe48 	bl	80026a6 <HAL_DMA_Abort_IT>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d068      	beq.n	8004aee <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a26:	2b40      	cmp	r3, #64	@ 0x40
 8004a28:	d10b      	bne.n	8004a42 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0201 	bic.w	r2, r2, #1
 8004a50:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a64:	4610      	mov	r0, r2
 8004a66:	4798      	blx	r3
 8004a68:	e041      	b.n	8004aee <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b60      	cmp	r3, #96	@ 0x60
 8004a74:	d125      	bne.n	8004ac2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8e:	2b40      	cmp	r3, #64	@ 0x40
 8004a90:	d10b      	bne.n	8004aaa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fe fece 	bl	800385c <HAL_I2C_AbortCpltCallback>
 8004ac0:	e015      	b.n	8004aee <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004acc:	2b40      	cmp	r3, #64	@ 0x40
 8004ace:	d10b      	bne.n	8004ae8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691a      	ldr	r2, [r3, #16]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7fe fead 	bl	8003848 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10e      	bne.n	8004b1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d109      	bne.n	8004b1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d104      	bne.n	8004b1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d007      	beq.n	8004b2c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b2a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b32:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d113      	bne.n	8004b68 <I2C_ITError+0x254>
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	2b28      	cmp	r3, #40	@ 0x28
 8004b44:	d110      	bne.n	8004b68 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a0a      	ldr	r2, [pc, #40]	@ (8004b74 <I2C_ITError+0x260>)
 8004b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fe fe52 	bl	800380c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b68:	bf00      	nop
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	08004e19 	.word	0x08004e19
 8004b74:	ffff0000 	.word	0xffff0000

08004b78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b088      	sub	sp, #32
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	607a      	str	r2, [r7, #4]
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	460b      	mov	r3, r1
 8004b86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d006      	beq.n	8004ba2 <I2C_MasterRequestWrite+0x2a>
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d003      	beq.n	8004ba2 <I2C_MasterRequestWrite+0x2a>
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ba0:	d108      	bne.n	8004bb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e00b      	b.n	8004bcc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb8:	2b12      	cmp	r3, #18
 8004bba:	d107      	bne.n	8004bcc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f9c5 	bl	8004f68 <I2C_WaitOnFlagUntilTimeout>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00d      	beq.n	8004c00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bf2:	d103      	bne.n	8004bfc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bfa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e035      	b.n	8004c6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c08:	d108      	bne.n	8004c1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c0a:	897b      	ldrh	r3, [r7, #10]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c18:	611a      	str	r2, [r3, #16]
 8004c1a:	e01b      	b.n	8004c54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c1c:	897b      	ldrh	r3, [r7, #10]
 8004c1e:	11db      	asrs	r3, r3, #7
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	f003 0306 	and.w	r3, r3, #6
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	f063 030f 	orn	r3, r3, #15
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	490e      	ldr	r1, [pc, #56]	@ (8004c74 <I2C_MasterRequestWrite+0xfc>)
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fa0e 	bl	800505c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e010      	b.n	8004c6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c4a:	897b      	ldrh	r3, [r7, #10]
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	4907      	ldr	r1, [pc, #28]	@ (8004c78 <I2C_MasterRequestWrite+0x100>)
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f9fe 	bl	800505c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	00010008 	.word	0x00010008
 8004c78:	00010002 	.word	0x00010002

08004c7c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ca0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d006      	beq.n	8004cb6 <I2C_MasterRequestRead+0x3a>
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d003      	beq.n	8004cb6 <I2C_MasterRequestRead+0x3a>
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004cb4:	d108      	bne.n	8004cc8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	e00b      	b.n	8004ce0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ccc:	2b11      	cmp	r3, #17
 8004cce:	d107      	bne.n	8004ce0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f93b 	bl	8004f68 <I2C_WaitOnFlagUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00d      	beq.n	8004d14 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d06:	d103      	bne.n	8004d10 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e079      	b.n	8004e08 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d1c:	d108      	bne.n	8004d30 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d1e:	897b      	ldrh	r3, [r7, #10]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	f043 0301 	orr.w	r3, r3, #1
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	611a      	str	r2, [r3, #16]
 8004d2e:	e05f      	b.n	8004df0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d30:	897b      	ldrh	r3, [r7, #10]
 8004d32:	11db      	asrs	r3, r3, #7
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	f003 0306 	and.w	r3, r3, #6
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	f063 030f 	orn	r3, r3, #15
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	4930      	ldr	r1, [pc, #192]	@ (8004e10 <I2C_MasterRequestRead+0x194>)
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f984 	bl	800505c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e054      	b.n	8004e08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d5e:	897b      	ldrh	r3, [r7, #10]
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	4929      	ldr	r1, [pc, #164]	@ (8004e14 <I2C_MasterRequestRead+0x198>)
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 f974 	bl	800505c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e044      	b.n	8004e08 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d7e:	2300      	movs	r3, #0
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	613b      	str	r3, [r7, #16]
 8004d92:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004da2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 f8d9 	bl	8004f68 <I2C_WaitOnFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00d      	beq.n	8004dd8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dca:	d103      	bne.n	8004dd4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dd2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e017      	b.n	8004e08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004dd8:	897b      	ldrh	r3, [r7, #10]
 8004dda:	11db      	asrs	r3, r3, #7
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	f003 0306 	and.w	r3, r3, #6
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f063 030e 	orn	r3, r3, #14
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	4907      	ldr	r1, [pc, #28]	@ (8004e14 <I2C_MasterRequestRead+0x198>)
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 f930 	bl	800505c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	00010008 	.word	0x00010008
 8004e14:	00010002 	.word	0x00010002

08004e18 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e28:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e30:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e32:	4b4b      	ldr	r3, [pc, #300]	@ (8004f60 <I2C_DMAAbort+0x148>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	08db      	lsrs	r3, r3, #3
 8004e38:	4a4a      	ldr	r2, [pc, #296]	@ (8004f64 <I2C_DMAAbort+0x14c>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	0a1a      	lsrs	r2, r3, #8
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	00da      	lsls	r2, r3, #3
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e56:	f043 0220 	orr.w	r2, r3, #32
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004e5e:	e00a      	b.n	8004e76 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e74:	d0ea      	beq.n	8004e4c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e82:	2200      	movs	r2, #0
 8004e84:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e92:	2200      	movs	r2, #0
 8004e94:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb8:	2200      	movs	r2, #0
 8004eba:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec8:	2200      	movs	r2, #0
 8004eca:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0201 	bic.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b60      	cmp	r3, #96	@ 0x60
 8004ee6:	d10e      	bne.n	8004f06 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	2200      	movs	r2, #0
 8004efc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004efe:	6978      	ldr	r0, [r7, #20]
 8004f00:	f7fe fcac 	bl	800385c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f04:	e027      	b.n	8004f56 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f06:	7cfb      	ldrb	r3, [r7, #19]
 8004f08:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f0c:	2b28      	cmp	r3, #40	@ 0x28
 8004f0e:	d117      	bne.n	8004f40 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f2e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2200      	movs	r2, #0
 8004f34:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2228      	movs	r2, #40	@ 0x28
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f3e:	e007      	b.n	8004f50 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004f50:	6978      	ldr	r0, [r7, #20]
 8004f52:	f7fe fc79 	bl	8003848 <HAL_I2C_ErrorCallback>
}
 8004f56:	bf00      	nop
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20000000 	.word	0x20000000
 8004f64:	14f8b589 	.word	0x14f8b589

08004f68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f78:	e048      	b.n	800500c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f80:	d044      	beq.n	800500c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f82:	f7fd f9df 	bl	8002344 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d302      	bcc.n	8004f98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d139      	bne.n	800500c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	0c1b      	lsrs	r3, r3, #16
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d10d      	bne.n	8004fbe <I2C_WaitOnFlagUntilTimeout+0x56>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	43da      	mvns	r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4013      	ands	r3, r2
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	e00c      	b.n	8004fd8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	43da      	mvns	r2, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	bf0c      	ite	eq
 8004fd0:	2301      	moveq	r3, #1
 8004fd2:	2300      	movne	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d116      	bne.n	800500c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff8:	f043 0220 	orr.w	r2, r3, #32
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e023      	b.n	8005054 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	0c1b      	lsrs	r3, r3, #16
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b01      	cmp	r3, #1
 8005014:	d10d      	bne.n	8005032 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	43da      	mvns	r2, r3
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	4013      	ands	r3, r2
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	bf0c      	ite	eq
 8005028:	2301      	moveq	r3, #1
 800502a:	2300      	movne	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	461a      	mov	r2, r3
 8005030:	e00c      	b.n	800504c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	43da      	mvns	r2, r3
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	4013      	ands	r3, r2
 800503e:	b29b      	uxth	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	bf0c      	ite	eq
 8005044:	2301      	moveq	r3, #1
 8005046:	2300      	movne	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	429a      	cmp	r2, r3
 8005050:	d093      	beq.n	8004f7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800506a:	e071      	b.n	8005150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800507a:	d123      	bne.n	80050c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800508a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005094:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b0:	f043 0204 	orr.w	r2, r3, #4
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e067      	b.n	8005194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ca:	d041      	beq.n	8005150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050cc:	f7fd f93a 	bl	8002344 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d302      	bcc.n	80050e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d136      	bne.n	8005150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	0c1b      	lsrs	r3, r3, #16
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d10c      	bne.n	8005106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	43da      	mvns	r2, r3
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4013      	ands	r3, r2
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	bf14      	ite	ne
 80050fe:	2301      	movne	r3, #1
 8005100:	2300      	moveq	r3, #0
 8005102:	b2db      	uxtb	r3, r3
 8005104:	e00b      	b.n	800511e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	43da      	mvns	r2, r3
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	4013      	ands	r3, r2
 8005112:	b29b      	uxth	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	bf14      	ite	ne
 8005118:	2301      	movne	r3, #1
 800511a:	2300      	moveq	r3, #0
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d016      	beq.n	8005150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513c:	f043 0220 	orr.w	r2, r3, #32
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e021      	b.n	8005194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	0c1b      	lsrs	r3, r3, #16
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b01      	cmp	r3, #1
 8005158:	d10c      	bne.n	8005174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	43da      	mvns	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	4013      	ands	r3, r2
 8005166:	b29b      	uxth	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	bf14      	ite	ne
 800516c:	2301      	movne	r3, #1
 800516e:	2300      	moveq	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	e00b      	b.n	800518c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	43da      	mvns	r2, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4013      	ands	r3, r2
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	bf14      	ite	ne
 8005186:	2301      	movne	r3, #1
 8005188:	2300      	moveq	r3, #0
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	f47f af6d 	bne.w	800506c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051a8:	e034      	b.n	8005214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f915 	bl	80053da <I2C_IsAcknowledgeFailed>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e034      	b.n	8005224 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d028      	beq.n	8005214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c2:	f7fd f8bf 	bl	8002344 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d302      	bcc.n	80051d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d11d      	bne.n	8005214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e2:	2b80      	cmp	r3, #128	@ 0x80
 80051e4:	d016      	beq.n	8005214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005200:	f043 0220 	orr.w	r2, r3, #32
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e007      	b.n	8005224 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800521e:	2b80      	cmp	r3, #128	@ 0x80
 8005220:	d1c3      	bne.n	80051aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005238:	e034      	b.n	80052a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 f8cd 	bl	80053da <I2C_IsAcknowledgeFailed>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e034      	b.n	80052b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005250:	d028      	beq.n	80052a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005252:	f7fd f877 	bl	8002344 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	429a      	cmp	r2, r3
 8005260:	d302      	bcc.n	8005268 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d11d      	bne.n	80052a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b04      	cmp	r3, #4
 8005274:	d016      	beq.n	80052a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005290:	f043 0220 	orr.w	r2, r3, #32
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e007      	b.n	80052b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d1c3      	bne.n	800523a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80052c8:	4b13      	ldr	r3, [pc, #76]	@ (8005318 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	08db      	lsrs	r3, r3, #3
 80052ce:	4a13      	ldr	r2, [pc, #76]	@ (800531c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80052d0:	fba2 2303 	umull	r2, r3, r2, r3
 80052d4:	0a1a      	lsrs	r2, r3, #8
 80052d6:	4613      	mov	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d107      	bne.n	80052fa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ee:	f043 0220 	orr.w	r2, r3, #32
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e008      	b.n	800530c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005308:	d0e9      	beq.n	80052de <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	20000000 	.word	0x20000000
 800531c:	14f8b589 	.word	0x14f8b589

08005320 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800532c:	e049      	b.n	80053c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	2b10      	cmp	r3, #16
 800533a:	d119      	bne.n	8005370 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0210 	mvn.w	r2, #16
 8005344:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e030      	b.n	80053d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005370:	f7fc ffe8 	bl	8002344 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	429a      	cmp	r2, r3
 800537e:	d302      	bcc.n	8005386 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d11d      	bne.n	80053c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005390:	2b40      	cmp	r3, #64	@ 0x40
 8005392:	d016      	beq.n	80053c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ae:	f043 0220 	orr.w	r2, r3, #32
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e007      	b.n	80053d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053cc:	2b40      	cmp	r3, #64	@ 0x40
 80053ce:	d1ae      	bne.n	800532e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053f0:	d11b      	bne.n	800542a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053fa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2220      	movs	r2, #32
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005416:	f043 0204 	orr.w	r2, r3, #4
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005444:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005448:	d103      	bne.n	8005452 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005450:	e007      	b.n	8005462 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005456:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800545a:	d102      	bne.n	8005462 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2208      	movs	r2, #8
 8005460:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e267      	b.n	8005952 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d075      	beq.n	800557a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800548e:	4b88      	ldr	r3, [pc, #544]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 030c 	and.w	r3, r3, #12
 8005496:	2b04      	cmp	r3, #4
 8005498:	d00c      	beq.n	80054b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800549a:	4b85      	ldr	r3, [pc, #532]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d112      	bne.n	80054cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054a6:	4b82      	ldr	r3, [pc, #520]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054b2:	d10b      	bne.n	80054cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b4:	4b7e      	ldr	r3, [pc, #504]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d05b      	beq.n	8005578 <HAL_RCC_OscConfig+0x108>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d157      	bne.n	8005578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e242      	b.n	8005952 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054d4:	d106      	bne.n	80054e4 <HAL_RCC_OscConfig+0x74>
 80054d6:	4b76      	ldr	r3, [pc, #472]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a75      	ldr	r2, [pc, #468]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 80054dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	e01d      	b.n	8005520 <HAL_RCC_OscConfig+0xb0>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054ec:	d10c      	bne.n	8005508 <HAL_RCC_OscConfig+0x98>
 80054ee:	4b70      	ldr	r3, [pc, #448]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a6f      	ldr	r2, [pc, #444]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 80054f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	4b6d      	ldr	r3, [pc, #436]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a6c      	ldr	r2, [pc, #432]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 8005500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	e00b      	b.n	8005520 <HAL_RCC_OscConfig+0xb0>
 8005508:	4b69      	ldr	r3, [pc, #420]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a68      	ldr	r2, [pc, #416]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 800550e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	4b66      	ldr	r3, [pc, #408]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a65      	ldr	r2, [pc, #404]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 800551a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800551e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d013      	beq.n	8005550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005528:	f7fc ff0c 	bl	8002344 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005530:	f7fc ff08 	bl	8002344 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b64      	cmp	r3, #100	@ 0x64
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e207      	b.n	8005952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005542:	4b5b      	ldr	r3, [pc, #364]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0f0      	beq.n	8005530 <HAL_RCC_OscConfig+0xc0>
 800554e:	e014      	b.n	800557a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005550:	f7fc fef8 	bl	8002344 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005558:	f7fc fef4 	bl	8002344 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b64      	cmp	r3, #100	@ 0x64
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e1f3      	b.n	8005952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800556a:	4b51      	ldr	r3, [pc, #324]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1f0      	bne.n	8005558 <HAL_RCC_OscConfig+0xe8>
 8005576:	e000      	b.n	800557a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d063      	beq.n	800564e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005586:	4b4a      	ldr	r3, [pc, #296]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 030c 	and.w	r3, r3, #12
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00b      	beq.n	80055aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005592:	4b47      	ldr	r3, [pc, #284]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800559a:	2b08      	cmp	r3, #8
 800559c:	d11c      	bne.n	80055d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800559e:	4b44      	ldr	r3, [pc, #272]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d116      	bne.n	80055d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055aa:	4b41      	ldr	r3, [pc, #260]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <HAL_RCC_OscConfig+0x152>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d001      	beq.n	80055c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e1c7      	b.n	8005952 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c2:	4b3b      	ldr	r3, [pc, #236]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	4937      	ldr	r1, [pc, #220]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055d6:	e03a      	b.n	800564e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d020      	beq.n	8005622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055e0:	4b34      	ldr	r3, [pc, #208]	@ (80056b4 <HAL_RCC_OscConfig+0x244>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e6:	f7fc fead 	bl	8002344 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ee:	f7fc fea9 	bl	8002344 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e1a8      	b.n	8005952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005600:	4b2b      	ldr	r3, [pc, #172]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f0      	beq.n	80055ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800560c:	4b28      	ldr	r3, [pc, #160]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	4925      	ldr	r1, [pc, #148]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 800561c:	4313      	orrs	r3, r2
 800561e:	600b      	str	r3, [r1, #0]
 8005620:	e015      	b.n	800564e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005622:	4b24      	ldr	r3, [pc, #144]	@ (80056b4 <HAL_RCC_OscConfig+0x244>)
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005628:	f7fc fe8c 	bl	8002344 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005630:	f7fc fe88 	bl	8002344 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e187      	b.n	8005952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005642:	4b1b      	ldr	r3, [pc, #108]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b00      	cmp	r3, #0
 8005658:	d036      	beq.n	80056c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d016      	beq.n	8005690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005662:	4b15      	ldr	r3, [pc, #84]	@ (80056b8 <HAL_RCC_OscConfig+0x248>)
 8005664:	2201      	movs	r2, #1
 8005666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005668:	f7fc fe6c 	bl	8002344 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005670:	f7fc fe68 	bl	8002344 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e167      	b.n	8005952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005682:	4b0b      	ldr	r3, [pc, #44]	@ (80056b0 <HAL_RCC_OscConfig+0x240>)
 8005684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0f0      	beq.n	8005670 <HAL_RCC_OscConfig+0x200>
 800568e:	e01b      	b.n	80056c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005690:	4b09      	ldr	r3, [pc, #36]	@ (80056b8 <HAL_RCC_OscConfig+0x248>)
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005696:	f7fc fe55 	bl	8002344 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800569c:	e00e      	b.n	80056bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800569e:	f7fc fe51 	bl	8002344 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d907      	bls.n	80056bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e150      	b.n	8005952 <HAL_RCC_OscConfig+0x4e2>
 80056b0:	40023800 	.word	0x40023800
 80056b4:	42470000 	.word	0x42470000
 80056b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056bc:	4b88      	ldr	r3, [pc, #544]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 80056be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1ea      	bne.n	800569e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 8097 	beq.w	8005804 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056d6:	2300      	movs	r3, #0
 80056d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056da:	4b81      	ldr	r3, [pc, #516]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 80056dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10f      	bne.n	8005706 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056e6:	2300      	movs	r3, #0
 80056e8:	60bb      	str	r3, [r7, #8]
 80056ea:	4b7d      	ldr	r3, [pc, #500]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 80056ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ee:	4a7c      	ldr	r2, [pc, #496]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 80056f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80056f6:	4b7a      	ldr	r3, [pc, #488]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056fe:	60bb      	str	r3, [r7, #8]
 8005700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005702:	2301      	movs	r3, #1
 8005704:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005706:	4b77      	ldr	r3, [pc, #476]	@ (80058e4 <HAL_RCC_OscConfig+0x474>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570e:	2b00      	cmp	r3, #0
 8005710:	d118      	bne.n	8005744 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005712:	4b74      	ldr	r3, [pc, #464]	@ (80058e4 <HAL_RCC_OscConfig+0x474>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a73      	ldr	r2, [pc, #460]	@ (80058e4 <HAL_RCC_OscConfig+0x474>)
 8005718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800571c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800571e:	f7fc fe11 	bl	8002344 <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005726:	f7fc fe0d 	bl	8002344 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e10c      	b.n	8005952 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005738:	4b6a      	ldr	r3, [pc, #424]	@ (80058e4 <HAL_RCC_OscConfig+0x474>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0f0      	beq.n	8005726 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d106      	bne.n	800575a <HAL_RCC_OscConfig+0x2ea>
 800574c:	4b64      	ldr	r3, [pc, #400]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 800574e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005750:	4a63      	ldr	r2, [pc, #396]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	6713      	str	r3, [r2, #112]	@ 0x70
 8005758:	e01c      	b.n	8005794 <HAL_RCC_OscConfig+0x324>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2b05      	cmp	r3, #5
 8005760:	d10c      	bne.n	800577c <HAL_RCC_OscConfig+0x30c>
 8005762:	4b5f      	ldr	r3, [pc, #380]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 8005764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005766:	4a5e      	ldr	r2, [pc, #376]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 8005768:	f043 0304 	orr.w	r3, r3, #4
 800576c:	6713      	str	r3, [r2, #112]	@ 0x70
 800576e:	4b5c      	ldr	r3, [pc, #368]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005772:	4a5b      	ldr	r2, [pc, #364]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 8005774:	f043 0301 	orr.w	r3, r3, #1
 8005778:	6713      	str	r3, [r2, #112]	@ 0x70
 800577a:	e00b      	b.n	8005794 <HAL_RCC_OscConfig+0x324>
 800577c:	4b58      	ldr	r3, [pc, #352]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 800577e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005780:	4a57      	ldr	r2, [pc, #348]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 8005782:	f023 0301 	bic.w	r3, r3, #1
 8005786:	6713      	str	r3, [r2, #112]	@ 0x70
 8005788:	4b55      	ldr	r3, [pc, #340]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 800578a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800578c:	4a54      	ldr	r2, [pc, #336]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 800578e:	f023 0304 	bic.w	r3, r3, #4
 8005792:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d015      	beq.n	80057c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800579c:	f7fc fdd2 	bl	8002344 <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a2:	e00a      	b.n	80057ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a4:	f7fc fdce 	bl	8002344 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e0cb      	b.n	8005952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ba:	4b49      	ldr	r3, [pc, #292]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 80057bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0ee      	beq.n	80057a4 <HAL_RCC_OscConfig+0x334>
 80057c6:	e014      	b.n	80057f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057c8:	f7fc fdbc 	bl	8002344 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ce:	e00a      	b.n	80057e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d0:	f7fc fdb8 	bl	8002344 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057de:	4293      	cmp	r3, r2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e0b5      	b.n	8005952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057e6:	4b3e      	ldr	r3, [pc, #248]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1ee      	bne.n	80057d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d105      	bne.n	8005804 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057f8:	4b39      	ldr	r3, [pc, #228]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 80057fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fc:	4a38      	ldr	r2, [pc, #224]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 80057fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005802:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 80a1 	beq.w	8005950 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800580e:	4b34      	ldr	r3, [pc, #208]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 030c 	and.w	r3, r3, #12
 8005816:	2b08      	cmp	r3, #8
 8005818:	d05c      	beq.n	80058d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	2b02      	cmp	r3, #2
 8005820:	d141      	bne.n	80058a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005822:	4b31      	ldr	r3, [pc, #196]	@ (80058e8 <HAL_RCC_OscConfig+0x478>)
 8005824:	2200      	movs	r2, #0
 8005826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005828:	f7fc fd8c 	bl	8002344 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005830:	f7fc fd88 	bl	8002344 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e087      	b.n	8005952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005842:	4b27      	ldr	r3, [pc, #156]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1f0      	bne.n	8005830 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69da      	ldr	r2, [r3, #28]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	019b      	lsls	r3, r3, #6
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005864:	085b      	lsrs	r3, r3, #1
 8005866:	3b01      	subs	r3, #1
 8005868:	041b      	lsls	r3, r3, #16
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005870:	061b      	lsls	r3, r3, #24
 8005872:	491b      	ldr	r1, [pc, #108]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 8005874:	4313      	orrs	r3, r2
 8005876:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005878:	4b1b      	ldr	r3, [pc, #108]	@ (80058e8 <HAL_RCC_OscConfig+0x478>)
 800587a:	2201      	movs	r2, #1
 800587c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800587e:	f7fc fd61 	bl	8002344 <HAL_GetTick>
 8005882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005884:	e008      	b.n	8005898 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005886:	f7fc fd5d 	bl	8002344 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e05c      	b.n	8005952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005898:	4b11      	ldr	r3, [pc, #68]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0f0      	beq.n	8005886 <HAL_RCC_OscConfig+0x416>
 80058a4:	e054      	b.n	8005950 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a6:	4b10      	ldr	r3, [pc, #64]	@ (80058e8 <HAL_RCC_OscConfig+0x478>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ac:	f7fc fd4a 	bl	8002344 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058b4:	f7fc fd46 	bl	8002344 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e045      	b.n	8005952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c6:	4b06      	ldr	r3, [pc, #24]	@ (80058e0 <HAL_RCC_OscConfig+0x470>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f0      	bne.n	80058b4 <HAL_RCC_OscConfig+0x444>
 80058d2:	e03d      	b.n	8005950 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d107      	bne.n	80058ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e038      	b.n	8005952 <HAL_RCC_OscConfig+0x4e2>
 80058e0:	40023800 	.word	0x40023800
 80058e4:	40007000 	.word	0x40007000
 80058e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058ec:	4b1b      	ldr	r3, [pc, #108]	@ (800595c <HAL_RCC_OscConfig+0x4ec>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d028      	beq.n	800594c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005904:	429a      	cmp	r2, r3
 8005906:	d121      	bne.n	800594c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005912:	429a      	cmp	r2, r3
 8005914:	d11a      	bne.n	800594c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800591c:	4013      	ands	r3, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005924:	4293      	cmp	r3, r2
 8005926:	d111      	bne.n	800594c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005932:	085b      	lsrs	r3, r3, #1
 8005934:	3b01      	subs	r3, #1
 8005936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005938:	429a      	cmp	r2, r3
 800593a:	d107      	bne.n	800594c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005948:	429a      	cmp	r2, r3
 800594a:	d001      	beq.n	8005950 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40023800 	.word	0x40023800

08005960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e0cc      	b.n	8005b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005974:	4b68      	ldr	r3, [pc, #416]	@ (8005b18 <HAL_RCC_ClockConfig+0x1b8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d90c      	bls.n	800599c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005982:	4b65      	ldr	r3, [pc, #404]	@ (8005b18 <HAL_RCC_ClockConfig+0x1b8>)
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800598a:	4b63      	ldr	r3, [pc, #396]	@ (8005b18 <HAL_RCC_ClockConfig+0x1b8>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d001      	beq.n	800599c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e0b8      	b.n	8005b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d020      	beq.n	80059ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059b4:	4b59      	ldr	r3, [pc, #356]	@ (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	4a58      	ldr	r2, [pc, #352]	@ (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80059be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059cc:	4b53      	ldr	r3, [pc, #332]	@ (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	4a52      	ldr	r2, [pc, #328]	@ (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80059d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059d8:	4b50      	ldr	r3, [pc, #320]	@ (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	494d      	ldr	r1, [pc, #308]	@ (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d044      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d107      	bne.n	8005a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059fe:	4b47      	ldr	r3, [pc, #284]	@ (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d119      	bne.n	8005a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e07f      	b.n	8005b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d003      	beq.n	8005a1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d107      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a1e:	4b3f      	ldr	r3, [pc, #252]	@ (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e06f      	b.n	8005b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e067      	b.n	8005b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a3e:	4b37      	ldr	r3, [pc, #220]	@ (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f023 0203 	bic.w	r2, r3, #3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	4934      	ldr	r1, [pc, #208]	@ (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a50:	f7fc fc78 	bl	8002344 <HAL_GetTick>
 8005a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a56:	e00a      	b.n	8005a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a58:	f7fc fc74 	bl	8002344 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e04f      	b.n	8005b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 020c 	and.w	r2, r3, #12
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d1eb      	bne.n	8005a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a80:	4b25      	ldr	r3, [pc, #148]	@ (8005b18 <HAL_RCC_ClockConfig+0x1b8>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d20c      	bcs.n	8005aa8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a8e:	4b22      	ldr	r3, [pc, #136]	@ (8005b18 <HAL_RCC_ClockConfig+0x1b8>)
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a96:	4b20      	ldr	r3, [pc, #128]	@ (8005b18 <HAL_RCC_ClockConfig+0x1b8>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d001      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e032      	b.n	8005b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d008      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ab4:	4b19      	ldr	r3, [pc, #100]	@ (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	4916      	ldr	r1, [pc, #88]	@ (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d009      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ad2:	4b12      	ldr	r3, [pc, #72]	@ (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	490e      	ldr	r1, [pc, #56]	@ (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ae6:	f000 f821 	bl	8005b2c <HAL_RCC_GetSysClockFreq>
 8005aea:	4602      	mov	r2, r0
 8005aec:	4b0b      	ldr	r3, [pc, #44]	@ (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	091b      	lsrs	r3, r3, #4
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	490a      	ldr	r1, [pc, #40]	@ (8005b20 <HAL_RCC_ClockConfig+0x1c0>)
 8005af8:	5ccb      	ldrb	r3, [r1, r3]
 8005afa:	fa22 f303 	lsr.w	r3, r2, r3
 8005afe:	4a09      	ldr	r2, [pc, #36]	@ (8005b24 <HAL_RCC_ClockConfig+0x1c4>)
 8005b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005b02:	4b09      	ldr	r3, [pc, #36]	@ (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fc fbd8 	bl	80022bc <HAL_InitTick>

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40023c00 	.word	0x40023c00
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	080089cc 	.word	0x080089cc
 8005b24:	20000000 	.word	0x20000000
 8005b28:	20000004 	.word	0x20000004

08005b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b30:	b090      	sub	sp, #64	@ 0x40
 8005b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b44:	4b59      	ldr	r3, [pc, #356]	@ (8005cac <HAL_RCC_GetSysClockFreq+0x180>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f003 030c 	and.w	r3, r3, #12
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d00d      	beq.n	8005b6c <HAL_RCC_GetSysClockFreq+0x40>
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	f200 80a1 	bhi.w	8005c98 <HAL_RCC_GetSysClockFreq+0x16c>
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_RCC_GetSysClockFreq+0x34>
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d003      	beq.n	8005b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b5e:	e09b      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b60:	4b53      	ldr	r3, [pc, #332]	@ (8005cb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b62:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b64:	e09b      	b.n	8005c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b66:	4b53      	ldr	r3, [pc, #332]	@ (8005cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b6a:	e098      	b.n	8005c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b6c:	4b4f      	ldr	r3, [pc, #316]	@ (8005cac <HAL_RCC_GetSysClockFreq+0x180>)
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b76:	4b4d      	ldr	r3, [pc, #308]	@ (8005cac <HAL_RCC_GetSysClockFreq+0x180>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d028      	beq.n	8005bd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b82:	4b4a      	ldr	r3, [pc, #296]	@ (8005cac <HAL_RCC_GetSysClockFreq+0x180>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	099b      	lsrs	r3, r3, #6
 8005b88:	2200      	movs	r2, #0
 8005b8a:	623b      	str	r3, [r7, #32]
 8005b8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b94:	2100      	movs	r1, #0
 8005b96:	4b47      	ldr	r3, [pc, #284]	@ (8005cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b98:	fb03 f201 	mul.w	r2, r3, r1
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	fb00 f303 	mul.w	r3, r0, r3
 8005ba2:	4413      	add	r3, r2
 8005ba4:	4a43      	ldr	r2, [pc, #268]	@ (8005cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ba6:	fba0 1202 	umull	r1, r2, r0, r2
 8005baa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bac:	460a      	mov	r2, r1
 8005bae:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005bb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bb2:	4413      	add	r3, r2
 8005bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb8:	2200      	movs	r2, #0
 8005bba:	61bb      	str	r3, [r7, #24]
 8005bbc:	61fa      	str	r2, [r7, #28]
 8005bbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005bc6:	f7fa ffbb 	bl	8000b40 <__aeabi_uldivmod>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4613      	mov	r3, r2
 8005bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bd2:	e053      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bd4:	4b35      	ldr	r3, [pc, #212]	@ (8005cac <HAL_RCC_GetSysClockFreq+0x180>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	099b      	lsrs	r3, r3, #6
 8005bda:	2200      	movs	r2, #0
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	617a      	str	r2, [r7, #20]
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005be6:	f04f 0b00 	mov.w	fp, #0
 8005bea:	4652      	mov	r2, sl
 8005bec:	465b      	mov	r3, fp
 8005bee:	f04f 0000 	mov.w	r0, #0
 8005bf2:	f04f 0100 	mov.w	r1, #0
 8005bf6:	0159      	lsls	r1, r3, #5
 8005bf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bfc:	0150      	lsls	r0, r2, #5
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	ebb2 080a 	subs.w	r8, r2, sl
 8005c06:	eb63 090b 	sbc.w	r9, r3, fp
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005c16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005c1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005c1e:	ebb2 0408 	subs.w	r4, r2, r8
 8005c22:	eb63 0509 	sbc.w	r5, r3, r9
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	00eb      	lsls	r3, r5, #3
 8005c30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c34:	00e2      	lsls	r2, r4, #3
 8005c36:	4614      	mov	r4, r2
 8005c38:	461d      	mov	r5, r3
 8005c3a:	eb14 030a 	adds.w	r3, r4, sl
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	eb45 030b 	adc.w	r3, r5, fp
 8005c44:	607b      	str	r3, [r7, #4]
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	f04f 0300 	mov.w	r3, #0
 8005c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c52:	4629      	mov	r1, r5
 8005c54:	028b      	lsls	r3, r1, #10
 8005c56:	4621      	mov	r1, r4
 8005c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	028a      	lsls	r2, r1, #10
 8005c60:	4610      	mov	r0, r2
 8005c62:	4619      	mov	r1, r3
 8005c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c66:	2200      	movs	r2, #0
 8005c68:	60bb      	str	r3, [r7, #8]
 8005c6a:	60fa      	str	r2, [r7, #12]
 8005c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c70:	f7fa ff66 	bl	8000b40 <__aeabi_uldivmod>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4613      	mov	r3, r2
 8005c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005cac <HAL_RCC_GetSysClockFreq+0x180>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	0c1b      	lsrs	r3, r3, #16
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	3301      	adds	r3, #1
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005c8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c94:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c96:	e002      	b.n	8005c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c98:	4b05      	ldr	r3, [pc, #20]	@ (8005cb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3740      	adds	r7, #64	@ 0x40
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005caa:	bf00      	nop
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	00f42400 	.word	0x00f42400
 8005cb4:	017d7840 	.word	0x017d7840

08005cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cbc:	4b03      	ldr	r3, [pc, #12]	@ (8005ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20000000 	.word	0x20000000

08005cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cd4:	f7ff fff0 	bl	8005cb8 <HAL_RCC_GetHCLKFreq>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	4b05      	ldr	r3, [pc, #20]	@ (8005cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	0a9b      	lsrs	r3, r3, #10
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	4903      	ldr	r1, [pc, #12]	@ (8005cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ce6:	5ccb      	ldrb	r3, [r1, r3]
 8005ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40023800 	.word	0x40023800
 8005cf4:	080089dc 	.word	0x080089dc

08005cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cfc:	f7ff ffdc 	bl	8005cb8 <HAL_RCC_GetHCLKFreq>
 8005d00:	4602      	mov	r2, r0
 8005d02:	4b05      	ldr	r3, [pc, #20]	@ (8005d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	0b5b      	lsrs	r3, r3, #13
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	4903      	ldr	r1, [pc, #12]	@ (8005d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d0e:	5ccb      	ldrb	r3, [r1, r3]
 8005d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40023800 	.word	0x40023800
 8005d1c:	080089dc 	.word	0x080089dc

08005d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e041      	b.n	8005db6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7fc f880 	bl	8001e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4610      	mov	r0, r2
 8005d60:	f000 fbb2 	bl	80064c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d001      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e04e      	b.n	8005e76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0201 	orr.w	r2, r2, #1
 8005dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a23      	ldr	r2, [pc, #140]	@ (8005e84 <HAL_TIM_Base_Start_IT+0xc4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d022      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0x80>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e02:	d01d      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0x80>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a1f      	ldr	r2, [pc, #124]	@ (8005e88 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d018      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0x80>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a1e      	ldr	r2, [pc, #120]	@ (8005e8c <HAL_TIM_Base_Start_IT+0xcc>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d013      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0x80>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8005e90 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00e      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0x80>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1b      	ldr	r2, [pc, #108]	@ (8005e94 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d009      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0x80>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a19      	ldr	r2, [pc, #100]	@ (8005e98 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d004      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0x80>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a18      	ldr	r2, [pc, #96]	@ (8005e9c <HAL_TIM_Base_Start_IT+0xdc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d111      	bne.n	8005e64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b06      	cmp	r3, #6
 8005e50:	d010      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0201 	orr.w	r2, r2, #1
 8005e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e62:	e007      	b.n	8005e74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40000400 	.word	0x40000400
 8005e8c:	40000800 	.word	0x40000800
 8005e90:	40000c00 	.word	0x40000c00
 8005e94:	40010400 	.word	0x40010400
 8005e98:	40014000 	.word	0x40014000
 8005e9c:	40001800 	.word	0x40001800

08005ea0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e097      	b.n	8005fe4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d106      	bne.n	8005ece <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7fb fff5 	bl	8001eb8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ee4:	f023 0307 	bic.w	r3, r3, #7
 8005ee8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	f000 fae7 	bl	80064c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f22:	f023 0303 	bic.w	r3, r3, #3
 8005f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	021b      	lsls	r3, r3, #8
 8005f32:	4313      	orrs	r3, r2
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005f40:	f023 030c 	bic.w	r3, r3, #12
 8005f44:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	021b      	lsls	r3, r3, #8
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	011a      	lsls	r2, r3, #4
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	031b      	lsls	r3, r3, #12
 8005f70:	4313      	orrs	r3, r2
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005f7e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005f86:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	4313      	orrs	r3, r2
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3718      	adds	r7, #24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ffc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006004:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800600c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006014:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d110      	bne.n	800603e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d102      	bne.n	8006028 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006022:	7b7b      	ldrb	r3, [r7, #13]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d001      	beq.n	800602c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e069      	b.n	8006100 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800603c:	e031      	b.n	80060a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b04      	cmp	r3, #4
 8006042:	d110      	bne.n	8006066 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006044:	7bbb      	ldrb	r3, [r7, #14]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d102      	bne.n	8006050 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800604a:	7b3b      	ldrb	r3, [r7, #12]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d001      	beq.n	8006054 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e055      	b.n	8006100 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006064:	e01d      	b.n	80060a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d108      	bne.n	800607e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800606c:	7bbb      	ldrb	r3, [r7, #14]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d105      	bne.n	800607e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006072:	7b7b      	ldrb	r3, [r7, #13]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d102      	bne.n	800607e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006078:	7b3b      	ldrb	r3, [r7, #12]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d001      	beq.n	8006082 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e03e      	b.n	8006100 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2202      	movs	r2, #2
 8006086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2202      	movs	r2, #2
 800608e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2202      	movs	r2, #2
 8006096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2202      	movs	r2, #2
 800609e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <HAL_TIM_Encoder_Start+0xc4>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d008      	beq.n	80060c0 <HAL_TIM_Encoder_Start+0xd4>
 80060ae:	e00f      	b.n	80060d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2201      	movs	r2, #1
 80060b6:	2100      	movs	r1, #0
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fb4b 	bl	8006754 <TIM_CCxChannelCmd>
      break;
 80060be:	e016      	b.n	80060ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2201      	movs	r2, #1
 80060c6:	2104      	movs	r1, #4
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 fb43 	bl	8006754 <TIM_CCxChannelCmd>
      break;
 80060ce:	e00e      	b.n	80060ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2201      	movs	r2, #1
 80060d6:	2100      	movs	r1, #0
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 fb3b 	bl	8006754 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2201      	movs	r2, #1
 80060e4:	2104      	movs	r1, #4
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 fb34 	bl	8006754 <TIM_CCxChannelCmd>
      break;
 80060ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0201 	orr.w	r2, r2, #1
 80060fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d020      	beq.n	800616c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01b      	beq.n	800616c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f06f 0202 	mvn.w	r2, #2
 800613c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	f003 0303 	and.w	r3, r3, #3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f999 	bl	800648a <HAL_TIM_IC_CaptureCallback>
 8006158:	e005      	b.n	8006166 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f98b 	bl	8006476 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f99c 	bl	800649e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b00      	cmp	r3, #0
 8006174:	d020      	beq.n	80061b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01b      	beq.n	80061b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f06f 0204 	mvn.w	r2, #4
 8006188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2202      	movs	r2, #2
 800618e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f973 	bl	800648a <HAL_TIM_IC_CaptureCallback>
 80061a4:	e005      	b.n	80061b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f965 	bl	8006476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f976 	bl	800649e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d020      	beq.n	8006204 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01b      	beq.n	8006204 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0208 	mvn.w	r2, #8
 80061d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2204      	movs	r2, #4
 80061da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f94d 	bl	800648a <HAL_TIM_IC_CaptureCallback>
 80061f0:	e005      	b.n	80061fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f93f 	bl	8006476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f950 	bl	800649e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 0310 	and.w	r3, r3, #16
 800620a:	2b00      	cmp	r3, #0
 800620c:	d020      	beq.n	8006250 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01b      	beq.n	8006250 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0210 	mvn.w	r2, #16
 8006220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2208      	movs	r2, #8
 8006226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f927 	bl	800648a <HAL_TIM_IC_CaptureCallback>
 800623c:	e005      	b.n	800624a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f919 	bl	8006476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f92a 	bl	800649e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00c      	beq.n	8006274 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d007      	beq.n	8006274 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0201 	mvn.w	r2, #1
 800626c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fb f8f8 	bl	8001464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00c      	beq.n	8006298 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006284:	2b00      	cmp	r3, #0
 8006286:	d007      	beq.n	8006298 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fb0a 	bl	80068ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00c      	beq.n	80062bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f8fb 	bl	80064b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00c      	beq.n	80062e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0220 	mvn.w	r2, #32
 80062d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fadc 	bl	8006898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062e0:	bf00      	nop
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_TIM_ConfigClockSource+0x1c>
 8006300:	2302      	movs	r3, #2
 8006302:	e0b4      	b.n	800646e <HAL_TIM_ConfigClockSource+0x186>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800632a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800633c:	d03e      	beq.n	80063bc <HAL_TIM_ConfigClockSource+0xd4>
 800633e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006342:	f200 8087 	bhi.w	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 8006346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800634a:	f000 8086 	beq.w	800645a <HAL_TIM_ConfigClockSource+0x172>
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006352:	d87f      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 8006354:	2b70      	cmp	r3, #112	@ 0x70
 8006356:	d01a      	beq.n	800638e <HAL_TIM_ConfigClockSource+0xa6>
 8006358:	2b70      	cmp	r3, #112	@ 0x70
 800635a:	d87b      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 800635c:	2b60      	cmp	r3, #96	@ 0x60
 800635e:	d050      	beq.n	8006402 <HAL_TIM_ConfigClockSource+0x11a>
 8006360:	2b60      	cmp	r3, #96	@ 0x60
 8006362:	d877      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 8006364:	2b50      	cmp	r3, #80	@ 0x50
 8006366:	d03c      	beq.n	80063e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006368:	2b50      	cmp	r3, #80	@ 0x50
 800636a:	d873      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 800636c:	2b40      	cmp	r3, #64	@ 0x40
 800636e:	d058      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x13a>
 8006370:	2b40      	cmp	r3, #64	@ 0x40
 8006372:	d86f      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 8006374:	2b30      	cmp	r3, #48	@ 0x30
 8006376:	d064      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x15a>
 8006378:	2b30      	cmp	r3, #48	@ 0x30
 800637a:	d86b      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 800637c:	2b20      	cmp	r3, #32
 800637e:	d060      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x15a>
 8006380:	2b20      	cmp	r3, #32
 8006382:	d867      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 8006384:	2b00      	cmp	r3, #0
 8006386:	d05c      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x15a>
 8006388:	2b10      	cmp	r3, #16
 800638a:	d05a      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x15a>
 800638c:	e062      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800639e:	f000 f9b9 	bl	8006714 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80063b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	609a      	str	r2, [r3, #8]
      break;
 80063ba:	e04f      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063cc:	f000 f9a2 	bl	8006714 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063de:	609a      	str	r2, [r3, #8]
      break;
 80063e0:	e03c      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ee:	461a      	mov	r2, r3
 80063f0:	f000 f916 	bl	8006620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2150      	movs	r1, #80	@ 0x50
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 f96f 	bl	80066de <TIM_ITRx_SetConfig>
      break;
 8006400:	e02c      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800640e:	461a      	mov	r2, r3
 8006410:	f000 f935 	bl	800667e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2160      	movs	r1, #96	@ 0x60
 800641a:	4618      	mov	r0, r3
 800641c:	f000 f95f 	bl	80066de <TIM_ITRx_SetConfig>
      break;
 8006420:	e01c      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800642e:	461a      	mov	r2, r3
 8006430:	f000 f8f6 	bl	8006620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2140      	movs	r1, #64	@ 0x40
 800643a:	4618      	mov	r0, r3
 800643c:	f000 f94f 	bl	80066de <TIM_ITRx_SetConfig>
      break;
 8006440:	e00c      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4619      	mov	r1, r3
 800644c:	4610      	mov	r0, r2
 800644e:	f000 f946 	bl	80066de <TIM_ITRx_SetConfig>
      break;
 8006452:	e003      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	73fb      	strb	r3, [r7, #15]
      break;
 8006458:	e000      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800645a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800646c:	7bfb      	ldrb	r3, [r7, #15]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
	...

080064c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a46      	ldr	r2, [pc, #280]	@ (80065f4 <TIM_Base_SetConfig+0x12c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d013      	beq.n	8006508 <TIM_Base_SetConfig+0x40>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064e6:	d00f      	beq.n	8006508 <TIM_Base_SetConfig+0x40>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a43      	ldr	r2, [pc, #268]	@ (80065f8 <TIM_Base_SetConfig+0x130>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00b      	beq.n	8006508 <TIM_Base_SetConfig+0x40>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a42      	ldr	r2, [pc, #264]	@ (80065fc <TIM_Base_SetConfig+0x134>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d007      	beq.n	8006508 <TIM_Base_SetConfig+0x40>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a41      	ldr	r2, [pc, #260]	@ (8006600 <TIM_Base_SetConfig+0x138>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d003      	beq.n	8006508 <TIM_Base_SetConfig+0x40>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a40      	ldr	r2, [pc, #256]	@ (8006604 <TIM_Base_SetConfig+0x13c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d108      	bne.n	800651a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800650e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a35      	ldr	r2, [pc, #212]	@ (80065f4 <TIM_Base_SetConfig+0x12c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d02b      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006528:	d027      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a32      	ldr	r2, [pc, #200]	@ (80065f8 <TIM_Base_SetConfig+0x130>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d023      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a31      	ldr	r2, [pc, #196]	@ (80065fc <TIM_Base_SetConfig+0x134>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d01f      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a30      	ldr	r2, [pc, #192]	@ (8006600 <TIM_Base_SetConfig+0x138>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d01b      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a2f      	ldr	r2, [pc, #188]	@ (8006604 <TIM_Base_SetConfig+0x13c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d017      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a2e      	ldr	r2, [pc, #184]	@ (8006608 <TIM_Base_SetConfig+0x140>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d013      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a2d      	ldr	r2, [pc, #180]	@ (800660c <TIM_Base_SetConfig+0x144>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00f      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a2c      	ldr	r2, [pc, #176]	@ (8006610 <TIM_Base_SetConfig+0x148>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00b      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a2b      	ldr	r2, [pc, #172]	@ (8006614 <TIM_Base_SetConfig+0x14c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d007      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a2a      	ldr	r2, [pc, #168]	@ (8006618 <TIM_Base_SetConfig+0x150>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d003      	beq.n	800657a <TIM_Base_SetConfig+0xb2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a29      	ldr	r2, [pc, #164]	@ (800661c <TIM_Base_SetConfig+0x154>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d108      	bne.n	800658c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a10      	ldr	r2, [pc, #64]	@ (80065f4 <TIM_Base_SetConfig+0x12c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d003      	beq.n	80065c0 <TIM_Base_SetConfig+0xf8>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a12      	ldr	r2, [pc, #72]	@ (8006604 <TIM_Base_SetConfig+0x13c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d103      	bne.n	80065c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d105      	bne.n	80065e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	f023 0201 	bic.w	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	611a      	str	r2, [r3, #16]
  }
}
 80065e6:	bf00      	nop
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	40010000 	.word	0x40010000
 80065f8:	40000400 	.word	0x40000400
 80065fc:	40000800 	.word	0x40000800
 8006600:	40000c00 	.word	0x40000c00
 8006604:	40010400 	.word	0x40010400
 8006608:	40014000 	.word	0x40014000
 800660c:	40014400 	.word	0x40014400
 8006610:	40014800 	.word	0x40014800
 8006614:	40001800 	.word	0x40001800
 8006618:	40001c00 	.word	0x40001c00
 800661c:	40002000 	.word	0x40002000

08006620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	f023 0201 	bic.w	r2, r3, #1
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800664a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4313      	orrs	r3, r2
 8006654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f023 030a 	bic.w	r3, r3, #10
 800665c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	621a      	str	r2, [r3, #32]
}
 8006672:	bf00      	nop
 8006674:	371c      	adds	r7, #28
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800667e:	b480      	push	{r7}
 8006680:	b087      	sub	sp, #28
 8006682:	af00      	add	r7, sp, #0
 8006684:	60f8      	str	r0, [r7, #12]
 8006686:	60b9      	str	r1, [r7, #8]
 8006688:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f023 0210 	bic.w	r2, r3, #16
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	031b      	lsls	r3, r3, #12
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	011b      	lsls	r3, r3, #4
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f043 0307 	orr.w	r3, r3, #7
 8006700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	609a      	str	r2, [r3, #8]
}
 8006708:	bf00      	nop
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800672e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	021a      	lsls	r2, r3, #8
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	431a      	orrs	r2, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4313      	orrs	r3, r2
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	4313      	orrs	r3, r2
 8006740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	609a      	str	r2, [r3, #8]
}
 8006748:	bf00      	nop
 800674a:	371c      	adds	r7, #28
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f003 031f 	and.w	r3, r3, #31
 8006766:	2201      	movs	r2, #1
 8006768:	fa02 f303 	lsl.w	r3, r2, r3
 800676c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6a1a      	ldr	r2, [r3, #32]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	43db      	mvns	r3, r3
 8006776:	401a      	ands	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a1a      	ldr	r2, [r3, #32]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f003 031f 	and.w	r3, r3, #31
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	fa01 f303 	lsl.w	r3, r1, r3
 800678c:	431a      	orrs	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	621a      	str	r2, [r3, #32]
}
 8006792:	bf00      	nop
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
	...

080067a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d101      	bne.n	80067b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067b4:	2302      	movs	r3, #2
 80067b6:	e05a      	b.n	800686e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a21      	ldr	r2, [pc, #132]	@ (800687c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d022      	beq.n	8006842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006804:	d01d      	beq.n	8006842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a1d      	ldr	r2, [pc, #116]	@ (8006880 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d018      	beq.n	8006842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a1b      	ldr	r2, [pc, #108]	@ (8006884 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d013      	beq.n	8006842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a1a      	ldr	r2, [pc, #104]	@ (8006888 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00e      	beq.n	8006842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a18      	ldr	r2, [pc, #96]	@ (800688c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d009      	beq.n	8006842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a17      	ldr	r2, [pc, #92]	@ (8006890 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d004      	beq.n	8006842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a15      	ldr	r2, [pc, #84]	@ (8006894 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d10c      	bne.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	4313      	orrs	r3, r2
 8006852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	40010000 	.word	0x40010000
 8006880:	40000400 	.word	0x40000400
 8006884:	40000800 	.word	0x40000800
 8006888:	40000c00 	.word	0x40000c00
 800688c:	40010400 	.word	0x40010400
 8006890:	40014000 	.word	0x40014000
 8006894:	40001800 	.word	0x40001800

08006898 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e042      	b.n	8006958 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d106      	bne.n	80068ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7fb fb4e 	bl	8001f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2224      	movs	r2, #36	@ 0x24
 80068f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fdbd 	bl	8007484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	691a      	ldr	r2, [r3, #16]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	695a      	ldr	r2, [r3, #20]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08a      	sub	sp, #40	@ 0x28
 8006964:	af02      	add	r7, sp, #8
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	603b      	str	r3, [r7, #0]
 800696c:	4613      	mov	r3, r2
 800696e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006970:	2300      	movs	r3, #0
 8006972:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b20      	cmp	r3, #32
 800697e:	d175      	bne.n	8006a6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <HAL_UART_Transmit+0x2c>
 8006986:	88fb      	ldrh	r3, [r7, #6]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e06e      	b.n	8006a6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2221      	movs	r2, #33	@ 0x21
 800699a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800699e:	f7fb fcd1 	bl	8002344 <HAL_GetTick>
 80069a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	88fa      	ldrh	r2, [r7, #6]
 80069a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	88fa      	ldrh	r2, [r7, #6]
 80069ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069b8:	d108      	bne.n	80069cc <HAL_UART_Transmit+0x6c>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d104      	bne.n	80069cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80069c2:	2300      	movs	r3, #0
 80069c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	61bb      	str	r3, [r7, #24]
 80069ca:	e003      	b.n	80069d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069d4:	e02e      	b.n	8006a34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2200      	movs	r2, #0
 80069de:	2180      	movs	r1, #128	@ 0x80
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 fb1f 	bl	8007024 <UART_WaitOnFlagUntilTimeout>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e03a      	b.n	8006a6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10b      	bne.n	8006a16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	3302      	adds	r3, #2
 8006a12:	61bb      	str	r3, [r7, #24]
 8006a14:	e007      	b.n	8006a26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	781a      	ldrb	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	3301      	adds	r3, #1
 8006a24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1cb      	bne.n	80069d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2200      	movs	r2, #0
 8006a46:	2140      	movs	r1, #64	@ 0x40
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 faeb 	bl	8007024 <UART_WaitOnFlagUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e006      	b.n	8006a6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	e000      	b.n	8006a6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006a6c:	2302      	movs	r3, #2
  }
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3720      	adds	r7, #32
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	4613      	mov	r3, r2
 8006a82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d112      	bne.n	8006ab6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d002      	beq.n	8006a9c <HAL_UART_Receive_IT+0x26>
 8006a96:	88fb      	ldrh	r3, [r7, #6]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e00b      	b.n	8006ab8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006aa6:	88fb      	ldrh	r3, [r7, #6]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	68b9      	ldr	r1, [r7, #8]
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 fb12 	bl	80070d6 <UART_Start_Receive_IT>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	e000      	b.n	8006ab8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006ab6:	2302      	movs	r3, #2
  }
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b0ba      	sub	sp, #232	@ 0xe8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006af6:	f003 030f 	and.w	r3, r3, #15
 8006afa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006afe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10f      	bne.n	8006b26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <HAL_UART_IRQHandler+0x66>
 8006b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b16:	f003 0320 	and.w	r3, r3, #32
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fbf2 	bl	8007308 <UART_Receive_IT>
      return;
 8006b24:	e25b      	b.n	8006fde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 80de 	beq.w	8006cec <HAL_UART_IRQHandler+0x22c>
 8006b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d106      	bne.n	8006b4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 80d1 	beq.w	8006cec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00b      	beq.n	8006b6e <HAL_UART_IRQHandler+0xae>
 8006b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d005      	beq.n	8006b6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b66:	f043 0201 	orr.w	r2, r3, #1
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00b      	beq.n	8006b92 <HAL_UART_IRQHandler+0xd2>
 8006b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d005      	beq.n	8006b92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b8a:	f043 0202 	orr.w	r2, r3, #2
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00b      	beq.n	8006bb6 <HAL_UART_IRQHandler+0xf6>
 8006b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bae:	f043 0204 	orr.w	r2, r3, #4
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bba:	f003 0308 	and.w	r3, r3, #8
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d011      	beq.n	8006be6 <HAL_UART_IRQHandler+0x126>
 8006bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d105      	bne.n	8006bda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d005      	beq.n	8006be6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bde:	f043 0208 	orr.w	r2, r3, #8
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 81f2 	beq.w	8006fd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bf4:	f003 0320 	and.w	r3, r3, #32
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d008      	beq.n	8006c0e <HAL_UART_IRQHandler+0x14e>
 8006bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fb7d 	bl	8007308 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c18:	2b40      	cmp	r3, #64	@ 0x40
 8006c1a:	bf0c      	ite	eq
 8006c1c:	2301      	moveq	r3, #1
 8006c1e:	2300      	movne	r3, #0
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d103      	bne.n	8006c3a <HAL_UART_IRQHandler+0x17a>
 8006c32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d04f      	beq.n	8006cda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fa85 	bl	800714a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c4a:	2b40      	cmp	r3, #64	@ 0x40
 8006c4c:	d141      	bne.n	8006cd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3314      	adds	r3, #20
 8006c54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3314      	adds	r3, #20
 8006c76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1d9      	bne.n	8006c4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d013      	beq.n	8006cca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca6:	4a7e      	ldr	r2, [pc, #504]	@ (8006ea0 <HAL_UART_IRQHandler+0x3e0>)
 8006ca8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fb fcf9 	bl	80026a6 <HAL_DMA_Abort_IT>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d016      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc8:	e00e      	b.n	8006ce8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f994 	bl	8006ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd0:	e00a      	b.n	8006ce8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f990 	bl	8006ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd8:	e006      	b.n	8006ce8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f98c 	bl	8006ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006ce6:	e175      	b.n	8006fd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce8:	bf00      	nop
    return;
 8006cea:	e173      	b.n	8006fd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	f040 814f 	bne.w	8006f94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cfa:	f003 0310 	and.w	r3, r3, #16
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 8148 	beq.w	8006f94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d08:	f003 0310 	and.w	r3, r3, #16
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 8141 	beq.w	8006f94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d12:	2300      	movs	r3, #0
 8006d14:	60bb      	str	r3, [r7, #8]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	60bb      	str	r3, [r7, #8]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	60bb      	str	r3, [r7, #8]
 8006d26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d32:	2b40      	cmp	r3, #64	@ 0x40
 8006d34:	f040 80b6 	bne.w	8006ea4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 8145 	beq.w	8006fd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d56:	429a      	cmp	r2, r3
 8006d58:	f080 813e 	bcs.w	8006fd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d62:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d6e:	f000 8088 	beq.w	8006e82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	330c      	adds	r3, #12
 8006d78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	330c      	adds	r3, #12
 8006d9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006d9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006da2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006daa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1d9      	bne.n	8006d72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3314      	adds	r3, #20
 8006dc4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006dce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dd0:	f023 0301 	bic.w	r3, r3, #1
 8006dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3314      	adds	r3, #20
 8006dde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006de2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006de6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006dea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006dee:	e841 2300 	strex	r3, r2, [r1]
 8006df2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006df4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e1      	bne.n	8006dbe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3314      	adds	r3, #20
 8006e00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e04:	e853 3f00 	ldrex	r3, [r3]
 8006e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3314      	adds	r3, #20
 8006e1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006e1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e26:	e841 2300 	strex	r3, r2, [r1]
 8006e2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1e3      	bne.n	8006dfa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	330c      	adds	r3, #12
 8006e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e4a:	e853 3f00 	ldrex	r3, [r3]
 8006e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e52:	f023 0310 	bic.w	r3, r3, #16
 8006e56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	330c      	adds	r3, #12
 8006e60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006e64:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006e66:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e3      	bne.n	8006e40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7fb fba2 	bl	80025c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2202      	movs	r2, #2
 8006e86:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f8b7 	bl	800700c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e9e:	e09b      	b.n	8006fd8 <HAL_UART_IRQHandler+0x518>
 8006ea0:	08007211 	.word	0x08007211
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 808e 	beq.w	8006fdc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006ec0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 8089 	beq.w	8006fdc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	330c      	adds	r3, #12
 8006ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006edc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ee0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	330c      	adds	r3, #12
 8006eea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006eee:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ef0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ef4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e3      	bne.n	8006eca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3314      	adds	r3, #20
 8006f08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	623b      	str	r3, [r7, #32]
   return(result);
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	f023 0301 	bic.w	r3, r3, #1
 8006f18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3314      	adds	r3, #20
 8006f22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f26:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e3      	bne.n	8006f02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	330c      	adds	r3, #12
 8006f4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f023 0310 	bic.w	r3, r3, #16
 8006f5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	330c      	adds	r3, #12
 8006f68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006f6c:	61fa      	str	r2, [r7, #28]
 8006f6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	69b9      	ldr	r1, [r7, #24]
 8006f72:	69fa      	ldr	r2, [r7, #28]
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	617b      	str	r3, [r7, #20]
   return(result);
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e3      	bne.n	8006f48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f83d 	bl	800700c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f92:	e023      	b.n	8006fdc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d009      	beq.n	8006fb4 <HAL_UART_IRQHandler+0x4f4>
 8006fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f943 	bl	8007238 <UART_Transmit_IT>
    return;
 8006fb2:	e014      	b.n	8006fde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00e      	beq.n	8006fde <HAL_UART_IRQHandler+0x51e>
 8006fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d008      	beq.n	8006fde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f983 	bl	80072d8 <UART_EndTransmit_IT>
    return;
 8006fd2:	e004      	b.n	8006fde <HAL_UART_IRQHandler+0x51e>
    return;
 8006fd4:	bf00      	nop
 8006fd6:	e002      	b.n	8006fde <HAL_UART_IRQHandler+0x51e>
      return;
 8006fd8:	bf00      	nop
 8006fda:	e000      	b.n	8006fde <HAL_UART_IRQHandler+0x51e>
      return;
 8006fdc:	bf00      	nop
  }
}
 8006fde:	37e8      	adds	r7, #232	@ 0xe8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	603b      	str	r3, [r7, #0]
 8007030:	4613      	mov	r3, r2
 8007032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007034:	e03b      	b.n	80070ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703c:	d037      	beq.n	80070ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800703e:	f7fb f981 	bl	8002344 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	6a3a      	ldr	r2, [r7, #32]
 800704a:	429a      	cmp	r2, r3
 800704c:	d302      	bcc.n	8007054 <UART_WaitOnFlagUntilTimeout+0x30>
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e03a      	b.n	80070ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f003 0304 	and.w	r3, r3, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	d023      	beq.n	80070ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b80      	cmp	r3, #128	@ 0x80
 800706a:	d020      	beq.n	80070ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2b40      	cmp	r3, #64	@ 0x40
 8007070:	d01d      	beq.n	80070ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0308 	and.w	r3, r3, #8
 800707c:	2b08      	cmp	r3, #8
 800707e:	d116      	bne.n	80070ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007080:	2300      	movs	r3, #0
 8007082:	617b      	str	r3, [r7, #20]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 f857 	bl	800714a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2208      	movs	r2, #8
 80070a0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e00f      	b.n	80070ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	4013      	ands	r3, r2
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	bf0c      	ite	eq
 80070be:	2301      	moveq	r3, #1
 80070c0:	2300      	movne	r3, #0
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	461a      	mov	r2, r3
 80070c6:	79fb      	ldrb	r3, [r7, #7]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d0b4      	beq.n	8007036 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3718      	adds	r7, #24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b085      	sub	sp, #20
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	4613      	mov	r3, r2
 80070e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	88fa      	ldrh	r2, [r7, #6]
 80070ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	88fa      	ldrh	r2, [r7, #6]
 80070f4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2222      	movs	r2, #34	@ 0x22
 8007100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d007      	beq.n	800711c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800711a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	695a      	ldr	r2, [r3, #20]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0220 	orr.w	r2, r2, #32
 800713a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800714a:	b480      	push	{r7}
 800714c:	b095      	sub	sp, #84	@ 0x54
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	330c      	adds	r3, #12
 8007158:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007164:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007168:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	330c      	adds	r3, #12
 8007170:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007172:	643a      	str	r2, [r7, #64]	@ 0x40
 8007174:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007178:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e5      	bne.n	8007152 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3314      	adds	r3, #20
 800718c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	e853 3f00 	ldrex	r3, [r3]
 8007194:	61fb      	str	r3, [r7, #28]
   return(result);
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	f023 0301 	bic.w	r3, r3, #1
 800719c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3314      	adds	r3, #20
 80071a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071ae:	e841 2300 	strex	r3, r2, [r1]
 80071b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1e5      	bne.n	8007186 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d119      	bne.n	80071f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	330c      	adds	r3, #12
 80071c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f023 0310 	bic.w	r3, r3, #16
 80071d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	330c      	adds	r3, #12
 80071e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071e2:	61ba      	str	r2, [r7, #24]
 80071e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	6979      	ldr	r1, [r7, #20]
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	613b      	str	r3, [r7, #16]
   return(result);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e5      	bne.n	80071c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2220      	movs	r2, #32
 80071fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007204:	bf00      	nop
 8007206:	3754      	adds	r7, #84	@ 0x54
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800721c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f7ff fee4 	bl	8006ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007230:	bf00      	nop
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b21      	cmp	r3, #33	@ 0x21
 800724a:	d13e      	bne.n	80072ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007254:	d114      	bne.n	8007280 <UART_Transmit_IT+0x48>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d110      	bne.n	8007280 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	461a      	mov	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007272:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	1c9a      	adds	r2, r3, #2
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	621a      	str	r2, [r3, #32]
 800727e:	e008      	b.n	8007292 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	1c59      	adds	r1, r3, #1
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6211      	str	r1, [r2, #32]
 800728a:	781a      	ldrb	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007296:	b29b      	uxth	r3, r3
 8007298:	3b01      	subs	r3, #1
 800729a:	b29b      	uxth	r3, r3
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	4619      	mov	r1, r3
 80072a0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10f      	bne.n	80072c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	e000      	b.n	80072cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072ca:	2302      	movs	r3, #2
  }
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff fe73 	bl	8006fe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08c      	sub	sp, #48	@ 0x30
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b22      	cmp	r3, #34	@ 0x22
 800731a:	f040 80ae 	bne.w	800747a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007326:	d117      	bne.n	8007358 <UART_Receive_IT+0x50>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d113      	bne.n	8007358 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007330:	2300      	movs	r3, #0
 8007332:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007338:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	b29b      	uxth	r3, r3
 8007342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007346:	b29a      	uxth	r2, r3
 8007348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007350:	1c9a      	adds	r2, r3, #2
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	629a      	str	r2, [r3, #40]	@ 0x28
 8007356:	e026      	b.n	80073a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800735e:	2300      	movs	r3, #0
 8007360:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800736a:	d007      	beq.n	800737c <UART_Receive_IT+0x74>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10a      	bne.n	800738a <UART_Receive_IT+0x82>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d106      	bne.n	800738a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	b2da      	uxtb	r2, r3
 8007384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007386:	701a      	strb	r2, [r3, #0]
 8007388:	e008      	b.n	800739c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	b2db      	uxtb	r3, r3
 8007392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007396:	b2da      	uxtb	r2, r3
 8007398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800739a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	3b01      	subs	r3, #1
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	4619      	mov	r1, r3
 80073b4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d15d      	bne.n	8007476 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68da      	ldr	r2, [r3, #12]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0220 	bic.w	r2, r2, #32
 80073c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68da      	ldr	r2, [r3, #12]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80073d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	695a      	ldr	r2, [r3, #20]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0201 	bic.w	r2, r2, #1
 80073e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2220      	movs	r2, #32
 80073ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d135      	bne.n	800746c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	330c      	adds	r3, #12
 800740c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	613b      	str	r3, [r7, #16]
   return(result);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f023 0310 	bic.w	r3, r3, #16
 800741c:	627b      	str	r3, [r7, #36]	@ 0x24
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	330c      	adds	r3, #12
 8007424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007426:	623a      	str	r2, [r7, #32]
 8007428:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	69f9      	ldr	r1, [r7, #28]
 800742c:	6a3a      	ldr	r2, [r7, #32]
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	61bb      	str	r3, [r7, #24]
   return(result);
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e5      	bne.n	8007406 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0310 	and.w	r3, r3, #16
 8007444:	2b10      	cmp	r3, #16
 8007446:	d10a      	bne.n	800745e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7ff fdd1 	bl	800700c <HAL_UARTEx_RxEventCallback>
 800746a:	e002      	b.n	8007472 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7fa fc3b 	bl	8001ce8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	e002      	b.n	800747c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	e000      	b.n	800747c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800747a:	2302      	movs	r3, #2
  }
}
 800747c:	4618      	mov	r0, r3
 800747e:	3730      	adds	r7, #48	@ 0x30
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007488:	b0c0      	sub	sp, #256	@ 0x100
 800748a:	af00      	add	r7, sp, #0
 800748c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800749c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a0:	68d9      	ldr	r1, [r3, #12]
 80074a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	ea40 0301 	orr.w	r3, r0, r1
 80074ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	431a      	orrs	r2, r3
 80074bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	431a      	orrs	r2, r3
 80074c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80074dc:	f021 010c 	bic.w	r1, r1, #12
 80074e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80074ea:	430b      	orrs	r3, r1
 80074ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80074fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074fe:	6999      	ldr	r1, [r3, #24]
 8007500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	ea40 0301 	orr.w	r3, r0, r1
 800750a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	4b8f      	ldr	r3, [pc, #572]	@ (8007750 <UART_SetConfig+0x2cc>)
 8007514:	429a      	cmp	r2, r3
 8007516:	d005      	beq.n	8007524 <UART_SetConfig+0xa0>
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	4b8d      	ldr	r3, [pc, #564]	@ (8007754 <UART_SetConfig+0x2d0>)
 8007520:	429a      	cmp	r2, r3
 8007522:	d104      	bne.n	800752e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007524:	f7fe fbe8 	bl	8005cf8 <HAL_RCC_GetPCLK2Freq>
 8007528:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800752c:	e003      	b.n	8007536 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800752e:	f7fe fbcf 	bl	8005cd0 <HAL_RCC_GetPCLK1Freq>
 8007532:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007540:	f040 810c 	bne.w	800775c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007548:	2200      	movs	r2, #0
 800754a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800754e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007552:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007556:	4622      	mov	r2, r4
 8007558:	462b      	mov	r3, r5
 800755a:	1891      	adds	r1, r2, r2
 800755c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800755e:	415b      	adcs	r3, r3
 8007560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007562:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007566:	4621      	mov	r1, r4
 8007568:	eb12 0801 	adds.w	r8, r2, r1
 800756c:	4629      	mov	r1, r5
 800756e:	eb43 0901 	adc.w	r9, r3, r1
 8007572:	f04f 0200 	mov.w	r2, #0
 8007576:	f04f 0300 	mov.w	r3, #0
 800757a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800757e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007586:	4690      	mov	r8, r2
 8007588:	4699      	mov	r9, r3
 800758a:	4623      	mov	r3, r4
 800758c:	eb18 0303 	adds.w	r3, r8, r3
 8007590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007594:	462b      	mov	r3, r5
 8007596:	eb49 0303 	adc.w	r3, r9, r3
 800759a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800759e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80075ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80075b2:	460b      	mov	r3, r1
 80075b4:	18db      	adds	r3, r3, r3
 80075b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80075b8:	4613      	mov	r3, r2
 80075ba:	eb42 0303 	adc.w	r3, r2, r3
 80075be:	657b      	str	r3, [r7, #84]	@ 0x54
 80075c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80075c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80075c8:	f7f9 faba 	bl	8000b40 <__aeabi_uldivmod>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4b61      	ldr	r3, [pc, #388]	@ (8007758 <UART_SetConfig+0x2d4>)
 80075d2:	fba3 2302 	umull	r2, r3, r3, r2
 80075d6:	095b      	lsrs	r3, r3, #5
 80075d8:	011c      	lsls	r4, r3, #4
 80075da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075de:	2200      	movs	r2, #0
 80075e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80075e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80075ec:	4642      	mov	r2, r8
 80075ee:	464b      	mov	r3, r9
 80075f0:	1891      	adds	r1, r2, r2
 80075f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80075f4:	415b      	adcs	r3, r3
 80075f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80075fc:	4641      	mov	r1, r8
 80075fe:	eb12 0a01 	adds.w	sl, r2, r1
 8007602:	4649      	mov	r1, r9
 8007604:	eb43 0b01 	adc.w	fp, r3, r1
 8007608:	f04f 0200 	mov.w	r2, #0
 800760c:	f04f 0300 	mov.w	r3, #0
 8007610:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007614:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800761c:	4692      	mov	sl, r2
 800761e:	469b      	mov	fp, r3
 8007620:	4643      	mov	r3, r8
 8007622:	eb1a 0303 	adds.w	r3, sl, r3
 8007626:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800762a:	464b      	mov	r3, r9
 800762c:	eb4b 0303 	adc.w	r3, fp, r3
 8007630:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007640:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007644:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007648:	460b      	mov	r3, r1
 800764a:	18db      	adds	r3, r3, r3
 800764c:	643b      	str	r3, [r7, #64]	@ 0x40
 800764e:	4613      	mov	r3, r2
 8007650:	eb42 0303 	adc.w	r3, r2, r3
 8007654:	647b      	str	r3, [r7, #68]	@ 0x44
 8007656:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800765a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800765e:	f7f9 fa6f 	bl	8000b40 <__aeabi_uldivmod>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	4611      	mov	r1, r2
 8007668:	4b3b      	ldr	r3, [pc, #236]	@ (8007758 <UART_SetConfig+0x2d4>)
 800766a:	fba3 2301 	umull	r2, r3, r3, r1
 800766e:	095b      	lsrs	r3, r3, #5
 8007670:	2264      	movs	r2, #100	@ 0x64
 8007672:	fb02 f303 	mul.w	r3, r2, r3
 8007676:	1acb      	subs	r3, r1, r3
 8007678:	00db      	lsls	r3, r3, #3
 800767a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800767e:	4b36      	ldr	r3, [pc, #216]	@ (8007758 <UART_SetConfig+0x2d4>)
 8007680:	fba3 2302 	umull	r2, r3, r3, r2
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800768c:	441c      	add	r4, r3
 800768e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007692:	2200      	movs	r2, #0
 8007694:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007698:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800769c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80076a0:	4642      	mov	r2, r8
 80076a2:	464b      	mov	r3, r9
 80076a4:	1891      	adds	r1, r2, r2
 80076a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80076a8:	415b      	adcs	r3, r3
 80076aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80076b0:	4641      	mov	r1, r8
 80076b2:	1851      	adds	r1, r2, r1
 80076b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80076b6:	4649      	mov	r1, r9
 80076b8:	414b      	adcs	r3, r1
 80076ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80076bc:	f04f 0200 	mov.w	r2, #0
 80076c0:	f04f 0300 	mov.w	r3, #0
 80076c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80076c8:	4659      	mov	r1, fp
 80076ca:	00cb      	lsls	r3, r1, #3
 80076cc:	4651      	mov	r1, sl
 80076ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076d2:	4651      	mov	r1, sl
 80076d4:	00ca      	lsls	r2, r1, #3
 80076d6:	4610      	mov	r0, r2
 80076d8:	4619      	mov	r1, r3
 80076da:	4603      	mov	r3, r0
 80076dc:	4642      	mov	r2, r8
 80076de:	189b      	adds	r3, r3, r2
 80076e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076e4:	464b      	mov	r3, r9
 80076e6:	460a      	mov	r2, r1
 80076e8:	eb42 0303 	adc.w	r3, r2, r3
 80076ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80076fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007700:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007704:	460b      	mov	r3, r1
 8007706:	18db      	adds	r3, r3, r3
 8007708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800770a:	4613      	mov	r3, r2
 800770c:	eb42 0303 	adc.w	r3, r2, r3
 8007710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007712:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007716:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800771a:	f7f9 fa11 	bl	8000b40 <__aeabi_uldivmod>
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	4b0d      	ldr	r3, [pc, #52]	@ (8007758 <UART_SetConfig+0x2d4>)
 8007724:	fba3 1302 	umull	r1, r3, r3, r2
 8007728:	095b      	lsrs	r3, r3, #5
 800772a:	2164      	movs	r1, #100	@ 0x64
 800772c:	fb01 f303 	mul.w	r3, r1, r3
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	00db      	lsls	r3, r3, #3
 8007734:	3332      	adds	r3, #50	@ 0x32
 8007736:	4a08      	ldr	r2, [pc, #32]	@ (8007758 <UART_SetConfig+0x2d4>)
 8007738:	fba2 2303 	umull	r2, r3, r2, r3
 800773c:	095b      	lsrs	r3, r3, #5
 800773e:	f003 0207 	and.w	r2, r3, #7
 8007742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4422      	add	r2, r4
 800774a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800774c:	e106      	b.n	800795c <UART_SetConfig+0x4d8>
 800774e:	bf00      	nop
 8007750:	40011000 	.word	0x40011000
 8007754:	40011400 	.word	0x40011400
 8007758:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800775c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007760:	2200      	movs	r2, #0
 8007762:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007766:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800776a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800776e:	4642      	mov	r2, r8
 8007770:	464b      	mov	r3, r9
 8007772:	1891      	adds	r1, r2, r2
 8007774:	6239      	str	r1, [r7, #32]
 8007776:	415b      	adcs	r3, r3
 8007778:	627b      	str	r3, [r7, #36]	@ 0x24
 800777a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800777e:	4641      	mov	r1, r8
 8007780:	1854      	adds	r4, r2, r1
 8007782:	4649      	mov	r1, r9
 8007784:	eb43 0501 	adc.w	r5, r3, r1
 8007788:	f04f 0200 	mov.w	r2, #0
 800778c:	f04f 0300 	mov.w	r3, #0
 8007790:	00eb      	lsls	r3, r5, #3
 8007792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007796:	00e2      	lsls	r2, r4, #3
 8007798:	4614      	mov	r4, r2
 800779a:	461d      	mov	r5, r3
 800779c:	4643      	mov	r3, r8
 800779e:	18e3      	adds	r3, r4, r3
 80077a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077a4:	464b      	mov	r3, r9
 80077a6:	eb45 0303 	adc.w	r3, r5, r3
 80077aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80077ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80077ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80077be:	f04f 0200 	mov.w	r2, #0
 80077c2:	f04f 0300 	mov.w	r3, #0
 80077c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80077ca:	4629      	mov	r1, r5
 80077cc:	008b      	lsls	r3, r1, #2
 80077ce:	4621      	mov	r1, r4
 80077d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077d4:	4621      	mov	r1, r4
 80077d6:	008a      	lsls	r2, r1, #2
 80077d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80077dc:	f7f9 f9b0 	bl	8000b40 <__aeabi_uldivmod>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4b60      	ldr	r3, [pc, #384]	@ (8007968 <UART_SetConfig+0x4e4>)
 80077e6:	fba3 2302 	umull	r2, r3, r3, r2
 80077ea:	095b      	lsrs	r3, r3, #5
 80077ec:	011c      	lsls	r4, r3, #4
 80077ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80077fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007800:	4642      	mov	r2, r8
 8007802:	464b      	mov	r3, r9
 8007804:	1891      	adds	r1, r2, r2
 8007806:	61b9      	str	r1, [r7, #24]
 8007808:	415b      	adcs	r3, r3
 800780a:	61fb      	str	r3, [r7, #28]
 800780c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007810:	4641      	mov	r1, r8
 8007812:	1851      	adds	r1, r2, r1
 8007814:	6139      	str	r1, [r7, #16]
 8007816:	4649      	mov	r1, r9
 8007818:	414b      	adcs	r3, r1
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007828:	4659      	mov	r1, fp
 800782a:	00cb      	lsls	r3, r1, #3
 800782c:	4651      	mov	r1, sl
 800782e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007832:	4651      	mov	r1, sl
 8007834:	00ca      	lsls	r2, r1, #3
 8007836:	4610      	mov	r0, r2
 8007838:	4619      	mov	r1, r3
 800783a:	4603      	mov	r3, r0
 800783c:	4642      	mov	r2, r8
 800783e:	189b      	adds	r3, r3, r2
 8007840:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007844:	464b      	mov	r3, r9
 8007846:	460a      	mov	r2, r1
 8007848:	eb42 0303 	adc.w	r3, r2, r3
 800784c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	67bb      	str	r3, [r7, #120]	@ 0x78
 800785a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800785c:	f04f 0200 	mov.w	r2, #0
 8007860:	f04f 0300 	mov.w	r3, #0
 8007864:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007868:	4649      	mov	r1, r9
 800786a:	008b      	lsls	r3, r1, #2
 800786c:	4641      	mov	r1, r8
 800786e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007872:	4641      	mov	r1, r8
 8007874:	008a      	lsls	r2, r1, #2
 8007876:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800787a:	f7f9 f961 	bl	8000b40 <__aeabi_uldivmod>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	4611      	mov	r1, r2
 8007884:	4b38      	ldr	r3, [pc, #224]	@ (8007968 <UART_SetConfig+0x4e4>)
 8007886:	fba3 2301 	umull	r2, r3, r3, r1
 800788a:	095b      	lsrs	r3, r3, #5
 800788c:	2264      	movs	r2, #100	@ 0x64
 800788e:	fb02 f303 	mul.w	r3, r2, r3
 8007892:	1acb      	subs	r3, r1, r3
 8007894:	011b      	lsls	r3, r3, #4
 8007896:	3332      	adds	r3, #50	@ 0x32
 8007898:	4a33      	ldr	r2, [pc, #204]	@ (8007968 <UART_SetConfig+0x4e4>)
 800789a:	fba2 2303 	umull	r2, r3, r2, r3
 800789e:	095b      	lsrs	r3, r3, #5
 80078a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80078a4:	441c      	add	r4, r3
 80078a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078aa:	2200      	movs	r2, #0
 80078ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80078ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80078b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80078b4:	4642      	mov	r2, r8
 80078b6:	464b      	mov	r3, r9
 80078b8:	1891      	adds	r1, r2, r2
 80078ba:	60b9      	str	r1, [r7, #8]
 80078bc:	415b      	adcs	r3, r3
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078c4:	4641      	mov	r1, r8
 80078c6:	1851      	adds	r1, r2, r1
 80078c8:	6039      	str	r1, [r7, #0]
 80078ca:	4649      	mov	r1, r9
 80078cc:	414b      	adcs	r3, r1
 80078ce:	607b      	str	r3, [r7, #4]
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	f04f 0300 	mov.w	r3, #0
 80078d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078dc:	4659      	mov	r1, fp
 80078de:	00cb      	lsls	r3, r1, #3
 80078e0:	4651      	mov	r1, sl
 80078e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078e6:	4651      	mov	r1, sl
 80078e8:	00ca      	lsls	r2, r1, #3
 80078ea:	4610      	mov	r0, r2
 80078ec:	4619      	mov	r1, r3
 80078ee:	4603      	mov	r3, r0
 80078f0:	4642      	mov	r2, r8
 80078f2:	189b      	adds	r3, r3, r2
 80078f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078f6:	464b      	mov	r3, r9
 80078f8:	460a      	mov	r2, r1
 80078fa:	eb42 0303 	adc.w	r3, r2, r3
 80078fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	663b      	str	r3, [r7, #96]	@ 0x60
 800790a:	667a      	str	r2, [r7, #100]	@ 0x64
 800790c:	f04f 0200 	mov.w	r2, #0
 8007910:	f04f 0300 	mov.w	r3, #0
 8007914:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007918:	4649      	mov	r1, r9
 800791a:	008b      	lsls	r3, r1, #2
 800791c:	4641      	mov	r1, r8
 800791e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007922:	4641      	mov	r1, r8
 8007924:	008a      	lsls	r2, r1, #2
 8007926:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800792a:	f7f9 f909 	bl	8000b40 <__aeabi_uldivmod>
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	4b0d      	ldr	r3, [pc, #52]	@ (8007968 <UART_SetConfig+0x4e4>)
 8007934:	fba3 1302 	umull	r1, r3, r3, r2
 8007938:	095b      	lsrs	r3, r3, #5
 800793a:	2164      	movs	r1, #100	@ 0x64
 800793c:	fb01 f303 	mul.w	r3, r1, r3
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	011b      	lsls	r3, r3, #4
 8007944:	3332      	adds	r3, #50	@ 0x32
 8007946:	4a08      	ldr	r2, [pc, #32]	@ (8007968 <UART_SetConfig+0x4e4>)
 8007948:	fba2 2303 	umull	r2, r3, r2, r3
 800794c:	095b      	lsrs	r3, r3, #5
 800794e:	f003 020f 	and.w	r2, r3, #15
 8007952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4422      	add	r2, r4
 800795a:	609a      	str	r2, [r3, #8]
}
 800795c:	bf00      	nop
 800795e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007962:	46bd      	mov	sp, r7
 8007964:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007968:	51eb851f 	.word	0x51eb851f

0800796c <std>:
 800796c:	2300      	movs	r3, #0
 800796e:	b510      	push	{r4, lr}
 8007970:	4604      	mov	r4, r0
 8007972:	e9c0 3300 	strd	r3, r3, [r0]
 8007976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800797a:	6083      	str	r3, [r0, #8]
 800797c:	8181      	strh	r1, [r0, #12]
 800797e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007980:	81c2      	strh	r2, [r0, #14]
 8007982:	6183      	str	r3, [r0, #24]
 8007984:	4619      	mov	r1, r3
 8007986:	2208      	movs	r2, #8
 8007988:	305c      	adds	r0, #92	@ 0x5c
 800798a:	f000 f9e7 	bl	8007d5c <memset>
 800798e:	4b0d      	ldr	r3, [pc, #52]	@ (80079c4 <std+0x58>)
 8007990:	6263      	str	r3, [r4, #36]	@ 0x24
 8007992:	4b0d      	ldr	r3, [pc, #52]	@ (80079c8 <std+0x5c>)
 8007994:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007996:	4b0d      	ldr	r3, [pc, #52]	@ (80079cc <std+0x60>)
 8007998:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800799a:	4b0d      	ldr	r3, [pc, #52]	@ (80079d0 <std+0x64>)
 800799c:	6323      	str	r3, [r4, #48]	@ 0x30
 800799e:	4b0d      	ldr	r3, [pc, #52]	@ (80079d4 <std+0x68>)
 80079a0:	6224      	str	r4, [r4, #32]
 80079a2:	429c      	cmp	r4, r3
 80079a4:	d006      	beq.n	80079b4 <std+0x48>
 80079a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80079aa:	4294      	cmp	r4, r2
 80079ac:	d002      	beq.n	80079b4 <std+0x48>
 80079ae:	33d0      	adds	r3, #208	@ 0xd0
 80079b0:	429c      	cmp	r4, r3
 80079b2:	d105      	bne.n	80079c0 <std+0x54>
 80079b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80079b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079bc:	f000 ba46 	b.w	8007e4c <__retarget_lock_init_recursive>
 80079c0:	bd10      	pop	{r4, pc}
 80079c2:	bf00      	nop
 80079c4:	08007bad 	.word	0x08007bad
 80079c8:	08007bcf 	.word	0x08007bcf
 80079cc:	08007c07 	.word	0x08007c07
 80079d0:	08007c2b 	.word	0x08007c2b
 80079d4:	200002b4 	.word	0x200002b4

080079d8 <stdio_exit_handler>:
 80079d8:	4a02      	ldr	r2, [pc, #8]	@ (80079e4 <stdio_exit_handler+0xc>)
 80079da:	4903      	ldr	r1, [pc, #12]	@ (80079e8 <stdio_exit_handler+0x10>)
 80079dc:	4803      	ldr	r0, [pc, #12]	@ (80079ec <stdio_exit_handler+0x14>)
 80079de:	f000 b869 	b.w	8007ab4 <_fwalk_sglue>
 80079e2:	bf00      	nop
 80079e4:	2000000c 	.word	0x2000000c
 80079e8:	0800814d 	.word	0x0800814d
 80079ec:	2000001c 	.word	0x2000001c

080079f0 <cleanup_stdio>:
 80079f0:	6841      	ldr	r1, [r0, #4]
 80079f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007a24 <cleanup_stdio+0x34>)
 80079f4:	4299      	cmp	r1, r3
 80079f6:	b510      	push	{r4, lr}
 80079f8:	4604      	mov	r4, r0
 80079fa:	d001      	beq.n	8007a00 <cleanup_stdio+0x10>
 80079fc:	f000 fba6 	bl	800814c <_fflush_r>
 8007a00:	68a1      	ldr	r1, [r4, #8]
 8007a02:	4b09      	ldr	r3, [pc, #36]	@ (8007a28 <cleanup_stdio+0x38>)
 8007a04:	4299      	cmp	r1, r3
 8007a06:	d002      	beq.n	8007a0e <cleanup_stdio+0x1e>
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 fb9f 	bl	800814c <_fflush_r>
 8007a0e:	68e1      	ldr	r1, [r4, #12]
 8007a10:	4b06      	ldr	r3, [pc, #24]	@ (8007a2c <cleanup_stdio+0x3c>)
 8007a12:	4299      	cmp	r1, r3
 8007a14:	d004      	beq.n	8007a20 <cleanup_stdio+0x30>
 8007a16:	4620      	mov	r0, r4
 8007a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a1c:	f000 bb96 	b.w	800814c <_fflush_r>
 8007a20:	bd10      	pop	{r4, pc}
 8007a22:	bf00      	nop
 8007a24:	200002b4 	.word	0x200002b4
 8007a28:	2000031c 	.word	0x2000031c
 8007a2c:	20000384 	.word	0x20000384

08007a30 <global_stdio_init.part.0>:
 8007a30:	b510      	push	{r4, lr}
 8007a32:	4b0b      	ldr	r3, [pc, #44]	@ (8007a60 <global_stdio_init.part.0+0x30>)
 8007a34:	4c0b      	ldr	r4, [pc, #44]	@ (8007a64 <global_stdio_init.part.0+0x34>)
 8007a36:	4a0c      	ldr	r2, [pc, #48]	@ (8007a68 <global_stdio_init.part.0+0x38>)
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2104      	movs	r1, #4
 8007a40:	f7ff ff94 	bl	800796c <std>
 8007a44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a48:	2201      	movs	r2, #1
 8007a4a:	2109      	movs	r1, #9
 8007a4c:	f7ff ff8e 	bl	800796c <std>
 8007a50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a54:	2202      	movs	r2, #2
 8007a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a5a:	2112      	movs	r1, #18
 8007a5c:	f7ff bf86 	b.w	800796c <std>
 8007a60:	200003ec 	.word	0x200003ec
 8007a64:	200002b4 	.word	0x200002b4
 8007a68:	080079d9 	.word	0x080079d9

08007a6c <__sfp_lock_acquire>:
 8007a6c:	4801      	ldr	r0, [pc, #4]	@ (8007a74 <__sfp_lock_acquire+0x8>)
 8007a6e:	f000 b9ee 	b.w	8007e4e <__retarget_lock_acquire_recursive>
 8007a72:	bf00      	nop
 8007a74:	200003f5 	.word	0x200003f5

08007a78 <__sfp_lock_release>:
 8007a78:	4801      	ldr	r0, [pc, #4]	@ (8007a80 <__sfp_lock_release+0x8>)
 8007a7a:	f000 b9e9 	b.w	8007e50 <__retarget_lock_release_recursive>
 8007a7e:	bf00      	nop
 8007a80:	200003f5 	.word	0x200003f5

08007a84 <__sinit>:
 8007a84:	b510      	push	{r4, lr}
 8007a86:	4604      	mov	r4, r0
 8007a88:	f7ff fff0 	bl	8007a6c <__sfp_lock_acquire>
 8007a8c:	6a23      	ldr	r3, [r4, #32]
 8007a8e:	b11b      	cbz	r3, 8007a98 <__sinit+0x14>
 8007a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a94:	f7ff bff0 	b.w	8007a78 <__sfp_lock_release>
 8007a98:	4b04      	ldr	r3, [pc, #16]	@ (8007aac <__sinit+0x28>)
 8007a9a:	6223      	str	r3, [r4, #32]
 8007a9c:	4b04      	ldr	r3, [pc, #16]	@ (8007ab0 <__sinit+0x2c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1f5      	bne.n	8007a90 <__sinit+0xc>
 8007aa4:	f7ff ffc4 	bl	8007a30 <global_stdio_init.part.0>
 8007aa8:	e7f2      	b.n	8007a90 <__sinit+0xc>
 8007aaa:	bf00      	nop
 8007aac:	080079f1 	.word	0x080079f1
 8007ab0:	200003ec 	.word	0x200003ec

08007ab4 <_fwalk_sglue>:
 8007ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab8:	4607      	mov	r7, r0
 8007aba:	4688      	mov	r8, r1
 8007abc:	4614      	mov	r4, r2
 8007abe:	2600      	movs	r6, #0
 8007ac0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ac4:	f1b9 0901 	subs.w	r9, r9, #1
 8007ac8:	d505      	bpl.n	8007ad6 <_fwalk_sglue+0x22>
 8007aca:	6824      	ldr	r4, [r4, #0]
 8007acc:	2c00      	cmp	r4, #0
 8007ace:	d1f7      	bne.n	8007ac0 <_fwalk_sglue+0xc>
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ad6:	89ab      	ldrh	r3, [r5, #12]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d907      	bls.n	8007aec <_fwalk_sglue+0x38>
 8007adc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	d003      	beq.n	8007aec <_fwalk_sglue+0x38>
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	4638      	mov	r0, r7
 8007ae8:	47c0      	blx	r8
 8007aea:	4306      	orrs	r6, r0
 8007aec:	3568      	adds	r5, #104	@ 0x68
 8007aee:	e7e9      	b.n	8007ac4 <_fwalk_sglue+0x10>

08007af0 <_puts_r>:
 8007af0:	6a03      	ldr	r3, [r0, #32]
 8007af2:	b570      	push	{r4, r5, r6, lr}
 8007af4:	6884      	ldr	r4, [r0, #8]
 8007af6:	4605      	mov	r5, r0
 8007af8:	460e      	mov	r6, r1
 8007afa:	b90b      	cbnz	r3, 8007b00 <_puts_r+0x10>
 8007afc:	f7ff ffc2 	bl	8007a84 <__sinit>
 8007b00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b02:	07db      	lsls	r3, r3, #31
 8007b04:	d405      	bmi.n	8007b12 <_puts_r+0x22>
 8007b06:	89a3      	ldrh	r3, [r4, #12]
 8007b08:	0598      	lsls	r0, r3, #22
 8007b0a:	d402      	bmi.n	8007b12 <_puts_r+0x22>
 8007b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b0e:	f000 f99e 	bl	8007e4e <__retarget_lock_acquire_recursive>
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	0719      	lsls	r1, r3, #28
 8007b16:	d502      	bpl.n	8007b1e <_puts_r+0x2e>
 8007b18:	6923      	ldr	r3, [r4, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d135      	bne.n	8007b8a <_puts_r+0x9a>
 8007b1e:	4621      	mov	r1, r4
 8007b20:	4628      	mov	r0, r5
 8007b22:	f000 f8c5 	bl	8007cb0 <__swsetup_r>
 8007b26:	b380      	cbz	r0, 8007b8a <_puts_r+0x9a>
 8007b28:	f04f 35ff 	mov.w	r5, #4294967295
 8007b2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b2e:	07da      	lsls	r2, r3, #31
 8007b30:	d405      	bmi.n	8007b3e <_puts_r+0x4e>
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	059b      	lsls	r3, r3, #22
 8007b36:	d402      	bmi.n	8007b3e <_puts_r+0x4e>
 8007b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b3a:	f000 f989 	bl	8007e50 <__retarget_lock_release_recursive>
 8007b3e:	4628      	mov	r0, r5
 8007b40:	bd70      	pop	{r4, r5, r6, pc}
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	da04      	bge.n	8007b50 <_puts_r+0x60>
 8007b46:	69a2      	ldr	r2, [r4, #24]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	dc17      	bgt.n	8007b7c <_puts_r+0x8c>
 8007b4c:	290a      	cmp	r1, #10
 8007b4e:	d015      	beq.n	8007b7c <_puts_r+0x8c>
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	1c5a      	adds	r2, r3, #1
 8007b54:	6022      	str	r2, [r4, #0]
 8007b56:	7019      	strb	r1, [r3, #0]
 8007b58:	68a3      	ldr	r3, [r4, #8]
 8007b5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	60a3      	str	r3, [r4, #8]
 8007b62:	2900      	cmp	r1, #0
 8007b64:	d1ed      	bne.n	8007b42 <_puts_r+0x52>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	da11      	bge.n	8007b8e <_puts_r+0x9e>
 8007b6a:	4622      	mov	r2, r4
 8007b6c:	210a      	movs	r1, #10
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f000 f85f 	bl	8007c32 <__swbuf_r>
 8007b74:	3001      	adds	r0, #1
 8007b76:	d0d7      	beq.n	8007b28 <_puts_r+0x38>
 8007b78:	250a      	movs	r5, #10
 8007b7a:	e7d7      	b.n	8007b2c <_puts_r+0x3c>
 8007b7c:	4622      	mov	r2, r4
 8007b7e:	4628      	mov	r0, r5
 8007b80:	f000 f857 	bl	8007c32 <__swbuf_r>
 8007b84:	3001      	adds	r0, #1
 8007b86:	d1e7      	bne.n	8007b58 <_puts_r+0x68>
 8007b88:	e7ce      	b.n	8007b28 <_puts_r+0x38>
 8007b8a:	3e01      	subs	r6, #1
 8007b8c:	e7e4      	b.n	8007b58 <_puts_r+0x68>
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	1c5a      	adds	r2, r3, #1
 8007b92:	6022      	str	r2, [r4, #0]
 8007b94:	220a      	movs	r2, #10
 8007b96:	701a      	strb	r2, [r3, #0]
 8007b98:	e7ee      	b.n	8007b78 <_puts_r+0x88>
	...

08007b9c <puts>:
 8007b9c:	4b02      	ldr	r3, [pc, #8]	@ (8007ba8 <puts+0xc>)
 8007b9e:	4601      	mov	r1, r0
 8007ba0:	6818      	ldr	r0, [r3, #0]
 8007ba2:	f7ff bfa5 	b.w	8007af0 <_puts_r>
 8007ba6:	bf00      	nop
 8007ba8:	20000018 	.word	0x20000018

08007bac <__sread>:
 8007bac:	b510      	push	{r4, lr}
 8007bae:	460c      	mov	r4, r1
 8007bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb4:	f000 f8fc 	bl	8007db0 <_read_r>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	bfab      	itete	ge
 8007bbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bbe:	89a3      	ldrhlt	r3, [r4, #12]
 8007bc0:	181b      	addge	r3, r3, r0
 8007bc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bc6:	bfac      	ite	ge
 8007bc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bca:	81a3      	strhlt	r3, [r4, #12]
 8007bcc:	bd10      	pop	{r4, pc}

08007bce <__swrite>:
 8007bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd2:	461f      	mov	r7, r3
 8007bd4:	898b      	ldrh	r3, [r1, #12]
 8007bd6:	05db      	lsls	r3, r3, #23
 8007bd8:	4605      	mov	r5, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	4616      	mov	r6, r2
 8007bde:	d505      	bpl.n	8007bec <__swrite+0x1e>
 8007be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be4:	2302      	movs	r3, #2
 8007be6:	2200      	movs	r2, #0
 8007be8:	f000 f8d0 	bl	8007d8c <_lseek_r>
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bf2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bf6:	81a3      	strh	r3, [r4, #12]
 8007bf8:	4632      	mov	r2, r6
 8007bfa:	463b      	mov	r3, r7
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c02:	f000 b8e7 	b.w	8007dd4 <_write_r>

08007c06 <__sseek>:
 8007c06:	b510      	push	{r4, lr}
 8007c08:	460c      	mov	r4, r1
 8007c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0e:	f000 f8bd 	bl	8007d8c <_lseek_r>
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	bf15      	itete	ne
 8007c18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c22:	81a3      	strheq	r3, [r4, #12]
 8007c24:	bf18      	it	ne
 8007c26:	81a3      	strhne	r3, [r4, #12]
 8007c28:	bd10      	pop	{r4, pc}

08007c2a <__sclose>:
 8007c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c2e:	f000 b89d 	b.w	8007d6c <_close_r>

08007c32 <__swbuf_r>:
 8007c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c34:	460e      	mov	r6, r1
 8007c36:	4614      	mov	r4, r2
 8007c38:	4605      	mov	r5, r0
 8007c3a:	b118      	cbz	r0, 8007c44 <__swbuf_r+0x12>
 8007c3c:	6a03      	ldr	r3, [r0, #32]
 8007c3e:	b90b      	cbnz	r3, 8007c44 <__swbuf_r+0x12>
 8007c40:	f7ff ff20 	bl	8007a84 <__sinit>
 8007c44:	69a3      	ldr	r3, [r4, #24]
 8007c46:	60a3      	str	r3, [r4, #8]
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	071a      	lsls	r2, r3, #28
 8007c4c:	d501      	bpl.n	8007c52 <__swbuf_r+0x20>
 8007c4e:	6923      	ldr	r3, [r4, #16]
 8007c50:	b943      	cbnz	r3, 8007c64 <__swbuf_r+0x32>
 8007c52:	4621      	mov	r1, r4
 8007c54:	4628      	mov	r0, r5
 8007c56:	f000 f82b 	bl	8007cb0 <__swsetup_r>
 8007c5a:	b118      	cbz	r0, 8007c64 <__swbuf_r+0x32>
 8007c5c:	f04f 37ff 	mov.w	r7, #4294967295
 8007c60:	4638      	mov	r0, r7
 8007c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	6922      	ldr	r2, [r4, #16]
 8007c68:	1a98      	subs	r0, r3, r2
 8007c6a:	6963      	ldr	r3, [r4, #20]
 8007c6c:	b2f6      	uxtb	r6, r6
 8007c6e:	4283      	cmp	r3, r0
 8007c70:	4637      	mov	r7, r6
 8007c72:	dc05      	bgt.n	8007c80 <__swbuf_r+0x4e>
 8007c74:	4621      	mov	r1, r4
 8007c76:	4628      	mov	r0, r5
 8007c78:	f000 fa68 	bl	800814c <_fflush_r>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	d1ed      	bne.n	8007c5c <__swbuf_r+0x2a>
 8007c80:	68a3      	ldr	r3, [r4, #8]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	60a3      	str	r3, [r4, #8]
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	1c5a      	adds	r2, r3, #1
 8007c8a:	6022      	str	r2, [r4, #0]
 8007c8c:	701e      	strb	r6, [r3, #0]
 8007c8e:	6962      	ldr	r2, [r4, #20]
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d004      	beq.n	8007ca0 <__swbuf_r+0x6e>
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	07db      	lsls	r3, r3, #31
 8007c9a:	d5e1      	bpl.n	8007c60 <__swbuf_r+0x2e>
 8007c9c:	2e0a      	cmp	r6, #10
 8007c9e:	d1df      	bne.n	8007c60 <__swbuf_r+0x2e>
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	f000 fa52 	bl	800814c <_fflush_r>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d0d9      	beq.n	8007c60 <__swbuf_r+0x2e>
 8007cac:	e7d6      	b.n	8007c5c <__swbuf_r+0x2a>
	...

08007cb0 <__swsetup_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	4b29      	ldr	r3, [pc, #164]	@ (8007d58 <__swsetup_r+0xa8>)
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	6818      	ldr	r0, [r3, #0]
 8007cb8:	460c      	mov	r4, r1
 8007cba:	b118      	cbz	r0, 8007cc4 <__swsetup_r+0x14>
 8007cbc:	6a03      	ldr	r3, [r0, #32]
 8007cbe:	b90b      	cbnz	r3, 8007cc4 <__swsetup_r+0x14>
 8007cc0:	f7ff fee0 	bl	8007a84 <__sinit>
 8007cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cc8:	0719      	lsls	r1, r3, #28
 8007cca:	d422      	bmi.n	8007d12 <__swsetup_r+0x62>
 8007ccc:	06da      	lsls	r2, r3, #27
 8007cce:	d407      	bmi.n	8007ce0 <__swsetup_r+0x30>
 8007cd0:	2209      	movs	r2, #9
 8007cd2:	602a      	str	r2, [r5, #0]
 8007cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cd8:	81a3      	strh	r3, [r4, #12]
 8007cda:	f04f 30ff 	mov.w	r0, #4294967295
 8007cde:	e033      	b.n	8007d48 <__swsetup_r+0x98>
 8007ce0:	0758      	lsls	r0, r3, #29
 8007ce2:	d512      	bpl.n	8007d0a <__swsetup_r+0x5a>
 8007ce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ce6:	b141      	cbz	r1, 8007cfa <__swsetup_r+0x4a>
 8007ce8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cec:	4299      	cmp	r1, r3
 8007cee:	d002      	beq.n	8007cf6 <__swsetup_r+0x46>
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	f000 f8af 	bl	8007e54 <_free_r>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d00:	81a3      	strh	r3, [r4, #12]
 8007d02:	2300      	movs	r3, #0
 8007d04:	6063      	str	r3, [r4, #4]
 8007d06:	6923      	ldr	r3, [r4, #16]
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	f043 0308 	orr.w	r3, r3, #8
 8007d10:	81a3      	strh	r3, [r4, #12]
 8007d12:	6923      	ldr	r3, [r4, #16]
 8007d14:	b94b      	cbnz	r3, 8007d2a <__swsetup_r+0x7a>
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d20:	d003      	beq.n	8007d2a <__swsetup_r+0x7a>
 8007d22:	4621      	mov	r1, r4
 8007d24:	4628      	mov	r0, r5
 8007d26:	f000 fa5f 	bl	80081e8 <__smakebuf_r>
 8007d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d2e:	f013 0201 	ands.w	r2, r3, #1
 8007d32:	d00a      	beq.n	8007d4a <__swsetup_r+0x9a>
 8007d34:	2200      	movs	r2, #0
 8007d36:	60a2      	str	r2, [r4, #8]
 8007d38:	6962      	ldr	r2, [r4, #20]
 8007d3a:	4252      	negs	r2, r2
 8007d3c:	61a2      	str	r2, [r4, #24]
 8007d3e:	6922      	ldr	r2, [r4, #16]
 8007d40:	b942      	cbnz	r2, 8007d54 <__swsetup_r+0xa4>
 8007d42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d46:	d1c5      	bne.n	8007cd4 <__swsetup_r+0x24>
 8007d48:	bd38      	pop	{r3, r4, r5, pc}
 8007d4a:	0799      	lsls	r1, r3, #30
 8007d4c:	bf58      	it	pl
 8007d4e:	6962      	ldrpl	r2, [r4, #20]
 8007d50:	60a2      	str	r2, [r4, #8]
 8007d52:	e7f4      	b.n	8007d3e <__swsetup_r+0x8e>
 8007d54:	2000      	movs	r0, #0
 8007d56:	e7f7      	b.n	8007d48 <__swsetup_r+0x98>
 8007d58:	20000018 	.word	0x20000018

08007d5c <memset>:
 8007d5c:	4402      	add	r2, r0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d100      	bne.n	8007d66 <memset+0xa>
 8007d64:	4770      	bx	lr
 8007d66:	f803 1b01 	strb.w	r1, [r3], #1
 8007d6a:	e7f9      	b.n	8007d60 <memset+0x4>

08007d6c <_close_r>:
 8007d6c:	b538      	push	{r3, r4, r5, lr}
 8007d6e:	4d06      	ldr	r5, [pc, #24]	@ (8007d88 <_close_r+0x1c>)
 8007d70:	2300      	movs	r3, #0
 8007d72:	4604      	mov	r4, r0
 8007d74:	4608      	mov	r0, r1
 8007d76:	602b      	str	r3, [r5, #0]
 8007d78:	f7fa f9d7 	bl	800212a <_close>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	d102      	bne.n	8007d86 <_close_r+0x1a>
 8007d80:	682b      	ldr	r3, [r5, #0]
 8007d82:	b103      	cbz	r3, 8007d86 <_close_r+0x1a>
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	bd38      	pop	{r3, r4, r5, pc}
 8007d88:	200003f0 	.word	0x200003f0

08007d8c <_lseek_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	4d07      	ldr	r5, [pc, #28]	@ (8007dac <_lseek_r+0x20>)
 8007d90:	4604      	mov	r4, r0
 8007d92:	4608      	mov	r0, r1
 8007d94:	4611      	mov	r1, r2
 8007d96:	2200      	movs	r2, #0
 8007d98:	602a      	str	r2, [r5, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f7fa f9ec 	bl	8002178 <_lseek>
 8007da0:	1c43      	adds	r3, r0, #1
 8007da2:	d102      	bne.n	8007daa <_lseek_r+0x1e>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	b103      	cbz	r3, 8007daa <_lseek_r+0x1e>
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	200003f0 	.word	0x200003f0

08007db0 <_read_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4d07      	ldr	r5, [pc, #28]	@ (8007dd0 <_read_r+0x20>)
 8007db4:	4604      	mov	r4, r0
 8007db6:	4608      	mov	r0, r1
 8007db8:	4611      	mov	r1, r2
 8007dba:	2200      	movs	r2, #0
 8007dbc:	602a      	str	r2, [r5, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f7fa f996 	bl	80020f0 <_read>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d102      	bne.n	8007dce <_read_r+0x1e>
 8007dc8:	682b      	ldr	r3, [r5, #0]
 8007dca:	b103      	cbz	r3, 8007dce <_read_r+0x1e>
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	bd38      	pop	{r3, r4, r5, pc}
 8007dd0:	200003f0 	.word	0x200003f0

08007dd4 <_write_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4d07      	ldr	r5, [pc, #28]	@ (8007df4 <_write_r+0x20>)
 8007dd8:	4604      	mov	r4, r0
 8007dda:	4608      	mov	r0, r1
 8007ddc:	4611      	mov	r1, r2
 8007dde:	2200      	movs	r2, #0
 8007de0:	602a      	str	r2, [r5, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	f7f9 f824 	bl	8000e30 <_write>
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	d102      	bne.n	8007df2 <_write_r+0x1e>
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	b103      	cbz	r3, 8007df2 <_write_r+0x1e>
 8007df0:	6023      	str	r3, [r4, #0]
 8007df2:	bd38      	pop	{r3, r4, r5, pc}
 8007df4:	200003f0 	.word	0x200003f0

08007df8 <__errno>:
 8007df8:	4b01      	ldr	r3, [pc, #4]	@ (8007e00 <__errno+0x8>)
 8007dfa:	6818      	ldr	r0, [r3, #0]
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	20000018 	.word	0x20000018

08007e04 <__libc_init_array>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	4d0d      	ldr	r5, [pc, #52]	@ (8007e3c <__libc_init_array+0x38>)
 8007e08:	4c0d      	ldr	r4, [pc, #52]	@ (8007e40 <__libc_init_array+0x3c>)
 8007e0a:	1b64      	subs	r4, r4, r5
 8007e0c:	10a4      	asrs	r4, r4, #2
 8007e0e:	2600      	movs	r6, #0
 8007e10:	42a6      	cmp	r6, r4
 8007e12:	d109      	bne.n	8007e28 <__libc_init_array+0x24>
 8007e14:	4d0b      	ldr	r5, [pc, #44]	@ (8007e44 <__libc_init_array+0x40>)
 8007e16:	4c0c      	ldr	r4, [pc, #48]	@ (8007e48 <__libc_init_array+0x44>)
 8007e18:	f000 fdc6 	bl	80089a8 <_init>
 8007e1c:	1b64      	subs	r4, r4, r5
 8007e1e:	10a4      	asrs	r4, r4, #2
 8007e20:	2600      	movs	r6, #0
 8007e22:	42a6      	cmp	r6, r4
 8007e24:	d105      	bne.n	8007e32 <__libc_init_array+0x2e>
 8007e26:	bd70      	pop	{r4, r5, r6, pc}
 8007e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e2c:	4798      	blx	r3
 8007e2e:	3601      	adds	r6, #1
 8007e30:	e7ee      	b.n	8007e10 <__libc_init_array+0xc>
 8007e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e36:	4798      	blx	r3
 8007e38:	3601      	adds	r6, #1
 8007e3a:	e7f2      	b.n	8007e22 <__libc_init_array+0x1e>
 8007e3c:	08008a60 	.word	0x08008a60
 8007e40:	08008a60 	.word	0x08008a60
 8007e44:	08008a60 	.word	0x08008a60
 8007e48:	08008a64 	.word	0x08008a64

08007e4c <__retarget_lock_init_recursive>:
 8007e4c:	4770      	bx	lr

08007e4e <__retarget_lock_acquire_recursive>:
 8007e4e:	4770      	bx	lr

08007e50 <__retarget_lock_release_recursive>:
 8007e50:	4770      	bx	lr
	...

08007e54 <_free_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	4605      	mov	r5, r0
 8007e58:	2900      	cmp	r1, #0
 8007e5a:	d041      	beq.n	8007ee0 <_free_r+0x8c>
 8007e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e60:	1f0c      	subs	r4, r1, #4
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	bfb8      	it	lt
 8007e66:	18e4      	addlt	r4, r4, r3
 8007e68:	f000 f8e0 	bl	800802c <__malloc_lock>
 8007e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee4 <_free_r+0x90>)
 8007e6e:	6813      	ldr	r3, [r2, #0]
 8007e70:	b933      	cbnz	r3, 8007e80 <_free_r+0x2c>
 8007e72:	6063      	str	r3, [r4, #4]
 8007e74:	6014      	str	r4, [r2, #0]
 8007e76:	4628      	mov	r0, r5
 8007e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e7c:	f000 b8dc 	b.w	8008038 <__malloc_unlock>
 8007e80:	42a3      	cmp	r3, r4
 8007e82:	d908      	bls.n	8007e96 <_free_r+0x42>
 8007e84:	6820      	ldr	r0, [r4, #0]
 8007e86:	1821      	adds	r1, r4, r0
 8007e88:	428b      	cmp	r3, r1
 8007e8a:	bf01      	itttt	eq
 8007e8c:	6819      	ldreq	r1, [r3, #0]
 8007e8e:	685b      	ldreq	r3, [r3, #4]
 8007e90:	1809      	addeq	r1, r1, r0
 8007e92:	6021      	streq	r1, [r4, #0]
 8007e94:	e7ed      	b.n	8007e72 <_free_r+0x1e>
 8007e96:	461a      	mov	r2, r3
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	b10b      	cbz	r3, 8007ea0 <_free_r+0x4c>
 8007e9c:	42a3      	cmp	r3, r4
 8007e9e:	d9fa      	bls.n	8007e96 <_free_r+0x42>
 8007ea0:	6811      	ldr	r1, [r2, #0]
 8007ea2:	1850      	adds	r0, r2, r1
 8007ea4:	42a0      	cmp	r0, r4
 8007ea6:	d10b      	bne.n	8007ec0 <_free_r+0x6c>
 8007ea8:	6820      	ldr	r0, [r4, #0]
 8007eaa:	4401      	add	r1, r0
 8007eac:	1850      	adds	r0, r2, r1
 8007eae:	4283      	cmp	r3, r0
 8007eb0:	6011      	str	r1, [r2, #0]
 8007eb2:	d1e0      	bne.n	8007e76 <_free_r+0x22>
 8007eb4:	6818      	ldr	r0, [r3, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	6053      	str	r3, [r2, #4]
 8007eba:	4408      	add	r0, r1
 8007ebc:	6010      	str	r0, [r2, #0]
 8007ebe:	e7da      	b.n	8007e76 <_free_r+0x22>
 8007ec0:	d902      	bls.n	8007ec8 <_free_r+0x74>
 8007ec2:	230c      	movs	r3, #12
 8007ec4:	602b      	str	r3, [r5, #0]
 8007ec6:	e7d6      	b.n	8007e76 <_free_r+0x22>
 8007ec8:	6820      	ldr	r0, [r4, #0]
 8007eca:	1821      	adds	r1, r4, r0
 8007ecc:	428b      	cmp	r3, r1
 8007ece:	bf04      	itt	eq
 8007ed0:	6819      	ldreq	r1, [r3, #0]
 8007ed2:	685b      	ldreq	r3, [r3, #4]
 8007ed4:	6063      	str	r3, [r4, #4]
 8007ed6:	bf04      	itt	eq
 8007ed8:	1809      	addeq	r1, r1, r0
 8007eda:	6021      	streq	r1, [r4, #0]
 8007edc:	6054      	str	r4, [r2, #4]
 8007ede:	e7ca      	b.n	8007e76 <_free_r+0x22>
 8007ee0:	bd38      	pop	{r3, r4, r5, pc}
 8007ee2:	bf00      	nop
 8007ee4:	200003fc 	.word	0x200003fc

08007ee8 <sbrk_aligned>:
 8007ee8:	b570      	push	{r4, r5, r6, lr}
 8007eea:	4e0f      	ldr	r6, [pc, #60]	@ (8007f28 <sbrk_aligned+0x40>)
 8007eec:	460c      	mov	r4, r1
 8007eee:	6831      	ldr	r1, [r6, #0]
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	b911      	cbnz	r1, 8007efa <sbrk_aligned+0x12>
 8007ef4:	f000 f9d6 	bl	80082a4 <_sbrk_r>
 8007ef8:	6030      	str	r0, [r6, #0]
 8007efa:	4621      	mov	r1, r4
 8007efc:	4628      	mov	r0, r5
 8007efe:	f000 f9d1 	bl	80082a4 <_sbrk_r>
 8007f02:	1c43      	adds	r3, r0, #1
 8007f04:	d103      	bne.n	8007f0e <sbrk_aligned+0x26>
 8007f06:	f04f 34ff 	mov.w	r4, #4294967295
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	bd70      	pop	{r4, r5, r6, pc}
 8007f0e:	1cc4      	adds	r4, r0, #3
 8007f10:	f024 0403 	bic.w	r4, r4, #3
 8007f14:	42a0      	cmp	r0, r4
 8007f16:	d0f8      	beq.n	8007f0a <sbrk_aligned+0x22>
 8007f18:	1a21      	subs	r1, r4, r0
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f000 f9c2 	bl	80082a4 <_sbrk_r>
 8007f20:	3001      	adds	r0, #1
 8007f22:	d1f2      	bne.n	8007f0a <sbrk_aligned+0x22>
 8007f24:	e7ef      	b.n	8007f06 <sbrk_aligned+0x1e>
 8007f26:	bf00      	nop
 8007f28:	200003f8 	.word	0x200003f8

08007f2c <_malloc_r>:
 8007f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f30:	1ccd      	adds	r5, r1, #3
 8007f32:	f025 0503 	bic.w	r5, r5, #3
 8007f36:	3508      	adds	r5, #8
 8007f38:	2d0c      	cmp	r5, #12
 8007f3a:	bf38      	it	cc
 8007f3c:	250c      	movcc	r5, #12
 8007f3e:	2d00      	cmp	r5, #0
 8007f40:	4606      	mov	r6, r0
 8007f42:	db01      	blt.n	8007f48 <_malloc_r+0x1c>
 8007f44:	42a9      	cmp	r1, r5
 8007f46:	d904      	bls.n	8007f52 <_malloc_r+0x26>
 8007f48:	230c      	movs	r3, #12
 8007f4a:	6033      	str	r3, [r6, #0]
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008028 <_malloc_r+0xfc>
 8007f56:	f000 f869 	bl	800802c <__malloc_lock>
 8007f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f5e:	461c      	mov	r4, r3
 8007f60:	bb44      	cbnz	r4, 8007fb4 <_malloc_r+0x88>
 8007f62:	4629      	mov	r1, r5
 8007f64:	4630      	mov	r0, r6
 8007f66:	f7ff ffbf 	bl	8007ee8 <sbrk_aligned>
 8007f6a:	1c43      	adds	r3, r0, #1
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	d158      	bne.n	8008022 <_malloc_r+0xf6>
 8007f70:	f8d8 4000 	ldr.w	r4, [r8]
 8007f74:	4627      	mov	r7, r4
 8007f76:	2f00      	cmp	r7, #0
 8007f78:	d143      	bne.n	8008002 <_malloc_r+0xd6>
 8007f7a:	2c00      	cmp	r4, #0
 8007f7c:	d04b      	beq.n	8008016 <_malloc_r+0xea>
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	4639      	mov	r1, r7
 8007f82:	4630      	mov	r0, r6
 8007f84:	eb04 0903 	add.w	r9, r4, r3
 8007f88:	f000 f98c 	bl	80082a4 <_sbrk_r>
 8007f8c:	4581      	cmp	r9, r0
 8007f8e:	d142      	bne.n	8008016 <_malloc_r+0xea>
 8007f90:	6821      	ldr	r1, [r4, #0]
 8007f92:	1a6d      	subs	r5, r5, r1
 8007f94:	4629      	mov	r1, r5
 8007f96:	4630      	mov	r0, r6
 8007f98:	f7ff ffa6 	bl	8007ee8 <sbrk_aligned>
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d03a      	beq.n	8008016 <_malloc_r+0xea>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	442b      	add	r3, r5
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	bb62      	cbnz	r2, 8008008 <_malloc_r+0xdc>
 8007fae:	f8c8 7000 	str.w	r7, [r8]
 8007fb2:	e00f      	b.n	8007fd4 <_malloc_r+0xa8>
 8007fb4:	6822      	ldr	r2, [r4, #0]
 8007fb6:	1b52      	subs	r2, r2, r5
 8007fb8:	d420      	bmi.n	8007ffc <_malloc_r+0xd0>
 8007fba:	2a0b      	cmp	r2, #11
 8007fbc:	d917      	bls.n	8007fee <_malloc_r+0xc2>
 8007fbe:	1961      	adds	r1, r4, r5
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	6025      	str	r5, [r4, #0]
 8007fc4:	bf18      	it	ne
 8007fc6:	6059      	strne	r1, [r3, #4]
 8007fc8:	6863      	ldr	r3, [r4, #4]
 8007fca:	bf08      	it	eq
 8007fcc:	f8c8 1000 	streq.w	r1, [r8]
 8007fd0:	5162      	str	r2, [r4, r5]
 8007fd2:	604b      	str	r3, [r1, #4]
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f000 f82f 	bl	8008038 <__malloc_unlock>
 8007fda:	f104 000b 	add.w	r0, r4, #11
 8007fde:	1d23      	adds	r3, r4, #4
 8007fe0:	f020 0007 	bic.w	r0, r0, #7
 8007fe4:	1ac2      	subs	r2, r0, r3
 8007fe6:	bf1c      	itt	ne
 8007fe8:	1a1b      	subne	r3, r3, r0
 8007fea:	50a3      	strne	r3, [r4, r2]
 8007fec:	e7af      	b.n	8007f4e <_malloc_r+0x22>
 8007fee:	6862      	ldr	r2, [r4, #4]
 8007ff0:	42a3      	cmp	r3, r4
 8007ff2:	bf0c      	ite	eq
 8007ff4:	f8c8 2000 	streq.w	r2, [r8]
 8007ff8:	605a      	strne	r2, [r3, #4]
 8007ffa:	e7eb      	b.n	8007fd4 <_malloc_r+0xa8>
 8007ffc:	4623      	mov	r3, r4
 8007ffe:	6864      	ldr	r4, [r4, #4]
 8008000:	e7ae      	b.n	8007f60 <_malloc_r+0x34>
 8008002:	463c      	mov	r4, r7
 8008004:	687f      	ldr	r7, [r7, #4]
 8008006:	e7b6      	b.n	8007f76 <_malloc_r+0x4a>
 8008008:	461a      	mov	r2, r3
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	42a3      	cmp	r3, r4
 800800e:	d1fb      	bne.n	8008008 <_malloc_r+0xdc>
 8008010:	2300      	movs	r3, #0
 8008012:	6053      	str	r3, [r2, #4]
 8008014:	e7de      	b.n	8007fd4 <_malloc_r+0xa8>
 8008016:	230c      	movs	r3, #12
 8008018:	6033      	str	r3, [r6, #0]
 800801a:	4630      	mov	r0, r6
 800801c:	f000 f80c 	bl	8008038 <__malloc_unlock>
 8008020:	e794      	b.n	8007f4c <_malloc_r+0x20>
 8008022:	6005      	str	r5, [r0, #0]
 8008024:	e7d6      	b.n	8007fd4 <_malloc_r+0xa8>
 8008026:	bf00      	nop
 8008028:	200003fc 	.word	0x200003fc

0800802c <__malloc_lock>:
 800802c:	4801      	ldr	r0, [pc, #4]	@ (8008034 <__malloc_lock+0x8>)
 800802e:	f7ff bf0e 	b.w	8007e4e <__retarget_lock_acquire_recursive>
 8008032:	bf00      	nop
 8008034:	200003f4 	.word	0x200003f4

08008038 <__malloc_unlock>:
 8008038:	4801      	ldr	r0, [pc, #4]	@ (8008040 <__malloc_unlock+0x8>)
 800803a:	f7ff bf09 	b.w	8007e50 <__retarget_lock_release_recursive>
 800803e:	bf00      	nop
 8008040:	200003f4 	.word	0x200003f4

08008044 <__sflush_r>:
 8008044:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800804c:	0716      	lsls	r6, r2, #28
 800804e:	4605      	mov	r5, r0
 8008050:	460c      	mov	r4, r1
 8008052:	d454      	bmi.n	80080fe <__sflush_r+0xba>
 8008054:	684b      	ldr	r3, [r1, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	dc02      	bgt.n	8008060 <__sflush_r+0x1c>
 800805a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800805c:	2b00      	cmp	r3, #0
 800805e:	dd48      	ble.n	80080f2 <__sflush_r+0xae>
 8008060:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008062:	2e00      	cmp	r6, #0
 8008064:	d045      	beq.n	80080f2 <__sflush_r+0xae>
 8008066:	2300      	movs	r3, #0
 8008068:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800806c:	682f      	ldr	r7, [r5, #0]
 800806e:	6a21      	ldr	r1, [r4, #32]
 8008070:	602b      	str	r3, [r5, #0]
 8008072:	d030      	beq.n	80080d6 <__sflush_r+0x92>
 8008074:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008076:	89a3      	ldrh	r3, [r4, #12]
 8008078:	0759      	lsls	r1, r3, #29
 800807a:	d505      	bpl.n	8008088 <__sflush_r+0x44>
 800807c:	6863      	ldr	r3, [r4, #4]
 800807e:	1ad2      	subs	r2, r2, r3
 8008080:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008082:	b10b      	cbz	r3, 8008088 <__sflush_r+0x44>
 8008084:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008086:	1ad2      	subs	r2, r2, r3
 8008088:	2300      	movs	r3, #0
 800808a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800808c:	6a21      	ldr	r1, [r4, #32]
 800808e:	4628      	mov	r0, r5
 8008090:	47b0      	blx	r6
 8008092:	1c43      	adds	r3, r0, #1
 8008094:	89a3      	ldrh	r3, [r4, #12]
 8008096:	d106      	bne.n	80080a6 <__sflush_r+0x62>
 8008098:	6829      	ldr	r1, [r5, #0]
 800809a:	291d      	cmp	r1, #29
 800809c:	d82b      	bhi.n	80080f6 <__sflush_r+0xb2>
 800809e:	4a2a      	ldr	r2, [pc, #168]	@ (8008148 <__sflush_r+0x104>)
 80080a0:	410a      	asrs	r2, r1
 80080a2:	07d6      	lsls	r6, r2, #31
 80080a4:	d427      	bmi.n	80080f6 <__sflush_r+0xb2>
 80080a6:	2200      	movs	r2, #0
 80080a8:	6062      	str	r2, [r4, #4]
 80080aa:	04d9      	lsls	r1, r3, #19
 80080ac:	6922      	ldr	r2, [r4, #16]
 80080ae:	6022      	str	r2, [r4, #0]
 80080b0:	d504      	bpl.n	80080bc <__sflush_r+0x78>
 80080b2:	1c42      	adds	r2, r0, #1
 80080b4:	d101      	bne.n	80080ba <__sflush_r+0x76>
 80080b6:	682b      	ldr	r3, [r5, #0]
 80080b8:	b903      	cbnz	r3, 80080bc <__sflush_r+0x78>
 80080ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80080bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080be:	602f      	str	r7, [r5, #0]
 80080c0:	b1b9      	cbz	r1, 80080f2 <__sflush_r+0xae>
 80080c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080c6:	4299      	cmp	r1, r3
 80080c8:	d002      	beq.n	80080d0 <__sflush_r+0x8c>
 80080ca:	4628      	mov	r0, r5
 80080cc:	f7ff fec2 	bl	8007e54 <_free_r>
 80080d0:	2300      	movs	r3, #0
 80080d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80080d4:	e00d      	b.n	80080f2 <__sflush_r+0xae>
 80080d6:	2301      	movs	r3, #1
 80080d8:	4628      	mov	r0, r5
 80080da:	47b0      	blx	r6
 80080dc:	4602      	mov	r2, r0
 80080de:	1c50      	adds	r0, r2, #1
 80080e0:	d1c9      	bne.n	8008076 <__sflush_r+0x32>
 80080e2:	682b      	ldr	r3, [r5, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d0c6      	beq.n	8008076 <__sflush_r+0x32>
 80080e8:	2b1d      	cmp	r3, #29
 80080ea:	d001      	beq.n	80080f0 <__sflush_r+0xac>
 80080ec:	2b16      	cmp	r3, #22
 80080ee:	d11e      	bne.n	800812e <__sflush_r+0xea>
 80080f0:	602f      	str	r7, [r5, #0]
 80080f2:	2000      	movs	r0, #0
 80080f4:	e022      	b.n	800813c <__sflush_r+0xf8>
 80080f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080fa:	b21b      	sxth	r3, r3
 80080fc:	e01b      	b.n	8008136 <__sflush_r+0xf2>
 80080fe:	690f      	ldr	r7, [r1, #16]
 8008100:	2f00      	cmp	r7, #0
 8008102:	d0f6      	beq.n	80080f2 <__sflush_r+0xae>
 8008104:	0793      	lsls	r3, r2, #30
 8008106:	680e      	ldr	r6, [r1, #0]
 8008108:	bf08      	it	eq
 800810a:	694b      	ldreq	r3, [r1, #20]
 800810c:	600f      	str	r7, [r1, #0]
 800810e:	bf18      	it	ne
 8008110:	2300      	movne	r3, #0
 8008112:	eba6 0807 	sub.w	r8, r6, r7
 8008116:	608b      	str	r3, [r1, #8]
 8008118:	f1b8 0f00 	cmp.w	r8, #0
 800811c:	dde9      	ble.n	80080f2 <__sflush_r+0xae>
 800811e:	6a21      	ldr	r1, [r4, #32]
 8008120:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008122:	4643      	mov	r3, r8
 8008124:	463a      	mov	r2, r7
 8008126:	4628      	mov	r0, r5
 8008128:	47b0      	blx	r6
 800812a:	2800      	cmp	r0, #0
 800812c:	dc08      	bgt.n	8008140 <__sflush_r+0xfc>
 800812e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008136:	81a3      	strh	r3, [r4, #12]
 8008138:	f04f 30ff 	mov.w	r0, #4294967295
 800813c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008140:	4407      	add	r7, r0
 8008142:	eba8 0800 	sub.w	r8, r8, r0
 8008146:	e7e7      	b.n	8008118 <__sflush_r+0xd4>
 8008148:	dfbffffe 	.word	0xdfbffffe

0800814c <_fflush_r>:
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	690b      	ldr	r3, [r1, #16]
 8008150:	4605      	mov	r5, r0
 8008152:	460c      	mov	r4, r1
 8008154:	b913      	cbnz	r3, 800815c <_fflush_r+0x10>
 8008156:	2500      	movs	r5, #0
 8008158:	4628      	mov	r0, r5
 800815a:	bd38      	pop	{r3, r4, r5, pc}
 800815c:	b118      	cbz	r0, 8008166 <_fflush_r+0x1a>
 800815e:	6a03      	ldr	r3, [r0, #32]
 8008160:	b90b      	cbnz	r3, 8008166 <_fflush_r+0x1a>
 8008162:	f7ff fc8f 	bl	8007a84 <__sinit>
 8008166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d0f3      	beq.n	8008156 <_fflush_r+0xa>
 800816e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008170:	07d0      	lsls	r0, r2, #31
 8008172:	d404      	bmi.n	800817e <_fflush_r+0x32>
 8008174:	0599      	lsls	r1, r3, #22
 8008176:	d402      	bmi.n	800817e <_fflush_r+0x32>
 8008178:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800817a:	f7ff fe68 	bl	8007e4e <__retarget_lock_acquire_recursive>
 800817e:	4628      	mov	r0, r5
 8008180:	4621      	mov	r1, r4
 8008182:	f7ff ff5f 	bl	8008044 <__sflush_r>
 8008186:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008188:	07da      	lsls	r2, r3, #31
 800818a:	4605      	mov	r5, r0
 800818c:	d4e4      	bmi.n	8008158 <_fflush_r+0xc>
 800818e:	89a3      	ldrh	r3, [r4, #12]
 8008190:	059b      	lsls	r3, r3, #22
 8008192:	d4e1      	bmi.n	8008158 <_fflush_r+0xc>
 8008194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008196:	f7ff fe5b 	bl	8007e50 <__retarget_lock_release_recursive>
 800819a:	e7dd      	b.n	8008158 <_fflush_r+0xc>

0800819c <__swhatbuf_r>:
 800819c:	b570      	push	{r4, r5, r6, lr}
 800819e:	460c      	mov	r4, r1
 80081a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a4:	2900      	cmp	r1, #0
 80081a6:	b096      	sub	sp, #88	@ 0x58
 80081a8:	4615      	mov	r5, r2
 80081aa:	461e      	mov	r6, r3
 80081ac:	da0d      	bge.n	80081ca <__swhatbuf_r+0x2e>
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80081b4:	f04f 0100 	mov.w	r1, #0
 80081b8:	bf14      	ite	ne
 80081ba:	2340      	movne	r3, #64	@ 0x40
 80081bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80081c0:	2000      	movs	r0, #0
 80081c2:	6031      	str	r1, [r6, #0]
 80081c4:	602b      	str	r3, [r5, #0]
 80081c6:	b016      	add	sp, #88	@ 0x58
 80081c8:	bd70      	pop	{r4, r5, r6, pc}
 80081ca:	466a      	mov	r2, sp
 80081cc:	f000 f848 	bl	8008260 <_fstat_r>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	dbec      	blt.n	80081ae <__swhatbuf_r+0x12>
 80081d4:	9901      	ldr	r1, [sp, #4]
 80081d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80081da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80081de:	4259      	negs	r1, r3
 80081e0:	4159      	adcs	r1, r3
 80081e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081e6:	e7eb      	b.n	80081c0 <__swhatbuf_r+0x24>

080081e8 <__smakebuf_r>:
 80081e8:	898b      	ldrh	r3, [r1, #12]
 80081ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ec:	079d      	lsls	r5, r3, #30
 80081ee:	4606      	mov	r6, r0
 80081f0:	460c      	mov	r4, r1
 80081f2:	d507      	bpl.n	8008204 <__smakebuf_r+0x1c>
 80081f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	6123      	str	r3, [r4, #16]
 80081fc:	2301      	movs	r3, #1
 80081fe:	6163      	str	r3, [r4, #20]
 8008200:	b003      	add	sp, #12
 8008202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008204:	ab01      	add	r3, sp, #4
 8008206:	466a      	mov	r2, sp
 8008208:	f7ff ffc8 	bl	800819c <__swhatbuf_r>
 800820c:	9f00      	ldr	r7, [sp, #0]
 800820e:	4605      	mov	r5, r0
 8008210:	4639      	mov	r1, r7
 8008212:	4630      	mov	r0, r6
 8008214:	f7ff fe8a 	bl	8007f2c <_malloc_r>
 8008218:	b948      	cbnz	r0, 800822e <__smakebuf_r+0x46>
 800821a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800821e:	059a      	lsls	r2, r3, #22
 8008220:	d4ee      	bmi.n	8008200 <__smakebuf_r+0x18>
 8008222:	f023 0303 	bic.w	r3, r3, #3
 8008226:	f043 0302 	orr.w	r3, r3, #2
 800822a:	81a3      	strh	r3, [r4, #12]
 800822c:	e7e2      	b.n	80081f4 <__smakebuf_r+0xc>
 800822e:	89a3      	ldrh	r3, [r4, #12]
 8008230:	6020      	str	r0, [r4, #0]
 8008232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008236:	81a3      	strh	r3, [r4, #12]
 8008238:	9b01      	ldr	r3, [sp, #4]
 800823a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800823e:	b15b      	cbz	r3, 8008258 <__smakebuf_r+0x70>
 8008240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008244:	4630      	mov	r0, r6
 8008246:	f000 f81d 	bl	8008284 <_isatty_r>
 800824a:	b128      	cbz	r0, 8008258 <__smakebuf_r+0x70>
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	f023 0303 	bic.w	r3, r3, #3
 8008252:	f043 0301 	orr.w	r3, r3, #1
 8008256:	81a3      	strh	r3, [r4, #12]
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	431d      	orrs	r5, r3
 800825c:	81a5      	strh	r5, [r4, #12]
 800825e:	e7cf      	b.n	8008200 <__smakebuf_r+0x18>

08008260 <_fstat_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4d07      	ldr	r5, [pc, #28]	@ (8008280 <_fstat_r+0x20>)
 8008264:	2300      	movs	r3, #0
 8008266:	4604      	mov	r4, r0
 8008268:	4608      	mov	r0, r1
 800826a:	4611      	mov	r1, r2
 800826c:	602b      	str	r3, [r5, #0]
 800826e:	f7f9 ff68 	bl	8002142 <_fstat>
 8008272:	1c43      	adds	r3, r0, #1
 8008274:	d102      	bne.n	800827c <_fstat_r+0x1c>
 8008276:	682b      	ldr	r3, [r5, #0]
 8008278:	b103      	cbz	r3, 800827c <_fstat_r+0x1c>
 800827a:	6023      	str	r3, [r4, #0]
 800827c:	bd38      	pop	{r3, r4, r5, pc}
 800827e:	bf00      	nop
 8008280:	200003f0 	.word	0x200003f0

08008284 <_isatty_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4d06      	ldr	r5, [pc, #24]	@ (80082a0 <_isatty_r+0x1c>)
 8008288:	2300      	movs	r3, #0
 800828a:	4604      	mov	r4, r0
 800828c:	4608      	mov	r0, r1
 800828e:	602b      	str	r3, [r5, #0]
 8008290:	f7f9 ff67 	bl	8002162 <_isatty>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	d102      	bne.n	800829e <_isatty_r+0x1a>
 8008298:	682b      	ldr	r3, [r5, #0]
 800829a:	b103      	cbz	r3, 800829e <_isatty_r+0x1a>
 800829c:	6023      	str	r3, [r4, #0]
 800829e:	bd38      	pop	{r3, r4, r5, pc}
 80082a0:	200003f0 	.word	0x200003f0

080082a4 <_sbrk_r>:
 80082a4:	b538      	push	{r3, r4, r5, lr}
 80082a6:	4d06      	ldr	r5, [pc, #24]	@ (80082c0 <_sbrk_r+0x1c>)
 80082a8:	2300      	movs	r3, #0
 80082aa:	4604      	mov	r4, r0
 80082ac:	4608      	mov	r0, r1
 80082ae:	602b      	str	r3, [r5, #0]
 80082b0:	f7f9 ff70 	bl	8002194 <_sbrk>
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	d102      	bne.n	80082be <_sbrk_r+0x1a>
 80082b8:	682b      	ldr	r3, [r5, #0]
 80082ba:	b103      	cbz	r3, 80082be <_sbrk_r+0x1a>
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	bd38      	pop	{r3, r4, r5, pc}
 80082c0:	200003f0 	.word	0x200003f0

080082c4 <atan2>:
 80082c4:	f000 b908 	b.w	80084d8 <__ieee754_atan2>

080082c8 <sqrt>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	ed2d 8b02 	vpush	{d8}
 80082ce:	ec55 4b10 	vmov	r4, r5, d0
 80082d2:	f000 f825 	bl	8008320 <__ieee754_sqrt>
 80082d6:	4622      	mov	r2, r4
 80082d8:	462b      	mov	r3, r5
 80082da:	4620      	mov	r0, r4
 80082dc:	4629      	mov	r1, r5
 80082de:	eeb0 8a40 	vmov.f32	s16, s0
 80082e2:	eef0 8a60 	vmov.f32	s17, s1
 80082e6:	f7f8 fbc5 	bl	8000a74 <__aeabi_dcmpun>
 80082ea:	b990      	cbnz	r0, 8008312 <sqrt+0x4a>
 80082ec:	2200      	movs	r2, #0
 80082ee:	2300      	movs	r3, #0
 80082f0:	4620      	mov	r0, r4
 80082f2:	4629      	mov	r1, r5
 80082f4:	f7f8 fb96 	bl	8000a24 <__aeabi_dcmplt>
 80082f8:	b158      	cbz	r0, 8008312 <sqrt+0x4a>
 80082fa:	f7ff fd7d 	bl	8007df8 <__errno>
 80082fe:	2321      	movs	r3, #33	@ 0x21
 8008300:	6003      	str	r3, [r0, #0]
 8008302:	2200      	movs	r2, #0
 8008304:	2300      	movs	r3, #0
 8008306:	4610      	mov	r0, r2
 8008308:	4619      	mov	r1, r3
 800830a:	f7f8 fa43 	bl	8000794 <__aeabi_ddiv>
 800830e:	ec41 0b18 	vmov	d8, r0, r1
 8008312:	eeb0 0a48 	vmov.f32	s0, s16
 8008316:	eef0 0a68 	vmov.f32	s1, s17
 800831a:	ecbd 8b02 	vpop	{d8}
 800831e:	bd38      	pop	{r3, r4, r5, pc}

08008320 <__ieee754_sqrt>:
 8008320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	4a68      	ldr	r2, [pc, #416]	@ (80084c8 <__ieee754_sqrt+0x1a8>)
 8008326:	ec55 4b10 	vmov	r4, r5, d0
 800832a:	43aa      	bics	r2, r5
 800832c:	462b      	mov	r3, r5
 800832e:	4621      	mov	r1, r4
 8008330:	d110      	bne.n	8008354 <__ieee754_sqrt+0x34>
 8008332:	4622      	mov	r2, r4
 8008334:	4620      	mov	r0, r4
 8008336:	4629      	mov	r1, r5
 8008338:	f7f8 f902 	bl	8000540 <__aeabi_dmul>
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	4620      	mov	r0, r4
 8008342:	4629      	mov	r1, r5
 8008344:	f7f7 ff46 	bl	80001d4 <__adddf3>
 8008348:	4604      	mov	r4, r0
 800834a:	460d      	mov	r5, r1
 800834c:	ec45 4b10 	vmov	d0, r4, r5
 8008350:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008354:	2d00      	cmp	r5, #0
 8008356:	dc0e      	bgt.n	8008376 <__ieee754_sqrt+0x56>
 8008358:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800835c:	4322      	orrs	r2, r4
 800835e:	d0f5      	beq.n	800834c <__ieee754_sqrt+0x2c>
 8008360:	b19d      	cbz	r5, 800838a <__ieee754_sqrt+0x6a>
 8008362:	4622      	mov	r2, r4
 8008364:	4620      	mov	r0, r4
 8008366:	4629      	mov	r1, r5
 8008368:	f7f7 ff32 	bl	80001d0 <__aeabi_dsub>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	f7f8 fa10 	bl	8000794 <__aeabi_ddiv>
 8008374:	e7e8      	b.n	8008348 <__ieee754_sqrt+0x28>
 8008376:	152a      	asrs	r2, r5, #20
 8008378:	d115      	bne.n	80083a6 <__ieee754_sqrt+0x86>
 800837a:	2000      	movs	r0, #0
 800837c:	e009      	b.n	8008392 <__ieee754_sqrt+0x72>
 800837e:	0acb      	lsrs	r3, r1, #11
 8008380:	3a15      	subs	r2, #21
 8008382:	0549      	lsls	r1, r1, #21
 8008384:	2b00      	cmp	r3, #0
 8008386:	d0fa      	beq.n	800837e <__ieee754_sqrt+0x5e>
 8008388:	e7f7      	b.n	800837a <__ieee754_sqrt+0x5a>
 800838a:	462a      	mov	r2, r5
 800838c:	e7fa      	b.n	8008384 <__ieee754_sqrt+0x64>
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	3001      	adds	r0, #1
 8008392:	02dc      	lsls	r4, r3, #11
 8008394:	d5fb      	bpl.n	800838e <__ieee754_sqrt+0x6e>
 8008396:	1e44      	subs	r4, r0, #1
 8008398:	1b12      	subs	r2, r2, r4
 800839a:	f1c0 0420 	rsb	r4, r0, #32
 800839e:	fa21 f404 	lsr.w	r4, r1, r4
 80083a2:	4323      	orrs	r3, r4
 80083a4:	4081      	lsls	r1, r0
 80083a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083aa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80083ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083b2:	07d2      	lsls	r2, r2, #31
 80083b4:	bf5c      	itt	pl
 80083b6:	005b      	lslpl	r3, r3, #1
 80083b8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80083bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80083c0:	bf58      	it	pl
 80083c2:	0049      	lslpl	r1, r1, #1
 80083c4:	2600      	movs	r6, #0
 80083c6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80083ca:	106d      	asrs	r5, r5, #1
 80083cc:	0049      	lsls	r1, r1, #1
 80083ce:	2016      	movs	r0, #22
 80083d0:	4632      	mov	r2, r6
 80083d2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80083d6:	1917      	adds	r7, r2, r4
 80083d8:	429f      	cmp	r7, r3
 80083da:	bfde      	ittt	le
 80083dc:	193a      	addle	r2, r7, r4
 80083de:	1bdb      	suble	r3, r3, r7
 80083e0:	1936      	addle	r6, r6, r4
 80083e2:	0fcf      	lsrs	r7, r1, #31
 80083e4:	3801      	subs	r0, #1
 80083e6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80083ea:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80083ee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80083f2:	d1f0      	bne.n	80083d6 <__ieee754_sqrt+0xb6>
 80083f4:	4604      	mov	r4, r0
 80083f6:	2720      	movs	r7, #32
 80083f8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80083fc:	429a      	cmp	r2, r3
 80083fe:	eb00 0e0c 	add.w	lr, r0, ip
 8008402:	db02      	blt.n	800840a <__ieee754_sqrt+0xea>
 8008404:	d113      	bne.n	800842e <__ieee754_sqrt+0x10e>
 8008406:	458e      	cmp	lr, r1
 8008408:	d811      	bhi.n	800842e <__ieee754_sqrt+0x10e>
 800840a:	f1be 0f00 	cmp.w	lr, #0
 800840e:	eb0e 000c 	add.w	r0, lr, ip
 8008412:	da42      	bge.n	800849a <__ieee754_sqrt+0x17a>
 8008414:	2800      	cmp	r0, #0
 8008416:	db40      	blt.n	800849a <__ieee754_sqrt+0x17a>
 8008418:	f102 0801 	add.w	r8, r2, #1
 800841c:	1a9b      	subs	r3, r3, r2
 800841e:	458e      	cmp	lr, r1
 8008420:	bf88      	it	hi
 8008422:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008426:	eba1 010e 	sub.w	r1, r1, lr
 800842a:	4464      	add	r4, ip
 800842c:	4642      	mov	r2, r8
 800842e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008432:	3f01      	subs	r7, #1
 8008434:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008438:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800843c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008440:	d1dc      	bne.n	80083fc <__ieee754_sqrt+0xdc>
 8008442:	4319      	orrs	r1, r3
 8008444:	d01b      	beq.n	800847e <__ieee754_sqrt+0x15e>
 8008446:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80084cc <__ieee754_sqrt+0x1ac>
 800844a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80084d0 <__ieee754_sqrt+0x1b0>
 800844e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008452:	e9db 2300 	ldrd	r2, r3, [fp]
 8008456:	f7f7 febb 	bl	80001d0 <__aeabi_dsub>
 800845a:	e9da 8900 	ldrd	r8, r9, [sl]
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	4640      	mov	r0, r8
 8008464:	4649      	mov	r1, r9
 8008466:	f7f8 fae7 	bl	8000a38 <__aeabi_dcmple>
 800846a:	b140      	cbz	r0, 800847e <__ieee754_sqrt+0x15e>
 800846c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008470:	e9da 0100 	ldrd	r0, r1, [sl]
 8008474:	e9db 2300 	ldrd	r2, r3, [fp]
 8008478:	d111      	bne.n	800849e <__ieee754_sqrt+0x17e>
 800847a:	3601      	adds	r6, #1
 800847c:	463c      	mov	r4, r7
 800847e:	1072      	asrs	r2, r6, #1
 8008480:	0863      	lsrs	r3, r4, #1
 8008482:	07f1      	lsls	r1, r6, #31
 8008484:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008488:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800848c:	bf48      	it	mi
 800848e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008492:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008496:	4618      	mov	r0, r3
 8008498:	e756      	b.n	8008348 <__ieee754_sqrt+0x28>
 800849a:	4690      	mov	r8, r2
 800849c:	e7be      	b.n	800841c <__ieee754_sqrt+0xfc>
 800849e:	f7f7 fe99 	bl	80001d4 <__adddf3>
 80084a2:	e9da 8900 	ldrd	r8, r9, [sl]
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4640      	mov	r0, r8
 80084ac:	4649      	mov	r1, r9
 80084ae:	f7f8 fab9 	bl	8000a24 <__aeabi_dcmplt>
 80084b2:	b120      	cbz	r0, 80084be <__ieee754_sqrt+0x19e>
 80084b4:	1ca0      	adds	r0, r4, #2
 80084b6:	bf08      	it	eq
 80084b8:	3601      	addeq	r6, #1
 80084ba:	3402      	adds	r4, #2
 80084bc:	e7df      	b.n	800847e <__ieee754_sqrt+0x15e>
 80084be:	1c63      	adds	r3, r4, #1
 80084c0:	f023 0401 	bic.w	r4, r3, #1
 80084c4:	e7db      	b.n	800847e <__ieee754_sqrt+0x15e>
 80084c6:	bf00      	nop
 80084c8:	7ff00000 	.word	0x7ff00000
 80084cc:	20000070 	.word	0x20000070
 80084d0:	20000068 	.word	0x20000068
 80084d4:	00000000 	.word	0x00000000

080084d8 <__ieee754_atan2>:
 80084d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084dc:	ec57 6b11 	vmov	r6, r7, d1
 80084e0:	4273      	negs	r3, r6
 80084e2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8008660 <__ieee754_atan2+0x188>
 80084e6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80084ea:	4333      	orrs	r3, r6
 80084ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80084f0:	4543      	cmp	r3, r8
 80084f2:	ec51 0b10 	vmov	r0, r1, d0
 80084f6:	4635      	mov	r5, r6
 80084f8:	d809      	bhi.n	800850e <__ieee754_atan2+0x36>
 80084fa:	4244      	negs	r4, r0
 80084fc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008500:	4304      	orrs	r4, r0
 8008502:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008506:	4544      	cmp	r4, r8
 8008508:	468e      	mov	lr, r1
 800850a:	4681      	mov	r9, r0
 800850c:	d907      	bls.n	800851e <__ieee754_atan2+0x46>
 800850e:	4632      	mov	r2, r6
 8008510:	463b      	mov	r3, r7
 8008512:	f7f7 fe5f 	bl	80001d4 <__adddf3>
 8008516:	ec41 0b10 	vmov	d0, r0, r1
 800851a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800851e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8008522:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8008526:	4334      	orrs	r4, r6
 8008528:	d103      	bne.n	8008532 <__ieee754_atan2+0x5a>
 800852a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800852e:	f000 b89b 	b.w	8008668 <atan>
 8008532:	17bc      	asrs	r4, r7, #30
 8008534:	f004 0402 	and.w	r4, r4, #2
 8008538:	ea53 0909 	orrs.w	r9, r3, r9
 800853c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008540:	d107      	bne.n	8008552 <__ieee754_atan2+0x7a>
 8008542:	2c02      	cmp	r4, #2
 8008544:	d05f      	beq.n	8008606 <__ieee754_atan2+0x12e>
 8008546:	2c03      	cmp	r4, #3
 8008548:	d1e5      	bne.n	8008516 <__ieee754_atan2+0x3e>
 800854a:	a141      	add	r1, pc, #260	@ (adr r1, 8008650 <__ieee754_atan2+0x178>)
 800854c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008550:	e7e1      	b.n	8008516 <__ieee754_atan2+0x3e>
 8008552:	4315      	orrs	r5, r2
 8008554:	d106      	bne.n	8008564 <__ieee754_atan2+0x8c>
 8008556:	f1be 0f00 	cmp.w	lr, #0
 800855a:	da5f      	bge.n	800861c <__ieee754_atan2+0x144>
 800855c:	a13e      	add	r1, pc, #248	@ (adr r1, 8008658 <__ieee754_atan2+0x180>)
 800855e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008562:	e7d8      	b.n	8008516 <__ieee754_atan2+0x3e>
 8008564:	4542      	cmp	r2, r8
 8008566:	d10f      	bne.n	8008588 <__ieee754_atan2+0xb0>
 8008568:	4293      	cmp	r3, r2
 800856a:	f104 34ff 	add.w	r4, r4, #4294967295
 800856e:	d107      	bne.n	8008580 <__ieee754_atan2+0xa8>
 8008570:	2c02      	cmp	r4, #2
 8008572:	d84c      	bhi.n	800860e <__ieee754_atan2+0x136>
 8008574:	4b34      	ldr	r3, [pc, #208]	@ (8008648 <__ieee754_atan2+0x170>)
 8008576:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800857a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800857e:	e7ca      	b.n	8008516 <__ieee754_atan2+0x3e>
 8008580:	2c02      	cmp	r4, #2
 8008582:	d848      	bhi.n	8008616 <__ieee754_atan2+0x13e>
 8008584:	4b31      	ldr	r3, [pc, #196]	@ (800864c <__ieee754_atan2+0x174>)
 8008586:	e7f6      	b.n	8008576 <__ieee754_atan2+0x9e>
 8008588:	4543      	cmp	r3, r8
 800858a:	d0e4      	beq.n	8008556 <__ieee754_atan2+0x7e>
 800858c:	1a9b      	subs	r3, r3, r2
 800858e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8008592:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008596:	da1e      	bge.n	80085d6 <__ieee754_atan2+0xfe>
 8008598:	2f00      	cmp	r7, #0
 800859a:	da01      	bge.n	80085a0 <__ieee754_atan2+0xc8>
 800859c:	323c      	adds	r2, #60	@ 0x3c
 800859e:	db1e      	blt.n	80085de <__ieee754_atan2+0x106>
 80085a0:	4632      	mov	r2, r6
 80085a2:	463b      	mov	r3, r7
 80085a4:	f7f8 f8f6 	bl	8000794 <__aeabi_ddiv>
 80085a8:	ec41 0b10 	vmov	d0, r0, r1
 80085ac:	f000 f9f4 	bl	8008998 <fabs>
 80085b0:	f000 f85a 	bl	8008668 <atan>
 80085b4:	ec51 0b10 	vmov	r0, r1, d0
 80085b8:	2c01      	cmp	r4, #1
 80085ba:	d013      	beq.n	80085e4 <__ieee754_atan2+0x10c>
 80085bc:	2c02      	cmp	r4, #2
 80085be:	d015      	beq.n	80085ec <__ieee754_atan2+0x114>
 80085c0:	2c00      	cmp	r4, #0
 80085c2:	d0a8      	beq.n	8008516 <__ieee754_atan2+0x3e>
 80085c4:	a318      	add	r3, pc, #96	@ (adr r3, 8008628 <__ieee754_atan2+0x150>)
 80085c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ca:	f7f7 fe01 	bl	80001d0 <__aeabi_dsub>
 80085ce:	a318      	add	r3, pc, #96	@ (adr r3, 8008630 <__ieee754_atan2+0x158>)
 80085d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d4:	e014      	b.n	8008600 <__ieee754_atan2+0x128>
 80085d6:	a118      	add	r1, pc, #96	@ (adr r1, 8008638 <__ieee754_atan2+0x160>)
 80085d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085dc:	e7ec      	b.n	80085b8 <__ieee754_atan2+0xe0>
 80085de:	2000      	movs	r0, #0
 80085e0:	2100      	movs	r1, #0
 80085e2:	e7e9      	b.n	80085b8 <__ieee754_atan2+0xe0>
 80085e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80085e8:	4619      	mov	r1, r3
 80085ea:	e794      	b.n	8008516 <__ieee754_atan2+0x3e>
 80085ec:	a30e      	add	r3, pc, #56	@ (adr r3, 8008628 <__ieee754_atan2+0x150>)
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	f7f7 fded 	bl	80001d0 <__aeabi_dsub>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	a10d      	add	r1, pc, #52	@ (adr r1, 8008630 <__ieee754_atan2+0x158>)
 80085fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008600:	f7f7 fde6 	bl	80001d0 <__aeabi_dsub>
 8008604:	e787      	b.n	8008516 <__ieee754_atan2+0x3e>
 8008606:	a10a      	add	r1, pc, #40	@ (adr r1, 8008630 <__ieee754_atan2+0x158>)
 8008608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800860c:	e783      	b.n	8008516 <__ieee754_atan2+0x3e>
 800860e:	a10c      	add	r1, pc, #48	@ (adr r1, 8008640 <__ieee754_atan2+0x168>)
 8008610:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008614:	e77f      	b.n	8008516 <__ieee754_atan2+0x3e>
 8008616:	2000      	movs	r0, #0
 8008618:	2100      	movs	r1, #0
 800861a:	e77c      	b.n	8008516 <__ieee754_atan2+0x3e>
 800861c:	a106      	add	r1, pc, #24	@ (adr r1, 8008638 <__ieee754_atan2+0x160>)
 800861e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008622:	e778      	b.n	8008516 <__ieee754_atan2+0x3e>
 8008624:	f3af 8000 	nop.w
 8008628:	33145c07 	.word	0x33145c07
 800862c:	3ca1a626 	.word	0x3ca1a626
 8008630:	54442d18 	.word	0x54442d18
 8008634:	400921fb 	.word	0x400921fb
 8008638:	54442d18 	.word	0x54442d18
 800863c:	3ff921fb 	.word	0x3ff921fb
 8008640:	54442d18 	.word	0x54442d18
 8008644:	3fe921fb 	.word	0x3fe921fb
 8008648:	08008a00 	.word	0x08008a00
 800864c:	080089e8 	.word	0x080089e8
 8008650:	54442d18 	.word	0x54442d18
 8008654:	c00921fb 	.word	0xc00921fb
 8008658:	54442d18 	.word	0x54442d18
 800865c:	bff921fb 	.word	0xbff921fb
 8008660:	7ff00000 	.word	0x7ff00000
 8008664:	00000000 	.word	0x00000000

08008668 <atan>:
 8008668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	ec55 4b10 	vmov	r4, r5, d0
 8008670:	4bbf      	ldr	r3, [pc, #764]	@ (8008970 <atan+0x308>)
 8008672:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8008676:	429e      	cmp	r6, r3
 8008678:	46ab      	mov	fp, r5
 800867a:	d918      	bls.n	80086ae <atan+0x46>
 800867c:	4bbd      	ldr	r3, [pc, #756]	@ (8008974 <atan+0x30c>)
 800867e:	429e      	cmp	r6, r3
 8008680:	d801      	bhi.n	8008686 <atan+0x1e>
 8008682:	d109      	bne.n	8008698 <atan+0x30>
 8008684:	b144      	cbz	r4, 8008698 <atan+0x30>
 8008686:	4622      	mov	r2, r4
 8008688:	462b      	mov	r3, r5
 800868a:	4620      	mov	r0, r4
 800868c:	4629      	mov	r1, r5
 800868e:	f7f7 fda1 	bl	80001d4 <__adddf3>
 8008692:	4604      	mov	r4, r0
 8008694:	460d      	mov	r5, r1
 8008696:	e006      	b.n	80086a6 <atan+0x3e>
 8008698:	f1bb 0f00 	cmp.w	fp, #0
 800869c:	f340 812b 	ble.w	80088f6 <atan+0x28e>
 80086a0:	a597      	add	r5, pc, #604	@ (adr r5, 8008900 <atan+0x298>)
 80086a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80086a6:	ec45 4b10 	vmov	d0, r4, r5
 80086aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ae:	4bb2      	ldr	r3, [pc, #712]	@ (8008978 <atan+0x310>)
 80086b0:	429e      	cmp	r6, r3
 80086b2:	d813      	bhi.n	80086dc <atan+0x74>
 80086b4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80086b8:	429e      	cmp	r6, r3
 80086ba:	d80c      	bhi.n	80086d6 <atan+0x6e>
 80086bc:	a392      	add	r3, pc, #584	@ (adr r3, 8008908 <atan+0x2a0>)
 80086be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c2:	4620      	mov	r0, r4
 80086c4:	4629      	mov	r1, r5
 80086c6:	f7f7 fd85 	bl	80001d4 <__adddf3>
 80086ca:	4bac      	ldr	r3, [pc, #688]	@ (800897c <atan+0x314>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	f7f8 f9c7 	bl	8000a60 <__aeabi_dcmpgt>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d1e7      	bne.n	80086a6 <atan+0x3e>
 80086d6:	f04f 3aff 	mov.w	sl, #4294967295
 80086da:	e029      	b.n	8008730 <atan+0xc8>
 80086dc:	f000 f95c 	bl	8008998 <fabs>
 80086e0:	4ba7      	ldr	r3, [pc, #668]	@ (8008980 <atan+0x318>)
 80086e2:	429e      	cmp	r6, r3
 80086e4:	ec55 4b10 	vmov	r4, r5, d0
 80086e8:	f200 80bc 	bhi.w	8008864 <atan+0x1fc>
 80086ec:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80086f0:	429e      	cmp	r6, r3
 80086f2:	f200 809e 	bhi.w	8008832 <atan+0x1ca>
 80086f6:	4622      	mov	r2, r4
 80086f8:	462b      	mov	r3, r5
 80086fa:	4620      	mov	r0, r4
 80086fc:	4629      	mov	r1, r5
 80086fe:	f7f7 fd69 	bl	80001d4 <__adddf3>
 8008702:	4b9e      	ldr	r3, [pc, #632]	@ (800897c <atan+0x314>)
 8008704:	2200      	movs	r2, #0
 8008706:	f7f7 fd63 	bl	80001d0 <__aeabi_dsub>
 800870a:	2200      	movs	r2, #0
 800870c:	4606      	mov	r6, r0
 800870e:	460f      	mov	r7, r1
 8008710:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008714:	4620      	mov	r0, r4
 8008716:	4629      	mov	r1, r5
 8008718:	f7f7 fd5c 	bl	80001d4 <__adddf3>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4630      	mov	r0, r6
 8008722:	4639      	mov	r1, r7
 8008724:	f7f8 f836 	bl	8000794 <__aeabi_ddiv>
 8008728:	f04f 0a00 	mov.w	sl, #0
 800872c:	4604      	mov	r4, r0
 800872e:	460d      	mov	r5, r1
 8008730:	4622      	mov	r2, r4
 8008732:	462b      	mov	r3, r5
 8008734:	4620      	mov	r0, r4
 8008736:	4629      	mov	r1, r5
 8008738:	f7f7 ff02 	bl	8000540 <__aeabi_dmul>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4680      	mov	r8, r0
 8008742:	4689      	mov	r9, r1
 8008744:	f7f7 fefc 	bl	8000540 <__aeabi_dmul>
 8008748:	a371      	add	r3, pc, #452	@ (adr r3, 8008910 <atan+0x2a8>)
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	4606      	mov	r6, r0
 8008750:	460f      	mov	r7, r1
 8008752:	f7f7 fef5 	bl	8000540 <__aeabi_dmul>
 8008756:	a370      	add	r3, pc, #448	@ (adr r3, 8008918 <atan+0x2b0>)
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f7f7 fd3a 	bl	80001d4 <__adddf3>
 8008760:	4632      	mov	r2, r6
 8008762:	463b      	mov	r3, r7
 8008764:	f7f7 feec 	bl	8000540 <__aeabi_dmul>
 8008768:	a36d      	add	r3, pc, #436	@ (adr r3, 8008920 <atan+0x2b8>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f7f7 fd31 	bl	80001d4 <__adddf3>
 8008772:	4632      	mov	r2, r6
 8008774:	463b      	mov	r3, r7
 8008776:	f7f7 fee3 	bl	8000540 <__aeabi_dmul>
 800877a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008928 <atan+0x2c0>)
 800877c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008780:	f7f7 fd28 	bl	80001d4 <__adddf3>
 8008784:	4632      	mov	r2, r6
 8008786:	463b      	mov	r3, r7
 8008788:	f7f7 feda 	bl	8000540 <__aeabi_dmul>
 800878c:	a368      	add	r3, pc, #416	@ (adr r3, 8008930 <atan+0x2c8>)
 800878e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008792:	f7f7 fd1f 	bl	80001d4 <__adddf3>
 8008796:	4632      	mov	r2, r6
 8008798:	463b      	mov	r3, r7
 800879a:	f7f7 fed1 	bl	8000540 <__aeabi_dmul>
 800879e:	a366      	add	r3, pc, #408	@ (adr r3, 8008938 <atan+0x2d0>)
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	f7f7 fd16 	bl	80001d4 <__adddf3>
 80087a8:	4642      	mov	r2, r8
 80087aa:	464b      	mov	r3, r9
 80087ac:	f7f7 fec8 	bl	8000540 <__aeabi_dmul>
 80087b0:	a363      	add	r3, pc, #396	@ (adr r3, 8008940 <atan+0x2d8>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	4680      	mov	r8, r0
 80087b8:	4689      	mov	r9, r1
 80087ba:	4630      	mov	r0, r6
 80087bc:	4639      	mov	r1, r7
 80087be:	f7f7 febf 	bl	8000540 <__aeabi_dmul>
 80087c2:	a361      	add	r3, pc, #388	@ (adr r3, 8008948 <atan+0x2e0>)
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	f7f7 fd02 	bl	80001d0 <__aeabi_dsub>
 80087cc:	4632      	mov	r2, r6
 80087ce:	463b      	mov	r3, r7
 80087d0:	f7f7 feb6 	bl	8000540 <__aeabi_dmul>
 80087d4:	a35e      	add	r3, pc, #376	@ (adr r3, 8008950 <atan+0x2e8>)
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	f7f7 fcf9 	bl	80001d0 <__aeabi_dsub>
 80087de:	4632      	mov	r2, r6
 80087e0:	463b      	mov	r3, r7
 80087e2:	f7f7 fead 	bl	8000540 <__aeabi_dmul>
 80087e6:	a35c      	add	r3, pc, #368	@ (adr r3, 8008958 <atan+0x2f0>)
 80087e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ec:	f7f7 fcf0 	bl	80001d0 <__aeabi_dsub>
 80087f0:	4632      	mov	r2, r6
 80087f2:	463b      	mov	r3, r7
 80087f4:	f7f7 fea4 	bl	8000540 <__aeabi_dmul>
 80087f8:	a359      	add	r3, pc, #356	@ (adr r3, 8008960 <atan+0x2f8>)
 80087fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fe:	f7f7 fce7 	bl	80001d0 <__aeabi_dsub>
 8008802:	4632      	mov	r2, r6
 8008804:	463b      	mov	r3, r7
 8008806:	f7f7 fe9b 	bl	8000540 <__aeabi_dmul>
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	4640      	mov	r0, r8
 8008810:	4649      	mov	r1, r9
 8008812:	f7f7 fcdf 	bl	80001d4 <__adddf3>
 8008816:	4622      	mov	r2, r4
 8008818:	462b      	mov	r3, r5
 800881a:	f7f7 fe91 	bl	8000540 <__aeabi_dmul>
 800881e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	d148      	bne.n	80088ba <atan+0x252>
 8008828:	4620      	mov	r0, r4
 800882a:	4629      	mov	r1, r5
 800882c:	f7f7 fcd0 	bl	80001d0 <__aeabi_dsub>
 8008830:	e72f      	b.n	8008692 <atan+0x2a>
 8008832:	4b52      	ldr	r3, [pc, #328]	@ (800897c <atan+0x314>)
 8008834:	2200      	movs	r2, #0
 8008836:	4620      	mov	r0, r4
 8008838:	4629      	mov	r1, r5
 800883a:	f7f7 fcc9 	bl	80001d0 <__aeabi_dsub>
 800883e:	4b4f      	ldr	r3, [pc, #316]	@ (800897c <atan+0x314>)
 8008840:	4606      	mov	r6, r0
 8008842:	460f      	mov	r7, r1
 8008844:	2200      	movs	r2, #0
 8008846:	4620      	mov	r0, r4
 8008848:	4629      	mov	r1, r5
 800884a:	f7f7 fcc3 	bl	80001d4 <__adddf3>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	4630      	mov	r0, r6
 8008854:	4639      	mov	r1, r7
 8008856:	f7f7 ff9d 	bl	8000794 <__aeabi_ddiv>
 800885a:	f04f 0a01 	mov.w	sl, #1
 800885e:	4604      	mov	r4, r0
 8008860:	460d      	mov	r5, r1
 8008862:	e765      	b.n	8008730 <atan+0xc8>
 8008864:	4b47      	ldr	r3, [pc, #284]	@ (8008984 <atan+0x31c>)
 8008866:	429e      	cmp	r6, r3
 8008868:	d21c      	bcs.n	80088a4 <atan+0x23c>
 800886a:	4b47      	ldr	r3, [pc, #284]	@ (8008988 <atan+0x320>)
 800886c:	2200      	movs	r2, #0
 800886e:	4620      	mov	r0, r4
 8008870:	4629      	mov	r1, r5
 8008872:	f7f7 fcad 	bl	80001d0 <__aeabi_dsub>
 8008876:	4b44      	ldr	r3, [pc, #272]	@ (8008988 <atan+0x320>)
 8008878:	4606      	mov	r6, r0
 800887a:	460f      	mov	r7, r1
 800887c:	2200      	movs	r2, #0
 800887e:	4620      	mov	r0, r4
 8008880:	4629      	mov	r1, r5
 8008882:	f7f7 fe5d 	bl	8000540 <__aeabi_dmul>
 8008886:	4b3d      	ldr	r3, [pc, #244]	@ (800897c <atan+0x314>)
 8008888:	2200      	movs	r2, #0
 800888a:	f7f7 fca3 	bl	80001d4 <__adddf3>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4630      	mov	r0, r6
 8008894:	4639      	mov	r1, r7
 8008896:	f7f7 ff7d 	bl	8000794 <__aeabi_ddiv>
 800889a:	f04f 0a02 	mov.w	sl, #2
 800889e:	4604      	mov	r4, r0
 80088a0:	460d      	mov	r5, r1
 80088a2:	e745      	b.n	8008730 <atan+0xc8>
 80088a4:	4622      	mov	r2, r4
 80088a6:	462b      	mov	r3, r5
 80088a8:	4938      	ldr	r1, [pc, #224]	@ (800898c <atan+0x324>)
 80088aa:	2000      	movs	r0, #0
 80088ac:	f7f7 ff72 	bl	8000794 <__aeabi_ddiv>
 80088b0:	f04f 0a03 	mov.w	sl, #3
 80088b4:	4604      	mov	r4, r0
 80088b6:	460d      	mov	r5, r1
 80088b8:	e73a      	b.n	8008730 <atan+0xc8>
 80088ba:	4b35      	ldr	r3, [pc, #212]	@ (8008990 <atan+0x328>)
 80088bc:	4e35      	ldr	r6, [pc, #212]	@ (8008994 <atan+0x32c>)
 80088be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80088c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c6:	f7f7 fc83 	bl	80001d0 <__aeabi_dsub>
 80088ca:	4622      	mov	r2, r4
 80088cc:	462b      	mov	r3, r5
 80088ce:	f7f7 fc7f 	bl	80001d0 <__aeabi_dsub>
 80088d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	e9d6 0100 	ldrd	r0, r1, [r6]
 80088de:	f7f7 fc77 	bl	80001d0 <__aeabi_dsub>
 80088e2:	f1bb 0f00 	cmp.w	fp, #0
 80088e6:	4604      	mov	r4, r0
 80088e8:	460d      	mov	r5, r1
 80088ea:	f6bf aedc 	bge.w	80086a6 <atan+0x3e>
 80088ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80088f2:	461d      	mov	r5, r3
 80088f4:	e6d7      	b.n	80086a6 <atan+0x3e>
 80088f6:	a51c      	add	r5, pc, #112	@ (adr r5, 8008968 <atan+0x300>)
 80088f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80088fc:	e6d3      	b.n	80086a6 <atan+0x3e>
 80088fe:	bf00      	nop
 8008900:	54442d18 	.word	0x54442d18
 8008904:	3ff921fb 	.word	0x3ff921fb
 8008908:	8800759c 	.word	0x8800759c
 800890c:	7e37e43c 	.word	0x7e37e43c
 8008910:	e322da11 	.word	0xe322da11
 8008914:	3f90ad3a 	.word	0x3f90ad3a
 8008918:	24760deb 	.word	0x24760deb
 800891c:	3fa97b4b 	.word	0x3fa97b4b
 8008920:	a0d03d51 	.word	0xa0d03d51
 8008924:	3fb10d66 	.word	0x3fb10d66
 8008928:	c54c206e 	.word	0xc54c206e
 800892c:	3fb745cd 	.word	0x3fb745cd
 8008930:	920083ff 	.word	0x920083ff
 8008934:	3fc24924 	.word	0x3fc24924
 8008938:	5555550d 	.word	0x5555550d
 800893c:	3fd55555 	.word	0x3fd55555
 8008940:	2c6a6c2f 	.word	0x2c6a6c2f
 8008944:	bfa2b444 	.word	0xbfa2b444
 8008948:	52defd9a 	.word	0x52defd9a
 800894c:	3fadde2d 	.word	0x3fadde2d
 8008950:	af749a6d 	.word	0xaf749a6d
 8008954:	3fb3b0f2 	.word	0x3fb3b0f2
 8008958:	fe231671 	.word	0xfe231671
 800895c:	3fbc71c6 	.word	0x3fbc71c6
 8008960:	9998ebc4 	.word	0x9998ebc4
 8008964:	3fc99999 	.word	0x3fc99999
 8008968:	54442d18 	.word	0x54442d18
 800896c:	bff921fb 	.word	0xbff921fb
 8008970:	440fffff 	.word	0x440fffff
 8008974:	7ff00000 	.word	0x7ff00000
 8008978:	3fdbffff 	.word	0x3fdbffff
 800897c:	3ff00000 	.word	0x3ff00000
 8008980:	3ff2ffff 	.word	0x3ff2ffff
 8008984:	40038000 	.word	0x40038000
 8008988:	3ff80000 	.word	0x3ff80000
 800898c:	bff00000 	.word	0xbff00000
 8008990:	08008a18 	.word	0x08008a18
 8008994:	08008a38 	.word	0x08008a38

08008998 <fabs>:
 8008998:	ec51 0b10 	vmov	r0, r1, d0
 800899c:	4602      	mov	r2, r0
 800899e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80089a2:	ec43 2b10 	vmov	d0, r2, r3
 80089a6:	4770      	bx	lr

080089a8 <_init>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	bf00      	nop
 80089ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ae:	bc08      	pop	{r3}
 80089b0:	469e      	mov	lr, r3
 80089b2:	4770      	bx	lr

080089b4 <_fini>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	bf00      	nop
 80089b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ba:	bc08      	pop	{r3}
 80089bc:	469e      	mov	lr, r3
 80089be:	4770      	bx	lr
