
101_mpu6050_who_am_i.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08007094  08007094  00008094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070f0  080070f0  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080070f0  080070f0  000080f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070f8  080070f8  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070f8  080070f8  000080f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070fc  080070fc  000080fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007100  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009068  2**0
                  CONTENTS
 10 .bss          00000258  20000068  20000068  00009068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c0  200002c0  00009068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105cd  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021b4  00000000  00000000  00019665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  0001b820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c9e  00000000  00000000  0001c818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c13c  00000000  00000000  0001d4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001271e  00000000  00000000  000595f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfb75  00000000  00000000  0006bd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013b885  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bec  00000000  00000000  0013b8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  001404b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800707c 	.word	0x0800707c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800707c 	.word	0x0800707c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// This function re-routes the standard `printf` function to use the specified UART peripheral.
// It allows developers to print messages to a connected terminal or serial monitor for debugging.
int _write(int file, char *ptr, int len) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	68b9      	ldr	r1, [r7, #8]
 80005b2:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <_write+0x28>)
 80005b4:	f004 fe82 	bl	80052bc <HAL_UART_Transmit>
    return len;
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000120 	.word	0x20000120

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fc1a 	bl	8000e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f82c 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f952 	bl	800087c <MX_GPIO_Init>
  MX_TIM4_Init();
 80005d8:	f000 f8d8 	bl	800078c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80005dc:	f000 f924 	bl	8000828 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005e0:	f000 f8a6 	bl	8000730 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005e4:	f000 f880 	bl	80006e8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // Starts the TIM4 timer in interrupt mode, which triggers the `HAL_TIM_PeriodElapsedCallback` function periodically.
  HAL_TIM_Base_Start_IT(&htim4);
 80005e8:	480c      	ldr	r0, [pc, #48]	@ (800061c <main+0x54>)
 80005ea:	f004 f9f1 	bl	80049d0 <HAL_TIM_Base_Start_IT>
  // Calls the MPU6050 initialization function to configure the sensor.
  MPU6050_Init();
 80005ee:	f000 f9ed 	bl	80009cc <MPU6050_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(f_imu_send == 1){
 80005f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <main+0x58>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d1fb      	bne.n	80005f2 <main+0x2a>
		  who_am_i = Read_MPU6050_ID();
 80005fa:	f000 f9ad 	bl	8000958 <Read_MPU6050_ID>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <main+0x5c>)
 8000604:	701a      	strb	r2, [r3, #0]
		  printf("CHIP ID: %d \r\n", who_am_i);
 8000606:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <main+0x5c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4619      	mov	r1, r3
 800060c:	4806      	ldr	r0, [pc, #24]	@ (8000628 <main+0x60>)
 800060e:	f005 fec9 	bl	80063a4 <iprintf>
		  f_imu_send = 0;
 8000612:	4b03      	ldr	r3, [pc, #12]	@ (8000620 <main+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
	  if(f_imu_send == 1){
 8000618:	e7eb      	b.n	80005f2 <main+0x2a>
 800061a:	bf00      	nop
 800061c:	200000d8 	.word	0x200000d8
 8000620:	20000168 	.word	0x20000168
 8000624:	20000169 	.word	0x20000169
 8000628:	08007094 	.word	0x08007094

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	@ 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f005 ff07 	bl	800644e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <SystemClock_Config+0xb4>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <SystemClock_Config+0xb4>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <SystemClock_Config+0xb4>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <SystemClock_Config+0xb8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a1b      	ldr	r2, [pc, #108]	@ (80006e4 <SystemClock_Config+0xb8>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <SystemClock_Config+0xb8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f003 fcef 	bl	8004080 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006a8:	f000 f9b0 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80006b4:	23a0      	movs	r3, #160	@ 0xa0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 ff52 	bl	8004570 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006d2:	f000 f99b 	bl	8000a0c <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	@ 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	201e      	movs	r0, #30
 80006f2:	f000 fcf8 	bl	80010e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80006f6:	201e      	movs	r0, #30
 80006f8:	f000 fd11 	bl	800111e <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2100      	movs	r1, #0
 8000700:	2026      	movs	r0, #38	@ 0x26
 8000702:	f000 fcf0 	bl	80010e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000706:	2026      	movs	r0, #38	@ 0x26
 8000708:	f000 fd09 	bl	800111e <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2100      	movs	r1, #0
 8000710:	2020      	movs	r0, #32
 8000712:	f000 fce8 	bl	80010e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000716:	2020      	movs	r0, #32
 8000718:	f000 fd01 	bl	800111e <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800071c:	2200      	movs	r2, #0
 800071e:	2100      	movs	r1, #0
 8000720:	201f      	movs	r0, #31
 8000722:	f000 fce0 	bl	80010e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000726:	201f      	movs	r0, #31
 8000728:	f000 fcf9 	bl	800111e <HAL_NVIC_EnableIRQ>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000736:	4a13      	ldr	r2, [pc, #76]	@ (8000784 <MX_I2C1_Init+0x54>)
 8000738:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_I2C1_Init+0x50>)
 800073c:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <MX_I2C1_Init+0x58>)
 800073e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_I2C1_Init+0x50>)
 800074e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000752:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_I2C1_Init+0x50>)
 800076e:	f000 ff61 	bl	8001634 <HAL_I2C_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000778:	f000 f948 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000084 	.word	0x20000084
 8000784:	40005400 	.word	0x40005400
 8000788:	000186a0 	.word	0x000186a0

0800078c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a0:	463b      	mov	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000820 <MX_TIM4_Init+0x94>)
 80007aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000824 <MX_TIM4_Init+0x98>)
 80007ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <MX_TIM4_Init+0x94>)
 80007b0:	2263      	movs	r2, #99	@ 0x63
 80007b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <MX_TIM4_Init+0x94>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80007ba:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <MX_TIM4_Init+0x94>)
 80007bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c2:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <MX_TIM4_Init+0x94>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c8:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <MX_TIM4_Init+0x94>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007ce:	4814      	ldr	r0, [pc, #80]	@ (8000820 <MX_TIM4_Init+0x94>)
 80007d0:	f004 f8ae 	bl	8004930 <HAL_TIM_Base_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 f917 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	4619      	mov	r1, r3
 80007ea:	480d      	ldr	r0, [pc, #52]	@ (8000820 <MX_TIM4_Init+0x94>)
 80007ec:	f004 fa50 	bl	8004c90 <HAL_TIM_ConfigClockSource>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80007f6:	f000 f909 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	@ (8000820 <MX_TIM4_Init+0x94>)
 8000808:	f004 fc78 	bl	80050fc <HAL_TIMEx_MasterConfigSynchronization>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000812:	f000 f8fb 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000d8 	.word	0x200000d8
 8000824:	40000800 	.word	0x40000800

08000828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 800082e:	4a12      	ldr	r2, [pc, #72]	@ (8000878 <MX_USART2_UART_Init+0x50>)
 8000830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000832:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 8000834:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 8000860:	f004 fcdc 	bl	800521c <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086a:	f000 f8cf 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000120 	.word	0x20000120
 8000878:	40004400 	.word	0x40004400

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b20      	ldr	r3, [pc, #128]	@ (8000918 <MX_GPIO_Init+0x9c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a1f      	ldr	r2, [pc, #124]	@ (8000918 <MX_GPIO_Init+0x9c>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <MX_GPIO_Init+0x9c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_GPIO_Init+0x9c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a18      	ldr	r2, [pc, #96]	@ (8000918 <MX_GPIO_Init+0x9c>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <MX_GPIO_Init+0x9c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <MX_GPIO_Init+0x9c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a11      	ldr	r2, [pc, #68]	@ (8000918 <MX_GPIO_Init+0x9c>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_GPIO_Init+0x9c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80008ec:	480b      	ldr	r0, [pc, #44]	@ (800091c <MX_GPIO_Init+0xa0>)
 80008ee:	f000 fe6d 	bl	80015cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80008f2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80008f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	4619      	mov	r1, r3
 800090a:	4804      	ldr	r0, [pc, #16]	@ (800091c <MX_GPIO_Init+0xa0>)
 800090c:	f000 fcc2 	bl	8001294 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	40020c00 	.word	0x40020c00

08000920 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// This is the callback function that gets called automatically when a timer period elapses.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
    // Checks if the interrupt came from TIM4.
    if (htim->Instance == TIM4) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a07      	ldr	r2, [pc, #28]	@ (800094c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d107      	bne.n	8000942 <HAL_TIM_PeriodElapsedCallback+0x22>
        // Toggles a pin (PD12) on the board. This can be used as a visual indicator (e.g., an LED) or for debugging.
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000932:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000936:	4806      	ldr	r0, [pc, #24]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000938:	f000 fe61 	bl	80015fe <HAL_GPIO_TogglePin>
        // Sets the flag to 1, signaling the main loop to read and send IMU data.
        f_imu_send = 1;
 800093c:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
    }
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40000800 	.word	0x40000800
 8000950:	40020c00 	.word	0x40020c00
 8000954:	20000168 	.word	0x20000168

08000958 <Read_MPU6050_ID>:

// Function to read the MPU6050's WHO_AM_I register. This is for verifying the device.
// The return value seems to be a placeholder and doesn't return the actual register value.
uint8_t Read_MPU6050_ID() {
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af04      	add	r7, sp, #16
	// Reads the WHO_AM_I register using HAL's I2C memory read function.
	uint8_t reg = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	71fb      	strb	r3, [r7, #7]
	who_am_i =  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 100);
 8000962:	2364      	movs	r3, #100	@ 0x64
 8000964:	9302      	str	r3, [sp, #8]
 8000966:	2301      	movs	r3, #1
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	2301      	movs	r3, #1
 8000970:	2275      	movs	r2, #117	@ 0x75
 8000972:	21d0      	movs	r1, #208	@ 0xd0
 8000974:	4805      	ldr	r0, [pc, #20]	@ (800098c <Read_MPU6050_ID+0x34>)
 8000976:	f001 f8b5 	bl	8001ae4 <HAL_I2C_Mem_Read>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	4b04      	ldr	r3, [pc, #16]	@ (8000990 <Read_MPU6050_ID+0x38>)
 8000980:	701a      	strb	r2, [r3, #0]
	return reg;
 8000982:	79fb      	ldrb	r3, [r7, #7]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000084 	.word	0x20000084
 8000990:	20000169 	.word	0x20000169

08000994 <MPU6050_Write>:

// Wraps the HAL I2C Master Transmit function for a single register write.
void MPU6050_Write(uint8_t reg, uint8_t data) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af02      	add	r7, sp, #8
 800099a:	4603      	mov	r3, r0
 800099c:	460a      	mov	r2, r1
 800099e:	71fb      	strb	r3, [r7, #7]
 80009a0:	4613      	mov	r3, r2
 80009a2:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg, data};
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	733b      	strb	r3, [r7, #12]
 80009a8:	79bb      	ldrb	r3, [r7, #6]
 80009aa:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buffer, 2, 100);
 80009ac:	f107 020c 	add.w	r2, r7, #12
 80009b0:	2364      	movs	r3, #100	@ 0x64
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2302      	movs	r3, #2
 80009b6:	21d0      	movs	r1, #208	@ 0xd0
 80009b8:	4803      	ldr	r0, [pc, #12]	@ (80009c8 <MPU6050_Write+0x34>)
 80009ba:	f000 ff95 	bl	80018e8 <HAL_I2C_Master_Transmit>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000084 	.word	0x20000084

080009cc <MPU6050_Init>:
    HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, &reg, 1, 100);
    HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, data, length, 100);
}

// Initializes the MPU6050 sensor by writing to its configuration registers.
void MPU6050_Init(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
    // 1. Wakes up the sensor by writing 0x00 to the Power Management 1 register.
    MPU6050_Write(PWR_MGMT_1, 0x00);
 80009d0:	2100      	movs	r1, #0
 80009d2:	206b      	movs	r0, #107	@ 0x6b
 80009d4:	f7ff ffde 	bl	8000994 <MPU6050_Write>
    HAL_Delay(100);
 80009d8:	2064      	movs	r0, #100	@ 0x64
 80009da:	f000 fa85 	bl	8000ee8 <HAL_Delay>
    // 2. Configures the accelerometer full-scale range to ±2g by writing 0x00.
    MPU6050_Write(ACCEL_CONFIG, 0x00);
 80009de:	2100      	movs	r1, #0
 80009e0:	201c      	movs	r0, #28
 80009e2:	f7ff ffd7 	bl	8000994 <MPU6050_Write>
    HAL_Delay(10);
 80009e6:	200a      	movs	r0, #10
 80009e8:	f000 fa7e 	bl	8000ee8 <HAL_Delay>
    // 2. (commented out) Configures the gyroscope full-scale range to ±250°/s.
    // MPU6050_Write(0x1B, 0x00);
    // HAL_Delay(10);
    // 3. Sets the sample rate divider to 7, resulting in a sample rate of 1kHz / (1+7) = 125Hz.
    MPU6050_Write(SMPLRT_DIV, 0x07);
 80009ec:	2107      	movs	r1, #7
 80009ee:	2019      	movs	r0, #25
 80009f0:	f7ff ffd0 	bl	8000994 <MPU6050_Write>
    HAL_Delay(10);
 80009f4:	200a      	movs	r0, #10
 80009f6:	f000 fa77 	bl	8000ee8 <HAL_Delay>
    // 4. Configures the Digital Low-Pass Filter (DLPF) to a bandwidth of 44Hz.
    MPU6050_Write(CONFIG, 0x03);
 80009fa:	2103      	movs	r1, #3
 80009fc:	201a      	movs	r0, #26
 80009fe:	f7ff ffc9 	bl	8000994 <MPU6050_Write>
    HAL_Delay(10);
 8000a02:	200a      	movs	r0, #10
 8000a04:	f000 fa70 	bl	8000ee8 <HAL_Delay>
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <Error_Handler+0x8>

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a26:	4a0f      	ldr	r2, [pc, #60]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	4a08      	ldr	r2, [pc, #32]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <HAL_I2C_MspInit+0x84>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d12b      	bne.n	8000ae2 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a17      	ldr	r2, [pc, #92]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aa6:	23c0      	movs	r3, #192	@ 0xc0
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aaa:	2312      	movs	r3, #18
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <HAL_I2C_MspInit+0x8c>)
 8000ac2:	f000 fbe7 	bl	8001294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000ad0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	@ 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40005400 	.word	0x40005400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020400 	.word	0x40020400

08000af8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0b      	ldr	r2, [pc, #44]	@ (8000b34 <HAL_TIM_Base_MspInit+0x3c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d10d      	bne.n	8000b26 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <HAL_TIM_Base_MspInit+0x40>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	4a09      	ldr	r2, [pc, #36]	@ (8000b38 <HAL_TIM_Base_MspInit+0x40>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1a:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <HAL_TIM_Base_MspInit+0x40>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40000800 	.word	0x40000800
 8000b38:	40023800 	.word	0x40023800

08000b3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	@ 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	@ (8000bc0 <HAL_UART_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12b      	bne.n	8000bb6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a10      	ldr	r2, [pc, #64]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b96:	230c      	movs	r3, #12
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <HAL_UART_MspInit+0x8c>)
 8000bb2:	f000 fb6f 	bl	8001294 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	@ 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40004400 	.word	0x40004400
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <MemManage_Handler+0x4>

08000be4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c22:	f000 f941 	bl	8000ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c30:	4802      	ldr	r0, [pc, #8]	@ (8000c3c <TIM4_IRQHandler+0x10>)
 8000c32:	f003 ff3d 	bl	8004ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200000d8 	.word	0x200000d8

08000c40 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c44:	4802      	ldr	r0, [pc, #8]	@ (8000c50 <I2C1_EV_IRQHandler+0x10>)
 8000c46:	f001 f97f 	bl	8001f48 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000084 	.word	0x20000084

08000c54 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c58:	4802      	ldr	r0, [pc, #8]	@ (8000c64 <I2C1_ER_IRQHandler+0x10>)
 8000c5a:	f001 fae6 	bl	800222a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000084 	.word	0x20000084

08000c68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c6c:	4802      	ldr	r0, [pc, #8]	@ (8000c78 <USART2_IRQHandler+0x10>)
 8000c6e:	f004 fbb1 	bl	80053d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000120 	.word	0x20000120

08000c7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	e00a      	b.n	8000ca4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c8e:	f3af 8000 	nop.w
 8000c92:	4601      	mov	r1, r0
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	60ba      	str	r2, [r7, #8]
 8000c9a:	b2ca      	uxtb	r2, r1
 8000c9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbf0      	blt.n	8000c8e <_read+0x12>
  }

  return len;
 8000cac:	687b      	ldr	r3, [r7, #4]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cde:	605a      	str	r2, [r3, #4]
  return 0;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <_isatty>:

int _isatty(int file)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cf6:	2301      	movs	r3, #1
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d28:	4a14      	ldr	r2, [pc, #80]	@ (8000d7c <_sbrk+0x5c>)
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <_sbrk+0x60>)
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d34:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <_sbrk+0x64>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <_sbrk+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d207      	bcs.n	8000d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d50:	f005 fbcc 	bl	80064ec <__errno>
 8000d54:	4603      	mov	r3, r0
 8000d56:	220c      	movs	r2, #12
 8000d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e009      	b.n	8000d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d60:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d66:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <_sbrk+0x64>)
 8000d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20020000 	.word	0x20020000
 8000d80:	00000400 	.word	0x00000400
 8000d84:	2000016c 	.word	0x2000016c
 8000d88:	200002c0 	.word	0x200002c0

08000d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <SystemInit+0x20>)
 8000d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d96:	4a05      	ldr	r2, [pc, #20]	@ (8000dac <SystemInit+0x20>)
 8000d98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000db4:	f7ff ffea 	bl	8000d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db8:	480c      	ldr	r0, [pc, #48]	@ (8000dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dba:	490d      	ldr	r1, [pc, #52]	@ (8000df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dde:	f005 fb8b 	bl	80064f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de2:	f7ff fbf1 	bl	80005c8 <main>
  bx  lr    
 8000de6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000df4:	08007100 	.word	0x08007100
  ldr r2, =_sbss
 8000df8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dfc:	200002c0 	.word	0x200002c0

08000e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e08:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e44 <HAL_Init+0x40>)
 8000e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0a      	ldr	r2, [pc, #40]	@ (8000e44 <HAL_Init+0x40>)
 8000e1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e20:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a07      	ldr	r2, [pc, #28]	@ (8000e44 <HAL_Init+0x40>)
 8000e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 f94f 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e32:	200f      	movs	r0, #15
 8000e34:	f000 f808 	bl	8000e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e38:	f7ff fdee 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023c00 	.word	0x40023c00

08000e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_InitTick+0x54>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <HAL_InitTick+0x58>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f967 	bl	800113a <HAL_SYSTICK_Config>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00e      	b.n	8000e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d80a      	bhi.n	8000e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f000 f92f 	bl	80010e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e88:	4a06      	ldr	r2, [pc, #24]	@ (8000ea4 <HAL_InitTick+0x5c>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e000      	b.n	8000e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000170 	.word	0x20000170

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	@ (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000170 	.word	0x20000170

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff ffee 	bl	8000ed0 <HAL_GetTick>
 8000ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f00:	d005      	beq.n	8000f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <HAL_Delay+0x44>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0e:	bf00      	nop
 8000f10:	f7ff ffde 	bl	8000ed0 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d8f7      	bhi.n	8000f10 <HAL_Delay+0x28>
  {
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4907      	ldr	r1, [pc, #28]	@ (8000fcc <__NVIC_EnableIRQ+0x38>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	@ (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	@ (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	@ 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	@ 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f7ff ff8e 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff29 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff3e 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff8e 	bl	8001024 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5d 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff31 	bl	8000f94 <__NVIC_EnableIRQ>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffa2 	bl	800108c <SysTick_Config>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff feb6 	bl	8000ed0 <HAL_GetTick>
 8001164:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d008      	beq.n	8001184 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2280      	movs	r2, #128	@ 0x80
 8001176:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e052      	b.n	800122a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0216 	bic.w	r2, r2, #22
 8001192:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	695a      	ldr	r2, [r3, #20]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d103      	bne.n	80011b4 <HAL_DMA_Abort+0x62>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d007      	beq.n	80011c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0208 	bic.w	r2, r2, #8
 80011c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0201 	bic.w	r2, r2, #1
 80011d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011d4:	e013      	b.n	80011fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011d6:	f7ff fe7b 	bl	8000ed0 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	d90c      	bls.n	80011fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2220      	movs	r2, #32
 80011e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2203      	movs	r2, #3
 80011ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e015      	b.n	800122a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1e4      	bne.n	80011d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001210:	223f      	movs	r2, #63	@ 0x3f
 8001212:	409a      	lsls	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d004      	beq.n	8001250 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2280      	movs	r2, #128	@ 0x80
 800124a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e00c      	b.n	800126a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2205      	movs	r2, #5
 8001254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0201 	bic.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001284:	b2db      	uxtb	r3, r3
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	@ 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	e16b      	b.n	8001588 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012b0:	2201      	movs	r2, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	f040 815a 	bne.w	8001582 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d005      	beq.n	80012e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d130      	bne.n	8001348 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	2203      	movs	r2, #3
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68da      	ldr	r2, [r3, #12]
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800131c:	2201      	movs	r2, #1
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	f003 0201 	and.w	r2, r3, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b03      	cmp	r3, #3
 8001352:	d017      	beq.n	8001384 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d123      	bne.n	80013d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	08da      	lsrs	r2, r3, #3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3208      	adds	r2, #8
 8001398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	220f      	movs	r2, #15
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	691a      	ldr	r2, [r3, #16]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	08da      	lsrs	r2, r3, #3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3208      	adds	r2, #8
 80013d2:	69b9      	ldr	r1, [r7, #24]
 80013d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0203 	and.w	r2, r3, #3
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 80b4 	beq.w	8001582 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b60      	ldr	r3, [pc, #384]	@ (80015a0 <HAL_GPIO_Init+0x30c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	4a5f      	ldr	r2, [pc, #380]	@ (80015a0 <HAL_GPIO_Init+0x30c>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001428:	6453      	str	r3, [r2, #68]	@ 0x44
 800142a:	4b5d      	ldr	r3, [pc, #372]	@ (80015a0 <HAL_GPIO_Init+0x30c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001436:	4a5b      	ldr	r2, [pc, #364]	@ (80015a4 <HAL_GPIO_Init+0x310>)
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	3302      	adds	r3, #2
 800143e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	220f      	movs	r2, #15
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a52      	ldr	r2, [pc, #328]	@ (80015a8 <HAL_GPIO_Init+0x314>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d02b      	beq.n	80014ba <HAL_GPIO_Init+0x226>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a51      	ldr	r2, [pc, #324]	@ (80015ac <HAL_GPIO_Init+0x318>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d025      	beq.n	80014b6 <HAL_GPIO_Init+0x222>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a50      	ldr	r2, [pc, #320]	@ (80015b0 <HAL_GPIO_Init+0x31c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d01f      	beq.n	80014b2 <HAL_GPIO_Init+0x21e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4f      	ldr	r2, [pc, #316]	@ (80015b4 <HAL_GPIO_Init+0x320>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d019      	beq.n	80014ae <HAL_GPIO_Init+0x21a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4e      	ldr	r2, [pc, #312]	@ (80015b8 <HAL_GPIO_Init+0x324>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_GPIO_Init+0x216>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4d      	ldr	r2, [pc, #308]	@ (80015bc <HAL_GPIO_Init+0x328>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00d      	beq.n	80014a6 <HAL_GPIO_Init+0x212>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4c      	ldr	r2, [pc, #304]	@ (80015c0 <HAL_GPIO_Init+0x32c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d007      	beq.n	80014a2 <HAL_GPIO_Init+0x20e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4b      	ldr	r2, [pc, #300]	@ (80015c4 <HAL_GPIO_Init+0x330>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_GPIO_Init+0x20a>
 800149a:	2307      	movs	r3, #7
 800149c:	e00e      	b.n	80014bc <HAL_GPIO_Init+0x228>
 800149e:	2308      	movs	r3, #8
 80014a0:	e00c      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014a2:	2306      	movs	r3, #6
 80014a4:	e00a      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014a6:	2305      	movs	r3, #5
 80014a8:	e008      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014aa:	2304      	movs	r3, #4
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014ae:	2303      	movs	r3, #3
 80014b0:	e004      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e002      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014ba:	2300      	movs	r3, #0
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	f002 0203 	and.w	r2, r2, #3
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	4093      	lsls	r3, r2
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014cc:	4935      	ldr	r1, [pc, #212]	@ (80015a4 <HAL_GPIO_Init+0x310>)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014da:	4b3b      	ldr	r3, [pc, #236]	@ (80015c8 <HAL_GPIO_Init+0x334>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014fe:	4a32      	ldr	r2, [pc, #200]	@ (80015c8 <HAL_GPIO_Init+0x334>)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001504:	4b30      	ldr	r3, [pc, #192]	@ (80015c8 <HAL_GPIO_Init+0x334>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001528:	4a27      	ldr	r2, [pc, #156]	@ (80015c8 <HAL_GPIO_Init+0x334>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800152e:	4b26      	ldr	r3, [pc, #152]	@ (80015c8 <HAL_GPIO_Init+0x334>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001552:	4a1d      	ldr	r2, [pc, #116]	@ (80015c8 <HAL_GPIO_Init+0x334>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001558:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <HAL_GPIO_Init+0x334>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800157c:	4a12      	ldr	r2, [pc, #72]	@ (80015c8 <HAL_GPIO_Init+0x334>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	f67f ae90 	bls.w	80012b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3724      	adds	r7, #36	@ 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40013800 	.word	0x40013800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020400 	.word	0x40020400
 80015b0:	40020800 	.word	0x40020800
 80015b4:	40020c00 	.word	0x40020c00
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40021400 	.word	0x40021400
 80015c0:	40021800 	.word	0x40021800
 80015c4:	40021c00 	.word	0x40021c00
 80015c8:	40013c00 	.word	0x40013c00

080015cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	807b      	strh	r3, [r7, #2]
 80015d8:	4613      	mov	r3, r2
 80015da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015dc:	787b      	ldrb	r3, [r7, #1]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015e2:	887a      	ldrh	r2, [r7, #2]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015e8:	e003      	b.n	80015f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ea:	887b      	ldrh	r3, [r7, #2]
 80015ec:	041a      	lsls	r2, r3, #16
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	619a      	str	r2, [r3, #24]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015fe:	b480      	push	{r7}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001610:	887a      	ldrh	r2, [r7, #2]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4013      	ands	r3, r2
 8001616:	041a      	lsls	r2, r3, #16
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43d9      	mvns	r1, r3
 800161c:	887b      	ldrh	r3, [r7, #2]
 800161e:	400b      	ands	r3, r1
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	619a      	str	r2, [r3, #24]
}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e12b      	b.n	800189e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d106      	bne.n	8001660 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fa04 	bl	8000a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2224      	movs	r2, #36	@ 0x24
 8001664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0201 	bic.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001686:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001696:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001698:	f003 f922 	bl	80048e0 <HAL_RCC_GetPCLK1Freq>
 800169c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4a81      	ldr	r2, [pc, #516]	@ (80018a8 <HAL_I2C_Init+0x274>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d807      	bhi.n	80016b8 <HAL_I2C_Init+0x84>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4a80      	ldr	r2, [pc, #512]	@ (80018ac <HAL_I2C_Init+0x278>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	bf94      	ite	ls
 80016b0:	2301      	movls	r3, #1
 80016b2:	2300      	movhi	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	e006      	b.n	80016c6 <HAL_I2C_Init+0x92>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4a7d      	ldr	r2, [pc, #500]	@ (80018b0 <HAL_I2C_Init+0x27c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	bf94      	ite	ls
 80016c0:	2301      	movls	r3, #1
 80016c2:	2300      	movhi	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0e7      	b.n	800189e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4a78      	ldr	r2, [pc, #480]	@ (80018b4 <HAL_I2C_Init+0x280>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	0c9b      	lsrs	r3, r3, #18
 80016d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	4a6a      	ldr	r2, [pc, #424]	@ (80018a8 <HAL_I2C_Init+0x274>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d802      	bhi.n	8001708 <HAL_I2C_Init+0xd4>
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	3301      	adds	r3, #1
 8001706:	e009      	b.n	800171c <HAL_I2C_Init+0xe8>
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800170e:	fb02 f303 	mul.w	r3, r2, r3
 8001712:	4a69      	ldr	r2, [pc, #420]	@ (80018b8 <HAL_I2C_Init+0x284>)
 8001714:	fba2 2303 	umull	r2, r3, r2, r3
 8001718:	099b      	lsrs	r3, r3, #6
 800171a:	3301      	adds	r3, #1
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	430b      	orrs	r3, r1
 8001722:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800172e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	495c      	ldr	r1, [pc, #368]	@ (80018a8 <HAL_I2C_Init+0x274>)
 8001738:	428b      	cmp	r3, r1
 800173a:	d819      	bhi.n	8001770 <HAL_I2C_Init+0x13c>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1e59      	subs	r1, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	fbb1 f3f3 	udiv	r3, r1, r3
 800174a:	1c59      	adds	r1, r3, #1
 800174c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001750:	400b      	ands	r3, r1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00a      	beq.n	800176c <HAL_I2C_Init+0x138>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1e59      	subs	r1, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fbb1 f3f3 	udiv	r3, r1, r3
 8001764:	3301      	adds	r3, #1
 8001766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176a:	e051      	b.n	8001810 <HAL_I2C_Init+0x1dc>
 800176c:	2304      	movs	r3, #4
 800176e:	e04f      	b.n	8001810 <HAL_I2C_Init+0x1dc>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d111      	bne.n	800179c <HAL_I2C_Init+0x168>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1e58      	subs	r0, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6859      	ldr	r1, [r3, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	440b      	add	r3, r1
 8001786:	fbb0 f3f3 	udiv	r3, r0, r3
 800178a:	3301      	adds	r3, #1
 800178c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001790:	2b00      	cmp	r3, #0
 8001792:	bf0c      	ite	eq
 8001794:	2301      	moveq	r3, #1
 8001796:	2300      	movne	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	e012      	b.n	80017c2 <HAL_I2C_Init+0x18e>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1e58      	subs	r0, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6859      	ldr	r1, [r3, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	0099      	lsls	r1, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b2:	3301      	adds	r3, #1
 80017b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf0c      	ite	eq
 80017bc:	2301      	moveq	r3, #1
 80017be:	2300      	movne	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_I2C_Init+0x196>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e022      	b.n	8001810 <HAL_I2C_Init+0x1dc>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10e      	bne.n	80017f0 <HAL_I2C_Init+0x1bc>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1e58      	subs	r0, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6859      	ldr	r1, [r3, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	440b      	add	r3, r1
 80017e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e4:	3301      	adds	r3, #1
 80017e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017ee:	e00f      	b.n	8001810 <HAL_I2C_Init+0x1dc>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1e58      	subs	r0, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	0099      	lsls	r1, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	fbb0 f3f3 	udiv	r3, r0, r3
 8001806:	3301      	adds	r3, #1
 8001808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	6809      	ldr	r1, [r1, #0]
 8001814:	4313      	orrs	r3, r2
 8001816:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69da      	ldr	r2, [r3, #28]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800183e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6911      	ldr	r1, [r2, #16]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68d2      	ldr	r2, [r2, #12]
 800184a:	4311      	orrs	r1, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	430b      	orrs	r3, r1
 8001852:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2220      	movs	r2, #32
 800188a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	000186a0 	.word	0x000186a0
 80018ac:	001e847f 	.word	0x001e847f
 80018b0:	003d08ff 	.word	0x003d08ff
 80018b4:	431bde83 	.word	0x431bde83
 80018b8:	10624dd3 	.word	0x10624dd3

080018bc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ce:	2b80      	cmp	r3, #128	@ 0x80
 80018d0:	d103      	bne.n	80018da <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af02      	add	r7, sp, #8
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	461a      	mov	r2, r3
 80018f4:	460b      	mov	r3, r1
 80018f6:	817b      	strh	r3, [r7, #10]
 80018f8:	4613      	mov	r3, r2
 80018fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff fae8 	bl	8000ed0 <HAL_GetTick>
 8001900:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b20      	cmp	r3, #32
 800190c:	f040 80e0 	bne.w	8001ad0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2319      	movs	r3, #25
 8001916:	2201      	movs	r2, #1
 8001918:	4970      	ldr	r1, [pc, #448]	@ (8001adc <HAL_I2C_Master_Transmit+0x1f4>)
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f002 f92c 	bl	8003b78 <I2C_WaitOnFlagUntilTimeout>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001926:	2302      	movs	r3, #2
 8001928:	e0d3      	b.n	8001ad2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001930:	2b01      	cmp	r3, #1
 8001932:	d101      	bne.n	8001938 <HAL_I2C_Master_Transmit+0x50>
 8001934:	2302      	movs	r3, #2
 8001936:	e0cc      	b.n	8001ad2 <HAL_I2C_Master_Transmit+0x1ea>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b01      	cmp	r3, #1
 800194c:	d007      	beq.n	800195e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0201 	orr.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800196c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2221      	movs	r2, #33	@ 0x21
 8001972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2210      	movs	r2, #16
 800197a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	893a      	ldrh	r2, [r7, #8]
 800198e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001994:	b29a      	uxth	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4a50      	ldr	r2, [pc, #320]	@ (8001ae0 <HAL_I2C_Master_Transmit+0x1f8>)
 800199e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019a0:	8979      	ldrh	r1, [r7, #10]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	6a3a      	ldr	r2, [r7, #32]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f001 fed4 	bl	8003754 <I2C_MasterRequestWrite>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e08d      	b.n	8001ad2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019cc:	e066      	b.n	8001a9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	6a39      	ldr	r1, [r7, #32]
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f002 f9ea 	bl	8003dac <I2C_WaitOnTXEFlagUntilTimeout>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00d      	beq.n	80019fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d107      	bne.n	80019f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e06b      	b.n	8001ad2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fe:	781a      	ldrb	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d11b      	bne.n	8001a70 <HAL_I2C_Master_Transmit+0x188>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d017      	beq.n	8001a70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	6a39      	ldr	r1, [r7, #32]
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f002 f9e1 	bl	8003e3c <I2C_WaitOnBTFFlagUntilTimeout>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00d      	beq.n	8001a9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d107      	bne.n	8001a98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e01a      	b.n	8001ad2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d194      	bne.n	80019ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	e000      	b.n	8001ad2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ad0:	2302      	movs	r3, #2
  }
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	00100002 	.word	0x00100002
 8001ae0:	ffff0000 	.word	0xffff0000

08001ae4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	@ 0x30
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	4608      	mov	r0, r1
 8001aee:	4611      	mov	r1, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	4603      	mov	r3, r0
 8001af4:	817b      	strh	r3, [r7, #10]
 8001af6:	460b      	mov	r3, r1
 8001af8:	813b      	strh	r3, [r7, #8]
 8001afa:	4613      	mov	r3, r2
 8001afc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001afe:	f7ff f9e7 	bl	8000ed0 <HAL_GetTick>
 8001b02:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b20      	cmp	r3, #32
 8001b0e:	f040 8214 	bne.w	8001f3a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2319      	movs	r3, #25
 8001b18:	2201      	movs	r2, #1
 8001b1a:	497b      	ldr	r1, [pc, #492]	@ (8001d08 <HAL_I2C_Mem_Read+0x224>)
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f002 f82b 	bl	8003b78 <I2C_WaitOnFlagUntilTimeout>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e207      	b.n	8001f3c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_I2C_Mem_Read+0x56>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e200      	b.n	8001f3c <HAL_I2C_Mem_Read+0x458>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d007      	beq.n	8001b60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2222      	movs	r2, #34	@ 0x22
 8001b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2240      	movs	r2, #64	@ 0x40
 8001b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001b90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4a5b      	ldr	r2, [pc, #364]	@ (8001d0c <HAL_I2C_Mem_Read+0x228>)
 8001ba0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ba2:	88f8      	ldrh	r0, [r7, #6]
 8001ba4:	893a      	ldrh	r2, [r7, #8]
 8001ba6:	8979      	ldrh	r1, [r7, #10]
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f001 fe50 	bl	8003858 <I2C_RequestMemoryRead>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e1bc      	b.n	8001f3c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d113      	bne.n	8001bf2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bca:	2300      	movs	r3, #0
 8001bcc:	623b      	str	r3, [r7, #32]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	623b      	str	r3, [r7, #32]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	623b      	str	r3, [r7, #32]
 8001bde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e190      	b.n	8001f14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d11b      	bne.n	8001c32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e170      	b.n	8001f14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d11b      	bne.n	8001c72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	e150      	b.n	8001f14 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c88:	e144      	b.n	8001f14 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	f200 80f1 	bhi.w	8001e76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d123      	bne.n	8001ce4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f002 f945 	bl	8003f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e145      	b.n	8001f3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691a      	ldr	r2, [r3, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ce2:	e117      	b.n	8001f14 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d14e      	bne.n	8001d8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4906      	ldr	r1, [pc, #24]	@ (8001d10 <HAL_I2C_Mem_Read+0x22c>)
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f001 ff3e 	bl	8003b78 <I2C_WaitOnFlagUntilTimeout>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e11a      	b.n	8001f3c <HAL_I2C_Mem_Read+0x458>
 8001d06:	bf00      	nop
 8001d08:	00100002 	.word	0x00100002
 8001d0c:	ffff0000 	.word	0xffff0000
 8001d10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d88:	e0c4      	b.n	8001f14 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d90:	2200      	movs	r2, #0
 8001d92:	496c      	ldr	r1, [pc, #432]	@ (8001f44 <HAL_I2C_Mem_Read+0x460>)
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f001 feef 	bl	8003b78 <I2C_WaitOnFlagUntilTimeout>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0cb      	b.n	8001f3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001db2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691a      	ldr	r2, [r3, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	3b01      	subs	r3, #1
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dec:	2200      	movs	r2, #0
 8001dee:	4955      	ldr	r1, [pc, #340]	@ (8001f44 <HAL_I2C_Mem_Read+0x460>)
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f001 fec1 	bl	8003b78 <I2C_WaitOnFlagUntilTimeout>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e09d      	b.n	8001f3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e74:	e04e      	b.n	8001f14 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f002 f858 	bl	8003f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e058      	b.n	8001f3c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d124      	bne.n	8001f14 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d107      	bne.n	8001ee2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ee0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f47f aeb6 	bne.w	8001c8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2220      	movs	r2, #32
 8001f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	e000      	b.n	8001f3c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001f3a:	2302      	movs	r3, #2
  }
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3728      	adds	r7, #40	@ 0x28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	00010004 	.word	0x00010004

08001f48 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f60:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f68:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f70:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	2b10      	cmp	r3, #16
 8001f76:	d003      	beq.n	8001f80 <HAL_I2C_EV_IRQHandler+0x38>
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	2b40      	cmp	r3, #64	@ 0x40
 8001f7c:	f040 80c1 	bne.w	8002102 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10d      	bne.n	8001fb6 <HAL_I2C_EV_IRQHandler+0x6e>
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001fa0:	d003      	beq.n	8001faa <HAL_I2C_EV_IRQHandler+0x62>
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001fa8:	d101      	bne.n	8001fae <HAL_I2C_EV_IRQHandler+0x66>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_I2C_EV_IRQHandler+0x68>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	f000 8132 	beq.w	800221a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00c      	beq.n	8001fda <HAL_I2C_EV_IRQHandler+0x92>
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	0a5b      	lsrs	r3, r3, #9
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f002 f83b 	bl	8004048 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fd9f 	bl	8002b16 <I2C_Master_SB>
 8001fd8:	e092      	b.n	8002100 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	08db      	lsrs	r3, r3, #3
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <HAL_I2C_EV_IRQHandler+0xb2>
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	0a5b      	lsrs	r3, r3, #9
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fe15 	bl	8002c22 <I2C_Master_ADD10>
 8001ff8:	e082      	b.n	8002100 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	085b      	lsrs	r3, r3, #1
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_I2C_EV_IRQHandler+0xd2>
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	0a5b      	lsrs	r3, r3, #9
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fe2f 	bl	8002c76 <I2C_Master_ADDR>
 8002018:	e072      	b.n	8002100 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d03b      	beq.n	800209e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002030:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002034:	f000 80f3 	beq.w	800221e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	09db      	lsrs	r3, r3, #7
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00f      	beq.n	8002064 <HAL_I2C_EV_IRQHandler+0x11c>
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	0a9b      	lsrs	r3, r3, #10
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d009      	beq.n	8002064 <HAL_I2C_EV_IRQHandler+0x11c>
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d103      	bne.n	8002064 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f9f3 	bl	8002448 <I2C_MasterTransmit_TXE>
 8002062:	e04d      	b.n	8002100 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80d6 	beq.w	800221e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	0a5b      	lsrs	r3, r3, #9
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 80cf 	beq.w	800221e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002080:	7bbb      	ldrb	r3, [r7, #14]
 8002082:	2b21      	cmp	r3, #33	@ 0x21
 8002084:	d103      	bne.n	800208e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fa7a 	bl	8002580 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800208c:	e0c7      	b.n	800221e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	2b40      	cmp	r3, #64	@ 0x40
 8002092:	f040 80c4 	bne.w	800221e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fae8 	bl	800266c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800209c:	e0bf      	b.n	800221e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020ac:	f000 80b7 	beq.w	800221e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	099b      	lsrs	r3, r3, #6
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00f      	beq.n	80020dc <HAL_I2C_EV_IRQHandler+0x194>
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	0a9b      	lsrs	r3, r3, #10
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d009      	beq.n	80020dc <HAL_I2C_EV_IRQHandler+0x194>
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d103      	bne.n	80020dc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fb61 	bl	800279c <I2C_MasterReceive_RXNE>
 80020da:	e011      	b.n	8002100 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	089b      	lsrs	r3, r3, #2
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 809a 	beq.w	800221e <HAL_I2C_EV_IRQHandler+0x2d6>
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	0a5b      	lsrs	r3, r3, #9
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8093 	beq.w	800221e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 fc17 	bl	800292c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020fe:	e08e      	b.n	800221e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002100:	e08d      	b.n	800221e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	2b00      	cmp	r3, #0
 8002108:	d004      	beq.n	8002114 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	e007      	b.n	8002124 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	085b      	lsrs	r3, r3, #1
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d012      	beq.n	8002156 <HAL_I2C_EV_IRQHandler+0x20e>
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	0a5b      	lsrs	r3, r3, #9
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00c      	beq.n	8002156 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800214c:	69b9      	ldr	r1, [r7, #24]
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 ffe0 	bl	8003114 <I2C_Slave_ADDR>
 8002154:	e066      	b.n	8002224 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_I2C_EV_IRQHandler+0x22e>
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	0a5b      	lsrs	r3, r3, #9
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f001 f81a 	bl	80031a8 <I2C_Slave_STOPF>
 8002174:	e056      	b.n	8002224 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002176:	7bbb      	ldrb	r3, [r7, #14]
 8002178:	2b21      	cmp	r3, #33	@ 0x21
 800217a:	d002      	beq.n	8002182 <HAL_I2C_EV_IRQHandler+0x23a>
 800217c:	7bbb      	ldrb	r3, [r7, #14]
 800217e:	2b29      	cmp	r3, #41	@ 0x29
 8002180:	d125      	bne.n	80021ce <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	09db      	lsrs	r3, r3, #7
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00f      	beq.n	80021ae <HAL_I2C_EV_IRQHandler+0x266>
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	0a9b      	lsrs	r3, r3, #10
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_I2C_EV_IRQHandler+0x266>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d103      	bne.n	80021ae <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fef6 	bl	8002f98 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021ac:	e039      	b.n	8002222 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d033      	beq.n	8002222 <HAL_I2C_EV_IRQHandler+0x2da>
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	0a5b      	lsrs	r3, r3, #9
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d02d      	beq.n	8002222 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 ff23 	bl	8003012 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021cc:	e029      	b.n	8002222 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	099b      	lsrs	r3, r3, #6
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00f      	beq.n	80021fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	0a9b      	lsrs	r3, r3, #10
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d103      	bne.n	80021fa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 ff2e 	bl	8003054 <I2C_SlaveReceive_RXNE>
 80021f8:	e014      	b.n	8002224 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00e      	beq.n	8002224 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	0a5b      	lsrs	r3, r3, #9
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 ff5c 	bl	80030d0 <I2C_SlaveReceive_BTF>
 8002218:	e004      	b.n	8002224 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800221a:	bf00      	nop
 800221c:	e002      	b.n	8002224 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800221e:	bf00      	nop
 8002220:	e000      	b.n	8002224 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002222:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002224:	3720      	adds	r7, #32
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b08a      	sub	sp, #40	@ 0x28
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800224c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00e      	beq.n	8002278 <HAL_I2C_ER_IRQHandler+0x4e>
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d008      	beq.n	8002278 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002276:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	0a5b      	lsrs	r3, r3, #9
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00e      	beq.n	80022a2 <HAL_I2C_ER_IRQHandler+0x78>
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002292:	f043 0302 	orr.w	r3, r3, #2
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80022a0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	0a9b      	lsrs	r3, r3, #10
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d03f      	beq.n	800232e <HAL_I2C_ER_IRQHandler+0x104>
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d039      	beq.n	800232e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80022ba:	7efb      	ldrb	r3, [r7, #27]
 80022bc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022cc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80022d4:	7ebb      	ldrb	r3, [r7, #26]
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d112      	bne.n	8002300 <HAL_I2C_ER_IRQHandler+0xd6>
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10f      	bne.n	8002300 <HAL_I2C_ER_IRQHandler+0xd6>
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	2b21      	cmp	r3, #33	@ 0x21
 80022e4:	d008      	beq.n	80022f8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80022e6:	7cfb      	ldrb	r3, [r7, #19]
 80022e8:	2b29      	cmp	r3, #41	@ 0x29
 80022ea:	d005      	beq.n	80022f8 <HAL_I2C_ER_IRQHandler+0xce>
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	2b28      	cmp	r3, #40	@ 0x28
 80022f0:	d106      	bne.n	8002300 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b21      	cmp	r3, #33	@ 0x21
 80022f6:	d103      	bne.n	8002300 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f001 f885 	bl	8003408 <I2C_Slave_AF>
 80022fe:	e016      	b.n	800232e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002308:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002312:	7efb      	ldrb	r3, [r7, #27]
 8002314:	2b10      	cmp	r3, #16
 8002316:	d002      	beq.n	800231e <HAL_I2C_ER_IRQHandler+0xf4>
 8002318:	7efb      	ldrb	r3, [r7, #27]
 800231a:	2b40      	cmp	r3, #64	@ 0x40
 800231c:	d107      	bne.n	800232e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800232c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	0adb      	lsrs	r3, r3, #11
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00e      	beq.n	8002358 <HAL_I2C_ER_IRQHandler+0x12e>
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	f043 0308 	orr.w	r3, r3, #8
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002356:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f001 f8c0 	bl	80034f0 <I2C_ITError>
  }
}
 8002370:	bf00      	nop
 8002372:	3728      	adds	r7, #40	@ 0x28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	70fb      	strb	r3, [r7, #3]
 80023d4:	4613      	mov	r3, r2
 80023d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002456:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800245e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002464:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246a:	2b00      	cmp	r3, #0
 800246c:	d150      	bne.n	8002510 <I2C_MasterTransmit_TXE+0xc8>
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	2b21      	cmp	r3, #33	@ 0x21
 8002472:	d14d      	bne.n	8002510 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b08      	cmp	r3, #8
 8002478:	d01d      	beq.n	80024b6 <I2C_MasterTransmit_TXE+0x6e>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b20      	cmp	r3, #32
 800247e:	d01a      	beq.n	80024b6 <I2C_MasterTransmit_TXE+0x6e>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002486:	d016      	beq.n	80024b6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002496:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2211      	movs	r2, #17
 800249c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2220      	movs	r2, #32
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff ff62 	bl	8002378 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024b4:	e060      	b.n	8002578 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80024c4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b40      	cmp	r3, #64	@ 0x40
 80024ee:	d107      	bne.n	8002500 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ff7d 	bl	80023f8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024fe:	e03b      	b.n	8002578 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff35 	bl	8002378 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800250e:	e033      	b.n	8002578 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b21      	cmp	r3, #33	@ 0x21
 8002514:	d005      	beq.n	8002522 <I2C_MasterTransmit_TXE+0xda>
 8002516:	7bbb      	ldrb	r3, [r7, #14]
 8002518:	2b40      	cmp	r3, #64	@ 0x40
 800251a:	d12d      	bne.n	8002578 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2b22      	cmp	r3, #34	@ 0x22
 8002520:	d12a      	bne.n	8002578 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d108      	bne.n	800253e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800253a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800253c:	e01c      	b.n	8002578 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b40      	cmp	r3, #64	@ 0x40
 8002548:	d103      	bne.n	8002552 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f88e 	bl	800266c <I2C_MemoryTransmit_TXE_BTF>
}
 8002550:	e012      	b.n	8002578 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	781a      	ldrb	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002576:	e7ff      	b.n	8002578 <I2C_MasterTransmit_TXE+0x130>
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b21      	cmp	r3, #33	@ 0x21
 8002598:	d164      	bne.n	8002664 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d012      	beq.n	80025ca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	781a      	ldrb	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80025c8:	e04c      	b.n	8002664 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d01d      	beq.n	800260c <I2C_MasterTransmit_BTF+0x8c>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d01a      	beq.n	800260c <I2C_MasterTransmit_BTF+0x8c>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025dc:	d016      	beq.n	800260c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025ec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2211      	movs	r2, #17
 80025f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff feb7 	bl	8002378 <HAL_I2C_MasterTxCpltCallback>
}
 800260a:	e02b      	b.n	8002664 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800261a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800262a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2220      	movs	r2, #32
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b40      	cmp	r3, #64	@ 0x40
 8002644:	d107      	bne.n	8002656 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff fed2 	bl	80023f8 <HAL_I2C_MemTxCpltCallback>
}
 8002654:	e006      	b.n	8002664 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fe8a 	bl	8002378 <HAL_I2C_MasterTxCpltCallback>
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800267a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002680:	2b00      	cmp	r3, #0
 8002682:	d11d      	bne.n	80026c0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002688:	2b01      	cmp	r3, #1
 800268a:	d10b      	bne.n	80026a4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002690:	b2da      	uxtb	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800269c:	1c9a      	adds	r2, r3, #2
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80026a2:	e077      	b.n	8002794 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	121b      	asrs	r3, r3, #8
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80026be:	e069      	b.n	8002794 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d10b      	bne.n	80026e0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80026de:	e059      	b.n	8002794 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d152      	bne.n	800278e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2b22      	cmp	r3, #34	@ 0x22
 80026ec:	d10d      	bne.n	800270a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026fc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002708:	e044      	b.n	8002794 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d015      	beq.n	8002740 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	2b21      	cmp	r3, #33	@ 0x21
 8002718:	d112      	bne.n	8002740 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	781a      	ldrb	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800273e:	e029      	b.n	8002794 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d124      	bne.n	8002794 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	2b21      	cmp	r3, #33	@ 0x21
 800274e:	d121      	bne.n	8002794 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800275e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800276e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2220      	movs	r2, #32
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff fe36 	bl	80023f8 <HAL_I2C_MemTxCpltCallback>
}
 800278c:	e002      	b.n	8002794 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff f894 	bl	80018bc <I2C_Flush_DR>
}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b22      	cmp	r3, #34	@ 0x22
 80027ae:	f040 80b9 	bne.w	8002924 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027bc:	b29b      	uxth	r3, r3
 80027be:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d921      	bls.n	800280a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	f040 8096 	bne.w	8002924 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002806:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002808:	e08c      	b.n	8002924 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280e:	2b02      	cmp	r3, #2
 8002810:	d07f      	beq.n	8002912 <I2C_MasterReceive_RXNE+0x176>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d002      	beq.n	800281e <I2C_MasterReceive_RXNE+0x82>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d179      	bne.n	8002912 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f001 fb54 	bl	8003ecc <I2C_WaitOnSTOPRequestThroughIT>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d14c      	bne.n	80028c4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002838:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002848:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b40      	cmp	r3, #64	@ 0x40
 8002882:	d10a      	bne.n	800289a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff fdba 	bl	800240c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002898:	e044      	b.n	8002924 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d002      	beq.n	80028ae <I2C_MasterReceive_RXNE+0x112>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d103      	bne.n	80028b6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80028b4:	e002      	b.n	80028bc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2212      	movs	r2, #18
 80028ba:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff fd65 	bl	800238c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028c2:	e02f      	b.n	8002924 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80028d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff fd88 	bl	8002420 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002910:	e008      	b.n	8002924 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002920:	605a      	str	r2, [r3, #4]
}
 8002922:	e7ff      	b.n	8002924 <I2C_MasterReceive_RXNE+0x188>
 8002924:	bf00      	nop
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002938:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293e:	b29b      	uxth	r3, r3
 8002940:	2b04      	cmp	r3, #4
 8002942:	d11b      	bne.n	800297c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002952:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}

/**
  * @brief  Handle SB flag for Master
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 800297a:	e0c8      	b.n	8002b0e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b03      	cmp	r3, #3
 8002984:	d129      	bne.n	80029da <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002994:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b04      	cmp	r3, #4
 800299a:	d00a      	beq.n	80029b2 <I2C_MasterReceive_BTF+0x86>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d007      	beq.n	80029b2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029b0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 80029d8:	e099      	b.n	8002b0e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	f040 8081 	bne.w	8002ae8 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d002      	beq.n	80029f2 <I2C_MasterReceive_BTF+0xc6>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	d108      	bne.n	8002a04 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e019      	b.n	8002a38 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d002      	beq.n	8002a10 <I2C_MasterReceive_BTF+0xe4>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d108      	bne.n	8002a22 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	e00a      	b.n	8002a38 <I2C_MasterReceive_BTF+0x10c>
    else
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d007      	beq.n	8002a38 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a36:	601a      	str	r2, [r3, #0]

 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691a      	ldr	r2, [r3, #16]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]

 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	625a      	str	r2, [r3, #36]	@ 0x24

 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	701a      	strb	r2, [r3, #0]

 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	625a      	str	r2, [r3, #36]	@ 0x24

 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    {
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002a92:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b40      	cmp	r3, #64	@ 0x40
 8002aa6:	d10a      	bne.n	8002abe <I2C_MasterReceive_BTF+0x192>
#else
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	631a      	str	r2, [r3, #48]	@ 0x30
    {
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff fca8 	bl	800240c <HAL_I2C_MemRxCpltCallback>
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8002abc:	e027      	b.n	8002b0e <I2C_MasterReceive_BTF+0x1e2>
      }
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      else
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d002      	beq.n	8002ad2 <I2C_MasterReceive_BTF+0x1a6>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	d103      	bne.n	8002ada <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ad8:	e002      	b.n	8002ae0 <I2C_MasterReceive_BTF+0x1b4>
#else
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2212      	movs	r2, #18
 8002ade:	631a      	str	r2, [r3, #48]	@ 0x30
  else
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff fc53 	bl	800238c <HAL_I2C_MasterRxCpltCallback>
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8002ae6:	e012      	b.n	8002b0e <I2C_MasterReceive_BTF+0x1e2>

 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]
  }
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	625a      	str	r2, [r3, #36]	@ 0x24
/**
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <I2C_Master_SB>:
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
  {
    if (hi2c->EventCount == 0U)
    {
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
      /* Send slave address */
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b40      	cmp	r3, #64	@ 0x40
 8002b28:	d117      	bne.n	8002b5a <I2C_Master_SB+0x44>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
    }
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <I2C_Master_SB+0x30>
    else
    {
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b42:	611a      	str	r2, [r3, #16]
  }
}

/**
  * @brief  Handle ADD10 flag for Master
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8002b44:	e067      	b.n	8002c16 <I2C_Master_SB+0x100>
  {
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	611a      	str	r2, [r3, #16]
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8002b58:	e05d      	b.n	8002c16 <I2C_Master_SB+0x100>
      {
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b62:	d133      	bne.n	8002bcc <I2C_Master_SB+0xb6>
      else
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b21      	cmp	r3, #33	@ 0x21
 8002b6e:	d109      	bne.n	8002b84 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b80:	611a      	str	r2, [r3, #16]
 8002b82:	e008      	b.n	8002b96 <I2C_Master_SB+0x80>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	611a      	str	r2, [r3, #16]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d004      	beq.n	8002ba8 <I2C_Master_SB+0x92>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d108      	bne.n	8002bba <I2C_Master_SB+0xa4>
      }
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d032      	beq.n	8002c16 <I2C_Master_SB+0x100>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d02d      	beq.n	8002c16 <I2C_Master_SB+0x100>
    {
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bc8:	605a      	str	r2, [r3, #4]
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8002bca:	e024      	b.n	8002c16 <I2C_Master_SB+0x100>
      }
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10e      	bne.n	8002bf2 <I2C_Master_SB+0xdc>
        /* Send header of slave address */
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	11db      	asrs	r3, r3, #7
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f003 0306 	and.w	r3, r3, #6
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f063 030f 	orn	r3, r3, #15
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	611a      	str	r2, [r3, #16]
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8002bf0:	e011      	b.n	8002c16 <I2C_Master_SB+0x100>
      }
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d10d      	bne.n	8002c16 <I2C_Master_SB+0x100>
        /* Do nothing */
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	11db      	asrs	r3, r3, #7
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f003 0306 	and.w	r3, r3, #6
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	f063 030e 	orn	r3, r3, #14
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	611a      	str	r2, [r3, #16]
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <I2C_Master_ADD10>:
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
  {
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	611a      	str	r2, [r3, #16]
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d004      	beq.n	8002c48 <I2C_Master_ADD10+0x26>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d108      	bne.n	8002c5a <I2C_Master_ADD10+0x38>
  }
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00c      	beq.n	8002c6a <I2C_Master_ADD10+0x48>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <I2C_Master_ADD10+0x48>
}

/**
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c68:	605a      	str	r2, [r3, #4]
  * @brief  Handle ADDR flag for Master
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <I2C_Master_ADDR>:
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002c76:	b480      	push	{r7}
 8002c78:	b091      	sub	sp, #68	@ 0x44
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  {
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	637b      	str	r3, [r7, #52]	@ 0x34
    {
      /* Clear ADDR flag */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b22      	cmp	r3, #34	@ 0x22
 8002c9e:	f040 8169 	bne.w	8002f74 <I2C_Master_ADDR+0x2fe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    }
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10f      	bne.n	8002cca <I2C_Master_ADDR+0x54>
 8002caa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002cae:	2b40      	cmp	r3, #64	@ 0x40
 8002cb0:	d10b      	bne.n	8002cca <I2C_Master_ADDR+0x54>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
    {
      /* Clear ADDR flag */
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc8:	e160      	b.n	8002f8c <I2C_Master_ADDR+0x316>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d11d      	bne.n	8002d0e <I2C_Master_ADDR+0x98>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002cda:	d118      	bne.n	8002d0e <I2C_Master_ADDR+0x98>
      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);

 8002cdc:	2300      	movs	r3, #0
 8002cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      hi2c->EventCount++;
    }
    else
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d00:	601a      	str	r2, [r3, #0]
    {
      if (hi2c->XferCount == 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d0c:	e13e      	b.n	8002f8c <I2C_Master_ADDR+0x316>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d113      	bne.n	8002d40 <I2C_Master_ADDR+0xca>
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
      }
 8002d18:	2300      	movs	r3, #0
 8002d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
      else if (hi2c->XferCount == 1U)
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e115      	b.n	8002f6c <I2C_Master_ADDR+0x2f6>
        {
          /* Disable Acknowledge */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	f040 808a 	bne.w	8002e60 <I2C_Master_ADDR+0x1ea>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);

 8002d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d4e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d52:	d137      	bne.n	8002dc4 <I2C_Master_ADDR+0x14e>
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
          {
            /* Disable Acknowledge */
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d62:	601a      	str	r2, [r3, #0]
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);

 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d72:	d113      	bne.n	8002d9c <I2C_Master_ADDR+0x126>
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
          }
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d82:	601a      	str	r2, [r3, #0]
          else
          {
            /* Clear ADDR flag */
 8002d84:	2300      	movs	r3, #0
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	e0e7      	b.n	8002f6c <I2C_Master_ADDR+0x2f6>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
          }
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	623b      	str	r3, [r7, #32]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	623b      	str	r3, [r7, #32]
 8002db0:	6a3b      	ldr	r3, [r7, #32]
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e0d3      	b.n	8002f6c <I2C_Master_ADDR+0x2f6>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
          {
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d02e      	beq.n	8002e28 <I2C_Master_ADDR+0x1b2>
 8002dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d02b      	beq.n	8002e28 <I2C_Master_ADDR+0x1b2>
            /* Disable Acknowledge */
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd2:	2b12      	cmp	r3, #18
 8002dd4:	d102      	bne.n	8002ddc <I2C_Master_ADDR+0x166>
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d125      	bne.n	8002e28 <I2C_Master_ADDR+0x1b2>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
          }
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d00e      	beq.n	8002e00 <I2C_Master_ADDR+0x18a>
 8002de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d00b      	beq.n	8002e00 <I2C_Master_ADDR+0x18a>
 8002de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d008      	beq.n	8002e00 <I2C_Master_ADDR+0x18a>
          else
          {
            /* Enable Acknowledge */
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	e007      	b.n	8002e10 <I2C_Master_ADDR+0x19a>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e0e:	601a      	str	r2, [r3, #0]
        }
        else
        {
          /* Disable Acknowledge */
 8002e10:	2300      	movs	r3, #0
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	e0a1      	b.n	8002f6c <I2C_Master_ADDR+0x2f6>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e36:	601a      	str	r2, [r3, #0]
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
        }
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	69bb      	ldr	r3, [r7, #24]
      }
      else if (hi2c->XferCount == 2U)
      {
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	e085      	b.n	8002f6c <I2C_Master_ADDR+0x2f6>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
        {
          /* Disable Acknowledge */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d14d      	bne.n	8002f06 <I2C_Master_ADDR+0x290>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);

 8002e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d016      	beq.n	8002e9e <I2C_Master_ADDR+0x228>
 8002e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d013      	beq.n	8002e9e <I2C_Master_ADDR+0x228>
 8002e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e78:	2b10      	cmp	r3, #16
 8002e7a:	d010      	beq.n	8002e9e <I2C_Master_ADDR+0x228>
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
        }
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e8a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Enable Acknowledge */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e007      	b.n	8002eae <I2C_Master_ADDR+0x238>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
        {
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002eac:	601a      	str	r2, [r3, #0]
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
        }
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ebc:	d117      	bne.n	8002eee <I2C_Master_ADDR+0x278>
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ec4:	d00b      	beq.n	8002ede <I2C_Master_ADDR+0x268>
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d008      	beq.n	8002ede <I2C_Master_ADDR+0x268>
 8002ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d005      	beq.n	8002ede <I2C_Master_ADDR+0x268>
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed4:	2b10      	cmp	r3, #16
 8002ed6:	d002      	beq.n	8002ede <I2C_Master_ADDR+0x268>
 8002ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d107      	bne.n	8002eee <I2C_Master_ADDR+0x278>

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002eec:	605a      	str	r2, [r3, #4]
      }
      else
      {
        /* Enable Acknowledge */
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	e032      	b.n	8002f6c <I2C_Master_ADDR+0x2f6>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
        {
          /* Enable Last DMA bit */
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f14:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
        }
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f24:	d117      	bne.n	8002f56 <I2C_Master_ADDR+0x2e0>
 8002f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f2c:	d00b      	beq.n	8002f46 <I2C_Master_ADDR+0x2d0>
 8002f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d008      	beq.n	8002f46 <I2C_Master_ADDR+0x2d0>
 8002f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d005      	beq.n	8002f46 <I2C_Master_ADDR+0x2d0>
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d002      	beq.n	8002f46 <I2C_Master_ADDR+0x2d0>
 8002f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d107      	bne.n	8002f56 <I2C_Master_ADDR+0x2e0>

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f54:	605a      	str	r2, [r3, #4]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	693b      	ldr	r3, [r7, #16]
    }
  }
  else
  {
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	651a      	str	r2, [r3, #80]	@ 0x50
  }
}

/**
  * @brief  Handle TXE flag for Slave
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8002f72:	e00b      	b.n	8002f8c <I2C_Master_ADDR+0x316>
/**
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8002f8a:	e7ff      	b.n	8002f8c <I2C_Master_ADDR+0x316>
 8002f8c:	bf00      	nop
 8002f8e:	3744      	adds	r7, #68	@ 0x44
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <I2C_SlaveTransmit_TXE>:
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;

  if (hi2c->XferCount != 0U)
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  {
    /* Write data to DR */
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa6:	73fb      	strb	r3, [r7, #15]
    hi2c->Instance->DR = *hi2c->pBuffPtr;

 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d02b      	beq.n	800300a <I2C_SlaveTransmit_TXE+0x72>
    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;

 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb6:	781a      	ldrb	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	611a      	str	r2, [r3, #16]
    /* Update counter */
    hi2c->XferCount--;

 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	625a      	str	r2, [r3, #36]	@ 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
    {
      /* Last Byte is received, disable Interrupt */
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);

 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d114      	bne.n	800300a <I2C_SlaveTransmit_TXE+0x72>
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b29      	cmp	r3, #41	@ 0x29
 8002fe4:	d111      	bne.n	800300a <I2C_SlaveTransmit_TXE+0x72>
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ff4:	605a      	str	r2, [r3, #4]

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2221      	movs	r2, #33	@ 0x21
 8002ffa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->SlaveTxCpltCallback(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2228      	movs	r2, #40	@ 0x28
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff f9cb 	bl	80023a0 <HAL_I2C_SlaveTxCpltCallback>

/**
  * @brief  Handle BTF flag for Slave transmitter
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <I2C_SlaveTransmit_BTF>:
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]

 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d011      	beq.n	8003048 <I2C_SlaveTransmit_BTF+0x36>
    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;

 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	781a      	ldrb	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	611a      	str	r2, [r3, #16]
    /* Update counter */
    hi2c->XferCount--;
  }
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	625a      	str	r2, [r3, #36]	@ 0x24
}

/**
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	855a      	strh	r2, [r3, #42]	@ 0x2a
  * @brief  Handle RXNE flag for Slave
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <I2C_SlaveReceive_RXNE>:
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;

  if (hi2c->XferCount != 0U)
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  {
    /* Read data from DR */
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003062:	73fb      	strb	r3, [r7, #15]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;

 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d02c      	beq.n	80030c8 <I2C_SlaveReceive_RXNE+0x74>
    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;

 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	701a      	strb	r2, [r3, #0]
    /* Update counter */
    hi2c->XferCount--;

 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	625a      	str	r2, [r3, #36]	@ 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
    {
      /* Last Byte is received, disable Interrupt */
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	855a      	strh	r2, [r3, #42]	@ 0x2a
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);

 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d114      	bne.n	80030c8 <I2C_SlaveReceive_RXNE+0x74>
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80030a2:	d111      	bne.n	80030c8 <I2C_SlaveReceive_RXNE+0x74>
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030b2:	605a      	str	r2, [r3, #4]

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2222      	movs	r2, #34	@ 0x22
 80030b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->SlaveRxCpltCallback(hi2c);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2228      	movs	r2, #40	@ 0x28
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff f976 	bl	80023b4 <HAL_I2C_SlaveRxCpltCallback>

/**
  * @brief  Handle BTF flag for Slave receiver
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <I2C_SlaveReceive_BTF>:
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d012      	beq.n	8003108 <I2C_SlaveReceive_BTF+0x38>
    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;

 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	701a      	strb	r2, [r3, #0]
    /* Update counter */
    hi2c->XferCount--;
  }
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	625a      	str	r2, [r3, #36]	@ 0x24
}

/**
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	855a      	strh	r2, [r3, #42]	@ 0x2a
  * @brief  Handle ADD flag for Slave
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <I2C_Slave_ADDR>:
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  {
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));

 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800312e:	2b28      	cmp	r3, #40	@ 0x28
 8003130:	d127      	bne.n	8003182 <I2C_Slave_ADDR+0x6e>
    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
    {
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003140:	605a      	str	r2, [r3, #4]
      TransferDirection = I2C_DIRECTION_TRANSMIT;
    }

 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <I2C_Slave_ADDR+0x3e>
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
    {
 800314e:	2301      	movs	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
    }
    else
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	09db      	lsrs	r3, r3, #7
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d103      	bne.n	8003166 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	81bb      	strh	r3, [r7, #12]
 8003164:	e002      	b.n	800316c <I2C_Slave_ADDR+0x58>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	81bb      	strh	r3, [r7, #12]

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
 8003174:	89ba      	ldrh	r2, [r7, #12]
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	4619      	mov	r1, r3
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff f924 	bl	80023c8 <HAL_I2C_AddrCallback>
  }
}

/**
  * @brief  Handle STOPF flag for Slave
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8003180:	e00e      	b.n	80031a0 <I2C_Slave_ADDR+0x8c>
  }
 8003182:	2300      	movs	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	68bb      	ldr	r3, [r7, #8]
/**
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <I2C_Slave_STOPF>:
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;

  /* Disable EVT, BUF and ERR interrupt */
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);

 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b6:	73fb      	strb	r3, [r7, #15]
  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);

 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031c6:	605a      	str	r2, [r3, #4]
  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);

 80031c8:	2300      	movs	r3, #0
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	68bb      	ldr	r3, [r7, #8]
  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
  {
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f4:	601a      	str	r2, [r3, #0]
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003204:	d172      	bne.n	80032ec <I2C_Slave_STOPF+0x144>

      if (hi2c->XferCount != 0U)
 8003206:	7bfb      	ldrb	r3, [r7, #15]
 8003208:	2b22      	cmp	r3, #34	@ 0x22
 800320a:	d002      	beq.n	8003212 <I2C_Slave_STOPF+0x6a>
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003210:	d135      	bne.n	800327e <I2C_Slave_STOPF+0xd6>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	b29a      	uxth	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
      }
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <I2C_Slave_STOPF+0x8e>

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	f043 0204 	orr.w	r2, r3, #4
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
      {
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003244:	605a      	str	r2, [r3, #4]
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe f813 	bl	8001276 <HAL_DMA_GetState>
 8003250:	4603      	mov	r3, r0
 8003252:	2b01      	cmp	r3, #1
 8003254:	d049      	beq.n	80032ea <I2C_Slave_STOPF+0x142>

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
        {
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325a:	4a69      	ldr	r2, [pc, #420]	@ (8003400 <I2C_Slave_STOPF+0x258>)
 800325c:	651a      	str	r2, [r3, #80]	@ 0x50
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
        }
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd ffe5 	bl	8001232 <HAL_DMA_Abort_IT>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d03d      	beq.n	80032ea <I2C_Slave_STOPF+0x142>
      }
    }
    else
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003278:	4610      	mov	r0, r2
 800327a:	4798      	blx	r3
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800327c:	e035      	b.n	80032ea <I2C_Slave_STOPF+0x142>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));

      if (hi2c->XferCount != 0U)
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	b29a      	uxth	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
      }
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <I2C_Slave_STOPF+0xfa>

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	f043 0204 	orr.w	r2, r3, #4
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
      {
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032b0:	605a      	str	r2, [r3, #4]
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd ffdd 	bl	8001276 <HAL_DMA_GetState>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d014      	beq.n	80032ec <I2C_Slave_STOPF+0x144>

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
        {
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c6:	4a4e      	ldr	r2, [pc, #312]	@ (8003400 <I2C_Slave_STOPF+0x258>)
 80032c8:	651a      	str	r2, [r3, #80]	@ 0x50
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
        }
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd ffaf 	bl	8001232 <HAL_DMA_Abort_IT>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d008      	beq.n	80032ec <I2C_Slave_STOPF+0x144>
      }
    }
  }
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80032e4:	4610      	mov	r0, r2
 80032e6:	4798      	blx	r3
 80032e8:	e000      	b.n	80032ec <I2C_Slave_STOPF+0x144>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80032ea:	bf00      	nop
  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
    {
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d03e      	beq.n	8003374 <I2C_Slave_STOPF+0x1cc>
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;

 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b04      	cmp	r3, #4
 8003302:	d112      	bne.n	800332a <I2C_Slave_STOPF+0x182>
      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;

 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691a      	ldr	r2, [r3, #16]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]
      /* Update counter */
      hi2c->XferCount--;
    }
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	855a      	strh	r2, [r3, #42]	@ 0x2a
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;

 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003334:	2b40      	cmp	r3, #64	@ 0x40
 8003336:	d112      	bne.n	800335e <I2C_Slave_STOPF+0x1b6>
      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;

 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	701a      	strb	r2, [r3, #0]
      /* Update counter */
      hi2c->XferCount--;
    }
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferCount != 0U)
    {
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    }
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <I2C_Slave_STOPF+0x1cc>
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	f043 0204 	orr.w	r2, r3, #4
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	641a      	str	r2, [r3, #64]	@ 0x40
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
  }
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <I2C_Slave_STOPF+0x1dc>
  else
  {
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f8b7 	bl	80034f0 <I2C_ITError>
  }
}

/**
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
 8003382:	e039      	b.n	80033f8 <I2C_Slave_STOPF+0x250>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	2b2a      	cmp	r3, #42	@ 0x2a
 8003388:	d109      	bne.n	800339e <I2C_Slave_STOPF+0x1f6>
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->SlaveRxCpltCallback(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2228      	movs	r2, #40	@ 0x28
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff f80b 	bl	80023b4 <HAL_I2C_SlaveRxCpltCallback>
      hi2c->State = HAL_I2C_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b28      	cmp	r3, #40	@ 0x28
 80033a8:	d111      	bne.n	80033ce <I2C_Slave_STOPF+0x226>

 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a15      	ldr	r2, [pc, #84]	@ (8003404 <I2C_Slave_STOPF+0x25c>)
 80033ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->ListenCpltCallback(hi2c);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    {
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff f80c 	bl	80023e4 <HAL_I2C_ListenCpltCallback>
  *         the configuration information for I2C module
 80033cc:	e014      	b.n	80033f8 <I2C_Slave_STOPF+0x250>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d2:	2b22      	cmp	r3, #34	@ 0x22
 80033d4:	d002      	beq.n	80033dc <I2C_Slave_STOPF+0x234>
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	2b22      	cmp	r3, #34	@ 0x22
 80033da:	d10d      	bne.n	80033f8 <I2C_Slave_STOPF+0x250>
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->SlaveRxCpltCallback(hi2c);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#else
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  }
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fe ffde 	bl	80023b4 <HAL_I2C_SlaveRxCpltCallback>
  *         the configuration information for I2C module
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	08003a29 	.word	0x08003a29
 8003404:	ffff0000 	.word	0xffff0000

08003408 <I2C_Slave_AF>:
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
  uint32_t CurrentXferOptions       = hi2c->XferOptions;

 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
      (CurrentState == HAL_I2C_STATE_LISTEN))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003416:	73fb      	strb	r3, [r7, #15]
  {
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341c:	60bb      	str	r3, [r7, #8]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;

 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b08      	cmp	r3, #8
 8003422:	d002      	beq.n	800342a <I2C_Slave_AF+0x22>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b20      	cmp	r3, #32
 8003428:	d129      	bne.n	800347e <I2C_Slave_AF+0x76>
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	2b28      	cmp	r3, #40	@ 0x28
 800342e:	d126      	bne.n	800347e <I2C_Slave_AF+0x76>
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);

 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a2e      	ldr	r2, [pc, #184]	@ (80034ec <I2C_Slave_AF+0xe4>)
 8003434:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003444:	605a      	str	r2, [r3, #4]
    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);

 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800344e:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State         = HAL_I2C_STATE_READY;
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800345e:	601a      	str	r2, [r3, #0]

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ListenCpltCallback(hi2c);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
  {
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fe ffb4 	bl	80023e4 <HAL_I2C_ListenCpltCallback>
  }
}

/**
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
 800347c:	e031      	b.n	80034e2 <I2C_Slave_AF+0xda>
    hi2c->State         = HAL_I2C_STATE_READY;
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	2b21      	cmp	r3, #33	@ 0x21
 8003482:	d129      	bne.n	80034d8 <I2C_Slave_AF+0xd0>

 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a19      	ldr	r2, [pc, #100]	@ (80034ec <I2C_Slave_AF+0xe4>)
 8003488:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Disable EVT, BUF and ERR interrupt */
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2221      	movs	r2, #33	@ 0x21
 800348e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034ae:	605a      	str	r2, [r3, #4]

 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034b8:	615a      	str	r2, [r3, #20]

 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034c8:	601a      	str	r2, [r3, #0]
#else
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fe f9f6 	bl	80018bc <I2C_Flush_DR>
  {
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7fe ff65 	bl	80023a0 <HAL_I2C_SlaveTxCpltCallback>
  * @param  hi2c I2C handle.
 80034d6:	e004      	b.n	80034e2 <I2C_Slave_AF+0xda>
/**
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034e0:	615a      	str	r2, [r3, #20]
  * @param  hi2c I2C handle.
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	ffff0000 	.word	0xffff0000

080034f0 <I2C_ITError>:
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
  uint32_t CurrentError;
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fe:	73fb      	strb	r3, [r7, #15]
  {
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003506:	73bb      	strb	r3, [r7, #14]
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
  }
 8003508:	7bbb      	ldrb	r3, [r7, #14]
 800350a:	2b10      	cmp	r3, #16
 800350c:	d002      	beq.n	8003514 <I2C_ITError+0x24>
 800350e:	7bbb      	ldrb	r3, [r7, #14]
 8003510:	2b40      	cmp	r3, #64	@ 0x40
 8003512:	d10a      	bne.n	800352a <I2C_ITError+0x3a>
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	2b22      	cmp	r3, #34	@ 0x22
 8003518:	d107      	bne.n	800352a <I2C_ITError+0x3a>

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
  {
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003528:	601a      	str	r2, [r3, #0]
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003530:	2b28      	cmp	r3, #40	@ 0x28
 8003532:	d107      	bne.n	8003544 <I2C_ITError+0x54>
  }
  else
  {
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	@ 0x30
    /* If state is an abort treatment on going, don't change state */
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2228      	movs	r2, #40	@ 0x28
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003542:	e015      	b.n	8003570 <I2C_ITError+0x80>
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
    {
      hi2c->State = HAL_I2C_STATE_READY;
      hi2c->Mode = HAL_I2C_MODE_NONE;
    }
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800354e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003552:	d00a      	beq.n	800356a <I2C_ITError+0x7a>
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	2b60      	cmp	r3, #96	@ 0x60
 8003558:	d007      	beq.n	800356a <I2C_ITError+0x7a>
    hi2c->PreviousState = I2C_STATE_NONE;
  }
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800357a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800357e:	d162      	bne.n	8003646 <I2C_ITError+0x156>
    {
      /* Set the DMA Abort callback :
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800358e:	605a      	str	r2, [r3, #4]
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003594:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d020      	beq.n	80035e0 <I2C_ITError+0xf0>

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a2:	4a6a      	ldr	r2, [pc, #424]	@ (800374c <I2C_ITError+0x25c>)
 80035a4:	651a      	str	r2, [r3, #80]	@ 0x50
        __HAL_I2C_DISABLE(hi2c);

 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fd fe41 	bl	8001232 <HAL_DMA_Abort_IT>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 8089 	beq.w	80036ca <I2C_ITError+0x1da>
        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly XferAbortCallback function in case of error */
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
      }
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }
    else
    {
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035da:	4610      	mov	r0, r2
 80035dc:	4798      	blx	r3
 80035de:	e074      	b.n	80036ca <I2C_ITError+0x1da>
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
      {
        /* Store Last receive data if any */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e4:	4a59      	ldr	r2, [pc, #356]	@ (800374c <I2C_ITError+0x25c>)
 80035e6:	651a      	str	r2, [r3, #80]	@ 0x50
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
        {
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fd fe20 	bl	8001232 <HAL_DMA_Abort_IT>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d068      	beq.n	80036ca <I2C_ITError+0x1da>
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;

 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003602:	2b40      	cmp	r3, #64	@ 0x40
 8003604:	d10b      	bne.n	800361e <I2C_ITError+0x12e>
          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
        }
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	701a      	strb	r2, [r3, #0]

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	625a      	str	r2, [r3, #36]	@ 0x24

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0201 	bic.w	r2, r2, #1
 800362c:	601a      	str	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
      }
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003640:	4610      	mov	r0, r2
 8003642:	4798      	blx	r3
 8003644:	e041      	b.n	80036ca <I2C_ITError+0x1da>
  {
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b60      	cmp	r3, #96	@ 0x60
 8003650:	d125      	bne.n	800369e <I2C_ITError+0x1ae>
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	641a      	str	r2, [r3, #64]	@ 0x40
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;

 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366a:	2b40      	cmp	r3, #64	@ 0x40
 800366c:	d10b      	bne.n	8003686 <I2C_ITError+0x196>
      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
    }
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	701a      	strb	r2, [r3, #0]

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
#else
    HAL_I2C_AbortCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fe fecc 	bl	8002434 <HAL_I2C_AbortCpltCallback>
 800369c:	e015      	b.n	80036ca <I2C_ITError+0x1da>
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;

 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a8:	2b40      	cmp	r3, #64	@ 0x40
 80036aa:	d10b      	bne.n	80036c4 <I2C_ITError+0x1d4>
      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
    }
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	625a      	str	r2, [r3, #36]	@ 0x24
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7fe feab 	bl	8002420 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	60bb      	str	r3, [r7, #8]
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
  {
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10e      	bne.n	80036f8 <I2C_ITError+0x208>
    /* Disable EVT, BUF and ERR interrupt */
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f003 0302 	and.w	r3, r3, #2
  {
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <I2C_ITError+0x208>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 0304 	and.w	r3, r3, #4
    /* Disable EVT, BUF and ERR interrupt */
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d104      	bne.n	80036f8 <I2C_ITError+0x208>
  }
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f003 0308 	and.w	r3, r3, #8
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <I2C_ITError+0x218>

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003706:	605a      	str	r2, [r3, #4]
  CurrentState = hi2c->State;
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
    hi2c->PreviousState = I2C_STATE_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800370e:	73fb      	strb	r3, [r7, #15]
    hi2c->State         = HAL_I2C_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b04      	cmp	r3, #4
 800371a:	d113      	bne.n	8003744 <I2C_ITError+0x254>
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	2b28      	cmp	r3, #40	@ 0x28
 8003720:	d110      	bne.n	8003744 <I2C_ITError+0x254>
    hi2c->Mode          = HAL_I2C_MODE_NONE;

 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a0a      	ldr	r2, [pc, #40]	@ (8003750 <I2C_ITError+0x260>)
 8003726:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ListenCpltCallback(hi2c);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}

 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe fe50 	bl	80023e4 <HAL_I2C_ListenCpltCallback>
/**
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	08003a29 	.word	0x08003a29
 8003750:	ffff0000 	.word	0xffff0000

08003754 <I2C_MasterRequestWrite>:
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;

  /* Generate Start condition if first transfer */
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	460b      	mov	r3, r1
 8003762:	817b      	strh	r3, [r7, #10]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
  {
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003768:	617b      	str	r3, [r7, #20]
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
  }
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b08      	cmp	r3, #8
 800376e:	d006      	beq.n	800377e <I2C_MasterRequestWrite+0x2a>
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d003      	beq.n	800377e <I2C_MasterRequestWrite+0x2a>
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800377c:	d108      	bne.n	8003790 <I2C_MasterRequestWrite+0x3c>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
  {
    /* Generate ReStart */
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	e00b      	b.n	80037a8 <I2C_MasterRequestWrite+0x54>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
  }
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003794:	2b12      	cmp	r3, #18
 8003796:	d107      	bne.n	80037a8 <I2C_MasterRequestWrite+0x54>
  else
  {
    /* Do nothing */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037a6:	601a      	str	r2, [r3, #0]
  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f9df 	bl	8003b78 <I2C_WaitOnFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00d      	beq.n	80037dc <I2C_MasterRequestWrite+0x88>
    }
    return HAL_TIMEOUT;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ce:	d103      	bne.n	80037d8 <I2C_MasterRequestWrite+0x84>
  }

 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037d6:	641a      	str	r2, [r3, #64]	@ 0x40
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
  {
 80037d8:	2303      	movs	r3, #3
 80037da:	e035      	b.n	8003848 <I2C_MasterRequestWrite+0xf4>
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
  }
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037e4:	d108      	bne.n	80037f8 <I2C_MasterRequestWrite+0xa4>
  else
  {
    /* Send header of slave address */
 80037e6:	897b      	ldrh	r3, [r7, #10]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037f4:	611a      	str	r2, [r3, #16]
 80037f6:	e01b      	b.n	8003830 <I2C_MasterRequestWrite+0xdc>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
    {
 80037f8:	897b      	ldrh	r3, [r7, #10]
 80037fa:	11db      	asrs	r3, r3, #7
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f003 0306 	and.w	r3, r3, #6
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f063 030f 	orn	r3, r3, #15
 8003808:	b2da      	uxtb	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	611a      	str	r2, [r3, #16]
      return HAL_ERROR;
    }

 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	490e      	ldr	r1, [pc, #56]	@ (8003850 <I2C_MasterRequestWrite+0xfc>)
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 fa28 	bl	8003c6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <I2C_MasterRequestWrite+0xd2>
    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003822:	2301      	movs	r3, #1
 8003824:	e010      	b.n	8003848 <I2C_MasterRequestWrite+0xf4>
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003826:	897b      	ldrh	r3, [r7, #10]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	611a      	str	r2, [r3, #16]
  {
    return HAL_ERROR;
  }

 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4907      	ldr	r1, [pc, #28]	@ (8003854 <I2C_MasterRequestWrite+0x100>)
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fa18 	bl	8003c6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <I2C_MasterRequestWrite+0xf2>
  return HAL_OK;
}
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <I2C_MasterRequestWrite+0xf4>

/**
  * @brief  Master sends target device address for read request.
 8003846:	2300      	movs	r3, #0
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	00010008 	.word	0x00010008
 8003854:	00010002 	.word	0x00010002

08003858 <I2C_RequestMemoryRead>:
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);

  /* Generate Start */
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	4608      	mov	r0, r1
 8003862:	4611      	mov	r1, r2
 8003864:	461a      	mov	r2, r3
 8003866:	4603      	mov	r3, r0
 8003868:	817b      	strh	r3, [r7, #10]
 800386a:	460b      	mov	r3, r1
 800386c:	813b      	strh	r3, [r7, #8]
 800386e:	4613      	mov	r3, r2
 8003870:	80fb      	strh	r3, [r7, #6]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);

 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003880:	601a      	str	r2, [r3, #0]
  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
  {
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003890:	601a      	str	r2, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	2200      	movs	r2, #0
 800389a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f96a 	bl	8003b78 <I2C_WaitOnFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00d      	beq.n	80038c6 <I2C_RequestMemoryRead+0x6e>
    }
    return HAL_TIMEOUT;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038b8:	d103      	bne.n	80038c2 <I2C_RequestMemoryRead+0x6a>
  }

 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038c0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038c2:	2303      	movs	r3, #3
 80038c4:	e0aa      	b.n	8003a1c <I2C_RequestMemoryRead+0x1c4>

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
  {
 80038c6:	897b      	ldrh	r3, [r7, #10]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	461a      	mov	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038d4:	611a      	str	r2, [r3, #16]
    return HAL_ERROR;
  }

 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	6a3a      	ldr	r2, [r7, #32]
 80038da:	4952      	ldr	r1, [pc, #328]	@ (8003a24 <I2C_RequestMemoryRead+0x1cc>)
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f9c5 	bl	8003c6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <I2C_RequestMemoryRead+0x94>
  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e8:	2301      	movs	r3, #1
 80038ea:	e097      	b.n	8003a1c <I2C_RequestMemoryRead+0x1c4>

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
  {
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	697b      	ldr	r3, [r7, #20]
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
    {
      /* Generate Stop */
 8003902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003904:	6a39      	ldr	r1, [r7, #32]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fa50 	bl	8003dac <I2C_WaitOnTXEFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00d      	beq.n	800392e <I2C_RequestMemoryRead+0xd6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
    }
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	2b04      	cmp	r3, #4
 8003918:	d107      	bne.n	800392a <I2C_RequestMemoryRead+0xd2>
    return HAL_ERROR;
  }

 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003928:	601a      	str	r2, [r3, #0]
  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800392a:	2301      	movs	r3, #1
 800392c:	e076      	b.n	8003a1c <I2C_RequestMemoryRead+0x1c4>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
  }
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d105      	bne.n	8003940 <I2C_RequestMemoryRead+0xe8>
  /* If Memory address size is 16Bit */
  else
  {
 8003934:	893b      	ldrh	r3, [r7, #8]
 8003936:	b2da      	uxtb	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	611a      	str	r2, [r3, #16]
 800393e:	e021      	b.n	8003984 <I2C_RequestMemoryRead+0x12c>
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
    {
 8003940:	893b      	ldrh	r3, [r7, #8]
 8003942:	0a1b      	lsrs	r3, r3, #8
 8003944:	b29b      	uxth	r3, r3
 8003946:	b2da      	uxtb	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	611a      	str	r2, [r3, #16]
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
      {
        /* Generate Stop */
 800394e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003950:	6a39      	ldr	r1, [r7, #32]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 fa2a 	bl	8003dac <I2C_WaitOnTXEFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00d      	beq.n	800397a <I2C_RequestMemoryRead+0x122>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
      }
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	2b04      	cmp	r3, #4
 8003964:	d107      	bne.n	8003976 <I2C_RequestMemoryRead+0x11e>
      return HAL_ERROR;
    }

 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003974:	601a      	str	r2, [r3, #0]
    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003976:	2301      	movs	r3, #1
 8003978:	e050      	b.n	8003a1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800397a:	893b      	ldrh	r3, [r7, #8]
 800397c:	b2da      	uxtb	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	611a      	str	r2, [r3, #16]
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
    {
      /* Generate Stop */
 8003984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003986:	6a39      	ldr	r1, [r7, #32]
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 fa0f 	bl	8003dac <I2C_WaitOnTXEFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00d      	beq.n	80039b0 <I2C_RequestMemoryRead+0x158>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
    }
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003998:	2b04      	cmp	r3, #4
 800399a:	d107      	bne.n	80039ac <I2C_RequestMemoryRead+0x154>
    return HAL_ERROR;
  }

 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039aa:	601a      	str	r2, [r3, #0]
  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ac:	2301      	movs	r3, #1
 80039ae:	e035      	b.n	8003a1c <I2C_RequestMemoryRead+0x1c4>

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
  {
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039be:	601a      	str	r2, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f8d3 	bl	8003b78 <I2C_WaitOnFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00d      	beq.n	80039f4 <I2C_RequestMemoryRead+0x19c>
    }
    return HAL_TIMEOUT;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e6:	d103      	bne.n	80039f0 <I2C_RequestMemoryRead+0x198>
  }

 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ee:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039f0:	2303      	movs	r3, #3
 80039f2:	e013      	b.n	8003a1c <I2C_RequestMemoryRead+0x1c4>

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
  {
 80039f4:	897b      	ldrh	r3, [r7, #10]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	611a      	str	r2, [r3, #16]
    return HAL_ERROR;
  }

 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	6a3a      	ldr	r2, [r7, #32]
 8003a08:	4906      	ldr	r1, [pc, #24]	@ (8003a24 <I2C_RequestMemoryRead+0x1cc>)
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f92e 	bl	8003c6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <I2C_RequestMemoryRead+0x1c2>
  return HAL_OK;
}
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <I2C_RequestMemoryRead+0x1c4>

/**
  * @brief  DMA I2C process complete callback.
 8003a1a:	2300      	movs	r3, #0
  * @param  hdma DMA handle
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	00010002 	.word	0x00010002

08003a28 <I2C_DMAAbort>:
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  __IO uint32_t count = 0U;
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]

 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a38:	617b      	str	r3, [r7, #20]
  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a40:	74fb      	strb	r3, [r7, #19]
  do
  {
    if (count == 0U)
    {
 8003a42:	4b4b      	ldr	r3, [pc, #300]	@ (8003b70 <I2C_DMAAbort+0x148>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	08db      	lsrs	r3, r3, #3
 8003a48:	4a4a      	ldr	r2, [pc, #296]	@ (8003b74 <I2C_DMAAbort+0x14c>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	0a1a      	lsrs	r2, r3, #8
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	00da      	lsls	r2, r3, #3
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	60fb      	str	r3, [r7, #12]
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      break;
    }
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <I2C_DMAAbort+0x48>
    count--;
  }
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	f043 0220 	orr.w	r2, r3, #32
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	641a      	str	r2, [r3, #64]	@ 0x40
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003a6e:	e00a      	b.n	8003a86 <I2C_DMAAbort+0x5e>

  /* Clear Complete callback */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]
  if (hi2c->hdmatx != NULL)
  {
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a84:	d0ea      	beq.n	8003a5c <I2C_DMAAbort+0x34>
    hi2c->hdmatx->XferCpltCallback = NULL;
  }
  if (hi2c->hdmarx != NULL)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a92:	2200      	movs	r2, #0
 8003a94:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <I2C_DMAAbort+0x7e>
  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	63da      	str	r2, [r3, #60]	@ 0x3c

  hi2c->XferCount = 0U;

  /* Reset XferAbortCallback */
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ab4:	601a      	str	r2, [r3, #0]
  if (hi2c->hdmatx != NULL)
  {
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
  }
  if (hi2c->hdmarx != NULL)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac8:	2200      	movs	r2, #0
 8003aca:	651a      	str	r2, [r3, #80]	@ 0x50
  }

 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <I2C_DMAAbort+0xb4>
  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad8:	2200      	movs	r2, #0
 8003ada:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
  {
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_READY;
    hi2c->Mode          = HAL_I2C_MODE_NONE;
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b60      	cmp	r3, #96	@ 0x60
 8003af6:	d10e      	bne.n	8003b16 <I2C_DMAAbort+0xee>

    /* Call the corresponding callback to inform upper layer of End of Transfer */
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->AbortCpltCallback(hi2c);
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	641a      	str	r2, [r3, #64]	@ 0x40
#else
    HAL_I2C_AbortCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
 8003b0e:	6978      	ldr	r0, [r7, #20]
 8003b10:	f7fe fc90 	bl	8002434 <HAL_I2C_AbortCpltCallback>
  }
}

/**
  * @brief  This function handles I2C Communication Timeout.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8003b14:	e027      	b.n	8003b66 <I2C_DMAAbort+0x13e>

 8003b16:	7cfb      	ldrb	r3, [r7, #19]
 8003b18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b1c:	2b28      	cmp	r3, #40	@ 0x28
 8003b1e:	d117      	bne.n	8003b50 <I2C_DMAAbort+0x128>

 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b3e:	601a      	str	r2, [r3, #0]
    {
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2228      	movs	r2, #40	@ 0x28
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003b4e:	e007      	b.n	8003b60 <I2C_DMAAbort+0x138>
    /* Call the corresponding callback to inform upper layer of End of Transfer */
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

 8003b60:	6978      	ldr	r0, [r7, #20]
 8003b62:	f7fe fc5d 	bl	8002420 <HAL_I2C_ErrorCallback>
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8003b66:	bf00      	nop
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000000 	.word	0x20000000
 8003b74:	14f8b589 	.word	0x14f8b589

08003b78 <I2C_WaitOnFlagUntilTimeout>:
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	4613      	mov	r3, r2
 8003b86:	71fb      	strb	r3, [r7, #7]
    if (Timeout != HAL_MAX_DELAY)
    {
 8003b88:	e048      	b.n	8003c1c <I2C_WaitOnFlagUntilTimeout+0xa4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d044      	beq.n	8003c1c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b92:	f7fd f99d 	bl	8000ed0 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d302      	bcc.n	8003ba8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d139      	bne.n	8003c1c <I2C_WaitOnFlagUntilTimeout+0xa4>
          hi2c->State             = HAL_I2C_STATE_READY;
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	0c1b      	lsrs	r3, r3, #16
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d10d      	bne.n	8003bce <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	43da      	mvns	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	e00c      	b.n	8003be8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	43da      	mvns	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	bf0c      	ite	eq
 8003be0:	2301      	moveq	r3, #1
 8003be2:	2300      	movne	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d116      	bne.n	8003c1c <I2C_WaitOnFlagUntilTimeout+0xa4>
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;

 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30
          /* Process Unlocked */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          __HAL_UNLOCK(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	641a      	str	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
        }
      }
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
  }
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e023      	b.n	8003c64 <I2C_WaitOnFlagUntilTimeout+0xec>
    {
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	0c1b      	lsrs	r3, r3, #16
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d10d      	bne.n	8003c42 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	43da      	mvns	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4013      	ands	r3, r2
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	e00c      	b.n	8003c5c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	43da      	mvns	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	bf0c      	ite	eq
 8003c54:	2301      	moveq	r3, #1
 8003c56:	2300      	movne	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d093      	beq.n	8003b8a <I2C_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
}

/**
  * @brief  This function handles I2C Communication Timeout for Master addressing phase.
 8003c62:	2300      	movs	r3, #0
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
      /* Generate Stop */
 8003c7a:	e071      	b.n	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);

 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c8a:	d123      	bne.n	8003cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
      hi2c->State               = HAL_I2C_STATE_READY;
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ca4:	615a      	str	r2, [r3, #20]
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;

 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	@ 0x30
      /* Process Unlocked */
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      __HAL_UNLOCK(hi2c);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc0:	f043 0204 	orr.w	r2, r3, #4
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	641a      	str	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
    }

 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e067      	b.n	8003da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cda:	d041      	beq.n	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cdc:	f7fd f8f8 	bl	8000ed0 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d302      	bcc.n	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d136      	bne.n	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
          hi2c->State               = HAL_I2C_STATE_READY;
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	0c1b      	lsrs	r3, r3, #16
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d10c      	bne.n	8003d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	43da      	mvns	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	bf14      	ite	ne
 8003d0e:	2301      	movne	r3, #1
 8003d10:	2300      	moveq	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	e00b      	b.n	8003d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	43da      	mvns	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	4013      	ands	r3, r2
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf14      	ite	ne
 8003d28:	2301      	movne	r3, #1
 8003d2a:	2300      	moveq	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d016      	beq.n	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	631a      	str	r2, [r3, #48]	@ 0x30
          /* Process Unlocked */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          __HAL_UNLOCK(hi2c);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	f043 0220 	orr.w	r2, r3, #32
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	641a      	str	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
        }
      }
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
  }
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e021      	b.n	8003da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
      /* Generate Stop */
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	0c1b      	lsrs	r3, r3, #16
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d10c      	bne.n	8003d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	43da      	mvns	r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4013      	ands	r3, r2
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf14      	ite	ne
 8003d7c:	2301      	movne	r3, #1
 8003d7e:	2300      	moveq	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e00b      	b.n	8003d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	43da      	mvns	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bf14      	ite	ne
 8003d96:	2301      	movne	r3, #1
 8003d98:	2300      	moveq	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f47f af6d 	bne.w	8003c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
  return HAL_OK;
}

/**
  * @brief  This function handles I2C Communication Timeout for specific usage of TXE flag.
 8003da2:	2300      	movs	r3, #0
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I2C_WaitOnTXEFlagUntilTimeout>:
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
    {
 8003db8:	e034      	b.n	8003e24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      return HAL_ERROR;
    }

 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f915 	bl	8003fea <I2C_IsAcknowledgeFailed>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e034      	b.n	8003e34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d028      	beq.n	8003e24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd2:	f7fd f87d 	bl	8000ed0 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d302      	bcc.n	8003de8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d11d      	bne.n	8003e24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
          hi2c->State               = HAL_I2C_STATE_READY;
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df2:	2b80      	cmp	r3, #128	@ 0x80
 8003df4:	d016      	beq.n	8003e24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	@ 0x30
          /* Process Unlocked */
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          __HAL_UNLOCK(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	f043 0220 	orr.w	r2, r3, #32
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	641a      	str	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
        }
      }
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
  }
 8003e20:	2301      	movs	r3, #1
 8003e22:	e007      	b.n	8003e34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    {
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e2e:	2b80      	cmp	r3, #128	@ 0x80
 8003e30:	d1c3      	bne.n	8003dba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
  return HAL_OK;
}

/**
  * @brief  This function handles I2C Communication Timeout for specific usage of BTF flag.
 8003e32:	2300      	movs	r3, #0
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <I2C_WaitOnBTFFlagUntilTimeout>:
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
    {
 8003e48:	e034      	b.n	8003eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      return HAL_ERROR;
    }

 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f8cd 	bl	8003fea <I2C_IsAcknowledgeFailed>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e56:	2301      	movs	r3, #1
 8003e58:	e034      	b.n	8003ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e60:	d028      	beq.n	8003eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e62:	f7fd f835 	bl	8000ed0 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d302      	bcc.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d11d      	bne.n	8003eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
          hi2c->State               = HAL_I2C_STATE_READY;
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d016      	beq.n	8003eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	631a      	str	r2, [r3, #48]	@ 0x30
          /* Process Unlocked */
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          __HAL_UNLOCK(hi2c);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea0:	f043 0220 	orr.w	r2, r3, #32
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	641a      	str	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
        }
      }
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
  }
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e007      	b.n	8003ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    {
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d1c3      	bne.n	8003e4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
  return HAL_OK;
}

/**
  * @brief  This function handles I2C Communication Timeout for specific usage of STOP flag.
 8003ec2:	2300      	movs	r3, #0
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <I2C_WaitOnSTOPRequestThroughIT>:
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
  __IO uint32_t count = 0U;

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  do
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
  {
    count--;
    if (count == 0U)
 8003ed8:	4b13      	ldr	r3, [pc, #76]	@ (8003f28 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	08db      	lsrs	r3, r3, #3
 8003ede:	4a13      	ldr	r2, [pc, #76]	@ (8003f2c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	0a1a      	lsrs	r2, r3, #8
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	60fb      	str	r3, [r7, #12]
      return HAL_ERROR;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d107      	bne.n	8003f0a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    }
  }
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	f043 0220 	orr.w	r2, r3, #32
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	641a      	str	r2, [r3, #64]	@ 0x40
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);

 8003f06:	2301      	movs	r3, #1
 8003f08:	e008      	b.n	8003f1c <I2C_WaitOnSTOPRequestThroughIT+0x50>
  return HAL_OK;
}

 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f18:	d0e9      	beq.n	8003eee <I2C_WaitOnSTOPRequestThroughIT+0x22>
/**
  * @brief  This function handles I2C Communication Timeout for specific usage of RXNE flag.
 8003f1a:	2300      	movs	r3, #0
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	20000000 	.word	0x20000000
 8003f2c:	14f8b589 	.word	0x14f8b589

08003f30 <I2C_WaitOnRXNEFlagUntilTimeout>:
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
  {
    /* Check if a STOPF is detected */
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
    {
 8003f3c:	e049      	b.n	8003fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d119      	bne.n	8003f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      hi2c->PreviousState       = I2C_STATE_NONE;
      hi2c->State               = HAL_I2C_STATE_READY;
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0210 	mvn.w	r2, #16
 8003f54:	615a      	str	r2, [r3, #20]
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;

 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* Process Unlocked */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      __HAL_UNLOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	641a      	str	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
    }

 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e030      	b.n	8003fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f80:	f7fc ffa6 	bl	8000ed0 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d302      	bcc.n	8003f96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d11d      	bne.n	8003fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
        hi2c->State               = HAL_I2C_STATE_READY;
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa0:	2b40      	cmp	r3, #64	@ 0x40
 8003fa2:	d016      	beq.n	8003fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	631a      	str	r2, [r3, #48]	@ 0x30
        /* Process Unlocked */
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbe:	f043 0220 	orr.w	r2, r3, #32
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	641a      	str	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
      }
    }
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  return HAL_OK;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e007      	b.n	8003fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    {
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fdc:	2b40      	cmp	r3, #64	@ 0x40
 8003fde:	d1ae      	bne.n	8003f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
}

/**
  * @brief  This function handles Acknowledge failed detection during an I2C Communication.
 8003fe0:	2300      	movs	r3, #0
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <I2C_IsAcknowledgeFailed>:
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]

 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004000:	d11b      	bne.n	800403a <I2C_IsAcknowledgeFailed+0x50>
    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800400a:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;

 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Process Unlocked */
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	f043 0204 	orr.w	r2, r3, #4
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	641a      	str	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
  }
  return HAL_OK;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}

 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <I2C_IsAcknowledgeFailed+0x52>
/**
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
 800403a:	2300      	movs	r3, #0
  * @param  hi2c I2C handle.
 800403c:	4618      	mov	r0, r3
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004058:	d103      	bne.n	8004062 <I2C_ConvertOtherXferOptions+0x1a>
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}

/**
  * @}
  */
 8004060:	e007      	b.n	8004072 <I2C_ConvertOtherXferOptions+0x2a>
  else
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004066:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800406a:	d102      	bne.n	8004072 <I2C_ConvertOtherXferOptions+0x2a>
    /* Nothing to do */
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2208      	movs	r2, #8
 8004070:	62da      	str	r2, [r3, #44]	@ 0x2c
  */
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e267      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d075      	beq.n	800418a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800409e:	4b88      	ldr	r3, [pc, #544]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d00c      	beq.n	80040c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040aa:	4b85      	ldr	r3, [pc, #532]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d112      	bne.n	80040dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b6:	4b82      	ldr	r3, [pc, #520]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040c2:	d10b      	bne.n	80040dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	4b7e      	ldr	r3, [pc, #504]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d05b      	beq.n	8004188 <HAL_RCC_OscConfig+0x108>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d157      	bne.n	8004188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e242      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e4:	d106      	bne.n	80040f4 <HAL_RCC_OscConfig+0x74>
 80040e6:	4b76      	ldr	r3, [pc, #472]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a75      	ldr	r2, [pc, #468]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e01d      	b.n	8004130 <HAL_RCC_OscConfig+0xb0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0x98>
 80040fe:	4b70      	ldr	r3, [pc, #448]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a6f      	ldr	r2, [pc, #444]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004104:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b6d      	ldr	r3, [pc, #436]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a6c      	ldr	r2, [pc, #432]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e00b      	b.n	8004130 <HAL_RCC_OscConfig+0xb0>
 8004118:	4b69      	ldr	r3, [pc, #420]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a68      	ldr	r2, [pc, #416]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 800411e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	4b66      	ldr	r3, [pc, #408]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a65      	ldr	r2, [pc, #404]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 800412a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800412e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fc feca 	bl	8000ed0 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004140:	f7fc fec6 	bl	8000ed0 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	@ 0x64
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e207      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004152:	4b5b      	ldr	r3, [pc, #364]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0xc0>
 800415e:	e014      	b.n	800418a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004160:	f7fc feb6 	bl	8000ed0 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004168:	f7fc feb2 	bl	8000ed0 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	@ 0x64
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e1f3      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417a:	4b51      	ldr	r3, [pc, #324]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0xe8>
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d063      	beq.n	800425e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004196:	4b4a      	ldr	r3, [pc, #296]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041a2:	4b47      	ldr	r3, [pc, #284]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d11c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ae:	4b44      	ldr	r3, [pc, #272]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d116      	bne.n	80041e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ba:	4b41      	ldr	r3, [pc, #260]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_RCC_OscConfig+0x152>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d001      	beq.n	80041d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e1c7      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d2:	4b3b      	ldr	r3, [pc, #236]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4937      	ldr	r1, [pc, #220]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e6:	e03a      	b.n	800425e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d020      	beq.n	8004232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f0:	4b34      	ldr	r3, [pc, #208]	@ (80042c4 <HAL_RCC_OscConfig+0x244>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f6:	f7fc fe6b 	bl	8000ed0 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041fe:	f7fc fe67 	bl	8000ed0 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e1a8      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004210:	4b2b      	ldr	r3, [pc, #172]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421c:	4b28      	ldr	r3, [pc, #160]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4925      	ldr	r1, [pc, #148]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]
 8004230:	e015      	b.n	800425e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004232:	4b24      	ldr	r3, [pc, #144]	@ (80042c4 <HAL_RCC_OscConfig+0x244>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fc fe4a 	bl	8000ed0 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004240:	f7fc fe46 	bl	8000ed0 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e187      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004252:	4b1b      	ldr	r3, [pc, #108]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d036      	beq.n	80042d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d016      	beq.n	80042a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004272:	4b15      	ldr	r3, [pc, #84]	@ (80042c8 <HAL_RCC_OscConfig+0x248>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fc fe2a 	bl	8000ed0 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004280:	f7fc fe26 	bl	8000ed0 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e167      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004292:	4b0b      	ldr	r3, [pc, #44]	@ (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x200>
 800429e:	e01b      	b.n	80042d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a0:	4b09      	ldr	r3, [pc, #36]	@ (80042c8 <HAL_RCC_OscConfig+0x248>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a6:	f7fc fe13 	bl	8000ed0 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ac:	e00e      	b.n	80042cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ae:	f7fc fe0f 	bl	8000ed0 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d907      	bls.n	80042cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e150      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
 80042c0:	40023800 	.word	0x40023800
 80042c4:	42470000 	.word	0x42470000
 80042c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042cc:	4b88      	ldr	r3, [pc, #544]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 80042ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1ea      	bne.n	80042ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8097 	beq.w	8004414 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e6:	2300      	movs	r3, #0
 80042e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ea:	4b81      	ldr	r3, [pc, #516]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10f      	bne.n	8004316 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	4b7d      	ldr	r3, [pc, #500]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fe:	4a7c      	ldr	r2, [pc, #496]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004304:	6413      	str	r3, [r2, #64]	@ 0x40
 8004306:	4b7a      	ldr	r3, [pc, #488]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004312:	2301      	movs	r3, #1
 8004314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004316:	4b77      	ldr	r3, [pc, #476]	@ (80044f4 <HAL_RCC_OscConfig+0x474>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d118      	bne.n	8004354 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004322:	4b74      	ldr	r3, [pc, #464]	@ (80044f4 <HAL_RCC_OscConfig+0x474>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a73      	ldr	r2, [pc, #460]	@ (80044f4 <HAL_RCC_OscConfig+0x474>)
 8004328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800432c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800432e:	f7fc fdcf 	bl	8000ed0 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004336:	f7fc fdcb 	bl	8000ed0 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e10c      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004348:	4b6a      	ldr	r3, [pc, #424]	@ (80044f4 <HAL_RCC_OscConfig+0x474>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d106      	bne.n	800436a <HAL_RCC_OscConfig+0x2ea>
 800435c:	4b64      	ldr	r3, [pc, #400]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004360:	4a63      	ldr	r2, [pc, #396]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	6713      	str	r3, [r2, #112]	@ 0x70
 8004368:	e01c      	b.n	80043a4 <HAL_RCC_OscConfig+0x324>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b05      	cmp	r3, #5
 8004370:	d10c      	bne.n	800438c <HAL_RCC_OscConfig+0x30c>
 8004372:	4b5f      	ldr	r3, [pc, #380]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004376:	4a5e      	ldr	r2, [pc, #376]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004378:	f043 0304 	orr.w	r3, r3, #4
 800437c:	6713      	str	r3, [r2, #112]	@ 0x70
 800437e:	4b5c      	ldr	r3, [pc, #368]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004382:	4a5b      	ldr	r2, [pc, #364]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	6713      	str	r3, [r2, #112]	@ 0x70
 800438a:	e00b      	b.n	80043a4 <HAL_RCC_OscConfig+0x324>
 800438c:	4b58      	ldr	r3, [pc, #352]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004390:	4a57      	ldr	r2, [pc, #348]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	6713      	str	r3, [r2, #112]	@ 0x70
 8004398:	4b55      	ldr	r3, [pc, #340]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439c:	4a54      	ldr	r2, [pc, #336]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 800439e:	f023 0304 	bic.w	r3, r3, #4
 80043a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d015      	beq.n	80043d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ac:	f7fc fd90 	bl	8000ed0 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b2:	e00a      	b.n	80043ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b4:	f7fc fd8c 	bl	8000ed0 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e0cb      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ca:	4b49      	ldr	r3, [pc, #292]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0ee      	beq.n	80043b4 <HAL_RCC_OscConfig+0x334>
 80043d6:	e014      	b.n	8004402 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d8:	f7fc fd7a 	bl	8000ed0 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043de:	e00a      	b.n	80043f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e0:	f7fc fd76 	bl	8000ed0 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e0b5      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f6:	4b3e      	ldr	r3, [pc, #248]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1ee      	bne.n	80043e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004402:	7dfb      	ldrb	r3, [r7, #23]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d105      	bne.n	8004414 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004408:	4b39      	ldr	r3, [pc, #228]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 800440a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440c:	4a38      	ldr	r2, [pc, #224]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 800440e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004412:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80a1 	beq.w	8004560 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800441e:	4b34      	ldr	r3, [pc, #208]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b08      	cmp	r3, #8
 8004428:	d05c      	beq.n	80044e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d141      	bne.n	80044b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004432:	4b31      	ldr	r3, [pc, #196]	@ (80044f8 <HAL_RCC_OscConfig+0x478>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fc fd4a 	bl	8000ed0 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004440:	f7fc fd46 	bl	8000ed0 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e087      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004452:	4b27      	ldr	r3, [pc, #156]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	3b01      	subs	r3, #1
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	061b      	lsls	r3, r3, #24
 8004482:	491b      	ldr	r1, [pc, #108]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004488:	4b1b      	ldr	r3, [pc, #108]	@ (80044f8 <HAL_RCC_OscConfig+0x478>)
 800448a:	2201      	movs	r2, #1
 800448c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448e:	f7fc fd1f 	bl	8000ed0 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004496:	f7fc fd1b 	bl	8000ed0 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e05c      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a8:	4b11      	ldr	r3, [pc, #68]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x416>
 80044b4:	e054      	b.n	8004560 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b6:	4b10      	ldr	r3, [pc, #64]	@ (80044f8 <HAL_RCC_OscConfig+0x478>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044bc:	f7fc fd08 	bl	8000ed0 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c4:	f7fc fd04 	bl	8000ed0 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e045      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d6:	4b06      	ldr	r3, [pc, #24]	@ (80044f0 <HAL_RCC_OscConfig+0x470>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0x444>
 80044e2:	e03d      	b.n	8004560 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d107      	bne.n	80044fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e038      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40007000 	.word	0x40007000
 80044f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044fc:	4b1b      	ldr	r3, [pc, #108]	@ (800456c <HAL_RCC_OscConfig+0x4ec>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d028      	beq.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d121      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d11a      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800452c:	4013      	ands	r3, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004532:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004534:	4293      	cmp	r3, r2
 8004536:	d111      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	3b01      	subs	r3, #1
 8004546:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d107      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004556:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40023800 	.word	0x40023800

08004570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0cc      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004584:	4b68      	ldr	r3, [pc, #416]	@ (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d90c      	bls.n	80045ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004592:	4b65      	ldr	r3, [pc, #404]	@ (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800459a:	4b63      	ldr	r3, [pc, #396]	@ (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0b8      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d020      	beq.n	80045fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c4:	4b59      	ldr	r3, [pc, #356]	@ (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4a58      	ldr	r2, [pc, #352]	@ (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045dc:	4b53      	ldr	r3, [pc, #332]	@ (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	4a52      	ldr	r2, [pc, #328]	@ (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e8:	4b50      	ldr	r3, [pc, #320]	@ (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	494d      	ldr	r1, [pc, #308]	@ (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d044      	beq.n	8004690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460e:	4b47      	ldr	r3, [pc, #284]	@ (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d119      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e07f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d003      	beq.n	800462e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462a:	2b03      	cmp	r3, #3
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462e:	4b3f      	ldr	r3, [pc, #252]	@ (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e06f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463e:	4b3b      	ldr	r3, [pc, #236]	@ (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e067      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800464e:	4b37      	ldr	r3, [pc, #220]	@ (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f023 0203 	bic.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4934      	ldr	r1, [pc, #208]	@ (800472c <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	4313      	orrs	r3, r2
 800465e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004660:	f7fc fc36 	bl	8000ed0 <HAL_GetTick>
 8004664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004666:	e00a      	b.n	800467e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004668:	f7fc fc32 	bl	8000ed0 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e04f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467e:	4b2b      	ldr	r3, [pc, #172]	@ (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 020c 	and.w	r2, r3, #12
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	429a      	cmp	r2, r3
 800468e:	d1eb      	bne.n	8004668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004690:	4b25      	ldr	r3, [pc, #148]	@ (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d20c      	bcs.n	80046b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b22      	ldr	r3, [pc, #136]	@ (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a6:	4b20      	ldr	r3, [pc, #128]	@ (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e032      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c4:	4b19      	ldr	r3, [pc, #100]	@ (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4916      	ldr	r1, [pc, #88]	@ (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e2:	4b12      	ldr	r3, [pc, #72]	@ (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	490e      	ldr	r1, [pc, #56]	@ (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046f6:	f000 f821 	bl	800473c <HAL_RCC_GetSysClockFreq>
 80046fa:	4602      	mov	r2, r0
 80046fc:	4b0b      	ldr	r3, [pc, #44]	@ (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	490a      	ldr	r1, [pc, #40]	@ (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 8004708:	5ccb      	ldrb	r3, [r1, r3]
 800470a:	fa22 f303 	lsr.w	r3, r2, r3
 800470e:	4a09      	ldr	r2, [pc, #36]	@ (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004712:	4b09      	ldr	r3, [pc, #36]	@ (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fc fb96 	bl	8000e48 <HAL_InitTick>

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40023c00 	.word	0x40023c00
 800472c:	40023800 	.word	0x40023800
 8004730:	080070a4 	.word	0x080070a4
 8004734:	20000000 	.word	0x20000000
 8004738:	20000004 	.word	0x20000004

0800473c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800473c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004740:	b090      	sub	sp, #64	@ 0x40
 8004742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004754:	4b59      	ldr	r3, [pc, #356]	@ (80048bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b08      	cmp	r3, #8
 800475e:	d00d      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x40>
 8004760:	2b08      	cmp	r3, #8
 8004762:	f200 80a1 	bhi.w	80048a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0x34>
 800476a:	2b04      	cmp	r3, #4
 800476c:	d003      	beq.n	8004776 <HAL_RCC_GetSysClockFreq+0x3a>
 800476e:	e09b      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004770:	4b53      	ldr	r3, [pc, #332]	@ (80048c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004772:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004774:	e09b      	b.n	80048ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004776:	4b53      	ldr	r3, [pc, #332]	@ (80048c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004778:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800477a:	e098      	b.n	80048ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800477c:	4b4f      	ldr	r3, [pc, #316]	@ (80048bc <HAL_RCC_GetSysClockFreq+0x180>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004784:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004786:	4b4d      	ldr	r3, [pc, #308]	@ (80048bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d028      	beq.n	80047e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004792:	4b4a      	ldr	r3, [pc, #296]	@ (80048bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	2200      	movs	r2, #0
 800479a:	623b      	str	r3, [r7, #32]
 800479c:	627a      	str	r2, [r7, #36]	@ 0x24
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80047a4:	2100      	movs	r1, #0
 80047a6:	4b47      	ldr	r3, [pc, #284]	@ (80048c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80047a8:	fb03 f201 	mul.w	r2, r3, r1
 80047ac:	2300      	movs	r3, #0
 80047ae:	fb00 f303 	mul.w	r3, r0, r3
 80047b2:	4413      	add	r3, r2
 80047b4:	4a43      	ldr	r2, [pc, #268]	@ (80048c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80047b6:	fba0 1202 	umull	r1, r2, r0, r2
 80047ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047bc:	460a      	mov	r2, r1
 80047be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80047c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047c2:	4413      	add	r3, r2
 80047c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c8:	2200      	movs	r2, #0
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	61fa      	str	r2, [r7, #28]
 80047ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80047d6:	f7fb fd4b 	bl	8000270 <__aeabi_uldivmod>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4613      	mov	r3, r2
 80047e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047e2:	e053      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e4:	4b35      	ldr	r3, [pc, #212]	@ (80048bc <HAL_RCC_GetSysClockFreq+0x180>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	099b      	lsrs	r3, r3, #6
 80047ea:	2200      	movs	r2, #0
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	617a      	str	r2, [r7, #20]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80047f6:	f04f 0b00 	mov.w	fp, #0
 80047fa:	4652      	mov	r2, sl
 80047fc:	465b      	mov	r3, fp
 80047fe:	f04f 0000 	mov.w	r0, #0
 8004802:	f04f 0100 	mov.w	r1, #0
 8004806:	0159      	lsls	r1, r3, #5
 8004808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800480c:	0150      	lsls	r0, r2, #5
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	ebb2 080a 	subs.w	r8, r2, sl
 8004816:	eb63 090b 	sbc.w	r9, r3, fp
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004826:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800482a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800482e:	ebb2 0408 	subs.w	r4, r2, r8
 8004832:	eb63 0509 	sbc.w	r5, r3, r9
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	00eb      	lsls	r3, r5, #3
 8004840:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004844:	00e2      	lsls	r2, r4, #3
 8004846:	4614      	mov	r4, r2
 8004848:	461d      	mov	r5, r3
 800484a:	eb14 030a 	adds.w	r3, r4, sl
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	eb45 030b 	adc.w	r3, r5, fp
 8004854:	607b      	str	r3, [r7, #4]
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004862:	4629      	mov	r1, r5
 8004864:	028b      	lsls	r3, r1, #10
 8004866:	4621      	mov	r1, r4
 8004868:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800486c:	4621      	mov	r1, r4
 800486e:	028a      	lsls	r2, r1, #10
 8004870:	4610      	mov	r0, r2
 8004872:	4619      	mov	r1, r3
 8004874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004876:	2200      	movs	r2, #0
 8004878:	60bb      	str	r3, [r7, #8]
 800487a:	60fa      	str	r2, [r7, #12]
 800487c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004880:	f7fb fcf6 	bl	8000270 <__aeabi_uldivmod>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4613      	mov	r3, r2
 800488a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800488c:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <HAL_RCC_GetSysClockFreq+0x180>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	0c1b      	lsrs	r3, r3, #16
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	3301      	adds	r3, #1
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800489c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800489e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048a6:	e002      	b.n	80048ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048a8:	4b05      	ldr	r3, [pc, #20]	@ (80048c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80048aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3740      	adds	r7, #64	@ 0x40
 80048b4:	46bd      	mov	sp, r7
 80048b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ba:	bf00      	nop
 80048bc:	40023800 	.word	0x40023800
 80048c0:	00f42400 	.word	0x00f42400
 80048c4:	017d7840 	.word	0x017d7840

080048c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048cc:	4b03      	ldr	r3, [pc, #12]	@ (80048dc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ce:	681b      	ldr	r3, [r3, #0]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000000 	.word	0x20000000

080048e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048e4:	f7ff fff0 	bl	80048c8 <HAL_RCC_GetHCLKFreq>
 80048e8:	4602      	mov	r2, r0
 80048ea:	4b05      	ldr	r3, [pc, #20]	@ (8004900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	0a9b      	lsrs	r3, r3, #10
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	4903      	ldr	r1, [pc, #12]	@ (8004904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048f6:	5ccb      	ldrb	r3, [r1, r3]
 80048f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40023800 	.word	0x40023800
 8004904:	080070b4 	.word	0x080070b4

08004908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800490c:	f7ff ffdc 	bl	80048c8 <HAL_RCC_GetHCLKFreq>
 8004910:	4602      	mov	r2, r0
 8004912:	4b05      	ldr	r3, [pc, #20]	@ (8004928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	0b5b      	lsrs	r3, r3, #13
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	4903      	ldr	r1, [pc, #12]	@ (800492c <HAL_RCC_GetPCLK2Freq+0x24>)
 800491e:	5ccb      	ldrb	r3, [r1, r3]
 8004920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004924:	4618      	mov	r0, r3
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40023800 	.word	0x40023800
 800492c:	080070b4 	.word	0x080070b4

08004930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e041      	b.n	80049c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fc f8ce 	bl	8000af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	4619      	mov	r1, r3
 800496e:	4610      	mov	r0, r2
 8004970:	f000 fa7e 	bl	8004e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d001      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e04e      	b.n	8004a86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a23      	ldr	r2, [pc, #140]	@ (8004a94 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d022      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a12:	d01d      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1f      	ldr	r2, [pc, #124]	@ (8004a98 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d018      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1e      	ldr	r2, [pc, #120]	@ (8004a9c <HAL_TIM_Base_Start_IT+0xcc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d013      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8004aa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00e      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d009      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a19      	ldr	r2, [pc, #100]	@ (8004aa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a18      	ldr	r2, [pc, #96]	@ (8004aac <HAL_TIM_Base_Start_IT+0xdc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d111      	bne.n	8004a74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b06      	cmp	r3, #6
 8004a60:	d010      	beq.n	8004a84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0201 	orr.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a72:	e007      	b.n	8004a84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40010000 	.word	0x40010000
 8004a98:	40000400 	.word	0x40000400
 8004a9c:	40000800 	.word	0x40000800
 8004aa0:	40000c00 	.word	0x40000c00
 8004aa4:	40010400 	.word	0x40010400
 8004aa8:	40014000 	.word	0x40014000
 8004aac:	40001800 	.word	0x40001800

08004ab0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d020      	beq.n	8004b14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01b      	beq.n	8004b14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0202 	mvn.w	r2, #2
 8004ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f999 	bl	8004e32 <HAL_TIM_IC_CaptureCallback>
 8004b00:	e005      	b.n	8004b0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f98b 	bl	8004e1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f99c 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d020      	beq.n	8004b60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01b      	beq.n	8004b60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0204 	mvn.w	r2, #4
 8004b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2202      	movs	r2, #2
 8004b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f973 	bl	8004e32 <HAL_TIM_IC_CaptureCallback>
 8004b4c:	e005      	b.n	8004b5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f965 	bl	8004e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f976 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d020      	beq.n	8004bac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d01b      	beq.n	8004bac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0208 	mvn.w	r2, #8
 8004b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2204      	movs	r2, #4
 8004b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	f003 0303 	and.w	r3, r3, #3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f94d 	bl	8004e32 <HAL_TIM_IC_CaptureCallback>
 8004b98:	e005      	b.n	8004ba6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f93f 	bl	8004e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f950 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f003 0310 	and.w	r3, r3, #16
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d020      	beq.n	8004bf8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f003 0310 	and.w	r3, r3, #16
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01b      	beq.n	8004bf8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0210 	mvn.w	r2, #16
 8004bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2208      	movs	r2, #8
 8004bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f927 	bl	8004e32 <HAL_TIM_IC_CaptureCallback>
 8004be4:	e005      	b.n	8004bf2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f919 	bl	8004e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f92a 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00c      	beq.n	8004c1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f06f 0201 	mvn.w	r2, #1
 8004c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fb fe82 	bl	8000920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00c      	beq.n	8004c40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d007      	beq.n	8004c40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fae4 	bl	8005208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00c      	beq.n	8004c64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d007      	beq.n	8004c64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f8fb 	bl	8004e5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00c      	beq.n	8004c88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0220 	mvn.w	r2, #32
 8004c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fab6 	bl	80051f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_TIM_ConfigClockSource+0x1c>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e0b4      	b.n	8004e16 <HAL_TIM_ConfigClockSource+0x186>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce4:	d03e      	beq.n	8004d64 <HAL_TIM_ConfigClockSource+0xd4>
 8004ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cea:	f200 8087 	bhi.w	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
 8004cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf2:	f000 8086 	beq.w	8004e02 <HAL_TIM_ConfigClockSource+0x172>
 8004cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cfa:	d87f      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
 8004cfc:	2b70      	cmp	r3, #112	@ 0x70
 8004cfe:	d01a      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0xa6>
 8004d00:	2b70      	cmp	r3, #112	@ 0x70
 8004d02:	d87b      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
 8004d04:	2b60      	cmp	r3, #96	@ 0x60
 8004d06:	d050      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x11a>
 8004d08:	2b60      	cmp	r3, #96	@ 0x60
 8004d0a:	d877      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
 8004d0c:	2b50      	cmp	r3, #80	@ 0x50
 8004d0e:	d03c      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0xfa>
 8004d10:	2b50      	cmp	r3, #80	@ 0x50
 8004d12:	d873      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
 8004d14:	2b40      	cmp	r3, #64	@ 0x40
 8004d16:	d058      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x13a>
 8004d18:	2b40      	cmp	r3, #64	@ 0x40
 8004d1a:	d86f      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
 8004d1c:	2b30      	cmp	r3, #48	@ 0x30
 8004d1e:	d064      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x15a>
 8004d20:	2b30      	cmp	r3, #48	@ 0x30
 8004d22:	d86b      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d060      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x15a>
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d867      	bhi.n	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d05c      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x15a>
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d05a      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x15a>
 8004d34:	e062      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d46:	f000 f9b9 	bl	80050bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	609a      	str	r2, [r3, #8]
      break;
 8004d62:	e04f      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d74:	f000 f9a2 	bl	80050bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d86:	609a      	str	r2, [r3, #8]
      break;
 8004d88:	e03c      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d96:	461a      	mov	r2, r3
 8004d98:	f000 f916 	bl	8004fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2150      	movs	r1, #80	@ 0x50
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 f96f 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004da8:	e02c      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004db6:	461a      	mov	r2, r3
 8004db8:	f000 f935 	bl	8005026 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2160      	movs	r1, #96	@ 0x60
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 f95f 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004dc8:	e01c      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f000 f8f6 	bl	8004fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2140      	movs	r1, #64	@ 0x40
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f94f 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004de8:	e00c      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4619      	mov	r1, r3
 8004df4:	4610      	mov	r0, r2
 8004df6:	f000 f946 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004dfa:	e003      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8004e00:	e000      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
	...

08004e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a46      	ldr	r2, [pc, #280]	@ (8004f9c <TIM_Base_SetConfig+0x12c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d013      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e8e:	d00f      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a43      	ldr	r2, [pc, #268]	@ (8004fa0 <TIM_Base_SetConfig+0x130>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00b      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a42      	ldr	r2, [pc, #264]	@ (8004fa4 <TIM_Base_SetConfig+0x134>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d007      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a41      	ldr	r2, [pc, #260]	@ (8004fa8 <TIM_Base_SetConfig+0x138>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d003      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a40      	ldr	r2, [pc, #256]	@ (8004fac <TIM_Base_SetConfig+0x13c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d108      	bne.n	8004ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a35      	ldr	r2, [pc, #212]	@ (8004f9c <TIM_Base_SetConfig+0x12c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d02b      	beq.n	8004f22 <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ed0:	d027      	beq.n	8004f22 <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a32      	ldr	r2, [pc, #200]	@ (8004fa0 <TIM_Base_SetConfig+0x130>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d023      	beq.n	8004f22 <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a31      	ldr	r2, [pc, #196]	@ (8004fa4 <TIM_Base_SetConfig+0x134>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01f      	beq.n	8004f22 <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a30      	ldr	r2, [pc, #192]	@ (8004fa8 <TIM_Base_SetConfig+0x138>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d01b      	beq.n	8004f22 <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a2f      	ldr	r2, [pc, #188]	@ (8004fac <TIM_Base_SetConfig+0x13c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d017      	beq.n	8004f22 <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8004fb0 <TIM_Base_SetConfig+0x140>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d013      	beq.n	8004f22 <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a2d      	ldr	r2, [pc, #180]	@ (8004fb4 <TIM_Base_SetConfig+0x144>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00f      	beq.n	8004f22 <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb8 <TIM_Base_SetConfig+0x148>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00b      	beq.n	8004f22 <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fbc <TIM_Base_SetConfig+0x14c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d007      	beq.n	8004f22 <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a2a      	ldr	r2, [pc, #168]	@ (8004fc0 <TIM_Base_SetConfig+0x150>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d003      	beq.n	8004f22 <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a29      	ldr	r2, [pc, #164]	@ (8004fc4 <TIM_Base_SetConfig+0x154>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d108      	bne.n	8004f34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	629a      	str	r2, [r3, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a10      	ldr	r2, [pc, #64]	@ (8004f9c <TIM_Base_SetConfig+0x12c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d003      	beq.n	8004f68 <TIM_Base_SetConfig+0xf8>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a12      	ldr	r2, [pc, #72]	@ (8004fac <TIM_Base_SetConfig+0x13c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d103      	bne.n	8004f70 <TIM_Base_SetConfig+0x100>
    TIMx->RCR = Structure->RepetitionCounter;
  }

 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);

  /* Generate an update event to reload the Prescaler
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	615a      	str	r2, [r3, #20]
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;

 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d105      	bne.n	8004f8e <TIM_Base_SetConfig+0x11e>
  TIMx->CR1 = tmpcr1;
}

 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f023 0201 	bic.w	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	611a      	str	r2, [r3, #16]
/**
  * @brief  Timer Output Compare 1 configuration
 8004f8e:	bf00      	nop
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	40010000 	.word	0x40010000
 8004fa0:	40000400 	.word	0x40000400
 8004fa4:	40000800 	.word	0x40000800
 8004fa8:	40000c00 	.word	0x40000c00
 8004fac:	40010400 	.word	0x40010400
 8004fb0:	40014000 	.word	0x40014000
 8004fb4:	40014400 	.word	0x40014400
 8004fb8:	40014800 	.word	0x40014800
 8004fbc:	40001800 	.word	0x40001800
 8004fc0:	40001c00 	.word	0x40001c00
 8004fc4:	40002000 	.word	0x40002000

08004fc8 <TIM_TI1_ConfigInputStage>:
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	617b      	str	r3, [r7, #20]
  /* Set the filter */
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f023 0201 	bic.w	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ff2:	613b      	str	r3, [r7, #16]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f023 030a 	bic.w	r3, r3, #10
 8005004:	617b      	str	r3, [r7, #20]
  TIMx->CCMR1 = tmpccmr1;
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]
  TIMx->CCER = tmpccer;
}

 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	619a      	str	r2, [r3, #24]
/**
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	621a      	str	r2, [r3, #32]
  * @brief  Configure the TI2 as Input.
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <TIM_TI2_ConfigInputStage>:
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

 8005026:	b480      	push	{r7}
 8005028:	b087      	sub	sp, #28
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;

 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	617b      	str	r3, [r7, #20]
  /* Set the filter */
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f023 0210 	bic.w	r2, r3, #16
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	621a      	str	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005050:	613b      	str	r3, [r7, #16]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	031b      	lsls	r3, r3, #12
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005062:	617b      	str	r3, [r7, #20]
  TIMx->CCMR1 = tmpccmr1 ;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]
  TIMx->CCER = tmpccer;
}

 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	619a      	str	r2, [r3, #24]
/**
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	621a      	str	r2, [r3, #32]
  * @brief  Configure the TI3 as Input.
 800507a:	bf00      	nop
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <TIM_ITRx_SetConfig>:
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
 8005086:	b480      	push	{r7}
 8005088:	b085      	sub	sp, #20
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	6039      	str	r1, [r7, #0]
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source and the slave mode*/
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	60fb      	str	r3, [r7, #12]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
  /* Write to TIMx SMCR */
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800509c:	60fb      	str	r3, [r7, #12]
  TIMx->SMCR = tmpsmcr;
}
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f043 0307 	orr.w	r3, r3, #7
 80050a8:	60fb      	str	r3, [r7, #12]
/**
  * @brief  Configures the TIMx External Trigger (ETR).
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	609a      	str	r2, [r3, #8]
  * @param  TIMx to select the TIM peripheral
 80050b0:	bf00      	nop
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <TIM_ETR_SetConfig>:
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	021a      	lsls	r2, r3, #8
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	431a      	orrs	r2, r3
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]
}

/**
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	609a      	str	r2, [r3, #8]
  * @brief  Enables or disables the TIM Capture Compare Channel x.
 80050f0:	bf00      	nop
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005110:	2302      	movs	r3, #2
 8005112:	e05a      	b.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800513a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a21      	ldr	r2, [pc, #132]	@ (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d022      	beq.n	800519e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005160:	d01d      	beq.n	800519e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1d      	ldr	r2, [pc, #116]	@ (80051dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d018      	beq.n	800519e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1b      	ldr	r2, [pc, #108]	@ (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d013      	beq.n	800519e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1a      	ldr	r2, [pc, #104]	@ (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00e      	beq.n	800519e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a18      	ldr	r2, [pc, #96]	@ (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d009      	beq.n	800519e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a17      	ldr	r2, [pc, #92]	@ (80051ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d004      	beq.n	800519e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a15      	ldr	r2, [pc, #84]	@ (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d10c      	bne.n	80051b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40010000 	.word	0x40010000
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40000800 	.word	0x40000800
 80051e4:	40000c00 	.word	0x40000c00
 80051e8:	40010400 	.word	0x40010400
 80051ec:	40014000 	.word	0x40014000
 80051f0:	40001800 	.word	0x40001800

080051f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e042      	b.n	80052b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fb fc7a 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2224      	movs	r2, #36	@ 0x24
 800524c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800525e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fd69 	bl	8005d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691a      	ldr	r2, [r3, #16]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695a      	ldr	r2, [r3, #20]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08a      	sub	sp, #40	@ 0x28
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	4613      	mov	r3, r2
 80052ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d175      	bne.n	80053c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <HAL_UART_Transmit+0x2c>
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e06e      	b.n	80053ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2221      	movs	r2, #33	@ 0x21
 80052f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052fa:	f7fb fde9 	bl	8000ed0 <HAL_GetTick>
 80052fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	88fa      	ldrh	r2, [r7, #6]
 8005304:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	88fa      	ldrh	r2, [r7, #6]
 800530a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005314:	d108      	bne.n	8005328 <HAL_UART_Transmit+0x6c>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d104      	bne.n	8005328 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	61bb      	str	r3, [r7, #24]
 8005326:	e003      	b.n	8005330 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800532c:	2300      	movs	r3, #0
 800532e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005330:	e02e      	b.n	8005390 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2200      	movs	r2, #0
 800533a:	2180      	movs	r1, #128	@ 0x80
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 fb05 	bl	800594c <UART_WaitOnFlagUntilTimeout>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e03a      	b.n	80053ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10b      	bne.n	8005372 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005368:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	3302      	adds	r3, #2
 800536e:	61bb      	str	r3, [r7, #24]
 8005370:	e007      	b.n	8005382 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	781a      	ldrb	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	3301      	adds	r3, #1
 8005380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1cb      	bne.n	8005332 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2200      	movs	r2, #0
 80053a2:	2140      	movs	r1, #64	@ 0x40
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 fad1 	bl	800594c <UART_WaitOnFlagUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e006      	b.n	80053ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2220      	movs	r2, #32
 80053c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	e000      	b.n	80053ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80053c8:	2302      	movs	r3, #2
  }
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3720      	adds	r7, #32
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <HAL_UART_IRQHandler>:
  return HAL_OK;
}

/**
  * @brief  This function handles UART interrupt request.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b0ba      	sub	sp, #232	@ 0xe8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  *                the configuration information for the specified UART module.
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  * @retval None
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  */
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
 80053fa:	2300      	movs	r3, #0
 80053fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
{
 8005400:	2300      	movs	r3, #0
 8005402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t errorflags = 0x00U;
 8005412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10f      	bne.n	800543a <HAL_UART_IRQHandler+0x66>
  uint32_t dmarequest = 0x00U;

  /* If no error occurs */
 800541a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <HAL_UART_IRQHandler+0x66>
 8005426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_UART_IRQHandler+0x66>
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if (errorflags == RESET)
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fbc2 	bl	8005bbc <UART_Receive_IT>
  {
 8005438:	e25b      	b.n	80058f2 <HAL_UART_IRQHandler+0x51e>
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
    {
      UART_Receive_IT(huart);
      return;
 800543a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 80de 	beq.w	8005600 <HAL_UART_IRQHandler+0x22c>
 8005444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d106      	bne.n	800545e <HAL_UART_IRQHandler+0x8a>
    }
 8005450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005454:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 80d1 	beq.w	8005600 <HAL_UART_IRQHandler+0x22c>
  }

  /* If some errors occur */
 800545e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00b      	beq.n	8005482 <HAL_UART_IRQHandler+0xae>
 800546a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800546e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <HAL_UART_IRQHandler+0xae>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547a:	f043 0201 	orr.w	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	645a      	str	r2, [r3, #68]	@ 0x44
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
    {
 8005482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00b      	beq.n	80054a6 <HAL_UART_IRQHandler+0xd2>
 800548e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d005      	beq.n	80054a6 <HAL_UART_IRQHandler+0xd2>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
    }
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549e:	f043 0202 	orr.w	r2, r3, #2
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
    {
 80054a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00b      	beq.n	80054ca <HAL_UART_IRQHandler+0xf6>
 80054b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <HAL_UART_IRQHandler+0xf6>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
    }
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c2:	f043 0204 	orr.w	r2, r3, #4
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
    {
 80054ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d011      	beq.n	80054fa <HAL_UART_IRQHandler+0x126>
 80054d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d105      	bne.n	80054ee <HAL_UART_IRQHandler+0x11a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <HAL_UART_IRQHandler+0x126>
    }

 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f2:	f043 0208 	orr.w	r2, r3, #8
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
    {
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 81f2 	beq.w	80058e8 <HAL_UART_IRQHandler+0x514>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
    }

 8005504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <HAL_UART_IRQHandler+0x14e>
 8005510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <HAL_UART_IRQHandler+0x14e>
    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fb4d 	bl	8005bbc <UART_Receive_IT>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
      {
        UART_Receive_IT(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552c:	2b40      	cmp	r3, #64	@ 0x40
 800552e:	bf0c      	ite	eq
 8005530:	2301      	moveq	r3, #1
 8005532:	2300      	movne	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      }
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d103      	bne.n	800554e <HAL_UART_IRQHandler+0x17a>
 8005546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d04f      	beq.n	80055ee <HAL_UART_IRQHandler+0x21a>

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fa55 	bl	80059fe <UART_EndRxTransfer>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555e:	2b40      	cmp	r3, #64	@ 0x40
 8005560:	d141      	bne.n	80055e6 <HAL_UART_IRQHandler+0x212>
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3314      	adds	r3, #20
 8005568:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005578:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800557c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005580:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3314      	adds	r3, #20
 800558a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800558e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005592:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800559a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80055a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1d9      	bne.n	8005562 <HAL_UART_IRQHandler+0x18e>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d013      	beq.n	80055de <HAL_UART_IRQHandler+0x20a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

          /* Abort the UART DMA Rx stream */
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ba:	4a7e      	ldr	r2, [pc, #504]	@ (80057b4 <HAL_UART_IRQHandler+0x3e0>)
 80055bc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (huart->hdmarx != NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fb fe35 	bl	8001232 <HAL_DMA_Abort_IT>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d016      	beq.n	80055fc <HAL_UART_IRQHandler+0x228>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055d8:	4610      	mov	r0, r2
 80055da:	4798      	blx	r3
           Set the UART state ready to be able to start again the process,
 80055dc:	e00e      	b.n	80055fc <HAL_UART_IRQHandler+0x228>
            }
          }
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f99e 	bl	8005920 <HAL_UART_ErrorCallback>
           Set the UART state ready to be able to start again the process,
 80055e4:	e00a      	b.n	80055fc <HAL_UART_IRQHandler+0x228>
          }
        }
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f99a 	bl	8005920 <HAL_UART_ErrorCallback>
           Set the UART state ready to be able to start again the process,
 80055ec:	e006      	b.n	80055fc <HAL_UART_IRQHandler+0x228>
      }
      else
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f996 	bl	8005920 <HAL_UART_ErrorCallback>
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	645a      	str	r2, [r3, #68]	@ 0x44
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 80055fa:	e175      	b.n	80058e8 <HAL_UART_IRQHandler+0x514>
           Set the UART state ready to be able to start again the process,
 80055fc:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 80055fe:	e173      	b.n	80058e8 <HAL_UART_IRQHandler+0x514>

        huart->ErrorCode = HAL_UART_ERROR_NONE;
      }
    }
    return;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005604:	2b01      	cmp	r3, #1
 8005606:	f040 814f 	bne.w	80058a8 <HAL_UART_IRQHandler+0x4d4>
  } /* End if some error occurs */
 800560a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800560e:	f003 0310 	and.w	r3, r3, #16
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 8148 	beq.w	80058a8 <HAL_UART_IRQHandler+0x4d4>

 8005618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800561c:	f003 0310 	and.w	r3, r3, #16
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 8141 	beq.w	80058a8 <HAL_UART_IRQHandler+0x4d4>
  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
 8005626:	2300      	movs	r3, #0
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60bb      	str	r3, [r7, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	60bb      	str	r3, [r7, #8]
 800563a:	68bb      	ldr	r3, [r7, #8]
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
      && ((isrflags & USART_SR_IDLE) != 0U)
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005646:	2b40      	cmp	r3, #64	@ 0x40
 8005648:	f040 80b6 	bne.w	80057b8 <HAL_UART_IRQHandler+0x3e4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
    {
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      /* DMA mode enabled */
 8005658:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 8145 	beq.w	80058ec <HAL_UART_IRQHandler+0x518>
      /* Check received length : If all expected data are received, do nothing,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005666:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800566a:	429a      	cmp	r2, r3
 800566c:	f080 813e 	bcs.w	80058ec <HAL_UART_IRQHandler+0x518>
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005676:	85da      	strh	r2, [r3, #46]	@ 0x2e
      if ((nb_remaining_rx_data > 0U)
          && (nb_remaining_rx_data < huart->RxXferSize))
      {
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005682:	f000 8088 	beq.w	8005796 <HAL_UART_IRQHandler+0x3c2>
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;

 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	330c      	adds	r3, #12
 800568c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005690:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800569c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	330c      	adds	r3, #12
 80056ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80056b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1d9      	bne.n	8005686 <HAL_UART_IRQHandler+0x2b2>
        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3314      	adds	r3, #20
 80056d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056e4:	f023 0301 	bic.w	r3, r3, #1
 80056e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3314      	adds	r3, #20
 80056f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005708:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e1      	bne.n	80056d2 <HAL_UART_IRQHandler+0x2fe>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3314      	adds	r3, #20
 8005714:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800571e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005724:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3314      	adds	r3, #20
 800572e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005732:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005734:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005736:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005738:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800573a:	e841 2300 	strex	r3, r2, [r1]
 800573e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1e3      	bne.n	800570e <HAL_UART_IRQHandler+0x33a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2220      	movs	r2, #32
 800574a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
             in the UART CR3 register */
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	631a      	str	r2, [r3, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	330c      	adds	r3, #12
 800575a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800575e:	e853 3f00 	ldrex	r3, [r3]
 8005762:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005766:	f023 0310 	bic.w	r3, r3, #16
 800576a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	330c      	adds	r3, #12
 8005774:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005778:	65ba      	str	r2, [r7, #88]	@ 0x58
 800577a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800577e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e3      	bne.n	8005754 <HAL_UART_IRQHandler+0x380>
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005790:	4618      	mov	r0, r3
 8005792:	f7fb fcde 	bl	8001152 <HAL_DMA_Abort>

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2202      	movs	r2, #2
 800579a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	4619      	mov	r1, r3
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f8c1 	bl	8005934 <HAL_UARTEx_RxEventCallback>
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
 80057b2:	e09b      	b.n	80058ec <HAL_UART_IRQHandler+0x518>
 80057b4:	08005ac5 	.word	0x08005ac5
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      else
      {
        /* If DMA is in Circular mode, Idle event is to be reported to user
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
           even if occurring after a Transfer Complete event from DMA */
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 808e 	beq.w	80058f0 <HAL_UART_IRQHandler+0x51c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80057d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 8089 	beq.w	80058f0 <HAL_UART_IRQHandler+0x51c>
        {
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
          {
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	330c      	adds	r3, #12
 80057e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	330c      	adds	r3, #12
 80057fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005802:	647a      	str	r2, [r7, #68]	@ 0x44
 8005804:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005806:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005808:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e3      	bne.n	80057de <HAL_UART_IRQHandler+0x40a>
            /* Initialize type of RxEvent that correspond to RxEvent callback execution;
               In this case, Rx Event type is Idle Event */
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3314      	adds	r3, #20
 800581c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	e853 3f00 	ldrex	r3, [r3]
 8005824:	623b      	str	r3, [r7, #32]
   return(result);
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	f023 0301 	bic.w	r3, r3, #1
 800582c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3314      	adds	r3, #20
 8005836:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800583a:	633a      	str	r2, [r7, #48]	@ 0x30
 800583c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e3      	bne.n	8005816 <HAL_UART_IRQHandler+0x442>

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered Rx Event callback*/
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            huart->RxEventCallback(huart, huart->RxXferSize);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	631a      	str	r2, [r3, #48]	@ 0x30
#else
            /*Call legacy weak Rx Event callback*/
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	330c      	adds	r3, #12
 8005862:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	60fb      	str	r3, [r7, #12]
   return(result);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0310 	bic.w	r3, r3, #16
 8005872:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	330c      	adds	r3, #12
 800587c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005880:	61fa      	str	r2, [r7, #28]
 8005882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	69b9      	ldr	r1, [r7, #24]
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	617b      	str	r3, [r7, #20]
   return(result);
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e3      	bne.n	800585c <HAL_UART_IRQHandler+0x488>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	635a      	str	r2, [r3, #52]	@ 0x34
      return;
    }
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
 800589a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f847 	bl	8005934 <HAL_UARTEx_RxEventCallback>
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
      if ((huart->RxXferCount > 0U)
 80058a6:	e023      	b.n	80058f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));

 80058a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d009      	beq.n	80058c8 <HAL_UART_IRQHandler+0x4f4>
 80058b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_UART_IRQHandler+0x4f4>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f913 	bl	8005aec <UART_Transmit_IT>

 80058c6:	e014      	b.n	80058f2 <HAL_UART_IRQHandler+0x51e>
        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

 80058c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00e      	beq.n	80058f2 <HAL_UART_IRQHandler+0x51e>
 80058d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <HAL_UART_IRQHandler+0x51e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);

 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f953 	bl	8005b8c <UART_EndTransmit_IT>
        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
 80058e6:	e004      	b.n	80058f2 <HAL_UART_IRQHandler+0x51e>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 80058e8:	bf00      	nop
 80058ea:	e002      	b.n	80058f2 <HAL_UART_IRQHandler+0x51e>
#else
 80058ec:	bf00      	nop
 80058ee:	e000      	b.n	80058f2 <HAL_UART_IRQHandler+0x51e>
      if ((huart->RxXferCount > 0U)
 80058f0:	bf00      	nop
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058f2:	37e8      	adds	r7, #232	@ 0xe8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_UART_TxCpltCallback>:
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
      return;
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_UART_RxCpltCallback>:
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}

/**
  * @brief  Tx Half Transfer completed callbacks.
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_UART_ErrorCallback>:
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}

/**
  * @brief  Rx Half Transfer completed callbacks.
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_UARTEx_RxEventCallback>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	807b      	strh	r3, [r7, #2]

/**
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <UART_WaitOnFlagUntilTimeout>:

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
  {
    huart->RxXferCount = 0x00U;
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	4613      	mov	r3, r2
 800595a:	71fb      	strb	r3, [r7, #7]
    UART_EndRxTransfer(huart);
  }
 800595c:	e03b      	b.n	80059d6 <UART_WaitOnFlagUntilTimeout+0x8a>

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005964:	d037      	beq.n	80059d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005966:	f7fb fab3 	bl	8000ed0 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	6a3a      	ldr	r2, [r7, #32]
 8005972:	429a      	cmp	r2, r3
 8005974:	d302      	bcc.n	800597c <UART_WaitOnFlagUntilTimeout+0x30>
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <UART_WaitOnFlagUntilTimeout+0x34>
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800597c:	2303      	movs	r3, #3
 800597e:	e03a      	b.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xaa>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}

 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b00      	cmp	r3, #0
 800598c:	d023      	beq.n	80059d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b80      	cmp	r3, #128	@ 0x80
 8005992:	d020      	beq.n	80059d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b40      	cmp	r3, #64	@ 0x40
 8005998:	d01d      	beq.n	80059d6 <UART_WaitOnFlagUntilTimeout+0x8a>
/**
  * @brief  This function handles UART Communication Timeout. It waits
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0308 	and.w	r3, r3, #8
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d116      	bne.n	80059d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  *         until a flag is no longer in the specified status.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
 80059a8:	2300      	movs	r3, #0
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	697b      	ldr	r3, [r7, #20]
  * @param  Flag specifies the UART flag to check.
  * @param  Status The actual Flag status (SET or RESET).
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 f81d 	bl	80059fe <UART_EndRxTransfer>
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2208      	movs	r2, #8
 80059c8:	645a      	str	r2, [r3, #68]	@ 0x44
                                                     uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
 80059d2:	2301      	movs	r3, #1
 80059d4:	e00f      	b.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  }
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4013      	ands	r3, r2
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	bf0c      	ite	eq
 80059e6:	2301      	moveq	r3, #1
 80059e8:	2300      	movne	r3, #0
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d0b4      	beq.n	800595e <UART_WaitOnFlagUntilTimeout+0x12>
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
      {
 80059f4:	2300      	movs	r3, #0

 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <UART_EndRxTransfer>:
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);

  if (huart->Init.Parity != UART_PARITY_NONE)
  {
 80059fe:	b480      	push	{r7}
 8005a00:	b095      	sub	sp, #84	@ 0x54
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	330c      	adds	r3, #12
 8005a0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a10:	e853 3f00 	ldrex	r3, [r3]
 8005a14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	330c      	adds	r3, #12
 8005a24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a26:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e5      	bne.n	8005a06 <UART_EndRxTransfer+0x8>
  }
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3314      	adds	r3, #20
 8005a40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	e853 3f00 	ldrex	r3, [r3]
 8005a48:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	f023 0301 	bic.w	r3, r3, #1
 8005a50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3314      	adds	r3, #20
 8005a58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e5      	bne.n	8005a3a <UART_EndRxTransfer+0x3c>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d119      	bne.n	8005aaa <UART_EndRxTransfer+0xac>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	e853 3f00 	ldrex	r3, [r3]
 8005a84:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f023 0310 	bic.w	r3, r3, #16
 8005a8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	330c      	adds	r3, #12
 8005a94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a96:	61ba      	str	r2, [r7, #24]
 8005a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	6979      	ldr	r1, [r7, #20]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e5      	bne.n	8005a76 <UART_EndRxTransfer+0x78>
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);

  return HAL_OK;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
}
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	631a      	str	r2, [r3, #48]	@ 0x30

 8005ab8:	bf00      	nop
 8005aba:	3754      	adds	r7, #84	@ 0x54
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <UART_DMAAbortOnError>:
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));

 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* At end of Tx process, restore huart->gState to Ready */
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad0:	60fb      	str	r3, [r7, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	85da      	strh	r2, [r3, #46]	@ 0x2e
}
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	84da      	strh	r2, [r3, #38]	@ 0x26
/**
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f7ff ff1e 	bl	8005920 <HAL_UART_ErrorCallback>
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 8005ae4:	bf00      	nop
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <UART_Transmit_IT>:
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}

/**
  * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
  *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  *         (This callback is executed at end of DMA Rx Abort procedure following user abort request,
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b21      	cmp	r3, #33	@ 0x21
 8005afe:	d13e      	bne.n	8005b7e <UART_Transmit_IT+0x92>
  * @retval None
  */
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b08:	d114      	bne.n	8005b34 <UART_Transmit_IT+0x48>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d110      	bne.n	8005b34 <UART_Transmit_IT+0x48>
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b26:	605a      	str	r2, [r3, #4]

 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	1c9a      	adds	r2, r3, #2
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	621a      	str	r2, [r3, #32]
 8005b32:	e008      	b.n	8005b46 <UART_Transmit_IT+0x5a>
  huart->RxXferCount = 0x00U;

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	1c59      	adds	r1, r3, #1
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6211      	str	r1, [r2, #32]
 8005b3e:	781a      	ldrb	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	605a      	str	r2, [r3, #4]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

  /* Call user Abort complete callback */
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	4619      	mov	r1, r3
 8005b54:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10f      	bne.n	8005b7a <UART_Transmit_IT+0x8e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b68:	60da      	str	r2, [r3, #12]
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b78:	60da      	str	r2, [r3, #12]
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e000      	b.n	8005b80 <UART_Transmit_IT+0x94>

/**
  * @brief  Sends an amount of data in non blocking mode.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 8005b7e:	2302      	movs	r3, #2
  *                the configuration information for the specified UART module.
  * @retval HAL status
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <UART_EndTransmit_IT>:
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ba2:	60da      	str	r2, [r3, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
      huart->pTxBuffPtr += 2U;
    }
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
    }

    if (--huart->TxXferCount == 0U)
    {
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff fea3 	bl	80058f8 <HAL_UART_TxCpltCallback>
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);

 8005bb2:	2300      	movs	r3, #0
      /* Enable the UART Transmit Complete Interrupt */
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <UART_Receive_IT>:
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08c      	sub	sp, #48	@ 0x30
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]

/**
  * @brief  Wraps up transmission in non blocking mode.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b22      	cmp	r3, #34	@ 0x22
 8005bce:	f040 80ae 	bne.w	8005d2e <UART_Receive_IT+0x172>
  * @retval HAL status
  */
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bda:	d117      	bne.n	8005c0c <UART_Receive_IT+0x50>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d113      	bne.n	8005c0c <UART_Receive_IT+0x50>
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005be4:	2300      	movs	r3, #0
 8005be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Disable the UART Transmit Complete Interrupt */
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfe:	801a      	strh	r2, [r3, #0]

 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c04:	1c9a      	adds	r2, r3, #2
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c0a:	e026      	b.n	8005c5a <UART_Receive_IT+0x9e>
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*Call registered Tx complete callback*/
 8005c12:	2300      	movs	r3, #0
 8005c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  huart->TxCpltCallback(huart);
#else
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c1e:	d007      	beq.n	8005c30 <UART_Receive_IT+0x74>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10a      	bne.n	8005c3e <UART_Receive_IT+0x82>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <UART_Receive_IT+0x82>
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	e008      	b.n	8005c50 <UART_Receive_IT+0x94>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
}
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c4e:	701a      	strb	r2, [r3, #0]

/**
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	629a      	str	r2, [r3, #40]	@ 0x28
  * @brief  Receives an amount of data in non blocking mode
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	4619      	mov	r1, r3
 8005c68:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d15d      	bne.n	8005d2a <UART_Receive_IT+0x16e>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0220 	bic.w	r2, r2, #32
 8005c7c:	60da      	str	r2, [r3, #12]
{
  uint8_t  *pdata8bits = NULL;
  uint16_t *pdata16bits = NULL;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c8c:	60da      	str	r2, [r3, #12]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695a      	ldr	r2, [r3, #20]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0201 	bic.w	r2, r2, #1
 8005c9c:	615a      	str	r2, [r3, #20]
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
    {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	635a      	str	r2, [r3, #52]	@ 0x34
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
      huart->pRxBuffPtr += 2U;
    }
    else
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d135      	bne.n	8005d20 <UART_Receive_IT+0x164>
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
      /* Unused pdata16bits */
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	631a      	str	r2, [r3, #48]	@ 0x30
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f023 0310 	bic.w	r3, r3, #16
 8005cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	330c      	adds	r3, #12
 8005cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cda:	623a      	str	r2, [r7, #32]
 8005cdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	69f9      	ldr	r1, [r7, #28]
 8005ce0:	6a3a      	ldr	r2, [r7, #32]
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e5      	bne.n	8005cba <UART_Receive_IT+0xfe>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
      }
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0310 	and.w	r3, r3, #16
 8005cf8:	2b10      	cmp	r3, #16
 8005cfa:	d10a      	bne.n	8005d12 <UART_Receive_IT+0x156>
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]
    }

    if (--huart->RxXferCount == 0U)
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff fe0b 	bl	8005934 <HAL_UARTEx_RxEventCallback>
 8005d1e:	e002      	b.n	8005d26 <UART_Receive_IT+0x16a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;

      /* Initialize type of RxEvent to Transfer Complete */
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7ff fdf3 	bl	800590c <HAL_UART_RxCpltCallback>
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
 8005d26:	2300      	movs	r3, #0
 8005d28:	e002      	b.n	8005d30 <UART_Receive_IT+0x174>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
      {
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e000      	b.n	8005d30 <UART_Receive_IT+0x174>
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

        /* Disable IDLE interrupt */
 8005d2e:	2302      	movs	r3, #2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);

 8005d30:	4618      	mov	r0, r3
 8005d32:	3730      	adds	r7, #48	@ 0x30
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UART_SetConfig>:
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
 8005d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d3c:	b0c0      	sub	sp, #256	@ 0x100
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d54:	68d9      	ldr	r1, [r3, #12]
 8005d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	ea40 0301 	orr.w	r3, r0, r1
 8005d60:	6113      	str	r3, [r2, #16]
      }

      return HAL_OK;
    }
    return HAL_OK;
  }
 8005d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  else
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d90:	f021 010c 	bic.w	r1, r1, #12
 8005d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d9e:	430b      	orrs	r3, r1
 8005da0:	60d3      	str	r3, [r2, #12]
  {
    return HAL_BUSY;
  }
}

/**
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db2:	6999      	ldr	r1, [r3, #24]
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	ea40 0301 	orr.w	r3, r0, r1
 8005dbe:	6153      	str	r3, [r2, #20]
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg;
  uint32_t pclk;
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4b8f      	ldr	r3, [pc, #572]	@ (8006004 <UART_SetConfig+0x2cc>)
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d005      	beq.n	8005dd8 <UART_SetConfig+0xa0>
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4b8d      	ldr	r3, [pc, #564]	@ (8006008 <UART_SetConfig+0x2d0>)
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d104      	bne.n	8005de2 <UART_SetConfig+0xaa>

  /* Check the parameters */
 8005dd8:	f7fe fd96 	bl	8004908 <HAL_RCC_GetPCLK2Freq>
 8005ddc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005de0:	e003      	b.n	8005dea <UART_SetConfig+0xb2>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);

 8005de2:	f7fe fd7d 	bl	80048e0 <HAL_RCC_GetPCLK1Freq>
 8005de6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Configure the UART Word Length, Parity and mode:
     Set the M bits according to huart->Init.WordLength value
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005df4:	f040 810c 	bne.w	8006010 <UART_SetConfig+0x2d8>
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
 8005df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	462b      	mov	r3, r5
 8005e0e:	1891      	adds	r1, r2, r2
 8005e10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e12:	415b      	adcs	r3, r3
 8005e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	eb12 0801 	adds.w	r8, r2, r1
 8005e20:	4629      	mov	r1, r5
 8005e22:	eb43 0901 	adc.w	r9, r3, r1
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e3a:	4690      	mov	r8, r2
 8005e3c:	4699      	mov	r9, r3
 8005e3e:	4623      	mov	r3, r4
 8005e40:	eb18 0303 	adds.w	r3, r8, r3
 8005e44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e48:	462b      	mov	r3, r5
 8005e4a:	eb49 0303 	adc.w	r3, r9, r3
 8005e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e66:	460b      	mov	r3, r1
 8005e68:	18db      	adds	r3, r3, r3
 8005e6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	eb42 0303 	adc.w	r3, r2, r3
 8005e72:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e7c:	f7fa f9f8 	bl	8000270 <__aeabi_uldivmod>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	4b61      	ldr	r3, [pc, #388]	@ (800600c <UART_SetConfig+0x2d4>)
 8005e86:	fba3 2302 	umull	r2, r3, r3, r2
 8005e8a:	095b      	lsrs	r3, r3, #5
 8005e8c:	011c      	lsls	r4, r3, #4
 8005e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e92:	2200      	movs	r2, #0
 8005e94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ea0:	4642      	mov	r2, r8
 8005ea2:	464b      	mov	r3, r9
 8005ea4:	1891      	adds	r1, r2, r2
 8005ea6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ea8:	415b      	adcs	r3, r3
 8005eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005eb0:	4641      	mov	r1, r8
 8005eb2:	eb12 0a01 	adds.w	sl, r2, r1
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	eb43 0b01 	adc.w	fp, r3, r1
 8005ebc:	f04f 0200 	mov.w	r2, #0
 8005ec0:	f04f 0300 	mov.w	r3, #0
 8005ec4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ec8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ecc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ed0:	4692      	mov	sl, r2
 8005ed2:	469b      	mov	fp, r3
 8005ed4:	4643      	mov	r3, r8
 8005ed6:	eb1a 0303 	adds.w	r3, sl, r3
 8005eda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ede:	464b      	mov	r3, r9
 8005ee0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ee4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ef4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ef8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005efc:	460b      	mov	r3, r1
 8005efe:	18db      	adds	r3, r3, r3
 8005f00:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f02:	4613      	mov	r3, r2
 8005f04:	eb42 0303 	adc.w	r3, r2, r3
 8005f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f12:	f7fa f9ad 	bl	8000270 <__aeabi_uldivmod>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800600c <UART_SetConfig+0x2d4>)
 8005f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	2264      	movs	r2, #100	@ 0x64
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	1acb      	subs	r3, r1, r3
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f32:	4b36      	ldr	r3, [pc, #216]	@ (800600c <UART_SetConfig+0x2d4>)
 8005f34:	fba3 2302 	umull	r2, r3, r3, r2
 8005f38:	095b      	lsrs	r3, r3, #5
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f40:	441c      	add	r4, r3
 8005f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f54:	4642      	mov	r2, r8
 8005f56:	464b      	mov	r3, r9
 8005f58:	1891      	adds	r1, r2, r2
 8005f5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f5c:	415b      	adcs	r3, r3
 8005f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f64:	4641      	mov	r1, r8
 8005f66:	1851      	adds	r1, r2, r1
 8005f68:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	414b      	adcs	r3, r1
 8005f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f7c:	4659      	mov	r1, fp
 8005f7e:	00cb      	lsls	r3, r1, #3
 8005f80:	4651      	mov	r1, sl
 8005f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f86:	4651      	mov	r1, sl
 8005f88:	00ca      	lsls	r2, r1, #3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	4603      	mov	r3, r0
 8005f90:	4642      	mov	r2, r8
 8005f92:	189b      	adds	r3, r3, r2
 8005f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f98:	464b      	mov	r3, r9
 8005f9a:	460a      	mov	r2, r1
 8005f9c:	eb42 0303 	adc.w	r3, r2, r3
 8005fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fb0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fb8:	460b      	mov	r3, r1
 8005fba:	18db      	adds	r3, r3, r3
 8005fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	eb42 0303 	adc.w	r3, r2, r3
 8005fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005fce:	f7fa f94f 	bl	8000270 <__aeabi_uldivmod>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800600c <UART_SetConfig+0x2d4>)
 8005fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fdc:	095b      	lsrs	r3, r3, #5
 8005fde:	2164      	movs	r1, #100	@ 0x64
 8005fe0:	fb01 f303 	mul.w	r3, r1, r3
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	3332      	adds	r3, #50	@ 0x32
 8005fea:	4a08      	ldr	r2, [pc, #32]	@ (800600c <UART_SetConfig+0x2d4>)
 8005fec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff0:	095b      	lsrs	r3, r3, #5
 8005ff2:	f003 0207 	and.w	r2, r3, #7
 8005ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4422      	add	r2, r4
 8005ffe:	609a      	str	r2, [r3, #8]
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
 8006000:	e106      	b.n	8006210 <UART_SetConfig+0x4d8>
 8006002:	bf00      	nop
 8006004:	40011000 	.word	0x40011000
 8006008:	40011400 	.word	0x40011400
 800600c:	51eb851f 	.word	0x51eb851f
  MODIFY_REG(huart->Instance->CR1,
 8006010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006014:	2200      	movs	r2, #0
 8006016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800601a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800601e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006022:	4642      	mov	r2, r8
 8006024:	464b      	mov	r3, r9
 8006026:	1891      	adds	r1, r2, r2
 8006028:	6239      	str	r1, [r7, #32]
 800602a:	415b      	adcs	r3, r3
 800602c:	627b      	str	r3, [r7, #36]	@ 0x24
 800602e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006032:	4641      	mov	r1, r8
 8006034:	1854      	adds	r4, r2, r1
 8006036:	4649      	mov	r1, r9
 8006038:	eb43 0501 	adc.w	r5, r3, r1
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	00eb      	lsls	r3, r5, #3
 8006046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800604a:	00e2      	lsls	r2, r4, #3
 800604c:	4614      	mov	r4, r2
 800604e:	461d      	mov	r5, r3
 8006050:	4643      	mov	r3, r8
 8006052:	18e3      	adds	r3, r4, r3
 8006054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006058:	464b      	mov	r3, r9
 800605a:	eb45 0303 	adc.w	r3, r5, r3
 800605e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800606e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006072:	f04f 0200 	mov.w	r2, #0
 8006076:	f04f 0300 	mov.w	r3, #0
 800607a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800607e:	4629      	mov	r1, r5
 8006080:	008b      	lsls	r3, r1, #2
 8006082:	4621      	mov	r1, r4
 8006084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006088:	4621      	mov	r1, r4
 800608a:	008a      	lsls	r2, r1, #2
 800608c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006090:	f7fa f8ee 	bl	8000270 <__aeabi_uldivmod>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	4b60      	ldr	r3, [pc, #384]	@ (800621c <UART_SetConfig+0x4e4>)
 800609a:	fba3 2302 	umull	r2, r3, r3, r2
 800609e:	095b      	lsrs	r3, r3, #5
 80060a0:	011c      	lsls	r4, r3, #4
 80060a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060b4:	4642      	mov	r2, r8
 80060b6:	464b      	mov	r3, r9
 80060b8:	1891      	adds	r1, r2, r2
 80060ba:	61b9      	str	r1, [r7, #24]
 80060bc:	415b      	adcs	r3, r3
 80060be:	61fb      	str	r3, [r7, #28]
 80060c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060c4:	4641      	mov	r1, r8
 80060c6:	1851      	adds	r1, r2, r1
 80060c8:	6139      	str	r1, [r7, #16]
 80060ca:	4649      	mov	r1, r9
 80060cc:	414b      	adcs	r3, r1
 80060ce:	617b      	str	r3, [r7, #20]
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060dc:	4659      	mov	r1, fp
 80060de:	00cb      	lsls	r3, r1, #3
 80060e0:	4651      	mov	r1, sl
 80060e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060e6:	4651      	mov	r1, sl
 80060e8:	00ca      	lsls	r2, r1, #3
 80060ea:	4610      	mov	r0, r2
 80060ec:	4619      	mov	r1, r3
 80060ee:	4603      	mov	r3, r0
 80060f0:	4642      	mov	r2, r8
 80060f2:	189b      	adds	r3, r3, r2
 80060f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060f8:	464b      	mov	r3, r9
 80060fa:	460a      	mov	r2, r1
 80060fc:	eb42 0303 	adc.w	r3, r2, r3
 8006100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800610e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800611c:	4649      	mov	r1, r9
 800611e:	008b      	lsls	r3, r1, #2
 8006120:	4641      	mov	r1, r8
 8006122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006126:	4641      	mov	r1, r8
 8006128:	008a      	lsls	r2, r1, #2
 800612a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800612e:	f7fa f89f 	bl	8000270 <__aeabi_uldivmod>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4611      	mov	r1, r2
 8006138:	4b38      	ldr	r3, [pc, #224]	@ (800621c <UART_SetConfig+0x4e4>)
 800613a:	fba3 2301 	umull	r2, r3, r3, r1
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	2264      	movs	r2, #100	@ 0x64
 8006142:	fb02 f303 	mul.w	r3, r2, r3
 8006146:	1acb      	subs	r3, r1, r3
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	3332      	adds	r3, #50	@ 0x32
 800614c:	4a33      	ldr	r2, [pc, #204]	@ (800621c <UART_SetConfig+0x4e4>)
 800614e:	fba2 2303 	umull	r2, r3, r2, r3
 8006152:	095b      	lsrs	r3, r3, #5
 8006154:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006158:	441c      	add	r4, r3
 800615a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800615e:	2200      	movs	r2, #0
 8006160:	673b      	str	r3, [r7, #112]	@ 0x70
 8006162:	677a      	str	r2, [r7, #116]	@ 0x74
 8006164:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006168:	4642      	mov	r2, r8
 800616a:	464b      	mov	r3, r9
 800616c:	1891      	adds	r1, r2, r2
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	415b      	adcs	r3, r3
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006178:	4641      	mov	r1, r8
 800617a:	1851      	adds	r1, r2, r1
 800617c:	6039      	str	r1, [r7, #0]
 800617e:	4649      	mov	r1, r9
 8006180:	414b      	adcs	r3, r1
 8006182:	607b      	str	r3, [r7, #4]
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006190:	4659      	mov	r1, fp
 8006192:	00cb      	lsls	r3, r1, #3
 8006194:	4651      	mov	r1, sl
 8006196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800619a:	4651      	mov	r1, sl
 800619c:	00ca      	lsls	r2, r1, #3
 800619e:	4610      	mov	r0, r2
 80061a0:	4619      	mov	r1, r3
 80061a2:	4603      	mov	r3, r0
 80061a4:	4642      	mov	r2, r8
 80061a6:	189b      	adds	r3, r3, r2
 80061a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061aa:	464b      	mov	r3, r9
 80061ac:	460a      	mov	r2, r1
 80061ae:	eb42 0303 	adc.w	r3, r2, r3
 80061b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80061be:	667a      	str	r2, [r7, #100]	@ 0x64
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061cc:	4649      	mov	r1, r9
 80061ce:	008b      	lsls	r3, r1, #2
 80061d0:	4641      	mov	r1, r8
 80061d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d6:	4641      	mov	r1, r8
 80061d8:	008a      	lsls	r2, r1, #2
 80061da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061de:	f7fa f847 	bl	8000270 <__aeabi_uldivmod>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4b0d      	ldr	r3, [pc, #52]	@ (800621c <UART_SetConfig+0x4e4>)
 80061e8:	fba3 1302 	umull	r1, r3, r3, r2
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	2164      	movs	r1, #100	@ 0x64
 80061f0:	fb01 f303 	mul.w	r3, r1, r3
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	3332      	adds	r3, #50	@ 0x32
 80061fa:	4a08      	ldr	r2, [pc, #32]	@ (800621c <UART_SetConfig+0x4e4>)
 80061fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	f003 020f 	and.w	r2, r3, #15
 8006206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4422      	add	r2, r4
 800620e:	609a      	str	r2, [r3, #8]
             tmpreg);
 8006210:	bf00      	nop
 8006212:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006216:	46bd      	mov	sp, r7
 8006218:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800621c:	51eb851f 	.word	0x51eb851f

08006220 <std>:
 8006220:	2300      	movs	r3, #0
 8006222:	b510      	push	{r4, lr}
 8006224:	4604      	mov	r4, r0
 8006226:	e9c0 3300 	strd	r3, r3, [r0]
 800622a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800622e:	6083      	str	r3, [r0, #8]
 8006230:	8181      	strh	r1, [r0, #12]
 8006232:	6643      	str	r3, [r0, #100]	@ 0x64
 8006234:	81c2      	strh	r2, [r0, #14]
 8006236:	6183      	str	r3, [r0, #24]
 8006238:	4619      	mov	r1, r3
 800623a:	2208      	movs	r2, #8
 800623c:	305c      	adds	r0, #92	@ 0x5c
 800623e:	f000 f906 	bl	800644e <memset>
 8006242:	4b0d      	ldr	r3, [pc, #52]	@ (8006278 <std+0x58>)
 8006244:	6263      	str	r3, [r4, #36]	@ 0x24
 8006246:	4b0d      	ldr	r3, [pc, #52]	@ (800627c <std+0x5c>)
 8006248:	62a3      	str	r3, [r4, #40]	@ 0x28
 800624a:	4b0d      	ldr	r3, [pc, #52]	@ (8006280 <std+0x60>)
 800624c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800624e:	4b0d      	ldr	r3, [pc, #52]	@ (8006284 <std+0x64>)
 8006250:	6323      	str	r3, [r4, #48]	@ 0x30
 8006252:	4b0d      	ldr	r3, [pc, #52]	@ (8006288 <std+0x68>)
 8006254:	6224      	str	r4, [r4, #32]
 8006256:	429c      	cmp	r4, r3
 8006258:	d006      	beq.n	8006268 <std+0x48>
 800625a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800625e:	4294      	cmp	r4, r2
 8006260:	d002      	beq.n	8006268 <std+0x48>
 8006262:	33d0      	adds	r3, #208	@ 0xd0
 8006264:	429c      	cmp	r4, r3
 8006266:	d105      	bne.n	8006274 <std+0x54>
 8006268:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800626c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006270:	f000 b966 	b.w	8006540 <__retarget_lock_init_recursive>
 8006274:	bd10      	pop	{r4, pc}
 8006276:	bf00      	nop
 8006278:	080063c9 	.word	0x080063c9
 800627c:	080063eb 	.word	0x080063eb
 8006280:	08006423 	.word	0x08006423
 8006284:	08006447 	.word	0x08006447
 8006288:	20000174 	.word	0x20000174

0800628c <stdio_exit_handler>:
 800628c:	4a02      	ldr	r2, [pc, #8]	@ (8006298 <stdio_exit_handler+0xc>)
 800628e:	4903      	ldr	r1, [pc, #12]	@ (800629c <stdio_exit_handler+0x10>)
 8006290:	4803      	ldr	r0, [pc, #12]	@ (80062a0 <stdio_exit_handler+0x14>)
 8006292:	f000 b869 	b.w	8006368 <_fwalk_sglue>
 8006296:	bf00      	nop
 8006298:	2000000c 	.word	0x2000000c
 800629c:	08006ddd 	.word	0x08006ddd
 80062a0:	2000001c 	.word	0x2000001c

080062a4 <cleanup_stdio>:
 80062a4:	6841      	ldr	r1, [r0, #4]
 80062a6:	4b0c      	ldr	r3, [pc, #48]	@ (80062d8 <cleanup_stdio+0x34>)
 80062a8:	4299      	cmp	r1, r3
 80062aa:	b510      	push	{r4, lr}
 80062ac:	4604      	mov	r4, r0
 80062ae:	d001      	beq.n	80062b4 <cleanup_stdio+0x10>
 80062b0:	f000 fd94 	bl	8006ddc <_fflush_r>
 80062b4:	68a1      	ldr	r1, [r4, #8]
 80062b6:	4b09      	ldr	r3, [pc, #36]	@ (80062dc <cleanup_stdio+0x38>)
 80062b8:	4299      	cmp	r1, r3
 80062ba:	d002      	beq.n	80062c2 <cleanup_stdio+0x1e>
 80062bc:	4620      	mov	r0, r4
 80062be:	f000 fd8d 	bl	8006ddc <_fflush_r>
 80062c2:	68e1      	ldr	r1, [r4, #12]
 80062c4:	4b06      	ldr	r3, [pc, #24]	@ (80062e0 <cleanup_stdio+0x3c>)
 80062c6:	4299      	cmp	r1, r3
 80062c8:	d004      	beq.n	80062d4 <cleanup_stdio+0x30>
 80062ca:	4620      	mov	r0, r4
 80062cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062d0:	f000 bd84 	b.w	8006ddc <_fflush_r>
 80062d4:	bd10      	pop	{r4, pc}
 80062d6:	bf00      	nop
 80062d8:	20000174 	.word	0x20000174
 80062dc:	200001dc 	.word	0x200001dc
 80062e0:	20000244 	.word	0x20000244

080062e4 <global_stdio_init.part.0>:
 80062e4:	b510      	push	{r4, lr}
 80062e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006314 <global_stdio_init.part.0+0x30>)
 80062e8:	4c0b      	ldr	r4, [pc, #44]	@ (8006318 <global_stdio_init.part.0+0x34>)
 80062ea:	4a0c      	ldr	r2, [pc, #48]	@ (800631c <global_stdio_init.part.0+0x38>)
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	4620      	mov	r0, r4
 80062f0:	2200      	movs	r2, #0
 80062f2:	2104      	movs	r1, #4
 80062f4:	f7ff ff94 	bl	8006220 <std>
 80062f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80062fc:	2201      	movs	r2, #1
 80062fe:	2109      	movs	r1, #9
 8006300:	f7ff ff8e 	bl	8006220 <std>
 8006304:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006308:	2202      	movs	r2, #2
 800630a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800630e:	2112      	movs	r1, #18
 8006310:	f7ff bf86 	b.w	8006220 <std>
 8006314:	200002ac 	.word	0x200002ac
 8006318:	20000174 	.word	0x20000174
 800631c:	0800628d 	.word	0x0800628d

08006320 <__sfp_lock_acquire>:
 8006320:	4801      	ldr	r0, [pc, #4]	@ (8006328 <__sfp_lock_acquire+0x8>)
 8006322:	f000 b90e 	b.w	8006542 <__retarget_lock_acquire_recursive>
 8006326:	bf00      	nop
 8006328:	200002b5 	.word	0x200002b5

0800632c <__sfp_lock_release>:
 800632c:	4801      	ldr	r0, [pc, #4]	@ (8006334 <__sfp_lock_release+0x8>)
 800632e:	f000 b909 	b.w	8006544 <__retarget_lock_release_recursive>
 8006332:	bf00      	nop
 8006334:	200002b5 	.word	0x200002b5

08006338 <__sinit>:
 8006338:	b510      	push	{r4, lr}
 800633a:	4604      	mov	r4, r0
 800633c:	f7ff fff0 	bl	8006320 <__sfp_lock_acquire>
 8006340:	6a23      	ldr	r3, [r4, #32]
 8006342:	b11b      	cbz	r3, 800634c <__sinit+0x14>
 8006344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006348:	f7ff bff0 	b.w	800632c <__sfp_lock_release>
 800634c:	4b04      	ldr	r3, [pc, #16]	@ (8006360 <__sinit+0x28>)
 800634e:	6223      	str	r3, [r4, #32]
 8006350:	4b04      	ldr	r3, [pc, #16]	@ (8006364 <__sinit+0x2c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1f5      	bne.n	8006344 <__sinit+0xc>
 8006358:	f7ff ffc4 	bl	80062e4 <global_stdio_init.part.0>
 800635c:	e7f2      	b.n	8006344 <__sinit+0xc>
 800635e:	bf00      	nop
 8006360:	080062a5 	.word	0x080062a5
 8006364:	200002ac 	.word	0x200002ac

08006368 <_fwalk_sglue>:
 8006368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800636c:	4607      	mov	r7, r0
 800636e:	4688      	mov	r8, r1
 8006370:	4614      	mov	r4, r2
 8006372:	2600      	movs	r6, #0
 8006374:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006378:	f1b9 0901 	subs.w	r9, r9, #1
 800637c:	d505      	bpl.n	800638a <_fwalk_sglue+0x22>
 800637e:	6824      	ldr	r4, [r4, #0]
 8006380:	2c00      	cmp	r4, #0
 8006382:	d1f7      	bne.n	8006374 <_fwalk_sglue+0xc>
 8006384:	4630      	mov	r0, r6
 8006386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800638a:	89ab      	ldrh	r3, [r5, #12]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d907      	bls.n	80063a0 <_fwalk_sglue+0x38>
 8006390:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006394:	3301      	adds	r3, #1
 8006396:	d003      	beq.n	80063a0 <_fwalk_sglue+0x38>
 8006398:	4629      	mov	r1, r5
 800639a:	4638      	mov	r0, r7
 800639c:	47c0      	blx	r8
 800639e:	4306      	orrs	r6, r0
 80063a0:	3568      	adds	r5, #104	@ 0x68
 80063a2:	e7e9      	b.n	8006378 <_fwalk_sglue+0x10>

080063a4 <iprintf>:
 80063a4:	b40f      	push	{r0, r1, r2, r3}
 80063a6:	b507      	push	{r0, r1, r2, lr}
 80063a8:	4906      	ldr	r1, [pc, #24]	@ (80063c4 <iprintf+0x20>)
 80063aa:	ab04      	add	r3, sp, #16
 80063ac:	6808      	ldr	r0, [r1, #0]
 80063ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80063b2:	6881      	ldr	r1, [r0, #8]
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	f000 f9e9 	bl	800678c <_vfiprintf_r>
 80063ba:	b003      	add	sp, #12
 80063bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80063c0:	b004      	add	sp, #16
 80063c2:	4770      	bx	lr
 80063c4:	20000018 	.word	0x20000018

080063c8 <__sread>:
 80063c8:	b510      	push	{r4, lr}
 80063ca:	460c      	mov	r4, r1
 80063cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d0:	f000 f868 	bl	80064a4 <_read_r>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	bfab      	itete	ge
 80063d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80063da:	89a3      	ldrhlt	r3, [r4, #12]
 80063dc:	181b      	addge	r3, r3, r0
 80063de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80063e2:	bfac      	ite	ge
 80063e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80063e6:	81a3      	strhlt	r3, [r4, #12]
 80063e8:	bd10      	pop	{r4, pc}

080063ea <__swrite>:
 80063ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ee:	461f      	mov	r7, r3
 80063f0:	898b      	ldrh	r3, [r1, #12]
 80063f2:	05db      	lsls	r3, r3, #23
 80063f4:	4605      	mov	r5, r0
 80063f6:	460c      	mov	r4, r1
 80063f8:	4616      	mov	r6, r2
 80063fa:	d505      	bpl.n	8006408 <__swrite+0x1e>
 80063fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006400:	2302      	movs	r3, #2
 8006402:	2200      	movs	r2, #0
 8006404:	f000 f83c 	bl	8006480 <_lseek_r>
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800640e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006412:	81a3      	strh	r3, [r4, #12]
 8006414:	4632      	mov	r2, r6
 8006416:	463b      	mov	r3, r7
 8006418:	4628      	mov	r0, r5
 800641a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800641e:	f000 b853 	b.w	80064c8 <_write_r>

08006422 <__sseek>:
 8006422:	b510      	push	{r4, lr}
 8006424:	460c      	mov	r4, r1
 8006426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800642a:	f000 f829 	bl	8006480 <_lseek_r>
 800642e:	1c43      	adds	r3, r0, #1
 8006430:	89a3      	ldrh	r3, [r4, #12]
 8006432:	bf15      	itete	ne
 8006434:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006436:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800643a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800643e:	81a3      	strheq	r3, [r4, #12]
 8006440:	bf18      	it	ne
 8006442:	81a3      	strhne	r3, [r4, #12]
 8006444:	bd10      	pop	{r4, pc}

08006446 <__sclose>:
 8006446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800644a:	f000 b809 	b.w	8006460 <_close_r>

0800644e <memset>:
 800644e:	4402      	add	r2, r0
 8006450:	4603      	mov	r3, r0
 8006452:	4293      	cmp	r3, r2
 8006454:	d100      	bne.n	8006458 <memset+0xa>
 8006456:	4770      	bx	lr
 8006458:	f803 1b01 	strb.w	r1, [r3], #1
 800645c:	e7f9      	b.n	8006452 <memset+0x4>
	...

08006460 <_close_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4d06      	ldr	r5, [pc, #24]	@ (800647c <_close_r+0x1c>)
 8006464:	2300      	movs	r3, #0
 8006466:	4604      	mov	r4, r0
 8006468:	4608      	mov	r0, r1
 800646a:	602b      	str	r3, [r5, #0]
 800646c:	f7fa fc23 	bl	8000cb6 <_close>
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d102      	bne.n	800647a <_close_r+0x1a>
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	b103      	cbz	r3, 800647a <_close_r+0x1a>
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	bd38      	pop	{r3, r4, r5, pc}
 800647c:	200002b0 	.word	0x200002b0

08006480 <_lseek_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4d07      	ldr	r5, [pc, #28]	@ (80064a0 <_lseek_r+0x20>)
 8006484:	4604      	mov	r4, r0
 8006486:	4608      	mov	r0, r1
 8006488:	4611      	mov	r1, r2
 800648a:	2200      	movs	r2, #0
 800648c:	602a      	str	r2, [r5, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	f7fa fc38 	bl	8000d04 <_lseek>
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	d102      	bne.n	800649e <_lseek_r+0x1e>
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	b103      	cbz	r3, 800649e <_lseek_r+0x1e>
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	bd38      	pop	{r3, r4, r5, pc}
 80064a0:	200002b0 	.word	0x200002b0

080064a4 <_read_r>:
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	4d07      	ldr	r5, [pc, #28]	@ (80064c4 <_read_r+0x20>)
 80064a8:	4604      	mov	r4, r0
 80064aa:	4608      	mov	r0, r1
 80064ac:	4611      	mov	r1, r2
 80064ae:	2200      	movs	r2, #0
 80064b0:	602a      	str	r2, [r5, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f7fa fbe2 	bl	8000c7c <_read>
 80064b8:	1c43      	adds	r3, r0, #1
 80064ba:	d102      	bne.n	80064c2 <_read_r+0x1e>
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	b103      	cbz	r3, 80064c2 <_read_r+0x1e>
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	bd38      	pop	{r3, r4, r5, pc}
 80064c4:	200002b0 	.word	0x200002b0

080064c8 <_write_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4d07      	ldr	r5, [pc, #28]	@ (80064e8 <_write_r+0x20>)
 80064cc:	4604      	mov	r4, r0
 80064ce:	4608      	mov	r0, r1
 80064d0:	4611      	mov	r1, r2
 80064d2:	2200      	movs	r2, #0
 80064d4:	602a      	str	r2, [r5, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f7fa f860 	bl	800059c <_write>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_write_r+0x1e>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_write_r+0x1e>
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	200002b0 	.word	0x200002b0

080064ec <__errno>:
 80064ec:	4b01      	ldr	r3, [pc, #4]	@ (80064f4 <__errno+0x8>)
 80064ee:	6818      	ldr	r0, [r3, #0]
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	20000018 	.word	0x20000018

080064f8 <__libc_init_array>:
 80064f8:	b570      	push	{r4, r5, r6, lr}
 80064fa:	4d0d      	ldr	r5, [pc, #52]	@ (8006530 <__libc_init_array+0x38>)
 80064fc:	4c0d      	ldr	r4, [pc, #52]	@ (8006534 <__libc_init_array+0x3c>)
 80064fe:	1b64      	subs	r4, r4, r5
 8006500:	10a4      	asrs	r4, r4, #2
 8006502:	2600      	movs	r6, #0
 8006504:	42a6      	cmp	r6, r4
 8006506:	d109      	bne.n	800651c <__libc_init_array+0x24>
 8006508:	4d0b      	ldr	r5, [pc, #44]	@ (8006538 <__libc_init_array+0x40>)
 800650a:	4c0c      	ldr	r4, [pc, #48]	@ (800653c <__libc_init_array+0x44>)
 800650c:	f000 fdb6 	bl	800707c <_init>
 8006510:	1b64      	subs	r4, r4, r5
 8006512:	10a4      	asrs	r4, r4, #2
 8006514:	2600      	movs	r6, #0
 8006516:	42a6      	cmp	r6, r4
 8006518:	d105      	bne.n	8006526 <__libc_init_array+0x2e>
 800651a:	bd70      	pop	{r4, r5, r6, pc}
 800651c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006520:	4798      	blx	r3
 8006522:	3601      	adds	r6, #1
 8006524:	e7ee      	b.n	8006504 <__libc_init_array+0xc>
 8006526:	f855 3b04 	ldr.w	r3, [r5], #4
 800652a:	4798      	blx	r3
 800652c:	3601      	adds	r6, #1
 800652e:	e7f2      	b.n	8006516 <__libc_init_array+0x1e>
 8006530:	080070f8 	.word	0x080070f8
 8006534:	080070f8 	.word	0x080070f8
 8006538:	080070f8 	.word	0x080070f8
 800653c:	080070fc 	.word	0x080070fc

08006540 <__retarget_lock_init_recursive>:
 8006540:	4770      	bx	lr

08006542 <__retarget_lock_acquire_recursive>:
 8006542:	4770      	bx	lr

08006544 <__retarget_lock_release_recursive>:
 8006544:	4770      	bx	lr
	...

08006548 <_free_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	4605      	mov	r5, r0
 800654c:	2900      	cmp	r1, #0
 800654e:	d041      	beq.n	80065d4 <_free_r+0x8c>
 8006550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006554:	1f0c      	subs	r4, r1, #4
 8006556:	2b00      	cmp	r3, #0
 8006558:	bfb8      	it	lt
 800655a:	18e4      	addlt	r4, r4, r3
 800655c:	f000 f8e0 	bl	8006720 <__malloc_lock>
 8006560:	4a1d      	ldr	r2, [pc, #116]	@ (80065d8 <_free_r+0x90>)
 8006562:	6813      	ldr	r3, [r2, #0]
 8006564:	b933      	cbnz	r3, 8006574 <_free_r+0x2c>
 8006566:	6063      	str	r3, [r4, #4]
 8006568:	6014      	str	r4, [r2, #0]
 800656a:	4628      	mov	r0, r5
 800656c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006570:	f000 b8dc 	b.w	800672c <__malloc_unlock>
 8006574:	42a3      	cmp	r3, r4
 8006576:	d908      	bls.n	800658a <_free_r+0x42>
 8006578:	6820      	ldr	r0, [r4, #0]
 800657a:	1821      	adds	r1, r4, r0
 800657c:	428b      	cmp	r3, r1
 800657e:	bf01      	itttt	eq
 8006580:	6819      	ldreq	r1, [r3, #0]
 8006582:	685b      	ldreq	r3, [r3, #4]
 8006584:	1809      	addeq	r1, r1, r0
 8006586:	6021      	streq	r1, [r4, #0]
 8006588:	e7ed      	b.n	8006566 <_free_r+0x1e>
 800658a:	461a      	mov	r2, r3
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	b10b      	cbz	r3, 8006594 <_free_r+0x4c>
 8006590:	42a3      	cmp	r3, r4
 8006592:	d9fa      	bls.n	800658a <_free_r+0x42>
 8006594:	6811      	ldr	r1, [r2, #0]
 8006596:	1850      	adds	r0, r2, r1
 8006598:	42a0      	cmp	r0, r4
 800659a:	d10b      	bne.n	80065b4 <_free_r+0x6c>
 800659c:	6820      	ldr	r0, [r4, #0]
 800659e:	4401      	add	r1, r0
 80065a0:	1850      	adds	r0, r2, r1
 80065a2:	4283      	cmp	r3, r0
 80065a4:	6011      	str	r1, [r2, #0]
 80065a6:	d1e0      	bne.n	800656a <_free_r+0x22>
 80065a8:	6818      	ldr	r0, [r3, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	6053      	str	r3, [r2, #4]
 80065ae:	4408      	add	r0, r1
 80065b0:	6010      	str	r0, [r2, #0]
 80065b2:	e7da      	b.n	800656a <_free_r+0x22>
 80065b4:	d902      	bls.n	80065bc <_free_r+0x74>
 80065b6:	230c      	movs	r3, #12
 80065b8:	602b      	str	r3, [r5, #0]
 80065ba:	e7d6      	b.n	800656a <_free_r+0x22>
 80065bc:	6820      	ldr	r0, [r4, #0]
 80065be:	1821      	adds	r1, r4, r0
 80065c0:	428b      	cmp	r3, r1
 80065c2:	bf04      	itt	eq
 80065c4:	6819      	ldreq	r1, [r3, #0]
 80065c6:	685b      	ldreq	r3, [r3, #4]
 80065c8:	6063      	str	r3, [r4, #4]
 80065ca:	bf04      	itt	eq
 80065cc:	1809      	addeq	r1, r1, r0
 80065ce:	6021      	streq	r1, [r4, #0]
 80065d0:	6054      	str	r4, [r2, #4]
 80065d2:	e7ca      	b.n	800656a <_free_r+0x22>
 80065d4:	bd38      	pop	{r3, r4, r5, pc}
 80065d6:	bf00      	nop
 80065d8:	200002bc 	.word	0x200002bc

080065dc <sbrk_aligned>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	4e0f      	ldr	r6, [pc, #60]	@ (800661c <sbrk_aligned+0x40>)
 80065e0:	460c      	mov	r4, r1
 80065e2:	6831      	ldr	r1, [r6, #0]
 80065e4:	4605      	mov	r5, r0
 80065e6:	b911      	cbnz	r1, 80065ee <sbrk_aligned+0x12>
 80065e8:	f000 fcb4 	bl	8006f54 <_sbrk_r>
 80065ec:	6030      	str	r0, [r6, #0]
 80065ee:	4621      	mov	r1, r4
 80065f0:	4628      	mov	r0, r5
 80065f2:	f000 fcaf 	bl	8006f54 <_sbrk_r>
 80065f6:	1c43      	adds	r3, r0, #1
 80065f8:	d103      	bne.n	8006602 <sbrk_aligned+0x26>
 80065fa:	f04f 34ff 	mov.w	r4, #4294967295
 80065fe:	4620      	mov	r0, r4
 8006600:	bd70      	pop	{r4, r5, r6, pc}
 8006602:	1cc4      	adds	r4, r0, #3
 8006604:	f024 0403 	bic.w	r4, r4, #3
 8006608:	42a0      	cmp	r0, r4
 800660a:	d0f8      	beq.n	80065fe <sbrk_aligned+0x22>
 800660c:	1a21      	subs	r1, r4, r0
 800660e:	4628      	mov	r0, r5
 8006610:	f000 fca0 	bl	8006f54 <_sbrk_r>
 8006614:	3001      	adds	r0, #1
 8006616:	d1f2      	bne.n	80065fe <sbrk_aligned+0x22>
 8006618:	e7ef      	b.n	80065fa <sbrk_aligned+0x1e>
 800661a:	bf00      	nop
 800661c:	200002b8 	.word	0x200002b8

08006620 <_malloc_r>:
 8006620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006624:	1ccd      	adds	r5, r1, #3
 8006626:	f025 0503 	bic.w	r5, r5, #3
 800662a:	3508      	adds	r5, #8
 800662c:	2d0c      	cmp	r5, #12
 800662e:	bf38      	it	cc
 8006630:	250c      	movcc	r5, #12
 8006632:	2d00      	cmp	r5, #0
 8006634:	4606      	mov	r6, r0
 8006636:	db01      	blt.n	800663c <_malloc_r+0x1c>
 8006638:	42a9      	cmp	r1, r5
 800663a:	d904      	bls.n	8006646 <_malloc_r+0x26>
 800663c:	230c      	movs	r3, #12
 800663e:	6033      	str	r3, [r6, #0]
 8006640:	2000      	movs	r0, #0
 8006642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006646:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800671c <_malloc_r+0xfc>
 800664a:	f000 f869 	bl	8006720 <__malloc_lock>
 800664e:	f8d8 3000 	ldr.w	r3, [r8]
 8006652:	461c      	mov	r4, r3
 8006654:	bb44      	cbnz	r4, 80066a8 <_malloc_r+0x88>
 8006656:	4629      	mov	r1, r5
 8006658:	4630      	mov	r0, r6
 800665a:	f7ff ffbf 	bl	80065dc <sbrk_aligned>
 800665e:	1c43      	adds	r3, r0, #1
 8006660:	4604      	mov	r4, r0
 8006662:	d158      	bne.n	8006716 <_malloc_r+0xf6>
 8006664:	f8d8 4000 	ldr.w	r4, [r8]
 8006668:	4627      	mov	r7, r4
 800666a:	2f00      	cmp	r7, #0
 800666c:	d143      	bne.n	80066f6 <_malloc_r+0xd6>
 800666e:	2c00      	cmp	r4, #0
 8006670:	d04b      	beq.n	800670a <_malloc_r+0xea>
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	4639      	mov	r1, r7
 8006676:	4630      	mov	r0, r6
 8006678:	eb04 0903 	add.w	r9, r4, r3
 800667c:	f000 fc6a 	bl	8006f54 <_sbrk_r>
 8006680:	4581      	cmp	r9, r0
 8006682:	d142      	bne.n	800670a <_malloc_r+0xea>
 8006684:	6821      	ldr	r1, [r4, #0]
 8006686:	1a6d      	subs	r5, r5, r1
 8006688:	4629      	mov	r1, r5
 800668a:	4630      	mov	r0, r6
 800668c:	f7ff ffa6 	bl	80065dc <sbrk_aligned>
 8006690:	3001      	adds	r0, #1
 8006692:	d03a      	beq.n	800670a <_malloc_r+0xea>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	442b      	add	r3, r5
 8006698:	6023      	str	r3, [r4, #0]
 800669a:	f8d8 3000 	ldr.w	r3, [r8]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	bb62      	cbnz	r2, 80066fc <_malloc_r+0xdc>
 80066a2:	f8c8 7000 	str.w	r7, [r8]
 80066a6:	e00f      	b.n	80066c8 <_malloc_r+0xa8>
 80066a8:	6822      	ldr	r2, [r4, #0]
 80066aa:	1b52      	subs	r2, r2, r5
 80066ac:	d420      	bmi.n	80066f0 <_malloc_r+0xd0>
 80066ae:	2a0b      	cmp	r2, #11
 80066b0:	d917      	bls.n	80066e2 <_malloc_r+0xc2>
 80066b2:	1961      	adds	r1, r4, r5
 80066b4:	42a3      	cmp	r3, r4
 80066b6:	6025      	str	r5, [r4, #0]
 80066b8:	bf18      	it	ne
 80066ba:	6059      	strne	r1, [r3, #4]
 80066bc:	6863      	ldr	r3, [r4, #4]
 80066be:	bf08      	it	eq
 80066c0:	f8c8 1000 	streq.w	r1, [r8]
 80066c4:	5162      	str	r2, [r4, r5]
 80066c6:	604b      	str	r3, [r1, #4]
 80066c8:	4630      	mov	r0, r6
 80066ca:	f000 f82f 	bl	800672c <__malloc_unlock>
 80066ce:	f104 000b 	add.w	r0, r4, #11
 80066d2:	1d23      	adds	r3, r4, #4
 80066d4:	f020 0007 	bic.w	r0, r0, #7
 80066d8:	1ac2      	subs	r2, r0, r3
 80066da:	bf1c      	itt	ne
 80066dc:	1a1b      	subne	r3, r3, r0
 80066de:	50a3      	strne	r3, [r4, r2]
 80066e0:	e7af      	b.n	8006642 <_malloc_r+0x22>
 80066e2:	6862      	ldr	r2, [r4, #4]
 80066e4:	42a3      	cmp	r3, r4
 80066e6:	bf0c      	ite	eq
 80066e8:	f8c8 2000 	streq.w	r2, [r8]
 80066ec:	605a      	strne	r2, [r3, #4]
 80066ee:	e7eb      	b.n	80066c8 <_malloc_r+0xa8>
 80066f0:	4623      	mov	r3, r4
 80066f2:	6864      	ldr	r4, [r4, #4]
 80066f4:	e7ae      	b.n	8006654 <_malloc_r+0x34>
 80066f6:	463c      	mov	r4, r7
 80066f8:	687f      	ldr	r7, [r7, #4]
 80066fa:	e7b6      	b.n	800666a <_malloc_r+0x4a>
 80066fc:	461a      	mov	r2, r3
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	42a3      	cmp	r3, r4
 8006702:	d1fb      	bne.n	80066fc <_malloc_r+0xdc>
 8006704:	2300      	movs	r3, #0
 8006706:	6053      	str	r3, [r2, #4]
 8006708:	e7de      	b.n	80066c8 <_malloc_r+0xa8>
 800670a:	230c      	movs	r3, #12
 800670c:	6033      	str	r3, [r6, #0]
 800670e:	4630      	mov	r0, r6
 8006710:	f000 f80c 	bl	800672c <__malloc_unlock>
 8006714:	e794      	b.n	8006640 <_malloc_r+0x20>
 8006716:	6005      	str	r5, [r0, #0]
 8006718:	e7d6      	b.n	80066c8 <_malloc_r+0xa8>
 800671a:	bf00      	nop
 800671c:	200002bc 	.word	0x200002bc

08006720 <__malloc_lock>:
 8006720:	4801      	ldr	r0, [pc, #4]	@ (8006728 <__malloc_lock+0x8>)
 8006722:	f7ff bf0e 	b.w	8006542 <__retarget_lock_acquire_recursive>
 8006726:	bf00      	nop
 8006728:	200002b4 	.word	0x200002b4

0800672c <__malloc_unlock>:
 800672c:	4801      	ldr	r0, [pc, #4]	@ (8006734 <__malloc_unlock+0x8>)
 800672e:	f7ff bf09 	b.w	8006544 <__retarget_lock_release_recursive>
 8006732:	bf00      	nop
 8006734:	200002b4 	.word	0x200002b4

08006738 <__sfputc_r>:
 8006738:	6893      	ldr	r3, [r2, #8]
 800673a:	3b01      	subs	r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	b410      	push	{r4}
 8006740:	6093      	str	r3, [r2, #8]
 8006742:	da08      	bge.n	8006756 <__sfputc_r+0x1e>
 8006744:	6994      	ldr	r4, [r2, #24]
 8006746:	42a3      	cmp	r3, r4
 8006748:	db01      	blt.n	800674e <__sfputc_r+0x16>
 800674a:	290a      	cmp	r1, #10
 800674c:	d103      	bne.n	8006756 <__sfputc_r+0x1e>
 800674e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006752:	f000 bb6b 	b.w	8006e2c <__swbuf_r>
 8006756:	6813      	ldr	r3, [r2, #0]
 8006758:	1c58      	adds	r0, r3, #1
 800675a:	6010      	str	r0, [r2, #0]
 800675c:	7019      	strb	r1, [r3, #0]
 800675e:	4608      	mov	r0, r1
 8006760:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006764:	4770      	bx	lr

08006766 <__sfputs_r>:
 8006766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006768:	4606      	mov	r6, r0
 800676a:	460f      	mov	r7, r1
 800676c:	4614      	mov	r4, r2
 800676e:	18d5      	adds	r5, r2, r3
 8006770:	42ac      	cmp	r4, r5
 8006772:	d101      	bne.n	8006778 <__sfputs_r+0x12>
 8006774:	2000      	movs	r0, #0
 8006776:	e007      	b.n	8006788 <__sfputs_r+0x22>
 8006778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800677c:	463a      	mov	r2, r7
 800677e:	4630      	mov	r0, r6
 8006780:	f7ff ffda 	bl	8006738 <__sfputc_r>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d1f3      	bne.n	8006770 <__sfputs_r+0xa>
 8006788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800678c <_vfiprintf_r>:
 800678c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006790:	460d      	mov	r5, r1
 8006792:	b09d      	sub	sp, #116	@ 0x74
 8006794:	4614      	mov	r4, r2
 8006796:	4698      	mov	r8, r3
 8006798:	4606      	mov	r6, r0
 800679a:	b118      	cbz	r0, 80067a4 <_vfiprintf_r+0x18>
 800679c:	6a03      	ldr	r3, [r0, #32]
 800679e:	b90b      	cbnz	r3, 80067a4 <_vfiprintf_r+0x18>
 80067a0:	f7ff fdca 	bl	8006338 <__sinit>
 80067a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067a6:	07d9      	lsls	r1, r3, #31
 80067a8:	d405      	bmi.n	80067b6 <_vfiprintf_r+0x2a>
 80067aa:	89ab      	ldrh	r3, [r5, #12]
 80067ac:	059a      	lsls	r2, r3, #22
 80067ae:	d402      	bmi.n	80067b6 <_vfiprintf_r+0x2a>
 80067b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067b2:	f7ff fec6 	bl	8006542 <__retarget_lock_acquire_recursive>
 80067b6:	89ab      	ldrh	r3, [r5, #12]
 80067b8:	071b      	lsls	r3, r3, #28
 80067ba:	d501      	bpl.n	80067c0 <_vfiprintf_r+0x34>
 80067bc:	692b      	ldr	r3, [r5, #16]
 80067be:	b99b      	cbnz	r3, 80067e8 <_vfiprintf_r+0x5c>
 80067c0:	4629      	mov	r1, r5
 80067c2:	4630      	mov	r0, r6
 80067c4:	f000 fb70 	bl	8006ea8 <__swsetup_r>
 80067c8:	b170      	cbz	r0, 80067e8 <_vfiprintf_r+0x5c>
 80067ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067cc:	07dc      	lsls	r4, r3, #31
 80067ce:	d504      	bpl.n	80067da <_vfiprintf_r+0x4e>
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295
 80067d4:	b01d      	add	sp, #116	@ 0x74
 80067d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067da:	89ab      	ldrh	r3, [r5, #12]
 80067dc:	0598      	lsls	r0, r3, #22
 80067de:	d4f7      	bmi.n	80067d0 <_vfiprintf_r+0x44>
 80067e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067e2:	f7ff feaf 	bl	8006544 <__retarget_lock_release_recursive>
 80067e6:	e7f3      	b.n	80067d0 <_vfiprintf_r+0x44>
 80067e8:	2300      	movs	r3, #0
 80067ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80067ec:	2320      	movs	r3, #32
 80067ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80067f6:	2330      	movs	r3, #48	@ 0x30
 80067f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80069a8 <_vfiprintf_r+0x21c>
 80067fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006800:	f04f 0901 	mov.w	r9, #1
 8006804:	4623      	mov	r3, r4
 8006806:	469a      	mov	sl, r3
 8006808:	f813 2b01 	ldrb.w	r2, [r3], #1
 800680c:	b10a      	cbz	r2, 8006812 <_vfiprintf_r+0x86>
 800680e:	2a25      	cmp	r2, #37	@ 0x25
 8006810:	d1f9      	bne.n	8006806 <_vfiprintf_r+0x7a>
 8006812:	ebba 0b04 	subs.w	fp, sl, r4
 8006816:	d00b      	beq.n	8006830 <_vfiprintf_r+0xa4>
 8006818:	465b      	mov	r3, fp
 800681a:	4622      	mov	r2, r4
 800681c:	4629      	mov	r1, r5
 800681e:	4630      	mov	r0, r6
 8006820:	f7ff ffa1 	bl	8006766 <__sfputs_r>
 8006824:	3001      	adds	r0, #1
 8006826:	f000 80a7 	beq.w	8006978 <_vfiprintf_r+0x1ec>
 800682a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800682c:	445a      	add	r2, fp
 800682e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006830:	f89a 3000 	ldrb.w	r3, [sl]
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 809f 	beq.w	8006978 <_vfiprintf_r+0x1ec>
 800683a:	2300      	movs	r3, #0
 800683c:	f04f 32ff 	mov.w	r2, #4294967295
 8006840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006844:	f10a 0a01 	add.w	sl, sl, #1
 8006848:	9304      	str	r3, [sp, #16]
 800684a:	9307      	str	r3, [sp, #28]
 800684c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006850:	931a      	str	r3, [sp, #104]	@ 0x68
 8006852:	4654      	mov	r4, sl
 8006854:	2205      	movs	r2, #5
 8006856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800685a:	4853      	ldr	r0, [pc, #332]	@ (80069a8 <_vfiprintf_r+0x21c>)
 800685c:	f7f9 fcb8 	bl	80001d0 <memchr>
 8006860:	9a04      	ldr	r2, [sp, #16]
 8006862:	b9d8      	cbnz	r0, 800689c <_vfiprintf_r+0x110>
 8006864:	06d1      	lsls	r1, r2, #27
 8006866:	bf44      	itt	mi
 8006868:	2320      	movmi	r3, #32
 800686a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800686e:	0713      	lsls	r3, r2, #28
 8006870:	bf44      	itt	mi
 8006872:	232b      	movmi	r3, #43	@ 0x2b
 8006874:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006878:	f89a 3000 	ldrb.w	r3, [sl]
 800687c:	2b2a      	cmp	r3, #42	@ 0x2a
 800687e:	d015      	beq.n	80068ac <_vfiprintf_r+0x120>
 8006880:	9a07      	ldr	r2, [sp, #28]
 8006882:	4654      	mov	r4, sl
 8006884:	2000      	movs	r0, #0
 8006886:	f04f 0c0a 	mov.w	ip, #10
 800688a:	4621      	mov	r1, r4
 800688c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006890:	3b30      	subs	r3, #48	@ 0x30
 8006892:	2b09      	cmp	r3, #9
 8006894:	d94b      	bls.n	800692e <_vfiprintf_r+0x1a2>
 8006896:	b1b0      	cbz	r0, 80068c6 <_vfiprintf_r+0x13a>
 8006898:	9207      	str	r2, [sp, #28]
 800689a:	e014      	b.n	80068c6 <_vfiprintf_r+0x13a>
 800689c:	eba0 0308 	sub.w	r3, r0, r8
 80068a0:	fa09 f303 	lsl.w	r3, r9, r3
 80068a4:	4313      	orrs	r3, r2
 80068a6:	9304      	str	r3, [sp, #16]
 80068a8:	46a2      	mov	sl, r4
 80068aa:	e7d2      	b.n	8006852 <_vfiprintf_r+0xc6>
 80068ac:	9b03      	ldr	r3, [sp, #12]
 80068ae:	1d19      	adds	r1, r3, #4
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	9103      	str	r1, [sp, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	bfbb      	ittet	lt
 80068b8:	425b      	neglt	r3, r3
 80068ba:	f042 0202 	orrlt.w	r2, r2, #2
 80068be:	9307      	strge	r3, [sp, #28]
 80068c0:	9307      	strlt	r3, [sp, #28]
 80068c2:	bfb8      	it	lt
 80068c4:	9204      	strlt	r2, [sp, #16]
 80068c6:	7823      	ldrb	r3, [r4, #0]
 80068c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80068ca:	d10a      	bne.n	80068e2 <_vfiprintf_r+0x156>
 80068cc:	7863      	ldrb	r3, [r4, #1]
 80068ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80068d0:	d132      	bne.n	8006938 <_vfiprintf_r+0x1ac>
 80068d2:	9b03      	ldr	r3, [sp, #12]
 80068d4:	1d1a      	adds	r2, r3, #4
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	9203      	str	r2, [sp, #12]
 80068da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068de:	3402      	adds	r4, #2
 80068e0:	9305      	str	r3, [sp, #20]
 80068e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80069b8 <_vfiprintf_r+0x22c>
 80068e6:	7821      	ldrb	r1, [r4, #0]
 80068e8:	2203      	movs	r2, #3
 80068ea:	4650      	mov	r0, sl
 80068ec:	f7f9 fc70 	bl	80001d0 <memchr>
 80068f0:	b138      	cbz	r0, 8006902 <_vfiprintf_r+0x176>
 80068f2:	9b04      	ldr	r3, [sp, #16]
 80068f4:	eba0 000a 	sub.w	r0, r0, sl
 80068f8:	2240      	movs	r2, #64	@ 0x40
 80068fa:	4082      	lsls	r2, r0
 80068fc:	4313      	orrs	r3, r2
 80068fe:	3401      	adds	r4, #1
 8006900:	9304      	str	r3, [sp, #16]
 8006902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006906:	4829      	ldr	r0, [pc, #164]	@ (80069ac <_vfiprintf_r+0x220>)
 8006908:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800690c:	2206      	movs	r2, #6
 800690e:	f7f9 fc5f 	bl	80001d0 <memchr>
 8006912:	2800      	cmp	r0, #0
 8006914:	d03f      	beq.n	8006996 <_vfiprintf_r+0x20a>
 8006916:	4b26      	ldr	r3, [pc, #152]	@ (80069b0 <_vfiprintf_r+0x224>)
 8006918:	bb1b      	cbnz	r3, 8006962 <_vfiprintf_r+0x1d6>
 800691a:	9b03      	ldr	r3, [sp, #12]
 800691c:	3307      	adds	r3, #7
 800691e:	f023 0307 	bic.w	r3, r3, #7
 8006922:	3308      	adds	r3, #8
 8006924:	9303      	str	r3, [sp, #12]
 8006926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006928:	443b      	add	r3, r7
 800692a:	9309      	str	r3, [sp, #36]	@ 0x24
 800692c:	e76a      	b.n	8006804 <_vfiprintf_r+0x78>
 800692e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006932:	460c      	mov	r4, r1
 8006934:	2001      	movs	r0, #1
 8006936:	e7a8      	b.n	800688a <_vfiprintf_r+0xfe>
 8006938:	2300      	movs	r3, #0
 800693a:	3401      	adds	r4, #1
 800693c:	9305      	str	r3, [sp, #20]
 800693e:	4619      	mov	r1, r3
 8006940:	f04f 0c0a 	mov.w	ip, #10
 8006944:	4620      	mov	r0, r4
 8006946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800694a:	3a30      	subs	r2, #48	@ 0x30
 800694c:	2a09      	cmp	r2, #9
 800694e:	d903      	bls.n	8006958 <_vfiprintf_r+0x1cc>
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0c6      	beq.n	80068e2 <_vfiprintf_r+0x156>
 8006954:	9105      	str	r1, [sp, #20]
 8006956:	e7c4      	b.n	80068e2 <_vfiprintf_r+0x156>
 8006958:	fb0c 2101 	mla	r1, ip, r1, r2
 800695c:	4604      	mov	r4, r0
 800695e:	2301      	movs	r3, #1
 8006960:	e7f0      	b.n	8006944 <_vfiprintf_r+0x1b8>
 8006962:	ab03      	add	r3, sp, #12
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	462a      	mov	r2, r5
 8006968:	4b12      	ldr	r3, [pc, #72]	@ (80069b4 <_vfiprintf_r+0x228>)
 800696a:	a904      	add	r1, sp, #16
 800696c:	4630      	mov	r0, r6
 800696e:	f3af 8000 	nop.w
 8006972:	4607      	mov	r7, r0
 8006974:	1c78      	adds	r0, r7, #1
 8006976:	d1d6      	bne.n	8006926 <_vfiprintf_r+0x19a>
 8006978:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800697a:	07d9      	lsls	r1, r3, #31
 800697c:	d405      	bmi.n	800698a <_vfiprintf_r+0x1fe>
 800697e:	89ab      	ldrh	r3, [r5, #12]
 8006980:	059a      	lsls	r2, r3, #22
 8006982:	d402      	bmi.n	800698a <_vfiprintf_r+0x1fe>
 8006984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006986:	f7ff fddd 	bl	8006544 <__retarget_lock_release_recursive>
 800698a:	89ab      	ldrh	r3, [r5, #12]
 800698c:	065b      	lsls	r3, r3, #25
 800698e:	f53f af1f 	bmi.w	80067d0 <_vfiprintf_r+0x44>
 8006992:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006994:	e71e      	b.n	80067d4 <_vfiprintf_r+0x48>
 8006996:	ab03      	add	r3, sp, #12
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	462a      	mov	r2, r5
 800699c:	4b05      	ldr	r3, [pc, #20]	@ (80069b4 <_vfiprintf_r+0x228>)
 800699e:	a904      	add	r1, sp, #16
 80069a0:	4630      	mov	r0, r6
 80069a2:	f000 f879 	bl	8006a98 <_printf_i>
 80069a6:	e7e4      	b.n	8006972 <_vfiprintf_r+0x1e6>
 80069a8:	080070bc 	.word	0x080070bc
 80069ac:	080070c6 	.word	0x080070c6
 80069b0:	00000000 	.word	0x00000000
 80069b4:	08006767 	.word	0x08006767
 80069b8:	080070c2 	.word	0x080070c2

080069bc <_printf_common>:
 80069bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069c0:	4616      	mov	r6, r2
 80069c2:	4698      	mov	r8, r3
 80069c4:	688a      	ldr	r2, [r1, #8]
 80069c6:	690b      	ldr	r3, [r1, #16]
 80069c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069cc:	4293      	cmp	r3, r2
 80069ce:	bfb8      	it	lt
 80069d0:	4613      	movlt	r3, r2
 80069d2:	6033      	str	r3, [r6, #0]
 80069d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069d8:	4607      	mov	r7, r0
 80069da:	460c      	mov	r4, r1
 80069dc:	b10a      	cbz	r2, 80069e2 <_printf_common+0x26>
 80069de:	3301      	adds	r3, #1
 80069e0:	6033      	str	r3, [r6, #0]
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	0699      	lsls	r1, r3, #26
 80069e6:	bf42      	ittt	mi
 80069e8:	6833      	ldrmi	r3, [r6, #0]
 80069ea:	3302      	addmi	r3, #2
 80069ec:	6033      	strmi	r3, [r6, #0]
 80069ee:	6825      	ldr	r5, [r4, #0]
 80069f0:	f015 0506 	ands.w	r5, r5, #6
 80069f4:	d106      	bne.n	8006a04 <_printf_common+0x48>
 80069f6:	f104 0a19 	add.w	sl, r4, #25
 80069fa:	68e3      	ldr	r3, [r4, #12]
 80069fc:	6832      	ldr	r2, [r6, #0]
 80069fe:	1a9b      	subs	r3, r3, r2
 8006a00:	42ab      	cmp	r3, r5
 8006a02:	dc26      	bgt.n	8006a52 <_printf_common+0x96>
 8006a04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a08:	6822      	ldr	r2, [r4, #0]
 8006a0a:	3b00      	subs	r3, #0
 8006a0c:	bf18      	it	ne
 8006a0e:	2301      	movne	r3, #1
 8006a10:	0692      	lsls	r2, r2, #26
 8006a12:	d42b      	bmi.n	8006a6c <_printf_common+0xb0>
 8006a14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a18:	4641      	mov	r1, r8
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	47c8      	blx	r9
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d01e      	beq.n	8006a60 <_printf_common+0xa4>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	6922      	ldr	r2, [r4, #16]
 8006a26:	f003 0306 	and.w	r3, r3, #6
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	bf02      	ittt	eq
 8006a2e:	68e5      	ldreq	r5, [r4, #12]
 8006a30:	6833      	ldreq	r3, [r6, #0]
 8006a32:	1aed      	subeq	r5, r5, r3
 8006a34:	68a3      	ldr	r3, [r4, #8]
 8006a36:	bf0c      	ite	eq
 8006a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a3c:	2500      	movne	r5, #0
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	bfc4      	itt	gt
 8006a42:	1a9b      	subgt	r3, r3, r2
 8006a44:	18ed      	addgt	r5, r5, r3
 8006a46:	2600      	movs	r6, #0
 8006a48:	341a      	adds	r4, #26
 8006a4a:	42b5      	cmp	r5, r6
 8006a4c:	d11a      	bne.n	8006a84 <_printf_common+0xc8>
 8006a4e:	2000      	movs	r0, #0
 8006a50:	e008      	b.n	8006a64 <_printf_common+0xa8>
 8006a52:	2301      	movs	r3, #1
 8006a54:	4652      	mov	r2, sl
 8006a56:	4641      	mov	r1, r8
 8006a58:	4638      	mov	r0, r7
 8006a5a:	47c8      	blx	r9
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	d103      	bne.n	8006a68 <_printf_common+0xac>
 8006a60:	f04f 30ff 	mov.w	r0, #4294967295
 8006a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a68:	3501      	adds	r5, #1
 8006a6a:	e7c6      	b.n	80069fa <_printf_common+0x3e>
 8006a6c:	18e1      	adds	r1, r4, r3
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	2030      	movs	r0, #48	@ 0x30
 8006a72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a76:	4422      	add	r2, r4
 8006a78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a80:	3302      	adds	r3, #2
 8006a82:	e7c7      	b.n	8006a14 <_printf_common+0x58>
 8006a84:	2301      	movs	r3, #1
 8006a86:	4622      	mov	r2, r4
 8006a88:	4641      	mov	r1, r8
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	47c8      	blx	r9
 8006a8e:	3001      	adds	r0, #1
 8006a90:	d0e6      	beq.n	8006a60 <_printf_common+0xa4>
 8006a92:	3601      	adds	r6, #1
 8006a94:	e7d9      	b.n	8006a4a <_printf_common+0x8e>
	...

08006a98 <_printf_i>:
 8006a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a9c:	7e0f      	ldrb	r7, [r1, #24]
 8006a9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006aa0:	2f78      	cmp	r7, #120	@ 0x78
 8006aa2:	4691      	mov	r9, r2
 8006aa4:	4680      	mov	r8, r0
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	469a      	mov	sl, r3
 8006aaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006aae:	d807      	bhi.n	8006ac0 <_printf_i+0x28>
 8006ab0:	2f62      	cmp	r7, #98	@ 0x62
 8006ab2:	d80a      	bhi.n	8006aca <_printf_i+0x32>
 8006ab4:	2f00      	cmp	r7, #0
 8006ab6:	f000 80d1 	beq.w	8006c5c <_printf_i+0x1c4>
 8006aba:	2f58      	cmp	r7, #88	@ 0x58
 8006abc:	f000 80b8 	beq.w	8006c30 <_printf_i+0x198>
 8006ac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ac4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ac8:	e03a      	b.n	8006b40 <_printf_i+0xa8>
 8006aca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ace:	2b15      	cmp	r3, #21
 8006ad0:	d8f6      	bhi.n	8006ac0 <_printf_i+0x28>
 8006ad2:	a101      	add	r1, pc, #4	@ (adr r1, 8006ad8 <_printf_i+0x40>)
 8006ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ad8:	08006b31 	.word	0x08006b31
 8006adc:	08006b45 	.word	0x08006b45
 8006ae0:	08006ac1 	.word	0x08006ac1
 8006ae4:	08006ac1 	.word	0x08006ac1
 8006ae8:	08006ac1 	.word	0x08006ac1
 8006aec:	08006ac1 	.word	0x08006ac1
 8006af0:	08006b45 	.word	0x08006b45
 8006af4:	08006ac1 	.word	0x08006ac1
 8006af8:	08006ac1 	.word	0x08006ac1
 8006afc:	08006ac1 	.word	0x08006ac1
 8006b00:	08006ac1 	.word	0x08006ac1
 8006b04:	08006c43 	.word	0x08006c43
 8006b08:	08006b6f 	.word	0x08006b6f
 8006b0c:	08006bfd 	.word	0x08006bfd
 8006b10:	08006ac1 	.word	0x08006ac1
 8006b14:	08006ac1 	.word	0x08006ac1
 8006b18:	08006c65 	.word	0x08006c65
 8006b1c:	08006ac1 	.word	0x08006ac1
 8006b20:	08006b6f 	.word	0x08006b6f
 8006b24:	08006ac1 	.word	0x08006ac1
 8006b28:	08006ac1 	.word	0x08006ac1
 8006b2c:	08006c05 	.word	0x08006c05
 8006b30:	6833      	ldr	r3, [r6, #0]
 8006b32:	1d1a      	adds	r2, r3, #4
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6032      	str	r2, [r6, #0]
 8006b38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b40:	2301      	movs	r3, #1
 8006b42:	e09c      	b.n	8006c7e <_printf_i+0x1e6>
 8006b44:	6833      	ldr	r3, [r6, #0]
 8006b46:	6820      	ldr	r0, [r4, #0]
 8006b48:	1d19      	adds	r1, r3, #4
 8006b4a:	6031      	str	r1, [r6, #0]
 8006b4c:	0606      	lsls	r6, r0, #24
 8006b4e:	d501      	bpl.n	8006b54 <_printf_i+0xbc>
 8006b50:	681d      	ldr	r5, [r3, #0]
 8006b52:	e003      	b.n	8006b5c <_printf_i+0xc4>
 8006b54:	0645      	lsls	r5, r0, #25
 8006b56:	d5fb      	bpl.n	8006b50 <_printf_i+0xb8>
 8006b58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b5c:	2d00      	cmp	r5, #0
 8006b5e:	da03      	bge.n	8006b68 <_printf_i+0xd0>
 8006b60:	232d      	movs	r3, #45	@ 0x2d
 8006b62:	426d      	negs	r5, r5
 8006b64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b68:	4858      	ldr	r0, [pc, #352]	@ (8006ccc <_printf_i+0x234>)
 8006b6a:	230a      	movs	r3, #10
 8006b6c:	e011      	b.n	8006b92 <_printf_i+0xfa>
 8006b6e:	6821      	ldr	r1, [r4, #0]
 8006b70:	6833      	ldr	r3, [r6, #0]
 8006b72:	0608      	lsls	r0, r1, #24
 8006b74:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b78:	d402      	bmi.n	8006b80 <_printf_i+0xe8>
 8006b7a:	0649      	lsls	r1, r1, #25
 8006b7c:	bf48      	it	mi
 8006b7e:	b2ad      	uxthmi	r5, r5
 8006b80:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b82:	4852      	ldr	r0, [pc, #328]	@ (8006ccc <_printf_i+0x234>)
 8006b84:	6033      	str	r3, [r6, #0]
 8006b86:	bf14      	ite	ne
 8006b88:	230a      	movne	r3, #10
 8006b8a:	2308      	moveq	r3, #8
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b92:	6866      	ldr	r6, [r4, #4]
 8006b94:	60a6      	str	r6, [r4, #8]
 8006b96:	2e00      	cmp	r6, #0
 8006b98:	db05      	blt.n	8006ba6 <_printf_i+0x10e>
 8006b9a:	6821      	ldr	r1, [r4, #0]
 8006b9c:	432e      	orrs	r6, r5
 8006b9e:	f021 0104 	bic.w	r1, r1, #4
 8006ba2:	6021      	str	r1, [r4, #0]
 8006ba4:	d04b      	beq.n	8006c3e <_printf_i+0x1a6>
 8006ba6:	4616      	mov	r6, r2
 8006ba8:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bac:	fb03 5711 	mls	r7, r3, r1, r5
 8006bb0:	5dc7      	ldrb	r7, [r0, r7]
 8006bb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bb6:	462f      	mov	r7, r5
 8006bb8:	42bb      	cmp	r3, r7
 8006bba:	460d      	mov	r5, r1
 8006bbc:	d9f4      	bls.n	8006ba8 <_printf_i+0x110>
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d10b      	bne.n	8006bda <_printf_i+0x142>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	07df      	lsls	r7, r3, #31
 8006bc6:	d508      	bpl.n	8006bda <_printf_i+0x142>
 8006bc8:	6923      	ldr	r3, [r4, #16]
 8006bca:	6861      	ldr	r1, [r4, #4]
 8006bcc:	4299      	cmp	r1, r3
 8006bce:	bfde      	ittt	le
 8006bd0:	2330      	movle	r3, #48	@ 0x30
 8006bd2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bd6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bda:	1b92      	subs	r2, r2, r6
 8006bdc:	6122      	str	r2, [r4, #16]
 8006bde:	f8cd a000 	str.w	sl, [sp]
 8006be2:	464b      	mov	r3, r9
 8006be4:	aa03      	add	r2, sp, #12
 8006be6:	4621      	mov	r1, r4
 8006be8:	4640      	mov	r0, r8
 8006bea:	f7ff fee7 	bl	80069bc <_printf_common>
 8006bee:	3001      	adds	r0, #1
 8006bf0:	d14a      	bne.n	8006c88 <_printf_i+0x1f0>
 8006bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf6:	b004      	add	sp, #16
 8006bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	f043 0320 	orr.w	r3, r3, #32
 8006c02:	6023      	str	r3, [r4, #0]
 8006c04:	4832      	ldr	r0, [pc, #200]	@ (8006cd0 <_printf_i+0x238>)
 8006c06:	2778      	movs	r7, #120	@ 0x78
 8006c08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	6831      	ldr	r1, [r6, #0]
 8006c10:	061f      	lsls	r7, r3, #24
 8006c12:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c16:	d402      	bmi.n	8006c1e <_printf_i+0x186>
 8006c18:	065f      	lsls	r7, r3, #25
 8006c1a:	bf48      	it	mi
 8006c1c:	b2ad      	uxthmi	r5, r5
 8006c1e:	6031      	str	r1, [r6, #0]
 8006c20:	07d9      	lsls	r1, r3, #31
 8006c22:	bf44      	itt	mi
 8006c24:	f043 0320 	orrmi.w	r3, r3, #32
 8006c28:	6023      	strmi	r3, [r4, #0]
 8006c2a:	b11d      	cbz	r5, 8006c34 <_printf_i+0x19c>
 8006c2c:	2310      	movs	r3, #16
 8006c2e:	e7ad      	b.n	8006b8c <_printf_i+0xf4>
 8006c30:	4826      	ldr	r0, [pc, #152]	@ (8006ccc <_printf_i+0x234>)
 8006c32:	e7e9      	b.n	8006c08 <_printf_i+0x170>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	f023 0320 	bic.w	r3, r3, #32
 8006c3a:	6023      	str	r3, [r4, #0]
 8006c3c:	e7f6      	b.n	8006c2c <_printf_i+0x194>
 8006c3e:	4616      	mov	r6, r2
 8006c40:	e7bd      	b.n	8006bbe <_printf_i+0x126>
 8006c42:	6833      	ldr	r3, [r6, #0]
 8006c44:	6825      	ldr	r5, [r4, #0]
 8006c46:	6961      	ldr	r1, [r4, #20]
 8006c48:	1d18      	adds	r0, r3, #4
 8006c4a:	6030      	str	r0, [r6, #0]
 8006c4c:	062e      	lsls	r6, r5, #24
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	d501      	bpl.n	8006c56 <_printf_i+0x1be>
 8006c52:	6019      	str	r1, [r3, #0]
 8006c54:	e002      	b.n	8006c5c <_printf_i+0x1c4>
 8006c56:	0668      	lsls	r0, r5, #25
 8006c58:	d5fb      	bpl.n	8006c52 <_printf_i+0x1ba>
 8006c5a:	8019      	strh	r1, [r3, #0]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	6123      	str	r3, [r4, #16]
 8006c60:	4616      	mov	r6, r2
 8006c62:	e7bc      	b.n	8006bde <_printf_i+0x146>
 8006c64:	6833      	ldr	r3, [r6, #0]
 8006c66:	1d1a      	adds	r2, r3, #4
 8006c68:	6032      	str	r2, [r6, #0]
 8006c6a:	681e      	ldr	r6, [r3, #0]
 8006c6c:	6862      	ldr	r2, [r4, #4]
 8006c6e:	2100      	movs	r1, #0
 8006c70:	4630      	mov	r0, r6
 8006c72:	f7f9 faad 	bl	80001d0 <memchr>
 8006c76:	b108      	cbz	r0, 8006c7c <_printf_i+0x1e4>
 8006c78:	1b80      	subs	r0, r0, r6
 8006c7a:	6060      	str	r0, [r4, #4]
 8006c7c:	6863      	ldr	r3, [r4, #4]
 8006c7e:	6123      	str	r3, [r4, #16]
 8006c80:	2300      	movs	r3, #0
 8006c82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c86:	e7aa      	b.n	8006bde <_printf_i+0x146>
 8006c88:	6923      	ldr	r3, [r4, #16]
 8006c8a:	4632      	mov	r2, r6
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	4640      	mov	r0, r8
 8006c90:	47d0      	blx	sl
 8006c92:	3001      	adds	r0, #1
 8006c94:	d0ad      	beq.n	8006bf2 <_printf_i+0x15a>
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	079b      	lsls	r3, r3, #30
 8006c9a:	d413      	bmi.n	8006cc4 <_printf_i+0x22c>
 8006c9c:	68e0      	ldr	r0, [r4, #12]
 8006c9e:	9b03      	ldr	r3, [sp, #12]
 8006ca0:	4298      	cmp	r0, r3
 8006ca2:	bfb8      	it	lt
 8006ca4:	4618      	movlt	r0, r3
 8006ca6:	e7a6      	b.n	8006bf6 <_printf_i+0x15e>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	4632      	mov	r2, r6
 8006cac:	4649      	mov	r1, r9
 8006cae:	4640      	mov	r0, r8
 8006cb0:	47d0      	blx	sl
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	d09d      	beq.n	8006bf2 <_printf_i+0x15a>
 8006cb6:	3501      	adds	r5, #1
 8006cb8:	68e3      	ldr	r3, [r4, #12]
 8006cba:	9903      	ldr	r1, [sp, #12]
 8006cbc:	1a5b      	subs	r3, r3, r1
 8006cbe:	42ab      	cmp	r3, r5
 8006cc0:	dcf2      	bgt.n	8006ca8 <_printf_i+0x210>
 8006cc2:	e7eb      	b.n	8006c9c <_printf_i+0x204>
 8006cc4:	2500      	movs	r5, #0
 8006cc6:	f104 0619 	add.w	r6, r4, #25
 8006cca:	e7f5      	b.n	8006cb8 <_printf_i+0x220>
 8006ccc:	080070cd 	.word	0x080070cd
 8006cd0:	080070de 	.word	0x080070de

08006cd4 <__sflush_r>:
 8006cd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cdc:	0716      	lsls	r6, r2, #28
 8006cde:	4605      	mov	r5, r0
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	d454      	bmi.n	8006d8e <__sflush_r+0xba>
 8006ce4:	684b      	ldr	r3, [r1, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	dc02      	bgt.n	8006cf0 <__sflush_r+0x1c>
 8006cea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dd48      	ble.n	8006d82 <__sflush_r+0xae>
 8006cf0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cf2:	2e00      	cmp	r6, #0
 8006cf4:	d045      	beq.n	8006d82 <__sflush_r+0xae>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006cfc:	682f      	ldr	r7, [r5, #0]
 8006cfe:	6a21      	ldr	r1, [r4, #32]
 8006d00:	602b      	str	r3, [r5, #0]
 8006d02:	d030      	beq.n	8006d66 <__sflush_r+0x92>
 8006d04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d06:	89a3      	ldrh	r3, [r4, #12]
 8006d08:	0759      	lsls	r1, r3, #29
 8006d0a:	d505      	bpl.n	8006d18 <__sflush_r+0x44>
 8006d0c:	6863      	ldr	r3, [r4, #4]
 8006d0e:	1ad2      	subs	r2, r2, r3
 8006d10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d12:	b10b      	cbz	r3, 8006d18 <__sflush_r+0x44>
 8006d14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d16:	1ad2      	subs	r2, r2, r3
 8006d18:	2300      	movs	r3, #0
 8006d1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d1c:	6a21      	ldr	r1, [r4, #32]
 8006d1e:	4628      	mov	r0, r5
 8006d20:	47b0      	blx	r6
 8006d22:	1c43      	adds	r3, r0, #1
 8006d24:	89a3      	ldrh	r3, [r4, #12]
 8006d26:	d106      	bne.n	8006d36 <__sflush_r+0x62>
 8006d28:	6829      	ldr	r1, [r5, #0]
 8006d2a:	291d      	cmp	r1, #29
 8006d2c:	d82b      	bhi.n	8006d86 <__sflush_r+0xb2>
 8006d2e:	4a2a      	ldr	r2, [pc, #168]	@ (8006dd8 <__sflush_r+0x104>)
 8006d30:	40ca      	lsrs	r2, r1
 8006d32:	07d6      	lsls	r6, r2, #31
 8006d34:	d527      	bpl.n	8006d86 <__sflush_r+0xb2>
 8006d36:	2200      	movs	r2, #0
 8006d38:	6062      	str	r2, [r4, #4]
 8006d3a:	04d9      	lsls	r1, r3, #19
 8006d3c:	6922      	ldr	r2, [r4, #16]
 8006d3e:	6022      	str	r2, [r4, #0]
 8006d40:	d504      	bpl.n	8006d4c <__sflush_r+0x78>
 8006d42:	1c42      	adds	r2, r0, #1
 8006d44:	d101      	bne.n	8006d4a <__sflush_r+0x76>
 8006d46:	682b      	ldr	r3, [r5, #0]
 8006d48:	b903      	cbnz	r3, 8006d4c <__sflush_r+0x78>
 8006d4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d4e:	602f      	str	r7, [r5, #0]
 8006d50:	b1b9      	cbz	r1, 8006d82 <__sflush_r+0xae>
 8006d52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d56:	4299      	cmp	r1, r3
 8006d58:	d002      	beq.n	8006d60 <__sflush_r+0x8c>
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f7ff fbf4 	bl	8006548 <_free_r>
 8006d60:	2300      	movs	r3, #0
 8006d62:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d64:	e00d      	b.n	8006d82 <__sflush_r+0xae>
 8006d66:	2301      	movs	r3, #1
 8006d68:	4628      	mov	r0, r5
 8006d6a:	47b0      	blx	r6
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	1c50      	adds	r0, r2, #1
 8006d70:	d1c9      	bne.n	8006d06 <__sflush_r+0x32>
 8006d72:	682b      	ldr	r3, [r5, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d0c6      	beq.n	8006d06 <__sflush_r+0x32>
 8006d78:	2b1d      	cmp	r3, #29
 8006d7a:	d001      	beq.n	8006d80 <__sflush_r+0xac>
 8006d7c:	2b16      	cmp	r3, #22
 8006d7e:	d11e      	bne.n	8006dbe <__sflush_r+0xea>
 8006d80:	602f      	str	r7, [r5, #0]
 8006d82:	2000      	movs	r0, #0
 8006d84:	e022      	b.n	8006dcc <__sflush_r+0xf8>
 8006d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d8a:	b21b      	sxth	r3, r3
 8006d8c:	e01b      	b.n	8006dc6 <__sflush_r+0xf2>
 8006d8e:	690f      	ldr	r7, [r1, #16]
 8006d90:	2f00      	cmp	r7, #0
 8006d92:	d0f6      	beq.n	8006d82 <__sflush_r+0xae>
 8006d94:	0793      	lsls	r3, r2, #30
 8006d96:	680e      	ldr	r6, [r1, #0]
 8006d98:	bf08      	it	eq
 8006d9a:	694b      	ldreq	r3, [r1, #20]
 8006d9c:	600f      	str	r7, [r1, #0]
 8006d9e:	bf18      	it	ne
 8006da0:	2300      	movne	r3, #0
 8006da2:	eba6 0807 	sub.w	r8, r6, r7
 8006da6:	608b      	str	r3, [r1, #8]
 8006da8:	f1b8 0f00 	cmp.w	r8, #0
 8006dac:	dde9      	ble.n	8006d82 <__sflush_r+0xae>
 8006dae:	6a21      	ldr	r1, [r4, #32]
 8006db0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006db2:	4643      	mov	r3, r8
 8006db4:	463a      	mov	r2, r7
 8006db6:	4628      	mov	r0, r5
 8006db8:	47b0      	blx	r6
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	dc08      	bgt.n	8006dd0 <__sflush_r+0xfc>
 8006dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dc6:	81a3      	strh	r3, [r4, #12]
 8006dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd0:	4407      	add	r7, r0
 8006dd2:	eba8 0800 	sub.w	r8, r8, r0
 8006dd6:	e7e7      	b.n	8006da8 <__sflush_r+0xd4>
 8006dd8:	20400001 	.word	0x20400001

08006ddc <_fflush_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	690b      	ldr	r3, [r1, #16]
 8006de0:	4605      	mov	r5, r0
 8006de2:	460c      	mov	r4, r1
 8006de4:	b913      	cbnz	r3, 8006dec <_fflush_r+0x10>
 8006de6:	2500      	movs	r5, #0
 8006de8:	4628      	mov	r0, r5
 8006dea:	bd38      	pop	{r3, r4, r5, pc}
 8006dec:	b118      	cbz	r0, 8006df6 <_fflush_r+0x1a>
 8006dee:	6a03      	ldr	r3, [r0, #32]
 8006df0:	b90b      	cbnz	r3, 8006df6 <_fflush_r+0x1a>
 8006df2:	f7ff faa1 	bl	8006338 <__sinit>
 8006df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0f3      	beq.n	8006de6 <_fflush_r+0xa>
 8006dfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e00:	07d0      	lsls	r0, r2, #31
 8006e02:	d404      	bmi.n	8006e0e <_fflush_r+0x32>
 8006e04:	0599      	lsls	r1, r3, #22
 8006e06:	d402      	bmi.n	8006e0e <_fflush_r+0x32>
 8006e08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e0a:	f7ff fb9a 	bl	8006542 <__retarget_lock_acquire_recursive>
 8006e0e:	4628      	mov	r0, r5
 8006e10:	4621      	mov	r1, r4
 8006e12:	f7ff ff5f 	bl	8006cd4 <__sflush_r>
 8006e16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e18:	07da      	lsls	r2, r3, #31
 8006e1a:	4605      	mov	r5, r0
 8006e1c:	d4e4      	bmi.n	8006de8 <_fflush_r+0xc>
 8006e1e:	89a3      	ldrh	r3, [r4, #12]
 8006e20:	059b      	lsls	r3, r3, #22
 8006e22:	d4e1      	bmi.n	8006de8 <_fflush_r+0xc>
 8006e24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e26:	f7ff fb8d 	bl	8006544 <__retarget_lock_release_recursive>
 8006e2a:	e7dd      	b.n	8006de8 <_fflush_r+0xc>

08006e2c <__swbuf_r>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	460e      	mov	r6, r1
 8006e30:	4614      	mov	r4, r2
 8006e32:	4605      	mov	r5, r0
 8006e34:	b118      	cbz	r0, 8006e3e <__swbuf_r+0x12>
 8006e36:	6a03      	ldr	r3, [r0, #32]
 8006e38:	b90b      	cbnz	r3, 8006e3e <__swbuf_r+0x12>
 8006e3a:	f7ff fa7d 	bl	8006338 <__sinit>
 8006e3e:	69a3      	ldr	r3, [r4, #24]
 8006e40:	60a3      	str	r3, [r4, #8]
 8006e42:	89a3      	ldrh	r3, [r4, #12]
 8006e44:	071a      	lsls	r2, r3, #28
 8006e46:	d501      	bpl.n	8006e4c <__swbuf_r+0x20>
 8006e48:	6923      	ldr	r3, [r4, #16]
 8006e4a:	b943      	cbnz	r3, 8006e5e <__swbuf_r+0x32>
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f000 f82a 	bl	8006ea8 <__swsetup_r>
 8006e54:	b118      	cbz	r0, 8006e5e <__swbuf_r+0x32>
 8006e56:	f04f 37ff 	mov.w	r7, #4294967295
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	6922      	ldr	r2, [r4, #16]
 8006e62:	1a98      	subs	r0, r3, r2
 8006e64:	6963      	ldr	r3, [r4, #20]
 8006e66:	b2f6      	uxtb	r6, r6
 8006e68:	4283      	cmp	r3, r0
 8006e6a:	4637      	mov	r7, r6
 8006e6c:	dc05      	bgt.n	8006e7a <__swbuf_r+0x4e>
 8006e6e:	4621      	mov	r1, r4
 8006e70:	4628      	mov	r0, r5
 8006e72:	f7ff ffb3 	bl	8006ddc <_fflush_r>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d1ed      	bne.n	8006e56 <__swbuf_r+0x2a>
 8006e7a:	68a3      	ldr	r3, [r4, #8]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	60a3      	str	r3, [r4, #8]
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	6022      	str	r2, [r4, #0]
 8006e86:	701e      	strb	r6, [r3, #0]
 8006e88:	6962      	ldr	r2, [r4, #20]
 8006e8a:	1c43      	adds	r3, r0, #1
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d004      	beq.n	8006e9a <__swbuf_r+0x6e>
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	07db      	lsls	r3, r3, #31
 8006e94:	d5e1      	bpl.n	8006e5a <__swbuf_r+0x2e>
 8006e96:	2e0a      	cmp	r6, #10
 8006e98:	d1df      	bne.n	8006e5a <__swbuf_r+0x2e>
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	f7ff ff9d 	bl	8006ddc <_fflush_r>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d0d9      	beq.n	8006e5a <__swbuf_r+0x2e>
 8006ea6:	e7d6      	b.n	8006e56 <__swbuf_r+0x2a>

08006ea8 <__swsetup_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	4b29      	ldr	r3, [pc, #164]	@ (8006f50 <__swsetup_r+0xa8>)
 8006eac:	4605      	mov	r5, r0
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	460c      	mov	r4, r1
 8006eb2:	b118      	cbz	r0, 8006ebc <__swsetup_r+0x14>
 8006eb4:	6a03      	ldr	r3, [r0, #32]
 8006eb6:	b90b      	cbnz	r3, 8006ebc <__swsetup_r+0x14>
 8006eb8:	f7ff fa3e 	bl	8006338 <__sinit>
 8006ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ec0:	0719      	lsls	r1, r3, #28
 8006ec2:	d422      	bmi.n	8006f0a <__swsetup_r+0x62>
 8006ec4:	06da      	lsls	r2, r3, #27
 8006ec6:	d407      	bmi.n	8006ed8 <__swsetup_r+0x30>
 8006ec8:	2209      	movs	r2, #9
 8006eca:	602a      	str	r2, [r5, #0]
 8006ecc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ed0:	81a3      	strh	r3, [r4, #12]
 8006ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed6:	e033      	b.n	8006f40 <__swsetup_r+0x98>
 8006ed8:	0758      	lsls	r0, r3, #29
 8006eda:	d512      	bpl.n	8006f02 <__swsetup_r+0x5a>
 8006edc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ede:	b141      	cbz	r1, 8006ef2 <__swsetup_r+0x4a>
 8006ee0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ee4:	4299      	cmp	r1, r3
 8006ee6:	d002      	beq.n	8006eee <__swsetup_r+0x46>
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f7ff fb2d 	bl	8006548 <_free_r>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ef2:	89a3      	ldrh	r3, [r4, #12]
 8006ef4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ef8:	81a3      	strh	r3, [r4, #12]
 8006efa:	2300      	movs	r3, #0
 8006efc:	6063      	str	r3, [r4, #4]
 8006efe:	6923      	ldr	r3, [r4, #16]
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	89a3      	ldrh	r3, [r4, #12]
 8006f04:	f043 0308 	orr.w	r3, r3, #8
 8006f08:	81a3      	strh	r3, [r4, #12]
 8006f0a:	6923      	ldr	r3, [r4, #16]
 8006f0c:	b94b      	cbnz	r3, 8006f22 <__swsetup_r+0x7a>
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f18:	d003      	beq.n	8006f22 <__swsetup_r+0x7a>
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	f000 f84f 	bl	8006fc0 <__smakebuf_r>
 8006f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f26:	f013 0201 	ands.w	r2, r3, #1
 8006f2a:	d00a      	beq.n	8006f42 <__swsetup_r+0x9a>
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	60a2      	str	r2, [r4, #8]
 8006f30:	6962      	ldr	r2, [r4, #20]
 8006f32:	4252      	negs	r2, r2
 8006f34:	61a2      	str	r2, [r4, #24]
 8006f36:	6922      	ldr	r2, [r4, #16]
 8006f38:	b942      	cbnz	r2, 8006f4c <__swsetup_r+0xa4>
 8006f3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f3e:	d1c5      	bne.n	8006ecc <__swsetup_r+0x24>
 8006f40:	bd38      	pop	{r3, r4, r5, pc}
 8006f42:	0799      	lsls	r1, r3, #30
 8006f44:	bf58      	it	pl
 8006f46:	6962      	ldrpl	r2, [r4, #20]
 8006f48:	60a2      	str	r2, [r4, #8]
 8006f4a:	e7f4      	b.n	8006f36 <__swsetup_r+0x8e>
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	e7f7      	b.n	8006f40 <__swsetup_r+0x98>
 8006f50:	20000018 	.word	0x20000018

08006f54 <_sbrk_r>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4d06      	ldr	r5, [pc, #24]	@ (8006f70 <_sbrk_r+0x1c>)
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	4608      	mov	r0, r1
 8006f5e:	602b      	str	r3, [r5, #0]
 8006f60:	f7f9 fede 	bl	8000d20 <_sbrk>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	d102      	bne.n	8006f6e <_sbrk_r+0x1a>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	b103      	cbz	r3, 8006f6e <_sbrk_r+0x1a>
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
 8006f70:	200002b0 	.word	0x200002b0

08006f74 <__swhatbuf_r>:
 8006f74:	b570      	push	{r4, r5, r6, lr}
 8006f76:	460c      	mov	r4, r1
 8006f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7c:	2900      	cmp	r1, #0
 8006f7e:	b096      	sub	sp, #88	@ 0x58
 8006f80:	4615      	mov	r5, r2
 8006f82:	461e      	mov	r6, r3
 8006f84:	da0d      	bge.n	8006fa2 <__swhatbuf_r+0x2e>
 8006f86:	89a3      	ldrh	r3, [r4, #12]
 8006f88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f8c:	f04f 0100 	mov.w	r1, #0
 8006f90:	bf14      	ite	ne
 8006f92:	2340      	movne	r3, #64	@ 0x40
 8006f94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f98:	2000      	movs	r0, #0
 8006f9a:	6031      	str	r1, [r6, #0]
 8006f9c:	602b      	str	r3, [r5, #0]
 8006f9e:	b016      	add	sp, #88	@ 0x58
 8006fa0:	bd70      	pop	{r4, r5, r6, pc}
 8006fa2:	466a      	mov	r2, sp
 8006fa4:	f000 f848 	bl	8007038 <_fstat_r>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	dbec      	blt.n	8006f86 <__swhatbuf_r+0x12>
 8006fac:	9901      	ldr	r1, [sp, #4]
 8006fae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006fb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006fb6:	4259      	negs	r1, r3
 8006fb8:	4159      	adcs	r1, r3
 8006fba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fbe:	e7eb      	b.n	8006f98 <__swhatbuf_r+0x24>

08006fc0 <__smakebuf_r>:
 8006fc0:	898b      	ldrh	r3, [r1, #12]
 8006fc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fc4:	079d      	lsls	r5, r3, #30
 8006fc6:	4606      	mov	r6, r0
 8006fc8:	460c      	mov	r4, r1
 8006fca:	d507      	bpl.n	8006fdc <__smakebuf_r+0x1c>
 8006fcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006fd0:	6023      	str	r3, [r4, #0]
 8006fd2:	6123      	str	r3, [r4, #16]
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	6163      	str	r3, [r4, #20]
 8006fd8:	b003      	add	sp, #12
 8006fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fdc:	ab01      	add	r3, sp, #4
 8006fde:	466a      	mov	r2, sp
 8006fe0:	f7ff ffc8 	bl	8006f74 <__swhatbuf_r>
 8006fe4:	9f00      	ldr	r7, [sp, #0]
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	4639      	mov	r1, r7
 8006fea:	4630      	mov	r0, r6
 8006fec:	f7ff fb18 	bl	8006620 <_malloc_r>
 8006ff0:	b948      	cbnz	r0, 8007006 <__smakebuf_r+0x46>
 8006ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ff6:	059a      	lsls	r2, r3, #22
 8006ff8:	d4ee      	bmi.n	8006fd8 <__smakebuf_r+0x18>
 8006ffa:	f023 0303 	bic.w	r3, r3, #3
 8006ffe:	f043 0302 	orr.w	r3, r3, #2
 8007002:	81a3      	strh	r3, [r4, #12]
 8007004:	e7e2      	b.n	8006fcc <__smakebuf_r+0xc>
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	6020      	str	r0, [r4, #0]
 800700a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800700e:	81a3      	strh	r3, [r4, #12]
 8007010:	9b01      	ldr	r3, [sp, #4]
 8007012:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007016:	b15b      	cbz	r3, 8007030 <__smakebuf_r+0x70>
 8007018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800701c:	4630      	mov	r0, r6
 800701e:	f000 f81d 	bl	800705c <_isatty_r>
 8007022:	b128      	cbz	r0, 8007030 <__smakebuf_r+0x70>
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	f023 0303 	bic.w	r3, r3, #3
 800702a:	f043 0301 	orr.w	r3, r3, #1
 800702e:	81a3      	strh	r3, [r4, #12]
 8007030:	89a3      	ldrh	r3, [r4, #12]
 8007032:	431d      	orrs	r5, r3
 8007034:	81a5      	strh	r5, [r4, #12]
 8007036:	e7cf      	b.n	8006fd8 <__smakebuf_r+0x18>

08007038 <_fstat_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d07      	ldr	r5, [pc, #28]	@ (8007058 <_fstat_r+0x20>)
 800703c:	2300      	movs	r3, #0
 800703e:	4604      	mov	r4, r0
 8007040:	4608      	mov	r0, r1
 8007042:	4611      	mov	r1, r2
 8007044:	602b      	str	r3, [r5, #0]
 8007046:	f7f9 fe42 	bl	8000cce <_fstat>
 800704a:	1c43      	adds	r3, r0, #1
 800704c:	d102      	bne.n	8007054 <_fstat_r+0x1c>
 800704e:	682b      	ldr	r3, [r5, #0]
 8007050:	b103      	cbz	r3, 8007054 <_fstat_r+0x1c>
 8007052:	6023      	str	r3, [r4, #0]
 8007054:	bd38      	pop	{r3, r4, r5, pc}
 8007056:	bf00      	nop
 8007058:	200002b0 	.word	0x200002b0

0800705c <_isatty_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4d06      	ldr	r5, [pc, #24]	@ (8007078 <_isatty_r+0x1c>)
 8007060:	2300      	movs	r3, #0
 8007062:	4604      	mov	r4, r0
 8007064:	4608      	mov	r0, r1
 8007066:	602b      	str	r3, [r5, #0]
 8007068:	f7f9 fe41 	bl	8000cee <_isatty>
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	d102      	bne.n	8007076 <_isatty_r+0x1a>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	b103      	cbz	r3, 8007076 <_isatty_r+0x1a>
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	bd38      	pop	{r3, r4, r5, pc}
 8007078:	200002b0 	.word	0x200002b0

0800707c <_init>:
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	bf00      	nop
 8007080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007082:	bc08      	pop	{r3}
 8007084:	469e      	mov	lr, r3
 8007086:	4770      	bx	lr

08007088 <_fini>:
 8007088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708a:	bf00      	nop
 800708c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708e:	bc08      	pop	{r3}
 8007090:	469e      	mov	lr, r3
 8007092:	4770      	bx	lr
