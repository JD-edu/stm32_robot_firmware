
102_sensor_fusion_kalman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08008488  08008488  00009488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b0  080086b0  0000a068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080086b0  080086b0  000096b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086b8  080086b8  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086b8  080086b8  000096b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086bc  080086bc  000096bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080086c0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000068  08008728  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08008728  0000a3e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001535a  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c16  00000000  00000000  0001f3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00022008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f5e  00000000  00000000  000233a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002865c  00000000  00000000  00024306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170c4  00000000  00000000  0004c962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7f58  00000000  00000000  00063a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b97e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e04  00000000  00000000  0015b9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  001617c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008470 	.word	0x08008470

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08008470 	.word	0x08008470

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <Kalman_Init>:

/**
 * @brief Initializes a Kalman filter instance.
 * @param kf Pointer to the KalmanFilter structure to be initialized.
 */
void Kalman_Init(KalmanFilter *kf) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    kf->angle = 0.0;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
    kf->bias = 0.0;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	605a      	str	r2, [r3, #4]
    // Initialize the error covariance matrix (P).
    kf->P[0][0] = 1.0;  kf->P[0][1] = 0.0;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
    kf->P[1][0] = 0.0;  kf->P[1][1] = 1.0;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000f4a:	619a      	str	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <Kalman_Update>:
 * @param newAngle New angle measurement from the accelerometer (e.g., in degrees).
 * @param newRate New angular rate measurement from the gyroscope (e.g., in deg/s).
 * @param dt Time step since the last update.
 * @return The updated and filtered angle.
 */
float Kalman_Update(KalmanFilter *kf, float newAngle, float newRate, float dt) {
 8000f58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f66:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f6a:	ed87 1a00 	vstr	s2, [r7]
    // 1. Prediction Step
    // Update the state estimate using the gyroscope data.
    kf->rate = newRate - kf->bias;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f74:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->angle += dt * kf->rate;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	ed93 7a00 	vldr	s14, [r3]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f8e:	edd7 7a00 	vldr	s15, [r7]
 8000f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	edc3 7a00 	vstr	s15, [r3]

    // Update the error covariance matrix (P) based on the state transition model.
    // The constants (0.001 and 0.003) represent the process noise Q.
    kf->P[0][0] += dt * (dt * kf->P[1][1] - kf->P[0][1] - kf->P[1][0] + 0.001);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fac7 	bl	8000538 <__aeabi_f2d>
 8000faa:	4604      	mov	r4, r0
 8000fac:	460d      	mov	r5, r1
 8000fae:	6838      	ldr	r0, [r7, #0]
 8000fb0:	f7ff fac2 	bl	8000538 <__aeabi_f2d>
 8000fb4:	4680      	mov	r8, r0
 8000fb6:	4689      	mov	r9, r1
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	ed93 7a06 	vldr	s14, [r3, #24]
 8000fbe:	edd7 7a00 	vldr	s15, [r7]
 8000fc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fda:	ee17 0a90 	vmov	r0, s15
 8000fde:	f7ff faab 	bl	8000538 <__aeabi_f2d>
 8000fe2:	a375      	add	r3, pc, #468	@ (adr r3, 80011b8 <Kalman_Update+0x260>)
 8000fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe8:	f7ff f948 	bl	800027c <__adddf3>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4640      	mov	r0, r8
 8000ff2:	4649      	mov	r1, r9
 8000ff4:	f7ff faf8 	bl	80005e8 <__aeabi_dmul>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	4629      	mov	r1, r5
 8001000:	f7ff f93c 	bl	800027c <__adddf3>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fd9c 	bl	8000b48 <__aeabi_d2f>
 8001010:	4602      	mov	r2, r0
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	60da      	str	r2, [r3, #12]
    kf->P[0][1] -= dt * kf->P[1][1];
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	ed93 7a04 	vldr	s14, [r3, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001022:	edd7 7a00 	vldr	s15, [r7]
 8001026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800102a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][0] -= dt * kf->P[1][1];
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	ed93 7a05 	vldr	s14, [r3, #20]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001040:	edd7 7a00 	vldr	s15, [r7]
 8001044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->P[1][1] += 0.003;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa6e 	bl	8000538 <__aeabi_f2d>
 800105c:	a358      	add	r3, pc, #352	@ (adr r3, 80011c0 <Kalman_Update+0x268>)
 800105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001062:	f7ff f90b 	bl	800027c <__adddf3>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f7ff fd6b 	bl	8000b48 <__aeabi_d2f>
 8001072:	4602      	mov	r2, r0
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	619a      	str	r2, [r3, #24]

    // 2. Correction Step
    // Calculate the innovation covariance (S) using the measurement noise R (0.03).
    kf->S = kf->P[0][0] + 0.03;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa5b 	bl	8000538 <__aeabi_f2d>
 8001082:	a351      	add	r3, pc, #324	@ (adr r3, 80011c8 <Kalman_Update+0x270>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff f8f8 	bl	800027c <__adddf3>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fd58 	bl	8000b48 <__aeabi_d2f>
 8001098:	4602      	mov	r2, r0
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	629a      	str	r2, [r3, #40]	@ 0x28
    // Calculate the Kalman gain (K).
    kf->K[0] = kf->P[0][0] / kf->S;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	edd3 6a03 	vldr	s13, [r3, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80010aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	edc3 7a07 	vstr	s15, [r3, #28]
    kf->K[1] = kf->P[1][0] / kf->S;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	edd3 6a05 	vldr	s13, [r3, #20]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80010c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	edc3 7a08 	vstr	s15, [r3, #32]

    // Calculate the measurement residual (y).
    kf->y = newAngle - kf->angle;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80010d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    // Update the state estimate (angle and bias) using the Kalman gain.
    kf->angle += kf->K[0] * kf->y;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	ed93 7a00 	vldr	s14, [r3]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	edd3 6a07 	vldr	s13, [r3, #28]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80010f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	edc3 7a00 	vstr	s15, [r3]
    kf->bias += kf->K[1] * kf->y;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	ed93 7a01 	vldr	s14, [r3, #4]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	edd3 6a08 	vldr	s13, [r3, #32]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	edc3 7a01 	vstr	s15, [r3, #4]

    // Update the error covariance matrix after the correction.
    float P00_temp = kf->P[0][0];
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	617b      	str	r3, [r7, #20]
    float P01_temp = kf->P[0][1];
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	613b      	str	r3, [r7, #16]

    kf->P[0][0] -= kf->K[0] * P00_temp;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	edd3 6a07 	vldr	s13, [r3, #28]
 8001136:	edd7 7a05 	vldr	s15, [r7, #20]
 800113a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800113e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->P[0][1] -= kf->K[0] * P01_temp;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	ed93 7a04 	vldr	s14, [r3, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 6a07 	vldr	s13, [r3, #28]
 8001154:	edd7 7a04 	vldr	s15, [r7, #16]
 8001158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][0] -= kf->K[1] * P00_temp;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	ed93 7a05 	vldr	s14, [r3, #20]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001172:	edd7 7a05 	vldr	s15, [r7, #20]
 8001176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800117a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->P[1][1] -= kf->K[1] * P01_temp;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	ed93 7a06 	vldr	s14, [r3, #24]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	edd3 6a08 	vldr	s13, [r3, #32]
 8001190:	edd7 7a04 	vldr	s15, [r7, #16]
 8001194:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	edc3 7a06 	vstr	s15, [r3, #24]

    return kf->angle;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	ee07 3a90 	vmov	s15, r3
}
 80011aa:	eeb0 0a67 	vmov.f32	s0, s15
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011b6:	bf00      	nop
 80011b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80011bc:	3f50624d 	.word	0x3f50624d
 80011c0:	bc6a7efa 	.word	0xbc6a7efa
 80011c4:	3f689374 	.word	0x3f689374
 80011c8:	eb851eb8 	.word	0xeb851eb8
 80011cc:	3f9eb851 	.word	0x3f9eb851

080011d0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Redirects printf() to USART2 for debugging
int _write(int file, char *ptr, int len) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	4804      	ldr	r0, [pc, #16]	@ (80011f8 <_write+0x28>)
 80011e8:	f004 fd7c 	bl	8005ce4 <HAL_UART_Transmit>
    return len;
 80011ec:	687b      	ldr	r3, [r7, #4]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001f4 	.word	0x200001f4

080011fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001200:	f000 fec8 	bl	8001f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001204:	f000 f868 	bl	80012d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001208:	f000 f9b2 	bl	8001570 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800120c:	f000 f980 	bl	8001510 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001210:	f000 f912 	bl	8001438 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001214:	f000 f946 	bl	80014a4 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001218:	f000 f8d0 	bl	80013bc <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800121c:	f000 f8a1 	bl	8001362 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001220:	481c      	ldr	r0, [pc, #112]	@ (8001294 <main+0x98>)
 8001222:	f004 fa25 	bl	8005670 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001226:	481c      	ldr	r0, [pc, #112]	@ (8001298 <main+0x9c>)
 8001228:	f004 fa22 	bl	8005670 <HAL_TIM_Base_Start_IT>
  MPU6050_Init();
 800122c:	f000 fac0 	bl	80017b0 <MPU6050_Init>
  Kalman_Init(&kalman_pitch);
 8001230:	481a      	ldr	r0, [pc, #104]	@ (800129c <main+0xa0>)
 8001232:	f7ff fe6f 	bl	8000f14 <Kalman_Init>
  Kalman_Init(&kalman_roll);
 8001236:	481a      	ldr	r0, [pc, #104]	@ (80012a0 <main+0xa4>)
 8001238:	f7ff fe6c 	bl	8000f14 <Kalman_Init>
  Kalman_Init(&kalman_yaw);
 800123c:	4819      	ldr	r0, [pc, #100]	@ (80012a4 <main+0xa8>)
 800123e:	f7ff fe69 	bl	8000f14 <Kalman_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(f_imu_read == 1){
 8001242:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <main+0xac>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10e      	bne.n	8001268 <main+0x6c>
		   MPU6050_ReadAccel(&ax, &ay, &az);
 800124a:	4a18      	ldr	r2, [pc, #96]	@ (80012ac <main+0xb0>)
 800124c:	4918      	ldr	r1, [pc, #96]	@ (80012b0 <main+0xb4>)
 800124e:	4819      	ldr	r0, [pc, #100]	@ (80012b4 <main+0xb8>)
 8001250:	f000 fadc 	bl	800180c <MPU6050_ReadAccel>
		   MPU6050_ReadGyro(&gx, &gy, &gz);
 8001254:	4a18      	ldr	r2, [pc, #96]	@ (80012b8 <main+0xbc>)
 8001256:	4919      	ldr	r1, [pc, #100]	@ (80012bc <main+0xc0>)
 8001258:	4819      	ldr	r0, [pc, #100]	@ (80012c0 <main+0xc4>)
 800125a:	f000 fb06 	bl	800186a <MPU6050_ReadGyro>
		   Compute_Orientation_Kalman();
 800125e:	f000 fb33 	bl	80018c8 <Compute_Orientation_Kalman>
		   //printf("Accel X: %d Y: %d Z: %d Gyro: X: %d, Y: %d, Z: %d \r\n", ax, ay, az, gx, gy, gz);
		   //Send_IMU_Data(&ax, &ay, &az, &gx, &gy, &gz);
		   f_imu_read = 0;
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <main+0xac>)
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
	  }
	  if(f_uart_send == 1){
 8001268:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <main+0xc8>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d1e8      	bne.n	8001242 <main+0x46>
		  printf("Pitch %d Roll %d Yaw %d \r\n", pitch, roll, yaw);
 8001270:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <main+0xcc>)
 8001272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001276:	4619      	mov	r1, r3
 8001278:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <main+0xd0>)
 800127a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127e:	461a      	mov	r2, r3
 8001280:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <main+0xd4>)
 8001282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001286:	4813      	ldr	r0, [pc, #76]	@ (80012d4 <main+0xd8>)
 8001288:	f005 febc 	bl	8007004 <iprintf>
		  //Send_IMU_Data(&ax, &ay, &az, &gx, &gy, &gz, &pitch, &roll, &yaw);
		  f_uart_send = 0;
 800128c:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <main+0xc8>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
	  if(f_imu_read == 1){
 8001292:	e7d6      	b.n	8001242 <main+0x46>
 8001294:	2000015c 	.word	0x2000015c
 8001298:	200001a8 	.word	0x200001a8
 800129c:	20000084 	.word	0x20000084
 80012a0:	200000b0 	.word	0x200000b0
 80012a4:	200000dc 	.word	0x200000dc
 80012a8:	2000027c 	.word	0x2000027c
 80012ac:	20000282 	.word	0x20000282
 80012b0:	20000280 	.word	0x20000280
 80012b4:	2000027e 	.word	0x2000027e
 80012b8:	20000288 	.word	0x20000288
 80012bc:	20000286 	.word	0x20000286
 80012c0:	20000284 	.word	0x20000284
 80012c4:	2000027d 	.word	0x2000027d
 80012c8:	2000028a 	.word	0x2000028a
 80012cc:	2000028c 	.word	0x2000028c
 80012d0:	2000028e 	.word	0x2000028e
 80012d4:	08008488 	.word	0x08008488

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b096      	sub	sp, #88	@ 0x58
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	2244      	movs	r2, #68	@ 0x44
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f005 ffd4 	bl	8007294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012fe:	f002 fe4d 	bl	8003f9c <HAL_PWREx_ControlVoltageScaling>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001308:	f000 fbfa 	bl	8001b00 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800130c:	2302      	movs	r3, #2
 800130e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001310:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001314:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001316:	2310      	movs	r3, #16
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800131a:	2300      	movs	r3, #0
 800131c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fe90 	bl	8004048 <HAL_RCC_OscConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800132e:	f000 fbe7 	bl	8001b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001332:	230f      	movs	r3, #15
 8001334:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001336:	2301      	movs	r3, #1
 8001338:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 800133a:	23a0      	movs	r3, #160	@ 0xa0
 800133c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001346:	463b      	mov	r3, r7
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f003 fa58 	bl	8004800 <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001356:	f000 fbd3 	bl	8001b00 <Error_Handler>
  }
}
 800135a:	bf00      	nop
 800135c:	3758      	adds	r7, #88	@ 0x58
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	2037      	movs	r0, #55	@ 0x37
 800136c:	f000 ff8d 	bl	800228a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001370:	2037      	movs	r0, #55	@ 0x37
 8001372:	f000 ffa6 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2036      	movs	r0, #54	@ 0x36
 800137c:	f000 ff85 	bl	800228a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001380:	2036      	movs	r0, #54	@ 0x36
 8001382:	f000 ff9e 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2026      	movs	r0, #38	@ 0x26
 800138c:	f000 ff7d 	bl	800228a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001390:	2026      	movs	r0, #38	@ 0x26
 8001392:	f000 ff96 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	201f      	movs	r0, #31
 800139c:	f000 ff75 	bl	800228a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013a0:	201f      	movs	r0, #31
 80013a2:	f000 ff8e 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2020      	movs	r0, #32
 80013ac:	f000 ff6d 	bl	800228a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80013b0:	2020      	movs	r0, #32
 80013b2:	f000 ff86 	bl	80022c2 <HAL_NVIC_EnableIRQ>
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <MX_I2C1_Init+0x74>)
 80013c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001434 <MX_I2C1_Init+0x78>)
 80013c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000508;
 80013c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <MX_I2C1_Init+0x74>)
 80013c8:	f44f 62a1 	mov.w	r2, #1288	@ 0x508
 80013cc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013ce:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <MX_I2C1_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d4:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <MX_I2C1_Init+0x74>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013da:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <MX_I2C1_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013e0:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <MX_I2C1_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_I2C1_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ec:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <MX_I2C1_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_I2C1_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f8:	480d      	ldr	r0, [pc, #52]	@ (8001430 <MX_I2C1_Init+0x74>)
 80013fa:	f001 f9e5 	bl	80027c8 <HAL_I2C_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001404:	f000 fb7c 	bl	8001b00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001408:	2100      	movs	r1, #0
 800140a:	4809      	ldr	r0, [pc, #36]	@ (8001430 <MX_I2C1_Init+0x74>)
 800140c:	f002 fd20 	bl	8003e50 <HAL_I2CEx_ConfigAnalogFilter>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001416:	f000 fb73 	bl	8001b00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800141a:	2100      	movs	r1, #0
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_I2C1_Init+0x74>)
 800141e:	f002 fd62 	bl	8003ee6 <HAL_I2CEx_ConfigDigitalFilter>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001428:	f000 fb6a 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000108 	.word	0x20000108
 8001434:	40005400 	.word	0x40005400

08001438 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001448:	4b14      	ldr	r3, [pc, #80]	@ (800149c <MX_TIM6_Init+0x64>)
 800144a:	4a15      	ldr	r2, [pc, #84]	@ (80014a0 <MX_TIM6_Init+0x68>)
 800144c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 800144e:	4b13      	ldr	r3, [pc, #76]	@ (800149c <MX_TIM6_Init+0x64>)
 8001450:	2263      	movs	r2, #99	@ 0x63
 8001452:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <MX_TIM6_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800145a:	4b10      	ldr	r3, [pc, #64]	@ (800149c <MX_TIM6_Init+0x64>)
 800145c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001460:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <MX_TIM6_Init+0x64>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001468:	480c      	ldr	r0, [pc, #48]	@ (800149c <MX_TIM6_Init+0x64>)
 800146a:	f004 f8a9 	bl	80055c0 <HAL_TIM_Base_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001474:	f000 fb44 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_TIM6_Init+0x64>)
 8001486:	f004 fb39 	bl	8005afc <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001490:	f000 fb36 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2000015c 	.word	0x2000015c
 80014a0:	40001000 	.word	0x40001000

080014a4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014b4:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <MX_TIM7_Init+0x64>)
 80014b6:	4a15      	ldr	r2, [pc, #84]	@ (800150c <MX_TIM7_Init+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 80014ba:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <MX_TIM7_Init+0x64>)
 80014bc:	2263      	movs	r2, #99	@ 0x63
 80014be:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <MX_TIM7_Init+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000-1;
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <MX_TIM7_Init+0x64>)
 80014c8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80014cc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <MX_TIM7_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80014d4:	480c      	ldr	r0, [pc, #48]	@ (8001508 <MX_TIM7_Init+0x64>)
 80014d6:	f004 f873 	bl	80055c0 <HAL_TIM_Base_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80014e0:	f000 fb0e 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	4805      	ldr	r0, [pc, #20]	@ (8001508 <MX_TIM7_Init+0x64>)
 80014f2:	f004 fb03 	bl	8005afc <HAL_TIMEx_MasterConfigSynchronization>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80014fc:	f000 fb00 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200001a8 	.word	0x200001a8
 800150c:	40001400 	.word	0x40001400

08001510 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <MX_USART2_UART_Init+0x58>)
 8001516:	4a15      	ldr	r2, [pc, #84]	@ (800156c <MX_USART2_UART_Init+0x5c>)
 8001518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800151a:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <MX_USART2_UART_Init+0x58>)
 800151c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <MX_USART2_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b0f      	ldr	r3, [pc, #60]	@ (8001568 <MX_USART2_UART_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <MX_USART2_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <MX_USART2_UART_Init+0x58>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <MX_USART2_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <MX_USART2_UART_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001546:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <MX_USART2_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <MX_USART2_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	@ (8001568 <MX_USART2_UART_Init+0x58>)
 8001554:	f004 fb78 	bl	8005c48 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800155e:	f000 facf 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200001f4 	.word	0x200001f4
 800156c:	40004400 	.word	0x40004400

08001570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	@ 0x28
 8001574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	4b2b      	ldr	r3, [pc, #172]	@ (8001634 <MX_GPIO_Init+0xc4>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	4a2a      	ldr	r2, [pc, #168]	@ (8001634 <MX_GPIO_Init+0xc4>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001592:	4b28      	ldr	r3, [pc, #160]	@ (8001634 <MX_GPIO_Init+0xc4>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800159e:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <MX_GPIO_Init+0xc4>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	4a24      	ldr	r2, [pc, #144]	@ (8001634 <MX_GPIO_Init+0xc4>)
 80015a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015aa:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <MX_GPIO_Init+0xc4>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001634 <MX_GPIO_Init+0xc4>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001634 <MX_GPIO_Init+0xc4>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <MX_GPIO_Init+0xc4>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <MX_GPIO_Init+0xc4>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	4a18      	ldr	r2, [pc, #96]	@ (8001634 <MX_GPIO_Init+0xc4>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015da:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <MX_GPIO_Init+0xc4>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2120      	movs	r1, #32
 80015ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ee:	f001 f8b9 	bl	8002764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	480b      	ldr	r0, [pc, #44]	@ (8001638 <MX_GPIO_Init+0xc8>)
 800160a:	f000 ff01 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800160e:	2320      	movs	r3, #32
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001628:	f000 fef2 	bl	8002410 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800162c:	bf00      	nop
 800162e:	3728      	adds	r7, #40	@ 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000
 8001638:	48000800 	.word	0x48000800

0800163c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback function for TIM2 and TIM3 interrupts
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) { // 25ms interrupt for IMU data reading
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0b      	ldr	r2, [pc, #44]	@ (8001678 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d108      	bne.n	8001660 <HAL_TIM_PeriodElapsedCallback+0x24>
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800164e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001652:	480a      	ldr	r0, [pc, #40]	@ (800167c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001654:	f001 f89e 	bl	8002794 <HAL_GPIO_TogglePin>
        f_imu_read = 1;
 8001658:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
    }else if(htim->Instance == TIM7){ // 100ms interrupt for UART data sending
    	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
    	f_uart_send = 1;
    }
}
 800165e:	e007      	b.n	8001670 <HAL_TIM_PeriodElapsedCallback+0x34>
    }else if(htim->Instance == TIM7){ // 100ms interrupt for UART data sending
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	@ (8001684 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d102      	bne.n	8001670 <HAL_TIM_PeriodElapsedCallback+0x34>
    	f_uart_send = 1;
 800166a:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40001000 	.word	0x40001000
 800167c:	48000c00 	.word	0x48000c00
 8001680:	2000027c 	.word	0x2000027c
 8001684:	40001400 	.word	0x40001400
 8001688:	2000027d 	.word	0x2000027d

0800168c <MPU6050_Write>:
	return uga; // Returns an unused variable
}


// Writes a single byte of data to an MPU6050 register
void MPU6050_Write(uint8_t reg, uint8_t data) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af02      	add	r7, sp, #8
 8001692:	4603      	mov	r3, r0
 8001694:	460a      	mov	r2, r1
 8001696:	71fb      	strb	r3, [r7, #7]
 8001698:	4613      	mov	r3, r2
 800169a:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg, data}; // Buffer containing register address and data
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	733b      	strb	r3, [r7, #12]
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	737b      	strb	r3, [r7, #13]
    if(HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buffer, 2, 100) != HAL_OK){
 80016a4:	f107 020c 	add.w	r2, r7, #12
 80016a8:	2364      	movs	r3, #100	@ 0x64
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2302      	movs	r3, #2
 80016ae:	21d0      	movs	r1, #208	@ 0xd0
 80016b0:	4806      	ldr	r0, [pc, #24]	@ (80016cc <MPU6050_Write+0x40>)
 80016b2:	f001 f925 	bl	8002900 <HAL_I2C_Master_Transmit>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <MPU6050_Write+0x36>
    	printf("I2C error\n");
 80016bc:	4804      	ldr	r0, [pc, #16]	@ (80016d0 <MPU6050_Write+0x44>)
 80016be:	f005 fd09 	bl	80070d4 <puts>
    }
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000108 	.word	0x20000108
 80016d0:	080084a4 	.word	0x080084a4

080016d4 <MPU6050_Read>:

// Reads multiple bytes from a specified MPU6050 register
void MPU6050_Read(uint8_t reg, uint8_t* data, uint8_t length) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af02      	add	r7, sp, #8
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
 80016e0:	4613      	mov	r3, r2
 80016e2:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;

	// 1. 레지스터 주소 전송
	status = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, &reg, 1, 100);
 80016e4:	1dfa      	adds	r2, r7, #7
 80016e6:	2364      	movs	r3, #100	@ 0x64
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2301      	movs	r3, #1
 80016ec:	21d0      	movs	r1, #208	@ 0xd0
 80016ee:	4827      	ldr	r0, [pc, #156]	@ (800178c <MPU6050_Read+0xb8>)
 80016f0:	f001 f906 	bl	8002900 <HAL_I2C_Master_Transmit>
 80016f4:	4603      	mov	r3, r0
 80016f6:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d01a      	beq.n	8001734 <MPU6050_Read+0x60>
		// 전송 에러 종류 확인
		switch (status) {
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	2b03      	cmp	r3, #3
 8001702:	d00e      	beq.n	8001722 <MPU6050_Read+0x4e>
 8001704:	2b03      	cmp	r3, #3
 8001706:	dc10      	bgt.n	800172a <MPU6050_Read+0x56>
 8001708:	2b01      	cmp	r3, #1
 800170a:	d002      	beq.n	8001712 <MPU6050_Read+0x3e>
 800170c:	2b02      	cmp	r3, #2
 800170e:	d004      	beq.n	800171a <MPU6050_Read+0x46>
 8001710:	e00b      	b.n	800172a <MPU6050_Read+0x56>
			case HAL_ERROR:
				printf("I2C Transmit Error: HAL_ERROR\r\n");
 8001712:	481f      	ldr	r0, [pc, #124]	@ (8001790 <MPU6050_Read+0xbc>)
 8001714:	f005 fcde 	bl	80070d4 <puts>
				break;
 8001718:	e00b      	b.n	8001732 <MPU6050_Read+0x5e>
			case HAL_BUSY:
				printf("I2C Transmit Error: HAL_BUSY\r\n");
 800171a:	481e      	ldr	r0, [pc, #120]	@ (8001794 <MPU6050_Read+0xc0>)
 800171c:	f005 fcda 	bl	80070d4 <puts>
				break;
 8001720:	e007      	b.n	8001732 <MPU6050_Read+0x5e>
			case HAL_TIMEOUT:
				printf("I2C Transmit Error: HAL_TIMEOUT\r\n");
 8001722:	481d      	ldr	r0, [pc, #116]	@ (8001798 <MPU6050_Read+0xc4>)
 8001724:	f005 fcd6 	bl	80070d4 <puts>
				break;
 8001728:	e003      	b.n	8001732 <MPU6050_Read+0x5e>
			default:
				printf("I2C Transmit Error: Unknown\r\n");
 800172a:	481c      	ldr	r0, [pc, #112]	@ (800179c <MPU6050_Read+0xc8>)
 800172c:	f005 fcd2 	bl	80070d4 <puts>
				break;
 8001730:	bf00      	nop
		}
		return; // 에러 발생 시 함수 종료
 8001732:	e028      	b.n	8001786 <MPU6050_Read+0xb2>
	}

	// 2. 데이터 수신
	status = HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, data, length, 100);
 8001734:	79bb      	ldrb	r3, [r7, #6]
 8001736:	b29b      	uxth	r3, r3
 8001738:	2264      	movs	r2, #100	@ 0x64
 800173a:	9200      	str	r2, [sp, #0]
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	21d0      	movs	r1, #208	@ 0xd0
 8001740:	4812      	ldr	r0, [pc, #72]	@ (800178c <MPU6050_Read+0xb8>)
 8001742:	f001 f9f5 	bl	8002b30 <HAL_I2C_Master_Receive>
 8001746:	4603      	mov	r3, r0
 8001748:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d01a      	beq.n	8001786 <MPU6050_Read+0xb2>
		// 수신 에러 종류 확인
		switch (status) {
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	2b03      	cmp	r3, #3
 8001754:	d00e      	beq.n	8001774 <MPU6050_Read+0xa0>
 8001756:	2b03      	cmp	r3, #3
 8001758:	dc10      	bgt.n	800177c <MPU6050_Read+0xa8>
 800175a:	2b01      	cmp	r3, #1
 800175c:	d002      	beq.n	8001764 <MPU6050_Read+0x90>
 800175e:	2b02      	cmp	r3, #2
 8001760:	d004      	beq.n	800176c <MPU6050_Read+0x98>
 8001762:	e00b      	b.n	800177c <MPU6050_Read+0xa8>
			case HAL_ERROR:
				printf("I2C Receive Error: HAL_ERROR\r\n");
 8001764:	480e      	ldr	r0, [pc, #56]	@ (80017a0 <MPU6050_Read+0xcc>)
 8001766:	f005 fcb5 	bl	80070d4 <puts>
				break;
 800176a:	e00b      	b.n	8001784 <MPU6050_Read+0xb0>
			case HAL_BUSY:
				printf("I2C Receive Error: HAL_BUSY\r\n");
 800176c:	480d      	ldr	r0, [pc, #52]	@ (80017a4 <MPU6050_Read+0xd0>)
 800176e:	f005 fcb1 	bl	80070d4 <puts>
				break;
 8001772:	e007      	b.n	8001784 <MPU6050_Read+0xb0>
			case HAL_TIMEOUT:
				printf("I2C Receive Error: HAL_TIMEOUT\r\n");
 8001774:	480c      	ldr	r0, [pc, #48]	@ (80017a8 <MPU6050_Read+0xd4>)
 8001776:	f005 fcad 	bl	80070d4 <puts>
				break;
 800177a:	e003      	b.n	8001784 <MPU6050_Read+0xb0>
			default:
				printf("I2C Receive Error: Unknown\r\n");
 800177c:	480b      	ldr	r0, [pc, #44]	@ (80017ac <MPU6050_Read+0xd8>)
 800177e:	f005 fca9 	bl	80070d4 <puts>
				break;
 8001782:	bf00      	nop
		}
		return; // 에러 발생 시 함수 종료
 8001784:	bf00      	nop
	}
}
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000108 	.word	0x20000108
 8001790:	080084b0 	.word	0x080084b0
 8001794:	080084d0 	.word	0x080084d0
 8001798:	080084f0 	.word	0x080084f0
 800179c:	08008514 	.word	0x08008514
 80017a0:	08008534 	.word	0x08008534
 80017a4:	08008554 	.word	0x08008554
 80017a8:	08008574 	.word	0x08008574
 80017ac:	08008594 	.word	0x08008594

080017b0 <MPU6050_Init>:
// Initializes the MPU6050 sensor
void MPU6050_Init(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	// Reset the sensor
	MPU6050_Write(PWR_MGMT_1, 0x80);
 80017b4:	2180      	movs	r1, #128	@ 0x80
 80017b6:	206b      	movs	r0, #107	@ 0x6b
 80017b8:	f7ff ff68 	bl	800168c <MPU6050_Write>
	HAL_Delay(100);
 80017bc:	2064      	movs	r0, #100	@ 0x64
 80017be:	f000 fc65 	bl	800208c <HAL_Delay>
    // 1. Wake up the sensor (Power Management 1)
    MPU6050_Write(PWR_MGMT_1, 0x00);
 80017c2:	2100      	movs	r1, #0
 80017c4:	206b      	movs	r0, #107	@ 0x6b
 80017c6:	f7ff ff61 	bl	800168c <MPU6050_Write>
    HAL_Delay(100);
 80017ca:	2064      	movs	r0, #100	@ 0x64
 80017cc:	f000 fc5e 	bl	800208c <HAL_Delay>

    // 2. Set accelerometer range to ±2g
    MPU6050_Write(ACCEL_CONFIG, 0x00);
 80017d0:	2100      	movs	r1, #0
 80017d2:	201c      	movs	r0, #28
 80017d4:	f7ff ff5a 	bl	800168c <MPU6050_Write>
    HAL_Delay(10);
 80017d8:	200a      	movs	r0, #10
 80017da:	f000 fc57 	bl	800208c <HAL_Delay>

    // 2. Set gyroscope range to ±250°/s
    MPU6050_Write(GYRO_CONFIG, 0x00);
 80017de:	2100      	movs	r1, #0
 80017e0:	201b      	movs	r0, #27
 80017e2:	f7ff ff53 	bl	800168c <MPU6050_Write>
    HAL_Delay(10);
 80017e6:	200a      	movs	r0, #10
 80017e8:	f000 fc50 	bl	800208c <HAL_Delay>

    // 3. Set sample rate to 125Hz (1kHz / (1+7))
    MPU6050_Write(SMPLRT_DIV, 0x07);
 80017ec:	2107      	movs	r1, #7
 80017ee:	2019      	movs	r0, #25
 80017f0:	f7ff ff4c 	bl	800168c <MPU6050_Write>
    HAL_Delay(10);
 80017f4:	200a      	movs	r0, #10
 80017f6:	f000 fc49 	bl	800208c <HAL_Delay>

    // 4. Set Digital Low-Pass Filter (DLPF) to 44Hz
    MPU6050_Write(CONFIG, 0x03);
 80017fa:	2103      	movs	r1, #3
 80017fc:	201a      	movs	r0, #26
 80017fe:	f7ff ff45 	bl	800168c <MPU6050_Write>
    HAL_Delay(10);
 8001802:	200a      	movs	r0, #10
 8001804:	f000 fc42 	bl	800208c <HAL_Delay>
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <MPU6050_ReadAccel>:

// Reads and combines high and low bytes of accelerometer data
void MPU6050_ReadAccel(int16_t* ax, int16_t* ay, int16_t* az) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];  // Buffer for 6 bytes of accelerometer data (X, Y, Z)

    MPU6050_Read(ACCEL_XOUT_H, buffer, 6);
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	2206      	movs	r2, #6
 800181e:	4619      	mov	r1, r3
 8001820:	203b      	movs	r0, #59	@ 0x3b
 8001822:	f7ff ff57 	bl	80016d4 <MPU6050_Read>

    *ax = (int16_t)(buffer[0] << 8 | buffer[1]);  // Combine X high and low bytes
 8001826:	7c3b      	ldrb	r3, [r7, #16]
 8001828:	b21b      	sxth	r3, r3
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	b21a      	sxth	r2, r3
 800182e:	7c7b      	ldrb	r3, [r7, #17]
 8001830:	b21b      	sxth	r3, r3
 8001832:	4313      	orrs	r3, r2
 8001834:	b21a      	sxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	801a      	strh	r2, [r3, #0]
    *ay = (int16_t)(buffer[2] << 8 | buffer[3]);  // Combine Y high and low bytes
 800183a:	7cbb      	ldrb	r3, [r7, #18]
 800183c:	b21b      	sxth	r3, r3
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	b21a      	sxth	r2, r3
 8001842:	7cfb      	ldrb	r3, [r7, #19]
 8001844:	b21b      	sxth	r3, r3
 8001846:	4313      	orrs	r3, r2
 8001848:	b21a      	sxth	r2, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	801a      	strh	r2, [r3, #0]
    *az = (int16_t)(buffer[4] << 8 | buffer[5]);  // Combine Z high and low bytes
 800184e:	7d3b      	ldrb	r3, [r7, #20]
 8001850:	b21b      	sxth	r3, r3
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	b21a      	sxth	r2, r3
 8001856:	7d7b      	ldrb	r3, [r7, #21]
 8001858:	b21b      	sxth	r3, r3
 800185a:	4313      	orrs	r3, r2
 800185c:	b21a      	sxth	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	801a      	strh	r2, [r3, #0]
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <MPU6050_ReadGyro>:

// Reads and combines high and low bytes of gyroscope data
void MPU6050_ReadGyro(int16_t* gx, int16_t* gy, int16_t* gz) {
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];  // Buffer for 6 bytes of gyroscope data (X, Y, Z)

    MPU6050_Read(GYRO_XOUT_H, buffer, 6);
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	2206      	movs	r2, #6
 800187c:	4619      	mov	r1, r3
 800187e:	2043      	movs	r0, #67	@ 0x43
 8001880:	f7ff ff28 	bl	80016d4 <MPU6050_Read>

    *gx = (int16_t)(buffer[0] << 8 | buffer[1]);  // Combine X high and low bytes
 8001884:	7c3b      	ldrb	r3, [r7, #16]
 8001886:	b21b      	sxth	r3, r3
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	b21a      	sxth	r2, r3
 800188c:	7c7b      	ldrb	r3, [r7, #17]
 800188e:	b21b      	sxth	r3, r3
 8001890:	4313      	orrs	r3, r2
 8001892:	b21a      	sxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	801a      	strh	r2, [r3, #0]
    *gy = (int16_t)(buffer[2] << 8 | buffer[3]);  // Combine Y high and low bytes
 8001898:	7cbb      	ldrb	r3, [r7, #18]
 800189a:	b21b      	sxth	r3, r3
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b21a      	sxth	r2, r3
 80018a0:	7cfb      	ldrb	r3, [r7, #19]
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	4313      	orrs	r3, r2
 80018a6:	b21a      	sxth	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	801a      	strh	r2, [r3, #0]
    *gz = (int16_t)(buffer[4] << 8 | buffer[5]);  // Combine Z high and low bytes
 80018ac:	7d3b      	ldrb	r3, [r7, #20]
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	7d7b      	ldrb	r3, [r7, #21]
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b21a      	sxth	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	801a      	strh	r2, [r3, #0]
}
 80018c0:	bf00      	nop
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <Compute_Orientation_Kalman>:
}



// Computes orientation angles using a Kalman filter
void Compute_Orientation_Kalman() {
 80018c8:	b5b0      	push	{r4, r5, r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
    // Calculate pitch and roll from accelerometer data
    float acc_pitch = atan2(-ax, sqrt(ay * ay + az * az)) * 57.2958;
 80018ce:	4b7e      	ldr	r3, [pc, #504]	@ (8001ac8 <Compute_Orientation_Kalman+0x200>)
 80018d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d4:	425b      	negs	r3, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fe1c 	bl	8000514 <__aeabi_i2d>
 80018dc:	4604      	mov	r4, r0
 80018de:	460d      	mov	r5, r1
 80018e0:	4b7a      	ldr	r3, [pc, #488]	@ (8001acc <Compute_Orientation_Kalman+0x204>)
 80018e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b78      	ldr	r3, [pc, #480]	@ (8001acc <Compute_Orientation_Kalman+0x204>)
 80018ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ee:	fb03 f202 	mul.w	r2, r3, r2
 80018f2:	4b77      	ldr	r3, [pc, #476]	@ (8001ad0 <Compute_Orientation_Kalman+0x208>)
 80018f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f8:	4619      	mov	r1, r3
 80018fa:	4b75      	ldr	r3, [pc, #468]	@ (8001ad0 <Compute_Orientation_Kalman+0x208>)
 80018fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fe04 	bl	8000514 <__aeabi_i2d>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	ec43 2b10 	vmov	d0, r2, r3
 8001914:	f006 fa42 	bl	8007d9c <sqrt>
 8001918:	eeb0 7a40 	vmov.f32	s14, s0
 800191c:	eef0 7a60 	vmov.f32	s15, s1
 8001920:	eeb0 1a47 	vmov.f32	s2, s14
 8001924:	eef0 1a67 	vmov.f32	s3, s15
 8001928:	ec45 4b10 	vmov	d0, r4, r5
 800192c:	f006 fa34 	bl	8007d98 <atan2>
 8001930:	ec51 0b10 	vmov	r0, r1, d0
 8001934:	a360      	add	r3, pc, #384	@ (adr r3, 8001ab8 <Compute_Orientation_Kalman+0x1f0>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	f7fe fe55 	bl	80005e8 <__aeabi_dmul>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	f7ff f8ff 	bl	8000b48 <__aeabi_d2f>
 800194a:	4603      	mov	r3, r0
 800194c:	61fb      	str	r3, [r7, #28]
    float acc_roll  = atan2(ay, az) * 57.2958;
 800194e:	4b5f      	ldr	r3, [pc, #380]	@ (8001acc <Compute_Orientation_Kalman+0x204>)
 8001950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fddd 	bl	8000514 <__aeabi_i2d>
 800195a:	4604      	mov	r4, r0
 800195c:	460d      	mov	r5, r1
 800195e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ad0 <Compute_Orientation_Kalman+0x208>)
 8001960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fdd5 	bl	8000514 <__aeabi_i2d>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	ec43 2b11 	vmov	d1, r2, r3
 8001972:	ec45 4b10 	vmov	d0, r4, r5
 8001976:	f006 fa0f 	bl	8007d98 <atan2>
 800197a:	ec51 0b10 	vmov	r0, r1, d0
 800197e:	a34e      	add	r3, pc, #312	@ (adr r3, 8001ab8 <Compute_Orientation_Kalman+0x1f0>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7fe fe30 	bl	80005e8 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f7ff f8da 	bl	8000b48 <__aeabi_d2f>
 8001994:	4603      	mov	r3, r0
 8001996:	61bb      	str	r3, [r7, #24]

    // Convert gyroscope raw data to degrees per second
    float gx_dps = gx / 131.0;
 8001998:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad4 <Compute_Orientation_Kalman+0x20c>)
 800199a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fdb8 	bl	8000514 <__aeabi_i2d>
 80019a4:	a346      	add	r3, pc, #280	@ (adr r3, 8001ac0 <Compute_Orientation_Kalman+0x1f8>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	f7fe ff47 	bl	800083c <__aeabi_ddiv>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f7ff f8c7 	bl	8000b48 <__aeabi_d2f>
 80019ba:	4603      	mov	r3, r0
 80019bc:	617b      	str	r3, [r7, #20]
    float gy_dps = gy / 131.0;
 80019be:	4b46      	ldr	r3, [pc, #280]	@ (8001ad8 <Compute_Orientation_Kalman+0x210>)
 80019c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fda5 	bl	8000514 <__aeabi_i2d>
 80019ca:	a33d      	add	r3, pc, #244	@ (adr r3, 8001ac0 <Compute_Orientation_Kalman+0x1f8>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7fe ff34 	bl	800083c <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f7ff f8b4 	bl	8000b48 <__aeabi_d2f>
 80019e0:	4603      	mov	r3, r0
 80019e2:	613b      	str	r3, [r7, #16]
    float gz_dps = gz / 131.0;
 80019e4:	4b3d      	ldr	r3, [pc, #244]	@ (8001adc <Compute_Orientation_Kalman+0x214>)
 80019e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fd92 	bl	8000514 <__aeabi_i2d>
 80019f0:	a333      	add	r3, pc, #204	@ (adr r3, 8001ac0 <Compute_Orientation_Kalman+0x1f8>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe ff21 	bl	800083c <__aeabi_ddiv>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f7ff f8a1 	bl	8000b48 <__aeabi_d2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	60fb      	str	r3, [r7, #12]

    // Apply the Kalman filter to combine accelerometer and gyroscope data
    float pitch_f = Kalman_Update(&kalman_pitch, acc_pitch, gy_dps, dt);
 8001a0a:	4b35      	ldr	r3, [pc, #212]	@ (8001ae0 <Compute_Orientation_Kalman+0x218>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	eeb0 1a67 	vmov.f32	s2, s15
 8001a14:	edd7 0a04 	vldr	s1, [r7, #16]
 8001a18:	ed97 0a07 	vldr	s0, [r7, #28]
 8001a1c:	4831      	ldr	r0, [pc, #196]	@ (8001ae4 <Compute_Orientation_Kalman+0x21c>)
 8001a1e:	f7ff fa9b 	bl	8000f58 <Kalman_Update>
 8001a22:	ed87 0a02 	vstr	s0, [r7, #8]
    float roll_f  = Kalman_Update(&kalman_roll, acc_roll, gx_dps, dt);
 8001a26:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae0 <Compute_Orientation_Kalman+0x218>)
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	eeb0 1a67 	vmov.f32	s2, s15
 8001a30:	edd7 0a05 	vldr	s1, [r7, #20]
 8001a34:	ed97 0a06 	vldr	s0, [r7, #24]
 8001a38:	482b      	ldr	r0, [pc, #172]	@ (8001ae8 <Compute_Orientation_Kalman+0x220>)
 8001a3a:	f7ff fa8d 	bl	8000f58 <Kalman_Update>
 8001a3e:	ed87 0a01 	vstr	s0, [r7, #4]
    float yaw_f   = Kalman_Update(&kalman_yaw, yaw_f, gz_dps, dt);
 8001a42:	4b27      	ldr	r3, [pc, #156]	@ (8001ae0 <Compute_Orientation_Kalman+0x218>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	eeb0 1a67 	vmov.f32	s2, s15
 8001a4c:	edd7 0a03 	vldr	s1, [r7, #12]
 8001a50:	ed97 0a00 	vldr	s0, [r7]
 8001a54:	4825      	ldr	r0, [pc, #148]	@ (8001aec <Compute_Orientation_Kalman+0x224>)
 8001a56:	f7ff fa7f 	bl	8000f58 <Kalman_Update>
 8001a5a:	ed87 0a00 	vstr	s0, [r7]

    // Convert float angles to integer angles for storage and scaling
    pitch = (int16_t)(pitch_f * 100);
 8001a5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a62:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001af0 <Compute_Orientation_Kalman+0x228>
 8001a66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a6e:	ee17 3a90 	vmov	r3, s15
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <Compute_Orientation_Kalman+0x22c>)
 8001a76:	801a      	strh	r2, [r3, #0]
    roll  = (int16_t)(roll_f * 100);
 8001a78:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a7c:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001af0 <Compute_Orientation_Kalman+0x228>
 8001a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a88:	ee17 3a90 	vmov	r3, s15
 8001a8c:	b21a      	sxth	r2, r3
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <Compute_Orientation_Kalman+0x230>)
 8001a90:	801a      	strh	r2, [r3, #0]
    yaw   = (int16_t)(yaw_f * 100);
 8001a92:	edd7 7a00 	vldr	s15, [r7]
 8001a96:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001af0 <Compute_Orientation_Kalman+0x228>
 8001a9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa2:	ee17 3a90 	vmov	r3, s15
 8001aa6:	b21a      	sxth	r2, r3
 8001aa8:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <Compute_Orientation_Kalman+0x234>)
 8001aaa:	801a      	strh	r2, [r3, #0]
}
 8001aac:	bf00      	nop
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	c63f1412 	.word	0xc63f1412
 8001abc:	404ca5dc 	.word	0x404ca5dc
 8001ac0:	00000000 	.word	0x00000000
 8001ac4:	40606000 	.word	0x40606000
 8001ac8:	2000027e 	.word	0x2000027e
 8001acc:	20000280 	.word	0x20000280
 8001ad0:	20000282 	.word	0x20000282
 8001ad4:	20000284 	.word	0x20000284
 8001ad8:	20000286 	.word	0x20000286
 8001adc:	20000288 	.word	0x20000288
 8001ae0:	080085b0 	.word	0x080085b0
 8001ae4:	20000084 	.word	0x20000084
 8001ae8:	200000b0 	.word	0x200000b0
 8001aec:	200000dc 	.word	0x200000dc
 8001af0:	42c80000 	.word	0x42c80000
 8001af4:	2000028a 	.word	0x2000028a
 8001af8:	2000028c 	.word	0x2000028c
 8001afc:	2000028e 	.word	0x2000028e

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <Error_Handler+0x8>

08001b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <HAL_MspInit+0x50>)
 8001b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b16:	4a11      	ldr	r2, [pc, #68]	@ (8001b5c <HAL_MspInit+0x50>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <HAL_MspInit+0x50>)
 8001b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <HAL_MspInit+0x50>)
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b5c <HAL_MspInit+0x50>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b36:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <HAL_MspInit+0x50>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	2051      	movs	r0, #81	@ 0x51
 8001b48:	f000 fb9f 	bl	800228a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001b4c:	2051      	movs	r0, #81	@ 0x51
 8001b4e:	f000 fbb8 	bl	80022c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000

08001b60 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0ac      	sub	sp, #176	@ 0xb0
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2288      	movs	r2, #136	@ 0x88
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f005 fb87 	bl	8007294 <memset>
  if(hi2c->Instance==I2C1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a21      	ldr	r2, [pc, #132]	@ (8001c10 <HAL_I2C_MspInit+0xb0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d13b      	bne.n	8001c08 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b90:	2340      	movs	r3, #64	@ 0x40
 8001b92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 f853 	bl	8004c48 <HAL_RCCEx_PeriphCLKConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ba8:	f7ff ffaa 	bl	8001b00 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bac:	4b19      	ldr	r3, [pc, #100]	@ (8001c14 <HAL_I2C_MspInit+0xb4>)
 8001bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb0:	4a18      	ldr	r2, [pc, #96]	@ (8001c14 <HAL_I2C_MspInit+0xb4>)
 8001bb2:	f043 0302 	orr.w	r3, r3, #2
 8001bb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb8:	4b16      	ldr	r3, [pc, #88]	@ (8001c14 <HAL_I2C_MspInit+0xb4>)
 8001bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bcc:	2312      	movs	r3, #18
 8001bce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bde:	2304      	movs	r3, #4
 8001be0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001be8:	4619      	mov	r1, r3
 8001bea:	480b      	ldr	r0, [pc, #44]	@ (8001c18 <HAL_I2C_MspInit+0xb8>)
 8001bec:	f000 fc10 	bl	8002410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf0:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <HAL_I2C_MspInit+0xb4>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf4:	4a07      	ldr	r2, [pc, #28]	@ (8001c14 <HAL_I2C_MspInit+0xb4>)
 8001bf6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_I2C_MspInit+0xb4>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c08:	bf00      	nop
 8001c0a:	37b0      	adds	r7, #176	@ 0xb0
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40005400 	.word	0x40005400
 8001c14:	40021000 	.word	0x40021000
 8001c18:	48000400 	.word	0x48000400

08001c1c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a13      	ldr	r2, [pc, #76]	@ (8001c78 <HAL_TIM_Base_MspInit+0x5c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d10c      	bne.n	8001c48 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c2e:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <HAL_TIM_Base_MspInit+0x60>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	4a12      	ldr	r2, [pc, #72]	@ (8001c7c <HAL_TIM_Base_MspInit+0x60>)
 8001c34:	f043 0310 	orr.w	r3, r3, #16
 8001c38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c3a:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <HAL_TIM_Base_MspInit+0x60>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001c46:	e010      	b.n	8001c6a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c80 <HAL_TIM_Base_MspInit+0x64>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10b      	bne.n	8001c6a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c52:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <HAL_TIM_Base_MspInit+0x60>)
 8001c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c56:	4a09      	ldr	r2, [pc, #36]	@ (8001c7c <HAL_TIM_Base_MspInit+0x60>)
 8001c58:	f043 0320 	orr.w	r3, r3, #32
 8001c5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c5e:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <HAL_TIM_Base_MspInit+0x60>)
 8001c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c62:	f003 0320 	and.w	r3, r3, #32
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40001000 	.word	0x40001000
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40001400 	.word	0x40001400

08001c84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b0ac      	sub	sp, #176	@ 0xb0
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2288      	movs	r2, #136	@ 0x88
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f005 faf5 	bl	8007294 <memset>
  if(huart->Instance==USART2)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a21      	ldr	r2, [pc, #132]	@ (8001d34 <HAL_UART_MspInit+0xb0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d13b      	bne.n	8001d2c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f002 ffc1 	bl	8004c48 <HAL_RCCEx_PeriphCLKConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ccc:	f7ff ff18 	bl	8001b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cd0:	4b19      	ldr	r3, [pc, #100]	@ (8001d38 <HAL_UART_MspInit+0xb4>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd4:	4a18      	ldr	r2, [pc, #96]	@ (8001d38 <HAL_UART_MspInit+0xb4>)
 8001cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cda:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cdc:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <HAL_UART_MspInit+0xb4>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce8:	4b13      	ldr	r3, [pc, #76]	@ (8001d38 <HAL_UART_MspInit+0xb4>)
 8001cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cec:	4a12      	ldr	r2, [pc, #72]	@ (8001d38 <HAL_UART_MspInit+0xb4>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf4:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <HAL_UART_MspInit+0xb4>)
 8001cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d00:	230c      	movs	r3, #12
 8001d02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d18:	2307      	movs	r3, #7
 8001d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d22:	4619      	mov	r1, r3
 8001d24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d28:	f000 fb72 	bl	8002410 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d2c:	bf00      	nop
 8001d2e:	37b0      	adds	r7, #176	@ 0xb0
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40004400 	.word	0x40004400
 8001d38:	40021000 	.word	0x40021000

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <NMI_Handler+0x4>

08001d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <MemManage_Handler+0x4>

08001d54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <BusFault_Handler+0x4>

08001d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <UsageFault_Handler+0x4>

08001d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d92:	f000 f95b 	bl	800204c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <I2C1_EV_IRQHandler+0x10>)
 8001da2:	f000 ffbb 	bl	8002d1c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000108 	.word	0x20000108

08001db0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001db4:	4802      	ldr	r0, [pc, #8]	@ (8001dc0 <I2C1_ER_IRQHandler+0x10>)
 8001db6:	f000 ffcb 	bl	8002d50 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000108 	.word	0x20000108

08001dc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dc8:	4802      	ldr	r0, [pc, #8]	@ (8001dd4 <USART2_IRQHandler+0x10>)
 8001dca:	f004 f815 	bl	8005df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200001f4 	.word	0x200001f4

08001dd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ddc:	4802      	ldr	r0, [pc, #8]	@ (8001de8 <TIM6_DAC_IRQHandler+0x10>)
 8001dde:	f003 fcb7 	bl	8005750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000015c 	.word	0x2000015c

08001dec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001df0:	4802      	ldr	r0, [pc, #8]	@ (8001dfc <TIM7_IRQHandler+0x10>)
 8001df2:	f003 fcad 	bl	8005750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200001a8 	.word	0x200001a8

08001e00 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e00a      	b.n	8001e36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e20:	f3af 8000 	nop.w
 8001e24:	4601      	mov	r1, r0
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	60ba      	str	r2, [r7, #8]
 8001e2c:	b2ca      	uxtb	r2, r1
 8001e2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3301      	adds	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	dbf0      	blt.n	8001e20 <_read+0x12>
  }

  return len;
 8001e3e:	687b      	ldr	r3, [r7, #4]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e70:	605a      	str	r2, [r3, #4]
  return 0;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_isatty>:

int _isatty(int file)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e88:	2301      	movs	r3, #1
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b085      	sub	sp, #20
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb8:	4a14      	ldr	r2, [pc, #80]	@ (8001f0c <_sbrk+0x5c>)
 8001eba:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <_sbrk+0x60>)
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec4:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <_sbrk+0x64>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	@ (8001f18 <_sbrk+0x68>)
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed2:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d207      	bcs.n	8001ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee0:	f005 fa26 	bl	8007330 <__errno>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e009      	b.n	8001f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef0:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef6:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	4a05      	ldr	r2, [pc, #20]	@ (8001f14 <_sbrk+0x64>)
 8001f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f02:	68fb      	ldr	r3, [r7, #12]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20018000 	.word	0x20018000
 8001f10:	00000400 	.word	0x00000400
 8001f14:	20000290 	.word	0x20000290
 8001f18:	200003e8 	.word	0x200003e8

08001f1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f20:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <SystemInit+0x20>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f26:	4a05      	ldr	r2, [pc, #20]	@ (8001f3c <SystemInit+0x20>)
 8001f28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f44:	f7ff ffea 	bl	8001f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f48:	480c      	ldr	r0, [pc, #48]	@ (8001f7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f4a:	490d      	ldr	r1, [pc, #52]	@ (8001f80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f84 <LoopForever+0xe>)
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f50:	e002      	b.n	8001f58 <LoopCopyDataInit>

08001f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f56:	3304      	adds	r3, #4

08001f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f5c:	d3f9      	bcc.n	8001f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f60:	4c0a      	ldr	r4, [pc, #40]	@ (8001f8c <LoopForever+0x16>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f64:	e001      	b.n	8001f6a <LoopFillZerobss>

08001f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f68:	3204      	adds	r2, #4

08001f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f6c:	d3fb      	bcc.n	8001f66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f6e:	f005 f9e5 	bl	800733c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f72:	f7ff f943 	bl	80011fc <main>

08001f76 <LoopForever>:

LoopForever:
    b LoopForever
 8001f76:	e7fe      	b.n	8001f76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f80:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001f84:	080086c0 	.word	0x080086c0
  ldr r2, =_sbss
 8001f88:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001f8c:	200003e4 	.word	0x200003e4

08001f90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f90:	e7fe      	b.n	8001f90 <ADC1_2_IRQHandler>
	...

08001f94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <HAL_Init+0x3c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd0 <HAL_Init+0x3c>)
 8001fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fa8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001faa:	2003      	movs	r0, #3
 8001fac:	f000 f962 	bl	8002274 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f000 f80f 	bl	8001fd4 <HAL_InitTick>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	71fb      	strb	r3, [r7, #7]
 8001fc0:	e001      	b.n	8001fc6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fc2:	f7ff fda3 	bl	8001b0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40022000 	.word	0x40022000

08001fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fe0:	4b17      	ldr	r3, [pc, #92]	@ (8002040 <HAL_InitTick+0x6c>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d023      	beq.n	8002030 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fe8:	4b16      	ldr	r3, [pc, #88]	@ (8002044 <HAL_InitTick+0x70>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b14      	ldr	r3, [pc, #80]	@ (8002040 <HAL_InitTick+0x6c>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f96d 	bl	80022de <HAL_SYSTICK_Config>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10f      	bne.n	800202a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b0f      	cmp	r3, #15
 800200e:	d809      	bhi.n	8002024 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002010:	2200      	movs	r2, #0
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	f000 f937 	bl	800228a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800201c:	4a0a      	ldr	r2, [pc, #40]	@ (8002048 <HAL_InitTick+0x74>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e007      	b.n	8002034 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
 8002028:	e004      	b.n	8002034 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	73fb      	strb	r3, [r7, #15]
 800202e:	e001      	b.n	8002034 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002034:	7bfb      	ldrb	r3, [r7, #15]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000008 	.word	0x20000008
 8002044:	20000000 	.word	0x20000000
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002050:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_IncTick+0x20>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <HAL_IncTick+0x24>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4413      	add	r3, r2
 800205c:	4a04      	ldr	r2, [pc, #16]	@ (8002070 <HAL_IncTick+0x24>)
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000008 	.word	0x20000008
 8002070:	20000294 	.word	0x20000294

08002074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return uwTick;
 8002078:	4b03      	ldr	r3, [pc, #12]	@ (8002088 <HAL_GetTick+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000294 	.word	0x20000294

0800208c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff ffee 	bl	8002074 <HAL_GetTick>
 8002098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a4:	d005      	beq.n	80020b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020a6:	4b0a      	ldr	r3, [pc, #40]	@ (80020d0 <HAL_Delay+0x44>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020b2:	bf00      	nop
 80020b4:	f7ff ffde 	bl	8002074 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d8f7      	bhi.n	80020b4 <HAL_Delay+0x28>
  {
  }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000008 	.word	0x20000008

080020d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020f0:	4013      	ands	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002106:	4a04      	ldr	r2, [pc, #16]	@ (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	60d3      	str	r3, [r2, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002120:	4b04      	ldr	r3, [pc, #16]	@ (8002134 <__NVIC_GetPriorityGrouping+0x18>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f003 0307 	and.w	r3, r3, #7
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	2b00      	cmp	r3, #0
 8002148:	db0b      	blt.n	8002162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	4907      	ldr	r1, [pc, #28]	@ (8002170 <__NVIC_EnableIRQ+0x38>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2001      	movs	r0, #1
 800215a:	fa00 f202 	lsl.w	r2, r0, r2
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000e100 	.word	0xe000e100

08002174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db0a      	blt.n	800219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	490c      	ldr	r1, [pc, #48]	@ (80021c0 <__NVIC_SetPriority+0x4c>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	440b      	add	r3, r1
 8002198:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800219c:	e00a      	b.n	80021b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	@ (80021c4 <__NVIC_SetPriority+0x50>)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3b04      	subs	r3, #4
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	@ 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf28      	it	cs
 80021e6:	2304      	movcs	r3, #4
 80021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d902      	bls.n	80021f8 <NVIC_EncodePriority+0x30>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b03      	subs	r3, #3
 80021f6:	e000      	b.n	80021fa <NVIC_EncodePriority+0x32>
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43d9      	mvns	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	@ 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002240:	d301      	bcc.n	8002246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002242:	2301      	movs	r3, #1
 8002244:	e00f      	b.n	8002266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002246:	4a0a      	ldr	r2, [pc, #40]	@ (8002270 <SysTick_Config+0x40>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224e:	210f      	movs	r1, #15
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f7ff ff8e 	bl	8002174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002258:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <SysTick_Config+0x40>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225e:	4b04      	ldr	r3, [pc, #16]	@ (8002270 <SysTick_Config+0x40>)
 8002260:	2207      	movs	r2, #7
 8002262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	e000e010 	.word	0xe000e010

08002274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ff29 	bl	80020d4 <__NVIC_SetPriorityGrouping>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800229c:	f7ff ff3e 	bl	800211c <__NVIC_GetPriorityGrouping>
 80022a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	6978      	ldr	r0, [r7, #20]
 80022a8:	f7ff ff8e 	bl	80021c8 <NVIC_EncodePriority>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff5d 	bl	8002174 <__NVIC_SetPriority>
}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff31 	bl	8002138 <__NVIC_EnableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffa2 	bl	8002230 <SysTick_Config>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d008      	beq.n	8002320 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2204      	movs	r2, #4
 8002312:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e022      	b.n	8002366 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 020e 	bic.w	r2, r2, #14
 800232e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002344:	f003 021c 	and.w	r2, r3, #28
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	2101      	movs	r1, #1
 800234e:	fa01 f202 	lsl.w	r2, r1, r2
 8002352:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002364:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d005      	beq.n	8002396 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2204      	movs	r2, #4
 800238e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	e029      	b.n	80023ea <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 020e 	bic.w	r2, r2, #14
 80023a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ba:	f003 021c 	and.w	r2, r3, #28
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f202 	lsl.w	r2, r1, r2
 80023c8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	4798      	blx	r3
    }
  }
  return status;
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002402:	b2db      	uxtb	r3, r3
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800241e:	e17f      	b.n	8002720 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	2101      	movs	r1, #1
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	4013      	ands	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8171 	beq.w	800271a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d005      	beq.n	8002450 <HAL_GPIO_Init+0x40>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d130      	bne.n	80024b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	2203      	movs	r2, #3
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002486:	2201      	movs	r2, #1
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	f003 0201 	and.w	r2, r3, #1
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d118      	bne.n	80024f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024c4:	2201      	movs	r2, #1
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	08db      	lsrs	r3, r3, #3
 80024da:	f003 0201 	and.w	r2, r3, #1
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d017      	beq.n	800252c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d123      	bne.n	8002580 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	08da      	lsrs	r2, r3, #3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3208      	adds	r2, #8
 8002540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	220f      	movs	r2, #15
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	08da      	lsrs	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3208      	adds	r2, #8
 800257a:	6939      	ldr	r1, [r7, #16]
 800257c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0203 	and.w	r2, r3, #3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80ac 	beq.w	800271a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002740 <HAL_GPIO_Init+0x330>)
 80025c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002740 <HAL_GPIO_Init+0x330>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80025ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002740 <HAL_GPIO_Init+0x330>)
 80025d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025da:	4a5a      	ldr	r2, [pc, #360]	@ (8002744 <HAL_GPIO_Init+0x334>)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	089b      	lsrs	r3, r3, #2
 80025e0:	3302      	adds	r3, #2
 80025e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	220f      	movs	r2, #15
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002604:	d025      	beq.n	8002652 <HAL_GPIO_Init+0x242>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4f      	ldr	r2, [pc, #316]	@ (8002748 <HAL_GPIO_Init+0x338>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d01f      	beq.n	800264e <HAL_GPIO_Init+0x23e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4e      	ldr	r2, [pc, #312]	@ (800274c <HAL_GPIO_Init+0x33c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d019      	beq.n	800264a <HAL_GPIO_Init+0x23a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4d      	ldr	r2, [pc, #308]	@ (8002750 <HAL_GPIO_Init+0x340>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_GPIO_Init+0x236>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4c      	ldr	r2, [pc, #304]	@ (8002754 <HAL_GPIO_Init+0x344>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00d      	beq.n	8002642 <HAL_GPIO_Init+0x232>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4b      	ldr	r2, [pc, #300]	@ (8002758 <HAL_GPIO_Init+0x348>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d007      	beq.n	800263e <HAL_GPIO_Init+0x22e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4a      	ldr	r2, [pc, #296]	@ (800275c <HAL_GPIO_Init+0x34c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <HAL_GPIO_Init+0x22a>
 8002636:	2306      	movs	r3, #6
 8002638:	e00c      	b.n	8002654 <HAL_GPIO_Init+0x244>
 800263a:	2307      	movs	r3, #7
 800263c:	e00a      	b.n	8002654 <HAL_GPIO_Init+0x244>
 800263e:	2305      	movs	r3, #5
 8002640:	e008      	b.n	8002654 <HAL_GPIO_Init+0x244>
 8002642:	2304      	movs	r3, #4
 8002644:	e006      	b.n	8002654 <HAL_GPIO_Init+0x244>
 8002646:	2303      	movs	r3, #3
 8002648:	e004      	b.n	8002654 <HAL_GPIO_Init+0x244>
 800264a:	2302      	movs	r3, #2
 800264c:	e002      	b.n	8002654 <HAL_GPIO_Init+0x244>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_GPIO_Init+0x244>
 8002652:	2300      	movs	r3, #0
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	f002 0203 	and.w	r2, r2, #3
 800265a:	0092      	lsls	r2, r2, #2
 800265c:	4093      	lsls	r3, r2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002664:	4937      	ldr	r1, [pc, #220]	@ (8002744 <HAL_GPIO_Init+0x334>)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	089b      	lsrs	r3, r3, #2
 800266a:	3302      	adds	r3, #2
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002672:	4b3b      	ldr	r3, [pc, #236]	@ (8002760 <HAL_GPIO_Init+0x350>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	43db      	mvns	r3, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002696:	4a32      	ldr	r2, [pc, #200]	@ (8002760 <HAL_GPIO_Init+0x350>)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800269c:	4b30      	ldr	r3, [pc, #192]	@ (8002760 <HAL_GPIO_Init+0x350>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026c0:	4a27      	ldr	r2, [pc, #156]	@ (8002760 <HAL_GPIO_Init+0x350>)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026c6:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <HAL_GPIO_Init+0x350>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002760 <HAL_GPIO_Init+0x350>)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HAL_GPIO_Init+0x350>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002714:	4a12      	ldr	r2, [pc, #72]	@ (8002760 <HAL_GPIO_Init+0x350>)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	3301      	adds	r3, #1
 800271e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fa22 f303 	lsr.w	r3, r2, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	f47f ae78 	bne.w	8002420 <HAL_GPIO_Init+0x10>
  }
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000
 8002744:	40010000 	.word	0x40010000
 8002748:	48000400 	.word	0x48000400
 800274c:	48000800 	.word	0x48000800
 8002750:	48000c00 	.word	0x48000c00
 8002754:	48001000 	.word	0x48001000
 8002758:	48001400 	.word	0x48001400
 800275c:	48001800 	.word	0x48001800
 8002760:	40010400 	.word	0x40010400

08002764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
 8002770:	4613      	mov	r3, r2
 8002772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002774:	787b      	ldrb	r3, [r7, #1]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800277a:	887a      	ldrh	r2, [r7, #2]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002780:	e002      	b.n	8002788 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002782:	887a      	ldrh	r2, [r7, #2]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027a6:	887a      	ldrh	r2, [r7, #2]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4013      	ands	r3, r2
 80027ac:	041a      	lsls	r2, r3, #16
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	43d9      	mvns	r1, r3
 80027b2:	887b      	ldrh	r3, [r7, #2]
 80027b4:	400b      	ands	r3, r1
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	619a      	str	r2, [r3, #24]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e08d      	b.n	80028f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff f9b6 	bl	8001b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2224      	movs	r2, #36	@ 0x24
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0201 	bic.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002818:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002828:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d107      	bne.n	8002842 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	e006      	b.n	8002850 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800284e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d108      	bne.n	800286a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	e007      	b.n	800287a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002878:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002888:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800288c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800289c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69d9      	ldr	r1, [r3, #28]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1a      	ldr	r2, [r3, #32]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	607a      	str	r2, [r7, #4]
 800290a:	461a      	mov	r2, r3
 800290c:	460b      	mov	r3, r1
 800290e:	817b      	strh	r3, [r7, #10]
 8002910:	4613      	mov	r3, r2
 8002912:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b20      	cmp	r3, #32
 800291e:	f040 80fd 	bne.w	8002b1c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_I2C_Master_Transmit+0x30>
 800292c:	2302      	movs	r3, #2
 800292e:	e0f6      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x21e>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002938:	f7ff fb9c 	bl	8002074 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	2319      	movs	r3, #25
 8002944:	2201      	movs	r2, #1
 8002946:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 ffa1 	bl	8003892 <I2C_WaitOnFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0e1      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2221      	movs	r2, #33	@ 0x21
 800295e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2210      	movs	r2, #16
 8002966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	893a      	ldrh	r2, [r7, #8]
 800297a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	2bff      	cmp	r3, #255	@ 0xff
 800298a:	d906      	bls.n	800299a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	22ff      	movs	r2, #255	@ 0xff
 8002990:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002992:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	e007      	b.n	80029aa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80029a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029a8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d024      	beq.n	80029fc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	781a      	ldrb	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	3301      	adds	r3, #1
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	8979      	ldrh	r1, [r7, #10]
 80029ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002b28 <HAL_I2C_Master_Transmit+0x228>)
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f001 f99b 	bl	8003d30 <I2C_TransferConfig>
 80029fa:	e066      	b.n	8002aca <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	8979      	ldrh	r1, [r7, #10]
 8002a04:	4b48      	ldr	r3, [pc, #288]	@ (8002b28 <HAL_I2C_Master_Transmit+0x228>)
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f001 f990 	bl	8003d30 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a10:	e05b      	b.n	8002aca <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	6a39      	ldr	r1, [r7, #32]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 ff94 	bl	8003944 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e07b      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	781a      	ldrb	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d034      	beq.n	8002aca <HAL_I2C_Master_Transmit+0x1ca>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d130      	bne.n	8002aca <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2180      	movs	r1, #128	@ 0x80
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 ff0d 	bl	8003892 <I2C_WaitOnFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e04d      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2bff      	cmp	r3, #255	@ 0xff
 8002a8a:	d90e      	bls.n	8002aaa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	22ff      	movs	r2, #255	@ 0xff
 8002a90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	8979      	ldrh	r1, [r7, #10]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f001 f944 	bl	8003d30 <I2C_TransferConfig>
 8002aa8:	e00f      	b.n	8002aca <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	8979      	ldrh	r1, [r7, #10]
 8002abc:	2300      	movs	r3, #0
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f001 f933 	bl	8003d30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d19e      	bne.n	8002a12 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	6a39      	ldr	r1, [r7, #32]
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 ff7a 	bl	80039d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e01a      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2220      	movs	r2, #32
 8002aee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6859      	ldr	r1, [r3, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <HAL_I2C_Master_Transmit+0x22c>)
 8002afc:	400b      	ands	r3, r1
 8002afe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e000      	b.n	8002b1e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	80002000 	.word	0x80002000
 8002b2c:	fe00e800 	.word	0xfe00e800

08002b30 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	817b      	strh	r3, [r7, #10]
 8002b40:	4613      	mov	r3, r2
 8002b42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	f040 80db 	bne.w	8002d08 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_I2C_Master_Receive+0x30>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e0d4      	b.n	8002d0a <HAL_I2C_Master_Receive+0x1da>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b68:	f7ff fa84 	bl	8002074 <HAL_GetTick>
 8002b6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	2319      	movs	r3, #25
 8002b74:	2201      	movs	r2, #1
 8002b76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fe89 	bl	8003892 <I2C_WaitOnFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e0bf      	b.n	8002d0a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2222      	movs	r2, #34	@ 0x22
 8002b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2210      	movs	r2, #16
 8002b96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	893a      	ldrh	r2, [r7, #8]
 8002baa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2bff      	cmp	r3, #255	@ 0xff
 8002bba:	d90e      	bls.n	8002bda <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	8979      	ldrh	r1, [r7, #10]
 8002bca:	4b52      	ldr	r3, [pc, #328]	@ (8002d14 <HAL_I2C_Master_Receive+0x1e4>)
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f001 f8ac 	bl	8003d30 <I2C_TransferConfig>
 8002bd8:	e06d      	b.n	8002cb6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	8979      	ldrh	r1, [r7, #10]
 8002bec:	4b49      	ldr	r3, [pc, #292]	@ (8002d14 <HAL_I2C_Master_Receive+0x1e4>)
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f001 f89b 	bl	8003d30 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002bfa:	e05c      	b.n	8002cb6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	6a39      	ldr	r1, [r7, #32]
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 ff29 	bl	8003a58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e07c      	b.n	8002d0a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d034      	beq.n	8002cb6 <HAL_I2C_Master_Receive+0x186>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d130      	bne.n	8002cb6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2180      	movs	r1, #128	@ 0x80
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fe17 	bl	8003892 <I2C_WaitOnFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e04d      	b.n	8002d0a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2bff      	cmp	r3, #255	@ 0xff
 8002c76:	d90e      	bls.n	8002c96 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	22ff      	movs	r2, #255	@ 0xff
 8002c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	8979      	ldrh	r1, [r7, #10]
 8002c86:	2300      	movs	r3, #0
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f001 f84e 	bl	8003d30 <I2C_TransferConfig>
 8002c94:	e00f      	b.n	8002cb6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	8979      	ldrh	r1, [r7, #10]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f001 f83d 	bl	8003d30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d19d      	bne.n	8002bfc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	6a39      	ldr	r1, [r7, #32]
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fe84 	bl	80039d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e01a      	b.n	8002d0a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6859      	ldr	r1, [r3, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8002d18 <HAL_I2C_Master_Receive+0x1e8>)
 8002ce8:	400b      	ands	r3, r1
 8002cea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	e000      	b.n	8002d0a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
  }
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	80002400 	.word	0x80002400
 8002d18:	fe00e800 	.word	0xfe00e800

08002d1c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	68f9      	ldr	r1, [r7, #12]
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4798      	blx	r3
  }
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d010      	beq.n	8002d96 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	09db      	lsrs	r3, r3, #7
 8002d78:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d84:	f043 0201 	orr.w	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d94:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	0a9b      	lsrs	r3, r3, #10
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d010      	beq.n	8002dc4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	09db      	lsrs	r3, r3, #7
 8002da6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	f043 0208 	orr.w	r2, r3, #8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dc2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	0a5b      	lsrs	r3, r3, #9
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d010      	beq.n	8002df2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	09db      	lsrs	r3, r3, #7
 8002dd4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de0:	f043 0202 	orr.w	r2, r3, #2
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002df0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 030b 	and.w	r3, r3, #11
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002e02:	68f9      	ldr	r1, [r7, #12]
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fbeb 	bl	80035e0 <I2C_ITError>
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	70fb      	strb	r3, [r7, #3]
 8002e46:	4613      	mov	r3, r2
 8002e48:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b086      	sub	sp, #24
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <I2C_Slave_ISR_IT+0x24>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e0ed      	b.n	8003092 <I2C_Slave_ISR_IT+0x200>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d004      	beq.n	8002ee0 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002ed6:	6939      	ldr	r1, [r7, #16]
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f9c1 	bl	8003260 <I2C_ITSlaveCplt>
 8002ede:	e0d3      	b.n	8003088 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	091b      	lsrs	r3, r3, #4
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d04d      	beq.n	8002f88 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d047      	beq.n	8002f88 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d128      	bne.n	8002f54 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b28      	cmp	r3, #40	@ 0x28
 8002f0c:	d108      	bne.n	8002f20 <I2C_Slave_ISR_IT+0x8e>
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f14:	d104      	bne.n	8002f20 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f16:	6939      	ldr	r1, [r7, #16]
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 fb0b 	bl	8003534 <I2C_ITListenCplt>
 8002f1e:	e032      	b.n	8002f86 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b29      	cmp	r3, #41	@ 0x29
 8002f2a:	d10e      	bne.n	8002f4a <I2C_Slave_ISR_IT+0xb8>
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f32:	d00a      	beq.n	8002f4a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2210      	movs	r2, #16
 8002f3a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 fc66 	bl	800380e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f92d 	bl	80031a2 <I2C_ITSlaveSeqCplt>
 8002f48:	e01d      	b.n	8002f86 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2210      	movs	r2, #16
 8002f50:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002f52:	e096      	b.n	8003082 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2210      	movs	r2, #16
 8002f5a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f60:	f043 0204 	orr.w	r2, r3, #4
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d004      	beq.n	8002f78 <I2C_Slave_ISR_IT+0xe6>
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f74:	f040 8085 	bne.w	8003082 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 fb2e 	bl	80035e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002f84:	e07d      	b.n	8003082 <I2C_Slave_ISR_IT+0x1f0>
 8002f86:	e07c      	b.n	8003082 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d030      	beq.n	8002ff6 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	089b      	lsrs	r3, r3, #2
 8002f98:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d02a      	beq.n	8002ff6 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d018      	beq.n	8002fdc <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d14f      	bne.n	8003086 <I2C_Slave_ISR_IT+0x1f4>
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fec:	d04b      	beq.n	8003086 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f8d7 	bl	80031a2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002ff4:	e047      	b.n	8003086 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	08db      	lsrs	r3, r3, #3
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	08db      	lsrs	r3, r3, #3
 8003006:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800300e:	6939      	ldr	r1, [r7, #16]
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f842 	bl	800309a <I2C_ITAddrCplt>
 8003016:	e037      	b.n	8003088 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	085b      	lsrs	r3, r3, #1
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d031      	beq.n	8003088 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800302c:	2b00      	cmp	r3, #0
 800302e:	d02b      	beq.n	8003088 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d018      	beq.n	800306c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	851a      	strh	r2, [r3, #40]	@ 0x28
 800306a:	e00d      	b.n	8003088 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003072:	d002      	beq.n	800307a <I2C_Slave_ISR_IT+0x1e8>
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f891 	bl	80031a2 <I2C_ITSlaveSeqCplt>
 8003080:	e002      	b.n	8003088 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8003082:	bf00      	nop
 8003084:	e000      	b.n	8003088 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8003086:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80030b0:	2b28      	cmp	r3, #40	@ 0x28
 80030b2:	d16a      	bne.n	800318a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	0c1b      	lsrs	r3, r3, #16
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	0c1b      	lsrs	r3, r3, #16
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80030d2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030e0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80030ee:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d138      	bne.n	800316a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80030f8:	897b      	ldrh	r3, [r7, #10]
 80030fa:	09db      	lsrs	r3, r3, #7
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	89bb      	ldrh	r3, [r7, #12]
 8003100:	4053      	eors	r3, r2
 8003102:	b29b      	uxth	r3, r3
 8003104:	f003 0306 	and.w	r3, r3, #6
 8003108:	2b00      	cmp	r3, #0
 800310a:	d11c      	bne.n	8003146 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800310c:	897b      	ldrh	r3, [r7, #10]
 800310e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800311e:	2b02      	cmp	r3, #2
 8003120:	d13b      	bne.n	800319a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2208      	movs	r2, #8
 800312e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003138:	89ba      	ldrh	r2, [r7, #12]
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	4619      	mov	r1, r3
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff fe7b 	bl	8002e3a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003144:	e029      	b.n	800319a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003146:	893b      	ldrh	r3, [r7, #8]
 8003148:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800314a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fe20 	bl	8003d94 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800315c:	89ba      	ldrh	r2, [r7, #12]
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	4619      	mov	r1, r3
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff fe69 	bl	8002e3a <HAL_I2C_AddrCallback>
}
 8003168:	e017      	b.n	800319a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800316a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fe10 	bl	8003d94 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800317c:	89ba      	ldrh	r2, [r7, #12]
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	4619      	mov	r1, r3
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff fe59 	bl	8002e3a <HAL_I2C_AddrCallback>
}
 8003188:	e007      	b.n	800319a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2208      	movs	r2, #8
 8003190:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	0b9b      	lsrs	r3, r3, #14
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	e00d      	b.n	80031f4 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	0bdb      	lsrs	r3, r3, #15
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d007      	beq.n	80031f4 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031f2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b29      	cmp	r3, #41	@ 0x29
 80031fe:	d112      	bne.n	8003226 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2228      	movs	r2, #40	@ 0x28
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2221      	movs	r2, #33	@ 0x21
 800320c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800320e:	2101      	movs	r1, #1
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fdbf 	bl	8003d94 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff fdf7 	bl	8002e12 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003224:	e017      	b.n	8003256 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003230:	d111      	bne.n	8003256 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2228      	movs	r2, #40	@ 0x28
 8003236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2222      	movs	r2, #34	@ 0x22
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003240:	2102      	movs	r1, #2
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fda6 	bl	8003d94 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff fde8 	bl	8002e26 <HAL_I2C_SlaveRxCpltCallback>
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003282:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2220      	movs	r2, #32
 800328a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800328c:	7afb      	ldrb	r3, [r7, #11]
 800328e:	2b21      	cmp	r3, #33	@ 0x21
 8003290:	d002      	beq.n	8003298 <I2C_ITSlaveCplt+0x38>
 8003292:	7afb      	ldrb	r3, [r7, #11]
 8003294:	2b29      	cmp	r3, #41	@ 0x29
 8003296:	d108      	bne.n	80032aa <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003298:	f248 0101 	movw	r1, #32769	@ 0x8001
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fd79 	bl	8003d94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2221      	movs	r2, #33	@ 0x21
 80032a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80032a8:	e019      	b.n	80032de <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032aa:	7afb      	ldrb	r3, [r7, #11]
 80032ac:	2b22      	cmp	r3, #34	@ 0x22
 80032ae:	d002      	beq.n	80032b6 <I2C_ITSlaveCplt+0x56>
 80032b0:	7afb      	ldrb	r3, [r7, #11]
 80032b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80032b4:	d108      	bne.n	80032c8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80032b6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fd6a 	bl	8003d94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2222      	movs	r2, #34	@ 0x22
 80032c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80032c6:	e00a      	b.n	80032de <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80032c8:	7afb      	ldrb	r3, [r7, #11]
 80032ca:	2b28      	cmp	r3, #40	@ 0x28
 80032cc:	d107      	bne.n	80032de <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80032ce:	f248 0103 	movw	r1, #32771	@ 0x8003
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fd5e 	bl	8003d94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032ec:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4b8c      	ldr	r3, [pc, #560]	@ (800352c <I2C_ITSlaveCplt+0x2cc>)
 80032fa:	400b      	ands	r3, r1
 80032fc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fa85 	bl	800380e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	0b9b      	lsrs	r3, r3, #14
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800331e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003324:	2b00      	cmp	r3, #0
 8003326:	d020      	beq.n	800336a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	b29a      	uxth	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003336:	e018      	b.n	800336a <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	0bdb      	lsrs	r3, r3, #15
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d012      	beq.n	800336a <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003352:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d006      	beq.n	800336a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	b29a      	uxth	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	089b      	lsrs	r3, r3, #2
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d020      	beq.n	80033b8 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f023 0304 	bic.w	r3, r3, #4
 800337c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00c      	beq.n	80033b8 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d005      	beq.n	80033ce <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c6:	f043 0204 	orr.w	r2, r3, #4
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d04a      	beq.n	8003470 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d044      	beq.n	8003470 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d128      	bne.n	8003442 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b28      	cmp	r3, #40	@ 0x28
 80033fa:	d108      	bne.n	800340e <I2C_ITSlaveCplt+0x1ae>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003402:	d104      	bne.n	800340e <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003404:	6979      	ldr	r1, [r7, #20]
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f894 	bl	8003534 <I2C_ITListenCplt>
 800340c:	e030      	b.n	8003470 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b29      	cmp	r3, #41	@ 0x29
 8003418:	d10e      	bne.n	8003438 <I2C_ITSlaveCplt+0x1d8>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003420:	d00a      	beq.n	8003438 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2210      	movs	r2, #16
 8003428:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f9ef 	bl	800380e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff feb6 	bl	80031a2 <I2C_ITSlaveSeqCplt>
 8003436:	e01b      	b.n	8003470 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2210      	movs	r2, #16
 800343e:	61da      	str	r2, [r3, #28]
 8003440:	e016      	b.n	8003470 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2210      	movs	r2, #16
 8003448:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344e:	f043 0204 	orr.w	r2, r3, #4
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <I2C_ITSlaveCplt+0x204>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003462:	d105      	bne.n	8003470 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f8b8 	bl	80035e0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003482:	2b00      	cmp	r3, #0
 8003484:	d010      	beq.n	80034a8 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348a:	4619      	mov	r1, r3
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f8a7 	bl	80035e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b28      	cmp	r3, #40	@ 0x28
 800349c:	d141      	bne.n	8003522 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800349e:	6979      	ldr	r1, [r7, #20]
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f847 	bl	8003534 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034a6:	e03c      	b.n	8003522 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034b0:	d014      	beq.n	80034dc <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff fe75 	bl	80031a2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003530 <I2C_ITSlaveCplt+0x2d0>)
 80034bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff fcbe 	bl	8002e56 <HAL_I2C_ListenCpltCallback>
}
 80034da:	e022      	b.n	8003522 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b22      	cmp	r3, #34	@ 0x22
 80034e6:	d10e      	bne.n	8003506 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff fc91 	bl	8002e26 <HAL_I2C_SlaveRxCpltCallback>
}
 8003504:	e00d      	b.n	8003522 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff fc78 	bl	8002e12 <HAL_I2C_SlaveTxCpltCallback>
}
 8003522:	bf00      	nop
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	fe00e800 	.word	0xfe00e800
 8003530:	ffff0000 	.word	0xffff0000

08003534 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a26      	ldr	r2, [pc, #152]	@ (80035dc <I2C_ITListenCplt+0xa8>)
 8003542:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	089b      	lsrs	r3, r3, #2
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d022      	beq.n	80035b2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003588:	2b00      	cmp	r3, #0
 800358a:	d012      	beq.n	80035b2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035aa:	f043 0204 	orr.w	r2, r3, #4
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035b2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fbec 	bl	8003d94 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2210      	movs	r2, #16
 80035c2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff fc42 	bl	8002e56 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	ffff0000 	.word	0xffff0000

080035e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035f0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a6d      	ldr	r2, [pc, #436]	@ (80037b4 <I2C_ITError+0x1d4>)
 80035fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003612:	7bfb      	ldrb	r3, [r7, #15]
 8003614:	2b28      	cmp	r3, #40	@ 0x28
 8003616:	d005      	beq.n	8003624 <I2C_ITError+0x44>
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	2b29      	cmp	r3, #41	@ 0x29
 800361c:	d002      	beq.n	8003624 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	2b2a      	cmp	r3, #42	@ 0x2a
 8003622:	d10b      	bne.n	800363c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003624:	2103      	movs	r1, #3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fbb4 	bl	8003d94 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2228      	movs	r2, #40	@ 0x28
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a60      	ldr	r2, [pc, #384]	@ (80037b8 <I2C_ITError+0x1d8>)
 8003638:	635a      	str	r2, [r3, #52]	@ 0x34
 800363a:	e030      	b.n	800369e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800363c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fba7 	bl	8003d94 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f8e1 	bl	800380e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b60      	cmp	r3, #96	@ 0x60
 8003656:	d01f      	beq.n	8003698 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b20      	cmp	r3, #32
 800366c:	d114      	bne.n	8003698 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b10      	cmp	r3, #16
 800367a:	d109      	bne.n	8003690 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2210      	movs	r2, #16
 8003682:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003688:	f043 0204 	orr.w	r2, r3, #4
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2220      	movs	r2, #32
 8003696:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d039      	beq.n	8003720 <I2C_ITError+0x140>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b11      	cmp	r3, #17
 80036b0:	d002      	beq.n	80036b8 <I2C_ITError+0xd8>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b21      	cmp	r3, #33	@ 0x21
 80036b6:	d133      	bne.n	8003720 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036c6:	d107      	bne.n	80036d8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fe fe89 	bl	80023f4 <HAL_DMA_GetState>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d017      	beq.n	8003718 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ec:	4a33      	ldr	r2, [pc, #204]	@ (80037bc <I2C_ITError+0x1dc>)
 80036ee:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fe fe38 	bl	8002372 <HAL_DMA_Abort_IT>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d04d      	beq.n	80037a4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003712:	4610      	mov	r0, r2
 8003714:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003716:	e045      	b.n	80037a4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f851 	bl	80037c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800371e:	e041      	b.n	80037a4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d039      	beq.n	800379c <I2C_ITError+0x1bc>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b12      	cmp	r3, #18
 800372c:	d002      	beq.n	8003734 <I2C_ITError+0x154>
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b22      	cmp	r3, #34	@ 0x22
 8003732:	d133      	bne.n	800379c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800373e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003742:	d107      	bne.n	8003754 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003752:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe fe4b 	bl	80023f4 <HAL_DMA_GetState>
 800375e:	4603      	mov	r3, r0
 8003760:	2b01      	cmp	r3, #1
 8003762:	d017      	beq.n	8003794 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003768:	4a14      	ldr	r2, [pc, #80]	@ (80037bc <I2C_ITError+0x1dc>)
 800376a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe fdfa 	bl	8002372 <HAL_DMA_Abort_IT>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d011      	beq.n	80037a8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800378e:	4610      	mov	r0, r2
 8003790:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003792:	e009      	b.n	80037a8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f813 	bl	80037c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800379a:	e005      	b.n	80037a8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f80f 	bl	80037c0 <I2C_TreatErrorCallback>
  }
}
 80037a2:	e002      	b.n	80037aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037a4:	bf00      	nop
 80037a6:	e000      	b.n	80037aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037a8:	bf00      	nop
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	ffff0000 	.word	0xffff0000
 80037b8:	08002e93 	.word	0x08002e93
 80037bc:	08003857 	.word	0x08003857

080037c0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b60      	cmp	r3, #96	@ 0x60
 80037d2:	d10e      	bne.n	80037f2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff fb47 	bl	8002e7e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037f0:	e009      	b.n	8003806 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff fb32 	bl	8002e6a <HAL_I2C_ErrorCallback>
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b02      	cmp	r3, #2
 8003822:	d103      	bne.n	800382c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2200      	movs	r2, #0
 800382a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b01      	cmp	r3, #1
 8003838:	d007      	beq.n	800384a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	619a      	str	r2, [r3, #24]
  }
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003862:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003870:	2200      	movs	r2, #0
 8003872:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003880:	2200      	movs	r2, #0
 8003882:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f7ff ff9b 	bl	80037c0 <I2C_TreatErrorCallback>
}
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	4613      	mov	r3, r2
 80038a0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038a2:	e03b      	b.n	800391c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	6839      	ldr	r1, [r7, #0]
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f961 	bl	8003b70 <I2C_IsErrorOccurred>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e041      	b.n	800393c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038be:	d02d      	beq.n	800391c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c0:	f7fe fbd8 	bl	8002074 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d302      	bcc.n	80038d6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d122      	bne.n	800391c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699a      	ldr	r2, [r3, #24]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4013      	ands	r3, r2
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	bf0c      	ite	eq
 80038e6:	2301      	moveq	r3, #1
 80038e8:	2300      	movne	r3, #0
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d113      	bne.n	800391c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f8:	f043 0220 	orr.w	r2, r3, #32
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e00f      	b.n	800393c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699a      	ldr	r2, [r3, #24]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4013      	ands	r3, r2
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	429a      	cmp	r2, r3
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	429a      	cmp	r2, r3
 8003938:	d0b4      	beq.n	80038a4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003950:	e033      	b.n	80039ba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f90a 	bl	8003b70 <I2C_IsErrorOccurred>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e031      	b.n	80039ca <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396c:	d025      	beq.n	80039ba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396e:	f7fe fb81 	bl	8002074 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	429a      	cmp	r2, r3
 800397c:	d302      	bcc.n	8003984 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d11a      	bne.n	80039ba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b02      	cmp	r3, #2
 8003990:	d013      	beq.n	80039ba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	f043 0220 	orr.w	r2, r3, #32
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e007      	b.n	80039ca <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d1c4      	bne.n	8003952 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039de:	e02f      	b.n	8003a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f8c3 	bl	8003b70 <I2C_IsErrorOccurred>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e02d      	b.n	8003a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f4:	f7fe fb3e 	bl	8002074 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d302      	bcc.n	8003a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d11a      	bne.n	8003a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	d013      	beq.n	8003a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1c:	f043 0220 	orr.w	r2, r3, #32
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e007      	b.n	8003a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d1c8      	bne.n	80039e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003a68:	e071      	b.n	8003b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f87e 	bl	8003b70 <I2C_IsErrorOccurred>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d13b      	bne.n	8003b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d138      	bne.n	8003b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d105      	bne.n	8003aac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b10      	cmp	r3, #16
 8003ab8:	d121      	bne.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2210      	movs	r2, #16
 8003ac0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2220      	movs	r2, #32
 8003ace:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4b24      	ldr	r3, [pc, #144]	@ (8003b6c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003adc:	400b      	ands	r3, r1
 8003ade:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	75fb      	strb	r3, [r7, #23]
 8003afc:	e002      	b.n	8003b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003b04:	f7fe fab6 	bl	8002074 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d302      	bcc.n	8003b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d119      	bne.n	8003b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003b1a:	7dfb      	ldrb	r3, [r7, #23]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d116      	bne.n	8003b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d00f      	beq.n	8003b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	f043 0220 	orr.w	r2, r3, #32
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d002      	beq.n	8003b62 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d083      	beq.n	8003a6a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	fe00e800 	.word	0xfe00e800

08003b70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	@ 0x28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d068      	beq.n	8003c6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ba4:	e049      	b.n	8003c3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d045      	beq.n	8003c3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bae:	f7fe fa61 	bl	8002074 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <I2C_IsErrorOccurred+0x54>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d13a      	bne.n	8003c3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bd6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003be2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003be6:	d121      	bne.n	8003c2c <I2C_IsErrorOccurred+0xbc>
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bee:	d01d      	beq.n	8003c2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003bf0:	7cfb      	ldrb	r3, [r7, #19]
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d01a      	beq.n	8003c2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c06:	f7fe fa35 	bl	8002074 <HAL_GetTick>
 8003c0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c0c:	e00e      	b.n	8003c2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c0e:	f7fe fa31 	bl	8002074 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b19      	cmp	r3, #25
 8003c1a:	d907      	bls.n	8003c2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	f043 0320 	orr.w	r3, r3, #32
 8003c22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003c2a:	e006      	b.n	8003c3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	d1e9      	bne.n	8003c0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b20      	cmp	r3, #32
 8003c46:	d003      	beq.n	8003c50 <I2C_IsErrorOccurred+0xe0>
 8003c48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0aa      	beq.n	8003ba6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d103      	bne.n	8003c60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	f043 0304 	orr.w	r3, r3, #4
 8003c66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00b      	beq.n	8003c98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00b      	beq.n	8003cba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	f043 0308 	orr.w	r3, r3, #8
 8003ca8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	f043 0302 	orr.w	r3, r3, #2
 8003cca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01c      	beq.n	8003d1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f7ff fd92 	bl	800380e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6859      	ldr	r1, [r3, #4]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8003d2c <I2C_IsErrorOccurred+0x1bc>)
 8003cf6:	400b      	ands	r3, r1
 8003cf8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	431a      	orrs	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3728      	adds	r7, #40	@ 0x28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	fe00e800 	.word	0xfe00e800

08003d30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	817b      	strh	r3, [r7, #10]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d42:	897b      	ldrh	r3, [r7, #10]
 8003d44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d48:	7a7b      	ldrb	r3, [r7, #9]
 8003d4a:	041b      	lsls	r3, r3, #16
 8003d4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	0d5b      	lsrs	r3, r3, #21
 8003d6a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003d6e:	4b08      	ldr	r3, [pc, #32]	@ (8003d90 <I2C_TransferConfig+0x60>)
 8003d70:	430b      	orrs	r3, r1
 8003d72:	43db      	mvns	r3, r3
 8003d74:	ea02 0103 	and.w	r1, r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d82:	bf00      	nop
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	03ff63ff 	.word	0x03ff63ff

08003d94 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003da4:	887b      	ldrh	r3, [r7, #2]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00f      	beq.n	8003dce <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003db4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003dc2:	2b28      	cmp	r3, #40	@ 0x28
 8003dc4:	d003      	beq.n	8003dce <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003dcc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003dce:	887b      	ldrh	r3, [r7, #2]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00f      	beq.n	8003df8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003dde:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003dec:	2b28      	cmp	r3, #40	@ 0x28
 8003dee:	d003      	beq.n	8003df8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003df6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003df8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	da03      	bge.n	8003e08 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003e06:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003e08:	887b      	ldrh	r3, [r7, #2]
 8003e0a:	2b10      	cmp	r3, #16
 8003e0c:	d103      	bne.n	8003e16 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003e14:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003e16:	887b      	ldrh	r3, [r7, #2]
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d103      	bne.n	8003e24 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f043 0320 	orr.w	r3, r3, #32
 8003e22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003e24:	887b      	ldrh	r3, [r7, #2]
 8003e26:	2b40      	cmp	r3, #64	@ 0x40
 8003e28:	d103      	bne.n	8003e32 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e30:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6819      	ldr	r1, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	43da      	mvns	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	400a      	ands	r2, r1
 8003e42:	601a      	str	r2, [r3, #0]
}
 8003e44:	bf00      	nop
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	d138      	bne.n	8003ed8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e032      	b.n	8003eda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2224      	movs	r2, #36	@ 0x24
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ea2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6819      	ldr	r1, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e000      	b.n	8003eda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ed8:	2302      	movs	r3, #2
  }
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d139      	bne.n	8003f70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e033      	b.n	8003f72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2224      	movs	r2, #36	@ 0x24
 8003f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e000      	b.n	8003f72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f70:	2302      	movs	r3, #2
  }
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f84:	4b04      	ldr	r3, [pc, #16]	@ (8003f98 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40007000 	.word	0x40007000

08003f9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003faa:	d130      	bne.n	800400e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fac:	4b23      	ldr	r3, [pc, #140]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fb8:	d038      	beq.n	800402c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fba:	4b20      	ldr	r3, [pc, #128]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fca:	4b1d      	ldr	r3, [pc, #116]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2232      	movs	r2, #50	@ 0x32
 8003fd0:	fb02 f303 	mul.w	r3, r2, r3
 8003fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8004044 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fda:	0c9b      	lsrs	r3, r3, #18
 8003fdc:	3301      	adds	r3, #1
 8003fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fe0:	e002      	b.n	8003fe8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fe8:	4b14      	ldr	r3, [pc, #80]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ff4:	d102      	bne.n	8003ffc <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f2      	bne.n	8003fe2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004008:	d110      	bne.n	800402c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e00f      	b.n	800402e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800400e:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800401a:	d007      	beq.n	800402c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800401c:	4b07      	ldr	r3, [pc, #28]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004024:	4a05      	ldr	r2, [pc, #20]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004026:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800402a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40007000 	.word	0x40007000
 8004040:	20000000 	.word	0x20000000
 8004044:	431bde83 	.word	0x431bde83

08004048 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e3ca      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800405a:	4b97      	ldr	r3, [pc, #604]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004064:	4b94      	ldr	r3, [pc, #592]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 80e4 	beq.w	8004244 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <HAL_RCC_OscConfig+0x4a>
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2b0c      	cmp	r3, #12
 8004086:	f040 808b 	bne.w	80041a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b01      	cmp	r3, #1
 800408e:	f040 8087 	bne.w	80041a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004092:	4b89      	ldr	r3, [pc, #548]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_RCC_OscConfig+0x62>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e3a2      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1a      	ldr	r2, [r3, #32]
 80040ae:	4b82      	ldr	r3, [pc, #520]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d004      	beq.n	80040c4 <HAL_RCC_OscConfig+0x7c>
 80040ba:	4b7f      	ldr	r3, [pc, #508]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040c2:	e005      	b.n	80040d0 <HAL_RCC_OscConfig+0x88>
 80040c4:	4b7c      	ldr	r3, [pc, #496]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 80040c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d223      	bcs.n	800411c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fd55 	bl	8004b88 <RCC_SetFlashLatencyFromMSIRange>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e383      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040e8:	4b73      	ldr	r3, [pc, #460]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a72      	ldr	r2, [pc, #456]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 80040ee:	f043 0308 	orr.w	r3, r3, #8
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	4b70      	ldr	r3, [pc, #448]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	496d      	ldr	r1, [pc, #436]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 8004102:	4313      	orrs	r3, r2
 8004104:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004106:	4b6c      	ldr	r3, [pc, #432]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	4968      	ldr	r1, [pc, #416]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 8004116:	4313      	orrs	r3, r2
 8004118:	604b      	str	r3, [r1, #4]
 800411a:	e025      	b.n	8004168 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800411c:	4b66      	ldr	r3, [pc, #408]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a65      	ldr	r2, [pc, #404]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 8004122:	f043 0308 	orr.w	r3, r3, #8
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	4b63      	ldr	r3, [pc, #396]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	4960      	ldr	r1, [pc, #384]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 8004136:	4313      	orrs	r3, r2
 8004138:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800413a:	4b5f      	ldr	r3, [pc, #380]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	495b      	ldr	r1, [pc, #364]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 800414a:	4313      	orrs	r3, r2
 800414c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fd15 	bl	8004b88 <RCC_SetFlashLatencyFromMSIRange>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e343      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004168:	f000 fc4a 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 800416c:	4602      	mov	r2, r0
 800416e:	4b52      	ldr	r3, [pc, #328]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	091b      	lsrs	r3, r3, #4
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	4950      	ldr	r1, [pc, #320]	@ (80042bc <HAL_RCC_OscConfig+0x274>)
 800417a:	5ccb      	ldrb	r3, [r1, r3]
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
 8004184:	4a4e      	ldr	r2, [pc, #312]	@ (80042c0 <HAL_RCC_OscConfig+0x278>)
 8004186:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004188:	4b4e      	ldr	r3, [pc, #312]	@ (80042c4 <HAL_RCC_OscConfig+0x27c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f7fd ff21 	bl	8001fd4 <HAL_InitTick>
 8004192:	4603      	mov	r3, r0
 8004194:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d052      	beq.n	8004242 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	e327      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d032      	beq.n	800420e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041a8:	4b43      	ldr	r3, [pc, #268]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a42      	ldr	r2, [pc, #264]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041b4:	f7fd ff5e 	bl	8002074 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041bc:	f7fd ff5a 	bl	8002074 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e310      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041ce:	4b3a      	ldr	r3, [pc, #232]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041da:	4b37      	ldr	r3, [pc, #220]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a36      	ldr	r2, [pc, #216]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 80041e0:	f043 0308 	orr.w	r3, r3, #8
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	4b34      	ldr	r3, [pc, #208]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	4931      	ldr	r1, [pc, #196]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041f8:	4b2f      	ldr	r3, [pc, #188]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	492c      	ldr	r1, [pc, #176]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 8004208:	4313      	orrs	r3, r2
 800420a:	604b      	str	r3, [r1, #4]
 800420c:	e01a      	b.n	8004244 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800420e:	4b2a      	ldr	r3, [pc, #168]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a29      	ldr	r2, [pc, #164]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800421a:	f7fd ff2b 	bl	8002074 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004222:	f7fd ff27 	bl	8002074 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e2dd      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004234:	4b20      	ldr	r3, [pc, #128]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1f0      	bne.n	8004222 <HAL_RCC_OscConfig+0x1da>
 8004240:	e000      	b.n	8004244 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004242:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d074      	beq.n	800433a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2b08      	cmp	r3, #8
 8004254:	d005      	beq.n	8004262 <HAL_RCC_OscConfig+0x21a>
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b0c      	cmp	r3, #12
 800425a:	d10e      	bne.n	800427a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	2b03      	cmp	r3, #3
 8004260:	d10b      	bne.n	800427a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004262:	4b15      	ldr	r3, [pc, #84]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d064      	beq.n	8004338 <HAL_RCC_OscConfig+0x2f0>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d160      	bne.n	8004338 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e2ba      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004282:	d106      	bne.n	8004292 <HAL_RCC_OscConfig+0x24a>
 8004284:	4b0c      	ldr	r3, [pc, #48]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a0b      	ldr	r2, [pc, #44]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 800428a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	e026      	b.n	80042e0 <HAL_RCC_OscConfig+0x298>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800429a:	d115      	bne.n	80042c8 <HAL_RCC_OscConfig+0x280>
 800429c:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a05      	ldr	r2, [pc, #20]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 80042a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	4b03      	ldr	r3, [pc, #12]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a02      	ldr	r2, [pc, #8]	@ (80042b8 <HAL_RCC_OscConfig+0x270>)
 80042ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	e014      	b.n	80042e0 <HAL_RCC_OscConfig+0x298>
 80042b6:	bf00      	nop
 80042b8:	40021000 	.word	0x40021000
 80042bc:	080085b4 	.word	0x080085b4
 80042c0:	20000000 	.word	0x20000000
 80042c4:	20000004 	.word	0x20000004
 80042c8:	4ba0      	ldr	r3, [pc, #640]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a9f      	ldr	r2, [pc, #636]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 80042ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	4b9d      	ldr	r3, [pc, #628]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a9c      	ldr	r2, [pc, #624]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 80042da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d013      	beq.n	8004310 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e8:	f7fd fec4 	bl	8002074 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fd fec0 	bl	8002074 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	@ 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e276      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004302:	4b92      	ldr	r3, [pc, #584]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x2a8>
 800430e:	e014      	b.n	800433a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fd feb0 	bl	8002074 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004318:	f7fd feac 	bl	8002074 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b64      	cmp	r3, #100	@ 0x64
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e262      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800432a:	4b88      	ldr	r3, [pc, #544]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x2d0>
 8004336:	e000      	b.n	800433a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d060      	beq.n	8004408 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	2b04      	cmp	r3, #4
 800434a:	d005      	beq.n	8004358 <HAL_RCC_OscConfig+0x310>
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2b0c      	cmp	r3, #12
 8004350:	d119      	bne.n	8004386 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b02      	cmp	r3, #2
 8004356:	d116      	bne.n	8004386 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004358:	4b7c      	ldr	r3, [pc, #496]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_RCC_OscConfig+0x328>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e23f      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004370:	4b76      	ldr	r3, [pc, #472]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	061b      	lsls	r3, r3, #24
 800437e:	4973      	ldr	r1, [pc, #460]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 8004380:	4313      	orrs	r3, r2
 8004382:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004384:	e040      	b.n	8004408 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d023      	beq.n	80043d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800438e:	4b6f      	ldr	r3, [pc, #444]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a6e      	ldr	r2, [pc, #440]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 8004394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439a:	f7fd fe6b 	bl	8002074 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a2:	f7fd fe67 	bl	8002074 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e21d      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043b4:	4b65      	ldr	r3, [pc, #404]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c0:	4b62      	ldr	r3, [pc, #392]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	061b      	lsls	r3, r3, #24
 80043ce:	495f      	ldr	r1, [pc, #380]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	604b      	str	r3, [r1, #4]
 80043d4:	e018      	b.n	8004408 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043d6:	4b5d      	ldr	r3, [pc, #372]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a5c      	ldr	r2, [pc, #368]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 80043dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e2:	f7fd fe47 	bl	8002074 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ea:	f7fd fe43 	bl	8002074 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e1f9      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043fc:	4b53      	ldr	r3, [pc, #332]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1f0      	bne.n	80043ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b00      	cmp	r3, #0
 8004412:	d03c      	beq.n	800448e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01c      	beq.n	8004456 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800441c:	4b4b      	ldr	r3, [pc, #300]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 800441e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004422:	4a4a      	ldr	r2, [pc, #296]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442c:	f7fd fe22 	bl	8002074 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004434:	f7fd fe1e 	bl	8002074 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e1d4      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004446:	4b41      	ldr	r3, [pc, #260]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 8004448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0ef      	beq.n	8004434 <HAL_RCC_OscConfig+0x3ec>
 8004454:	e01b      	b.n	800448e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004456:	4b3d      	ldr	r3, [pc, #244]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 8004458:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800445c:	4a3b      	ldr	r2, [pc, #236]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 800445e:	f023 0301 	bic.w	r3, r3, #1
 8004462:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004466:	f7fd fe05 	bl	8002074 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446e:	f7fd fe01 	bl	8002074 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e1b7      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004480:	4b32      	ldr	r3, [pc, #200]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 8004482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1ef      	bne.n	800446e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 80a6 	beq.w	80045e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800449c:	2300      	movs	r3, #0
 800449e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044a0:	4b2a      	ldr	r3, [pc, #168]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 80044a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10d      	bne.n	80044c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ac:	4b27      	ldr	r3, [pc, #156]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 80044ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b0:	4a26      	ldr	r2, [pc, #152]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 80044b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80044b8:	4b24      	ldr	r3, [pc, #144]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 80044ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c4:	2301      	movs	r3, #1
 80044c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c8:	4b21      	ldr	r3, [pc, #132]	@ (8004550 <HAL_RCC_OscConfig+0x508>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d118      	bne.n	8004506 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004550 <HAL_RCC_OscConfig+0x508>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004550 <HAL_RCC_OscConfig+0x508>)
 80044da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e0:	f7fd fdc8 	bl	8002074 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e8:	f7fd fdc4 	bl	8002074 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e17a      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044fa:	4b15      	ldr	r3, [pc, #84]	@ (8004550 <HAL_RCC_OscConfig+0x508>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f0      	beq.n	80044e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d108      	bne.n	8004520 <HAL_RCC_OscConfig+0x4d8>
 800450e:	4b0f      	ldr	r3, [pc, #60]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004514:	4a0d      	ldr	r2, [pc, #52]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800451e:	e029      	b.n	8004574 <HAL_RCC_OscConfig+0x52c>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b05      	cmp	r3, #5
 8004526:	d115      	bne.n	8004554 <HAL_RCC_OscConfig+0x50c>
 8004528:	4b08      	ldr	r3, [pc, #32]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452e:	4a07      	ldr	r2, [pc, #28]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 8004530:	f043 0304 	orr.w	r3, r3, #4
 8004534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004538:	4b04      	ldr	r3, [pc, #16]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453e:	4a03      	ldr	r2, [pc, #12]	@ (800454c <HAL_RCC_OscConfig+0x504>)
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004548:	e014      	b.n	8004574 <HAL_RCC_OscConfig+0x52c>
 800454a:	bf00      	nop
 800454c:	40021000 	.word	0x40021000
 8004550:	40007000 	.word	0x40007000
 8004554:	4b9c      	ldr	r3, [pc, #624]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455a:	4a9b      	ldr	r2, [pc, #620]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 800455c:	f023 0301 	bic.w	r3, r3, #1
 8004560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004564:	4b98      	ldr	r3, [pc, #608]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456a:	4a97      	ldr	r2, [pc, #604]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 800456c:	f023 0304 	bic.w	r3, r3, #4
 8004570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d016      	beq.n	80045aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7fd fd7a 	bl	8002074 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004582:	e00a      	b.n	800459a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004584:	f7fd fd76 	bl	8002074 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004592:	4293      	cmp	r3, r2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e12a      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800459a:	4b8b      	ldr	r3, [pc, #556]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0ed      	beq.n	8004584 <HAL_RCC_OscConfig+0x53c>
 80045a8:	e015      	b.n	80045d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045aa:	f7fd fd63 	bl	8002074 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045b0:	e00a      	b.n	80045c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b2:	f7fd fd5f 	bl	8002074 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e113      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045c8:	4b7f      	ldr	r3, [pc, #508]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1ed      	bne.n	80045b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045d6:	7ffb      	ldrb	r3, [r7, #31]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d105      	bne.n	80045e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045dc:	4b7a      	ldr	r3, [pc, #488]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 80045de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e0:	4a79      	ldr	r2, [pc, #484]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 80045e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80fe 	beq.w	80047ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	f040 80d0 	bne.w	800479c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80045fc:	4b72      	ldr	r3, [pc, #456]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 0203 	and.w	r2, r3, #3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460c:	429a      	cmp	r2, r3
 800460e:	d130      	bne.n	8004672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461a:	3b01      	subs	r3, #1
 800461c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800461e:	429a      	cmp	r2, r3
 8004620:	d127      	bne.n	8004672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d11f      	bne.n	8004672 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800463c:	2a07      	cmp	r2, #7
 800463e:	bf14      	ite	ne
 8004640:	2201      	movne	r2, #1
 8004642:	2200      	moveq	r2, #0
 8004644:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004646:	4293      	cmp	r3, r2
 8004648:	d113      	bne.n	8004672 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004654:	085b      	lsrs	r3, r3, #1
 8004656:	3b01      	subs	r3, #1
 8004658:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d109      	bne.n	8004672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	3b01      	subs	r3, #1
 800466c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d06e      	beq.n	8004750 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	2b0c      	cmp	r3, #12
 8004676:	d069      	beq.n	800474c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004678:	4b53      	ldr	r3, [pc, #332]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d105      	bne.n	8004690 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004684:	4b50      	ldr	r3, [pc, #320]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0ad      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004694:	4b4c      	ldr	r3, [pc, #304]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a4b      	ldr	r2, [pc, #300]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 800469a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800469e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046a0:	f7fd fce8 	bl	8002074 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a8:	f7fd fce4 	bl	8002074 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e09a      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ba:	4b43      	ldr	r3, [pc, #268]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046c6:	4b40      	ldr	r3, [pc, #256]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	4b40      	ldr	r3, [pc, #256]	@ (80047cc <HAL_RCC_OscConfig+0x784>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80046d6:	3a01      	subs	r2, #1
 80046d8:	0112      	lsls	r2, r2, #4
 80046da:	4311      	orrs	r1, r2
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046e0:	0212      	lsls	r2, r2, #8
 80046e2:	4311      	orrs	r1, r2
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80046e8:	0852      	lsrs	r2, r2, #1
 80046ea:	3a01      	subs	r2, #1
 80046ec:	0552      	lsls	r2, r2, #21
 80046ee:	4311      	orrs	r1, r2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80046f4:	0852      	lsrs	r2, r2, #1
 80046f6:	3a01      	subs	r2, #1
 80046f8:	0652      	lsls	r2, r2, #25
 80046fa:	4311      	orrs	r1, r2
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004700:	0912      	lsrs	r2, r2, #4
 8004702:	0452      	lsls	r2, r2, #17
 8004704:	430a      	orrs	r2, r1
 8004706:	4930      	ldr	r1, [pc, #192]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 8004708:	4313      	orrs	r3, r2
 800470a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800470c:	4b2e      	ldr	r3, [pc, #184]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a2d      	ldr	r2, [pc, #180]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 8004712:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004716:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004718:	4b2b      	ldr	r3, [pc, #172]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4a2a      	ldr	r2, [pc, #168]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 800471e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004722:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004724:	f7fd fca6 	bl	8002074 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472c:	f7fd fca2 	bl	8002074 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e058      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800473e:	4b22      	ldr	r3, [pc, #136]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800474a:	e050      	b.n	80047ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e04f      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004750:	4b1d      	ldr	r3, [pc, #116]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d148      	bne.n	80047ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800475c:	4b1a      	ldr	r3, [pc, #104]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a19      	ldr	r2, [pc, #100]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 8004762:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004766:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004768:	4b17      	ldr	r3, [pc, #92]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	4a16      	ldr	r2, [pc, #88]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 800476e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004772:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004774:	f7fd fc7e 	bl	8002074 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477c:	f7fd fc7a 	bl	8002074 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e030      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800478e:	4b0e      	ldr	r3, [pc, #56]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0f0      	beq.n	800477c <HAL_RCC_OscConfig+0x734>
 800479a:	e028      	b.n	80047ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	2b0c      	cmp	r3, #12
 80047a0:	d023      	beq.n	80047ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a2:	4b09      	ldr	r3, [pc, #36]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a08      	ldr	r2, [pc, #32]	@ (80047c8 <HAL_RCC_OscConfig+0x780>)
 80047a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ae:	f7fd fc61 	bl	8002074 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b4:	e00c      	b.n	80047d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b6:	f7fd fc5d 	bl	8002074 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d905      	bls.n	80047d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e013      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
 80047c8:	40021000 	.word	0x40021000
 80047cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d0:	4b09      	ldr	r3, [pc, #36]	@ (80047f8 <HAL_RCC_OscConfig+0x7b0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1ec      	bne.n	80047b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80047dc:	4b06      	ldr	r3, [pc, #24]	@ (80047f8 <HAL_RCC_OscConfig+0x7b0>)
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	4905      	ldr	r1, [pc, #20]	@ (80047f8 <HAL_RCC_OscConfig+0x7b0>)
 80047e2:	4b06      	ldr	r3, [pc, #24]	@ (80047fc <HAL_RCC_OscConfig+0x7b4>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	60cb      	str	r3, [r1, #12]
 80047e8:	e001      	b.n	80047ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3720      	adds	r7, #32
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40021000 	.word	0x40021000
 80047fc:	feeefffc 	.word	0xfeeefffc

08004800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0e7      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004814:	4b75      	ldr	r3, [pc, #468]	@ (80049ec <HAL_RCC_ClockConfig+0x1ec>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d910      	bls.n	8004844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004822:	4b72      	ldr	r3, [pc, #456]	@ (80049ec <HAL_RCC_ClockConfig+0x1ec>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 0207 	bic.w	r2, r3, #7
 800482a:	4970      	ldr	r1, [pc, #448]	@ (80049ec <HAL_RCC_ClockConfig+0x1ec>)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	4313      	orrs	r3, r2
 8004830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004832:	4b6e      	ldr	r3, [pc, #440]	@ (80049ec <HAL_RCC_ClockConfig+0x1ec>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0cf      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d010      	beq.n	8004872 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	4b66      	ldr	r3, [pc, #408]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800485c:	429a      	cmp	r2, r3
 800485e:	d908      	bls.n	8004872 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004860:	4b63      	ldr	r3, [pc, #396]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	4960      	ldr	r1, [pc, #384]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d04c      	beq.n	8004918 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b03      	cmp	r3, #3
 8004884:	d107      	bne.n	8004896 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004886:	4b5a      	ldr	r3, [pc, #360]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d121      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e0a6      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d107      	bne.n	80048ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800489e:	4b54      	ldr	r3, [pc, #336]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d115      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e09a      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d107      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048b6:	4b4e      	ldr	r3, [pc, #312]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e08e      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048c6:	4b4a      	ldr	r3, [pc, #296]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e086      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048d6:	4b46      	ldr	r3, [pc, #280]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f023 0203 	bic.w	r2, r3, #3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4943      	ldr	r1, [pc, #268]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e8:	f7fd fbc4 	bl	8002074 <HAL_GetTick>
 80048ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ee:	e00a      	b.n	8004906 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f0:	f7fd fbc0 	bl	8002074 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048fe:	4293      	cmp	r3, r2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e06e      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004906:	4b3a      	ldr	r3, [pc, #232]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 020c 	and.w	r2, r3, #12
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	429a      	cmp	r2, r3
 8004916:	d1eb      	bne.n	80048f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d010      	beq.n	8004946 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	4b31      	ldr	r3, [pc, #196]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004930:	429a      	cmp	r2, r3
 8004932:	d208      	bcs.n	8004946 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004934:	4b2e      	ldr	r3, [pc, #184]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	492b      	ldr	r1, [pc, #172]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004946:	4b29      	ldr	r3, [pc, #164]	@ (80049ec <HAL_RCC_ClockConfig+0x1ec>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d210      	bcs.n	8004976 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004954:	4b25      	ldr	r3, [pc, #148]	@ (80049ec <HAL_RCC_ClockConfig+0x1ec>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f023 0207 	bic.w	r2, r3, #7
 800495c:	4923      	ldr	r1, [pc, #140]	@ (80049ec <HAL_RCC_ClockConfig+0x1ec>)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	4313      	orrs	r3, r2
 8004962:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004964:	4b21      	ldr	r3, [pc, #132]	@ (80049ec <HAL_RCC_ClockConfig+0x1ec>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d001      	beq.n	8004976 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e036      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b00      	cmp	r3, #0
 8004980:	d008      	beq.n	8004994 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004982:	4b1b      	ldr	r3, [pc, #108]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	4918      	ldr	r1, [pc, #96]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004990:	4313      	orrs	r3, r2
 8004992:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b00      	cmp	r3, #0
 800499e:	d009      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049a0:	4b13      	ldr	r3, [pc, #76]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	4910      	ldr	r1, [pc, #64]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049b4:	f000 f824 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 80049b8:	4602      	mov	r2, r0
 80049ba:	4b0d      	ldr	r3, [pc, #52]	@ (80049f0 <HAL_RCC_ClockConfig+0x1f0>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	091b      	lsrs	r3, r3, #4
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	490b      	ldr	r1, [pc, #44]	@ (80049f4 <HAL_RCC_ClockConfig+0x1f4>)
 80049c6:	5ccb      	ldrb	r3, [r1, r3]
 80049c8:	f003 031f 	and.w	r3, r3, #31
 80049cc:	fa22 f303 	lsr.w	r3, r2, r3
 80049d0:	4a09      	ldr	r2, [pc, #36]	@ (80049f8 <HAL_RCC_ClockConfig+0x1f8>)
 80049d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049d4:	4b09      	ldr	r3, [pc, #36]	@ (80049fc <HAL_RCC_ClockConfig+0x1fc>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fd fafb 	bl	8001fd4 <HAL_InitTick>
 80049de:	4603      	mov	r3, r0
 80049e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80049e2:	7afb      	ldrb	r3, [r7, #11]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40022000 	.word	0x40022000
 80049f0:	40021000 	.word	0x40021000
 80049f4:	080085b4 	.word	0x080085b4
 80049f8:	20000000 	.word	0x20000000
 80049fc:	20000004 	.word	0x20000004

08004a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b089      	sub	sp, #36	@ 0x24
 8004a04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a18:	4b3b      	ldr	r3, [pc, #236]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0x34>
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	2b0c      	cmp	r3, #12
 8004a2c:	d121      	bne.n	8004a72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d11e      	bne.n	8004a72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a34:	4b34      	ldr	r3, [pc, #208]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d107      	bne.n	8004a50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a40:	4b31      	ldr	r3, [pc, #196]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a46:	0a1b      	lsrs	r3, r3, #8
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	61fb      	str	r3, [r7, #28]
 8004a4e:	e005      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a50:	4b2d      	ldr	r3, [pc, #180]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a5c:	4a2b      	ldr	r2, [pc, #172]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10d      	bne.n	8004a88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a70:	e00a      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d102      	bne.n	8004a7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a78:	4b25      	ldr	r3, [pc, #148]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a7a:	61bb      	str	r3, [r7, #24]
 8004a7c:	e004      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a84:	4b23      	ldr	r3, [pc, #140]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b0c      	cmp	r3, #12
 8004a8c:	d134      	bne.n	8004af8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d003      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0xac>
 8004aa4:	e005      	b.n	8004ab2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8004aa8:	617b      	str	r3, [r7, #20]
      break;
 8004aaa:	e005      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004aac:	4b19      	ldr	r3, [pc, #100]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8004aae:	617b      	str	r3, [r7, #20]
      break;
 8004ab0:	e002      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	617b      	str	r3, [r7, #20]
      break;
 8004ab6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ab8:	4b13      	ldr	r3, [pc, #76]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	091b      	lsrs	r3, r3, #4
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ac6:	4b10      	ldr	r3, [pc, #64]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	0a1b      	lsrs	r3, r3, #8
 8004acc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	fb03 f202 	mul.w	r2, r3, r2
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004adc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ade:	4b0a      	ldr	r3, [pc, #40]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	0e5b      	lsrs	r3, r3, #25
 8004ae4:	f003 0303 	and.w	r3, r3, #3
 8004ae8:	3301      	adds	r3, #1
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004af8:	69bb      	ldr	r3, [r7, #24]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3724      	adds	r7, #36	@ 0x24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	080085cc 	.word	0x080085cc
 8004b10:	00f42400 	.word	0x00f42400
 8004b14:	007a1200 	.word	0x007a1200

08004b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b1c:	4b03      	ldr	r3, [pc, #12]	@ (8004b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20000000 	.word	0x20000000

08004b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b34:	f7ff fff0 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b06      	ldr	r3, [pc, #24]	@ (8004b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	0a1b      	lsrs	r3, r3, #8
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	4904      	ldr	r1, [pc, #16]	@ (8004b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b46:	5ccb      	ldrb	r3, [r1, r3]
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40021000 	.word	0x40021000
 8004b58:	080085c4 	.word	0x080085c4

08004b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b60:	f7ff ffda 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0adb      	lsrs	r3, r3, #11
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4904      	ldr	r1, [pc, #16]	@ (8004b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40021000 	.word	0x40021000
 8004b84:	080085c4 	.word	0x080085c4

08004b88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b90:	2300      	movs	r3, #0
 8004b92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b94:	4b2a      	ldr	r3, [pc, #168]	@ (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ba0:	f7ff f9ee 	bl	8003f80 <HAL_PWREx_GetVoltageRange>
 8004ba4:	6178      	str	r0, [r7, #20]
 8004ba6:	e014      	b.n	8004bd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ba8:	4b25      	ldr	r3, [pc, #148]	@ (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bac:	4a24      	ldr	r2, [pc, #144]	@ (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bb4:	4b22      	ldr	r3, [pc, #136]	@ (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bc0:	f7ff f9de 	bl	8003f80 <HAL_PWREx_GetVoltageRange>
 8004bc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bca:	4a1d      	ldr	r2, [pc, #116]	@ (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bd0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bd8:	d10b      	bne.n	8004bf2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b80      	cmp	r3, #128	@ 0x80
 8004bde:	d919      	bls.n	8004c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2ba0      	cmp	r3, #160	@ 0xa0
 8004be4:	d902      	bls.n	8004bec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004be6:	2302      	movs	r3, #2
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	e013      	b.n	8004c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bec:	2301      	movs	r3, #1
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	e010      	b.n	8004c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b80      	cmp	r3, #128	@ 0x80
 8004bf6:	d902      	bls.n	8004bfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	e00a      	b.n	8004c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b80      	cmp	r3, #128	@ 0x80
 8004c02:	d102      	bne.n	8004c0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c04:	2302      	movs	r3, #2
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	e004      	b.n	8004c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b70      	cmp	r3, #112	@ 0x70
 8004c0e:	d101      	bne.n	8004c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c10:	2301      	movs	r3, #1
 8004c12:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c14:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f023 0207 	bic.w	r2, r3, #7
 8004c1c:	4909      	ldr	r1, [pc, #36]	@ (8004c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c24:	4b07      	ldr	r3, [pc, #28]	@ (8004c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d001      	beq.n	8004c36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40021000 	.word	0x40021000
 8004c44:	40022000 	.word	0x40022000

08004c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c50:	2300      	movs	r3, #0
 8004c52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c54:	2300      	movs	r3, #0
 8004c56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d041      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c6c:	d02a      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c6e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c72:	d824      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c78:	d008      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c7e:	d81e      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c88:	d010      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c8a:	e018      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c8c:	4b86      	ldr	r3, [pc, #536]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4a85      	ldr	r2, [pc, #532]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c98:	e015      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fabb 	bl	800521c <RCCEx_PLLSAI1_Config>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004caa:	e00c      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3320      	adds	r3, #32
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fba6 	bl	8005404 <RCCEx_PLLSAI2_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cbc:	e003      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	74fb      	strb	r3, [r7, #19]
      break;
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cc6:	7cfb      	ldrb	r3, [r7, #19]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10b      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ccc:	4b76      	ldr	r3, [pc, #472]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cda:	4973      	ldr	r1, [pc, #460]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004ce2:	e001      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce4:	7cfb      	ldrb	r3, [r7, #19]
 8004ce6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d041      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cf8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004cfc:	d02a      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004cfe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d02:	d824      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d08:	d008      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d0e:	d81e      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d18:	d010      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d1a:	e018      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d1c:	4b62      	ldr	r3, [pc, #392]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	4a61      	ldr	r2, [pc, #388]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d28:	e015      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fa73 	bl	800521c <RCCEx_PLLSAI1_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d3a:	e00c      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3320      	adds	r3, #32
 8004d40:	2100      	movs	r1, #0
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fb5e 	bl	8005404 <RCCEx_PLLSAI2_Config>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d4c:	e003      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	74fb      	strb	r3, [r7, #19]
      break;
 8004d52:	e000      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d56:	7cfb      	ldrb	r3, [r7, #19]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10b      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d5c:	4b52      	ldr	r3, [pc, #328]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d62:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d6a:	494f      	ldr	r1, [pc, #316]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d72:	e001      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d74:	7cfb      	ldrb	r3, [r7, #19]
 8004d76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80a0 	beq.w	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d86:	2300      	movs	r3, #0
 8004d88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d8a:	4b47      	ldr	r3, [pc, #284]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00d      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da0:	4b41      	ldr	r3, [pc, #260]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da4:	4a40      	ldr	r2, [pc, #256]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004daa:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dac:	4b3e      	ldr	r3, [pc, #248]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004db8:	2301      	movs	r3, #1
 8004dba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a3a      	ldr	r2, [pc, #232]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dc8:	f7fd f954 	bl	8002074 <HAL_GetTick>
 8004dcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dce:	e009      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd0:	f7fd f950 	bl	8002074 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d902      	bls.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	74fb      	strb	r3, [r7, #19]
        break;
 8004de2:	e005      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004de4:	4b31      	ldr	r3, [pc, #196]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0ef      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004df0:	7cfb      	ldrb	r3, [r7, #19]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d15c      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004df6:	4b2c      	ldr	r3, [pc, #176]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01f      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d019      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e14:	4b24      	ldr	r3, [pc, #144]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e20:	4b21      	ldr	r3, [pc, #132]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e26:	4a20      	ldr	r2, [pc, #128]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e36:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e40:	4a19      	ldr	r2, [pc, #100]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d016      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e52:	f7fd f90f 	bl	8002074 <HAL_GetTick>
 8004e56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e58:	e00b      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5a:	f7fd f90b 	bl	8002074 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d902      	bls.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	74fb      	strb	r3, [r7, #19]
            break;
 8004e70:	e006      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0ec      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004e80:	7cfb      	ldrb	r3, [r7, #19]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10c      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e86:	4b08      	ldr	r3, [pc, #32]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e96:	4904      	ldr	r1, [pc, #16]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e9e:	e009      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ea0:	7cfb      	ldrb	r3, [r7, #19]
 8004ea2:	74bb      	strb	r3, [r7, #18]
 8004ea4:	e006      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004ea6:	bf00      	nop
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb0:	7cfb      	ldrb	r3, [r7, #19]
 8004eb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004eb4:	7c7b      	ldrb	r3, [r7, #17]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d105      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eba:	4b9e      	ldr	r3, [pc, #632]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ebe:	4a9d      	ldr	r2, [pc, #628]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ec4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ed2:	4b98      	ldr	r3, [pc, #608]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed8:	f023 0203 	bic.w	r2, r3, #3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee0:	4994      	ldr	r1, [pc, #592]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ef4:	4b8f      	ldr	r3, [pc, #572]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004efa:	f023 020c 	bic.w	r2, r3, #12
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f02:	498c      	ldr	r1, [pc, #560]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f16:	4b87      	ldr	r3, [pc, #540]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f24:	4983      	ldr	r1, [pc, #524]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f38:	4b7e      	ldr	r3, [pc, #504]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f46:	497b      	ldr	r1, [pc, #492]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f5a:	4b76      	ldr	r3, [pc, #472]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f68:	4972      	ldr	r1, [pc, #456]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0320 	and.w	r3, r3, #32
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f7c:	4b6d      	ldr	r3, [pc, #436]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f8a:	496a      	ldr	r1, [pc, #424]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f9e:	4b65      	ldr	r3, [pc, #404]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fac:	4961      	ldr	r1, [pc, #388]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fc0:	4b5c      	ldr	r3, [pc, #368]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fce:	4959      	ldr	r1, [pc, #356]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fe2:	4b54      	ldr	r3, [pc, #336]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ff0:	4950      	ldr	r1, [pc, #320]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005004:	4b4b      	ldr	r3, [pc, #300]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005012:	4948      	ldr	r1, [pc, #288]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005026:	4b43      	ldr	r3, [pc, #268]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005034:	493f      	ldr	r1, [pc, #252]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d028      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005048:	4b3a      	ldr	r3, [pc, #232]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005056:	4937      	ldr	r1, [pc, #220]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005062:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005066:	d106      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005068:	4b32      	ldr	r3, [pc, #200]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	4a31      	ldr	r2, [pc, #196]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005072:	60d3      	str	r3, [r2, #12]
 8005074:	e011      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800507a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800507e:	d10c      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3304      	adds	r3, #4
 8005084:	2101      	movs	r1, #1
 8005086:	4618      	mov	r0, r3
 8005088:	f000 f8c8 	bl	800521c <RCCEx_PLLSAI1_Config>
 800508c:	4603      	mov	r3, r0
 800508e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005090:	7cfb      	ldrb	r3, [r7, #19]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005096:	7cfb      	ldrb	r3, [r7, #19]
 8005098:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d028      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050a6:	4b23      	ldr	r3, [pc, #140]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b4:	491f      	ldr	r1, [pc, #124]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050c4:	d106      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050d0:	60d3      	str	r3, [r2, #12]
 80050d2:	e011      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050dc:	d10c      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3304      	adds	r3, #4
 80050e2:	2101      	movs	r1, #1
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f899 	bl	800521c <RCCEx_PLLSAI1_Config>
 80050ea:	4603      	mov	r3, r0
 80050ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050ee:	7cfb      	ldrb	r3, [r7, #19]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80050f4:	7cfb      	ldrb	r3, [r7, #19]
 80050f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d02b      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005104:	4b0b      	ldr	r3, [pc, #44]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005112:	4908      	ldr	r1, [pc, #32]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800511e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005122:	d109      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005124:	4b03      	ldr	r3, [pc, #12]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	4a02      	ldr	r2, [pc, #8]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800512e:	60d3      	str	r3, [r2, #12]
 8005130:	e014      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005132:	bf00      	nop
 8005134:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800513c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005140:	d10c      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3304      	adds	r3, #4
 8005146:	2101      	movs	r1, #1
 8005148:	4618      	mov	r0, r3
 800514a:	f000 f867 	bl	800521c <RCCEx_PLLSAI1_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005152:	7cfb      	ldrb	r3, [r7, #19]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d02f      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005168:	4b2b      	ldr	r3, [pc, #172]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005176:	4928      	ldr	r1, [pc, #160]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005182:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005186:	d10d      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3304      	adds	r3, #4
 800518c:	2102      	movs	r1, #2
 800518e:	4618      	mov	r0, r3
 8005190:	f000 f844 	bl	800521c <RCCEx_PLLSAI1_Config>
 8005194:	4603      	mov	r3, r0
 8005196:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005198:	7cfb      	ldrb	r3, [r7, #19]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d014      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800519e:	7cfb      	ldrb	r3, [r7, #19]
 80051a0:	74bb      	strb	r3, [r7, #18]
 80051a2:	e011      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051ac:	d10c      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3320      	adds	r3, #32
 80051b2:	2102      	movs	r1, #2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 f925 	bl	8005404 <RCCEx_PLLSAI2_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051be:	7cfb      	ldrb	r3, [r7, #19]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051d4:	4b10      	ldr	r3, [pc, #64]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051da:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051e2:	490d      	ldr	r1, [pc, #52]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00b      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051f6:	4b08      	ldr	r3, [pc, #32]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005206:	4904      	ldr	r1, [pc, #16]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800520e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40021000 	.word	0x40021000

0800521c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800522a:	4b75      	ldr	r3, [pc, #468]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d018      	beq.n	8005268 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005236:	4b72      	ldr	r3, [pc, #456]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f003 0203 	and.w	r2, r3, #3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d10d      	bne.n	8005262 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
       ||
 800524a:	2b00      	cmp	r3, #0
 800524c:	d009      	beq.n	8005262 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800524e:	4b6c      	ldr	r3, [pc, #432]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
       ||
 800525e:	429a      	cmp	r2, r3
 8005260:	d047      	beq.n	80052f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
 8005266:	e044      	b.n	80052f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b03      	cmp	r3, #3
 800526e:	d018      	beq.n	80052a2 <RCCEx_PLLSAI1_Config+0x86>
 8005270:	2b03      	cmp	r3, #3
 8005272:	d825      	bhi.n	80052c0 <RCCEx_PLLSAI1_Config+0xa4>
 8005274:	2b01      	cmp	r3, #1
 8005276:	d002      	beq.n	800527e <RCCEx_PLLSAI1_Config+0x62>
 8005278:	2b02      	cmp	r3, #2
 800527a:	d009      	beq.n	8005290 <RCCEx_PLLSAI1_Config+0x74>
 800527c:	e020      	b.n	80052c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800527e:	4b60      	ldr	r3, [pc, #384]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d11d      	bne.n	80052c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800528e:	e01a      	b.n	80052c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005290:	4b5b      	ldr	r3, [pc, #364]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005298:	2b00      	cmp	r3, #0
 800529a:	d116      	bne.n	80052ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052a0:	e013      	b.n	80052ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052a2:	4b57      	ldr	r3, [pc, #348]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10f      	bne.n	80052ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052ae:	4b54      	ldr	r3, [pc, #336]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052be:	e006      	b.n	80052ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]
      break;
 80052c4:	e004      	b.n	80052d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052c6:	bf00      	nop
 80052c8:	e002      	b.n	80052d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052ca:	bf00      	nop
 80052cc:	e000      	b.n	80052d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10d      	bne.n	80052f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6819      	ldr	r1, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	430b      	orrs	r3, r1
 80052ec:	4944      	ldr	r1, [pc, #272]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d17d      	bne.n	80053f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052f8:	4b41      	ldr	r3, [pc, #260]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a40      	ldr	r2, [pc, #256]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005304:	f7fc feb6 	bl	8002074 <HAL_GetTick>
 8005308:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800530a:	e009      	b.n	8005320 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800530c:	f7fc feb2 	bl	8002074 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d902      	bls.n	8005320 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	73fb      	strb	r3, [r7, #15]
        break;
 800531e:	e005      	b.n	800532c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005320:	4b37      	ldr	r3, [pc, #220]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1ef      	bne.n	800530c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d160      	bne.n	80053f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d111      	bne.n	800535c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005338:	4b31      	ldr	r3, [pc, #196]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6892      	ldr	r2, [r2, #8]
 8005348:	0211      	lsls	r1, r2, #8
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	68d2      	ldr	r2, [r2, #12]
 800534e:	0912      	lsrs	r2, r2, #4
 8005350:	0452      	lsls	r2, r2, #17
 8005352:	430a      	orrs	r2, r1
 8005354:	492a      	ldr	r1, [pc, #168]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005356:	4313      	orrs	r3, r2
 8005358:	610b      	str	r3, [r1, #16]
 800535a:	e027      	b.n	80053ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d112      	bne.n	8005388 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005362:	4b27      	ldr	r3, [pc, #156]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800536a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6892      	ldr	r2, [r2, #8]
 8005372:	0211      	lsls	r1, r2, #8
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6912      	ldr	r2, [r2, #16]
 8005378:	0852      	lsrs	r2, r2, #1
 800537a:	3a01      	subs	r2, #1
 800537c:	0552      	lsls	r2, r2, #21
 800537e:	430a      	orrs	r2, r1
 8005380:	491f      	ldr	r1, [pc, #124]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005382:	4313      	orrs	r3, r2
 8005384:	610b      	str	r3, [r1, #16]
 8005386:	e011      	b.n	80053ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005388:	4b1d      	ldr	r3, [pc, #116]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005390:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6892      	ldr	r2, [r2, #8]
 8005398:	0211      	lsls	r1, r2, #8
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6952      	ldr	r2, [r2, #20]
 800539e:	0852      	lsrs	r2, r2, #1
 80053a0:	3a01      	subs	r2, #1
 80053a2:	0652      	lsls	r2, r2, #25
 80053a4:	430a      	orrs	r2, r1
 80053a6:	4916      	ldr	r1, [pc, #88]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053ac:	4b14      	ldr	r3, [pc, #80]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a13      	ldr	r2, [pc, #76]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b8:	f7fc fe5c 	bl	8002074 <HAL_GetTick>
 80053bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053be:	e009      	b.n	80053d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053c0:	f7fc fe58 	bl	8002074 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d902      	bls.n	80053d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	73fb      	strb	r3, [r7, #15]
          break;
 80053d2:	e005      	b.n	80053e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0ef      	beq.n	80053c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053e6:	4b06      	ldr	r3, [pc, #24]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e8:	691a      	ldr	r2, [r3, #16]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	4904      	ldr	r1, [pc, #16]	@ (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40021000 	.word	0x40021000

08005404 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005412:	4b6a      	ldr	r3, [pc, #424]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d018      	beq.n	8005450 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800541e:	4b67      	ldr	r3, [pc, #412]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0203 	and.w	r2, r3, #3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d10d      	bne.n	800544a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
       ||
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005436:	4b61      	ldr	r3, [pc, #388]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	091b      	lsrs	r3, r3, #4
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
       ||
 8005446:	429a      	cmp	r2, r3
 8005448:	d047      	beq.n	80054da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	73fb      	strb	r3, [r7, #15]
 800544e:	e044      	b.n	80054da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b03      	cmp	r3, #3
 8005456:	d018      	beq.n	800548a <RCCEx_PLLSAI2_Config+0x86>
 8005458:	2b03      	cmp	r3, #3
 800545a:	d825      	bhi.n	80054a8 <RCCEx_PLLSAI2_Config+0xa4>
 800545c:	2b01      	cmp	r3, #1
 800545e:	d002      	beq.n	8005466 <RCCEx_PLLSAI2_Config+0x62>
 8005460:	2b02      	cmp	r3, #2
 8005462:	d009      	beq.n	8005478 <RCCEx_PLLSAI2_Config+0x74>
 8005464:	e020      	b.n	80054a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005466:	4b55      	ldr	r3, [pc, #340]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d11d      	bne.n	80054ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005476:	e01a      	b.n	80054ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005478:	4b50      	ldr	r3, [pc, #320]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005480:	2b00      	cmp	r3, #0
 8005482:	d116      	bne.n	80054b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005488:	e013      	b.n	80054b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800548a:	4b4c      	ldr	r3, [pc, #304]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10f      	bne.n	80054b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005496:	4b49      	ldr	r3, [pc, #292]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d109      	bne.n	80054b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054a6:	e006      	b.n	80054b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
      break;
 80054ac:	e004      	b.n	80054b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054ae:	bf00      	nop
 80054b0:	e002      	b.n	80054b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054b2:	bf00      	nop
 80054b4:	e000      	b.n	80054b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10d      	bne.n	80054da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054be:	4b3f      	ldr	r3, [pc, #252]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6819      	ldr	r1, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	430b      	orrs	r3, r1
 80054d4:	4939      	ldr	r1, [pc, #228]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d167      	bne.n	80055b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80054e0:	4b36      	ldr	r3, [pc, #216]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a35      	ldr	r2, [pc, #212]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80054e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ec:	f7fc fdc2 	bl	8002074 <HAL_GetTick>
 80054f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054f2:	e009      	b.n	8005508 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054f4:	f7fc fdbe 	bl	8002074 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d902      	bls.n	8005508 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	73fb      	strb	r3, [r7, #15]
        break;
 8005506:	e005      	b.n	8005514 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005508:	4b2c      	ldr	r3, [pc, #176]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1ef      	bne.n	80054f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d14a      	bne.n	80055b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d111      	bne.n	8005544 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005520:	4b26      	ldr	r3, [pc, #152]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6892      	ldr	r2, [r2, #8]
 8005530:	0211      	lsls	r1, r2, #8
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	68d2      	ldr	r2, [r2, #12]
 8005536:	0912      	lsrs	r2, r2, #4
 8005538:	0452      	lsls	r2, r2, #17
 800553a:	430a      	orrs	r2, r1
 800553c:	491f      	ldr	r1, [pc, #124]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800553e:	4313      	orrs	r3, r2
 8005540:	614b      	str	r3, [r1, #20]
 8005542:	e011      	b.n	8005568 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005544:	4b1d      	ldr	r3, [pc, #116]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800554c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6892      	ldr	r2, [r2, #8]
 8005554:	0211      	lsls	r1, r2, #8
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6912      	ldr	r2, [r2, #16]
 800555a:	0852      	lsrs	r2, r2, #1
 800555c:	3a01      	subs	r2, #1
 800555e:	0652      	lsls	r2, r2, #25
 8005560:	430a      	orrs	r2, r1
 8005562:	4916      	ldr	r1, [pc, #88]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005564:	4313      	orrs	r3, r2
 8005566:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005568:	4b14      	ldr	r3, [pc, #80]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a13      	ldr	r2, [pc, #76]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800556e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005572:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005574:	f7fc fd7e 	bl	8002074 <HAL_GetTick>
 8005578:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800557a:	e009      	b.n	8005590 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800557c:	f7fc fd7a 	bl	8002074 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d902      	bls.n	8005590 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	73fb      	strb	r3, [r7, #15]
          break;
 800558e:	e005      	b.n	800559c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005590:	4b0a      	ldr	r3, [pc, #40]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0ef      	beq.n	800557c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80055a2:	4b06      	ldr	r3, [pc, #24]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80055a4:	695a      	ldr	r2, [r3, #20]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	4904      	ldr	r1, [pc, #16]	@ (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40021000 	.word	0x40021000

080055c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e049      	b.n	8005666 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fc fb18 	bl	8001c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f000 f9d6 	bl	80059b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b01      	cmp	r3, #1
 8005682:	d001      	beq.n	8005688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e04f      	b.n	8005728 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0201 	orr.w	r2, r2, #1
 800569e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a23      	ldr	r2, [pc, #140]	@ (8005734 <HAL_TIM_Base_Start_IT+0xc4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d01d      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x76>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b2:	d018      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x76>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005738 <HAL_TIM_Base_Start_IT+0xc8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x76>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1e      	ldr	r2, [pc, #120]	@ (800573c <HAL_TIM_Base_Start_IT+0xcc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00e      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x76>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005740 <HAL_TIM_Base_Start_IT+0xd0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d009      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x76>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005744 <HAL_TIM_Base_Start_IT+0xd4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d004      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x76>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a19      	ldr	r2, [pc, #100]	@ (8005748 <HAL_TIM_Base_Start_IT+0xd8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d115      	bne.n	8005712 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	4b17      	ldr	r3, [pc, #92]	@ (800574c <HAL_TIM_Base_Start_IT+0xdc>)
 80056ee:	4013      	ands	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b06      	cmp	r3, #6
 80056f6:	d015      	beq.n	8005724 <HAL_TIM_Base_Start_IT+0xb4>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056fe:	d011      	beq.n	8005724 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005710:	e008      	b.n	8005724 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0201 	orr.w	r2, r2, #1
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	e000      	b.n	8005726 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005724:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	40012c00 	.word	0x40012c00
 8005738:	40000400 	.word	0x40000400
 800573c:	40000800 	.word	0x40000800
 8005740:	40000c00 	.word	0x40000c00
 8005744:	40013400 	.word	0x40013400
 8005748:	40014000 	.word	0x40014000
 800574c:	00010007 	.word	0x00010007

08005750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d020      	beq.n	80057b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01b      	beq.n	80057b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0202 	mvn.w	r2, #2
 8005784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f8e9 	bl	8005972 <HAL_TIM_IC_CaptureCallback>
 80057a0:	e005      	b.n	80057ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f8db 	bl	800595e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f8ec 	bl	8005986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d020      	beq.n	8005800 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01b      	beq.n	8005800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0204 	mvn.w	r2, #4
 80057d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f8c3 	bl	8005972 <HAL_TIM_IC_CaptureCallback>
 80057ec:	e005      	b.n	80057fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f8b5 	bl	800595e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f8c6 	bl	8005986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d020      	beq.n	800584c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01b      	beq.n	800584c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0208 	mvn.w	r2, #8
 800581c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2204      	movs	r2, #4
 8005822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f89d 	bl	8005972 <HAL_TIM_IC_CaptureCallback>
 8005838:	e005      	b.n	8005846 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f88f 	bl	800595e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f8a0 	bl	8005986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 0310 	and.w	r3, r3, #16
 8005852:	2b00      	cmp	r3, #0
 8005854:	d020      	beq.n	8005898 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	2b00      	cmp	r3, #0
 800585e:	d01b      	beq.n	8005898 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0210 	mvn.w	r2, #16
 8005868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2208      	movs	r2, #8
 800586e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f877 	bl	8005972 <HAL_TIM_IC_CaptureCallback>
 8005884:	e005      	b.n	8005892 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f869 	bl	800595e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f87a 	bl	8005986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00c      	beq.n	80058bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d007      	beq.n	80058bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0201 	mvn.w	r2, #1
 80058b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fb fec0 	bl	800163c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00c      	beq.n	80058ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80058e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f99b 	bl	8005c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00c      	beq.n	800590e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f993 	bl	8005c34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00c      	beq.n	8005932 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	d007      	beq.n	8005932 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800592a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f834 	bl	800599a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00c      	beq.n	8005956 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f06f 0220 	mvn.w	r2, #32
 800594e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f95b 	bl	8005c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a46      	ldr	r2, [pc, #280]	@ (8005adc <TIM_Base_SetConfig+0x12c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ce:	d00f      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a43      	ldr	r2, [pc, #268]	@ (8005ae0 <TIM_Base_SetConfig+0x130>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00b      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a42      	ldr	r2, [pc, #264]	@ (8005ae4 <TIM_Base_SetConfig+0x134>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d007      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a41      	ldr	r2, [pc, #260]	@ (8005ae8 <TIM_Base_SetConfig+0x138>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a40      	ldr	r2, [pc, #256]	@ (8005aec <TIM_Base_SetConfig+0x13c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d108      	bne.n	8005a02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a35      	ldr	r2, [pc, #212]	@ (8005adc <TIM_Base_SetConfig+0x12c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d01f      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a10:	d01b      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a32      	ldr	r2, [pc, #200]	@ (8005ae0 <TIM_Base_SetConfig+0x130>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d017      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a31      	ldr	r2, [pc, #196]	@ (8005ae4 <TIM_Base_SetConfig+0x134>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a30      	ldr	r2, [pc, #192]	@ (8005ae8 <TIM_Base_SetConfig+0x138>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00f      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2f      	ldr	r2, [pc, #188]	@ (8005aec <TIM_Base_SetConfig+0x13c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00b      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a2e      	ldr	r2, [pc, #184]	@ (8005af0 <TIM_Base_SetConfig+0x140>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d007      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8005af4 <TIM_Base_SetConfig+0x144>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d003      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2c      	ldr	r2, [pc, #176]	@ (8005af8 <TIM_Base_SetConfig+0x148>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d108      	bne.n	8005a5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a16      	ldr	r2, [pc, #88]	@ (8005adc <TIM_Base_SetConfig+0x12c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00f      	beq.n	8005aa8 <TIM_Base_SetConfig+0xf8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a18      	ldr	r2, [pc, #96]	@ (8005aec <TIM_Base_SetConfig+0x13c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00b      	beq.n	8005aa8 <TIM_Base_SetConfig+0xf8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a17      	ldr	r2, [pc, #92]	@ (8005af0 <TIM_Base_SetConfig+0x140>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d007      	beq.n	8005aa8 <TIM_Base_SetConfig+0xf8>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a16      	ldr	r2, [pc, #88]	@ (8005af4 <TIM_Base_SetConfig+0x144>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_Base_SetConfig+0xf8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a15      	ldr	r2, [pc, #84]	@ (8005af8 <TIM_Base_SetConfig+0x148>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d103      	bne.n	8005ab0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d105      	bne.n	8005ace <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f023 0201 	bic.w	r2, r3, #1
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	611a      	str	r2, [r3, #16]
  }
}
 8005ace:	bf00      	nop
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40000400 	.word	0x40000400
 8005ae4:	40000800 	.word	0x40000800
 8005ae8:	40000c00 	.word	0x40000c00
 8005aec:	40013400 	.word	0x40013400
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40014400 	.word	0x40014400
 8005af8:	40014800 	.word	0x40014800

08005afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e068      	b.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a2e      	ldr	r2, [pc, #184]	@ (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d004      	beq.n	8005b48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a2d      	ldr	r2, [pc, #180]	@ (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d108      	bne.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005b4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a1e      	ldr	r2, [pc, #120]	@ (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d01d      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b86:	d018      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d013      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a1a      	ldr	r2, [pc, #104]	@ (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00e      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a18      	ldr	r2, [pc, #96]	@ (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d009      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a13      	ldr	r2, [pc, #76]	@ (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d004      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a14      	ldr	r2, [pc, #80]	@ (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40012c00 	.word	0x40012c00
 8005bf8:	40013400 	.word	0x40013400
 8005bfc:	40000400 	.word	0x40000400
 8005c00:	40000800 	.word	0x40000800
 8005c04:	40000c00 	.word	0x40000c00
 8005c08:	40014000 	.word	0x40014000

08005c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e040      	b.n	8005cdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d106      	bne.n	8005c70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7fc f80a 	bl	8001c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2224      	movs	r2, #36	@ 0x24
 8005c74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0201 	bic.w	r2, r2, #1
 8005c84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fe90 	bl	80069b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fbd5 	bl	8006444 <UART_SetConfig>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e01b      	b.n	8005cdc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 ff0f 	bl	8006af8 <UART_CheckIdleState>
 8005cda:	4603      	mov	r3, r0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08a      	sub	sp, #40	@ 0x28
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	603b      	str	r3, [r7, #0]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d177      	bne.n	8005dec <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <HAL_UART_Transmit+0x24>
 8005d02:	88fb      	ldrh	r3, [r7, #6]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e070      	b.n	8005dee <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2221      	movs	r2, #33	@ 0x21
 8005d18:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d1a:	f7fc f9ab 	bl	8002074 <HAL_GetTick>
 8005d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	88fa      	ldrh	r2, [r7, #6]
 8005d24:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	88fa      	ldrh	r2, [r7, #6]
 8005d2c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d38:	d108      	bne.n	8005d4c <HAL_UART_Transmit+0x68>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d104      	bne.n	8005d4c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	61bb      	str	r3, [r7, #24]
 8005d4a:	e003      	b.n	8005d54 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d50:	2300      	movs	r3, #0
 8005d52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d54:	e02f      	b.n	8005db6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	2180      	movs	r1, #128	@ 0x80
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 ff71 	bl	8006c48 <UART_WaitOnFlagUntilTimeout>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d004      	beq.n	8005d76 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e03b      	b.n	8005dee <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10b      	bne.n	8005d94 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	881a      	ldrh	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d88:	b292      	uxth	r2, r2
 8005d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	3302      	adds	r3, #2
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	e007      	b.n	8005da4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	781a      	ldrb	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	3301      	adds	r3, #1
 8005da2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1c9      	bne.n	8005d56 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2140      	movs	r1, #64	@ 0x40
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 ff3b 	bl	8006c48 <UART_WaitOnFlagUntilTimeout>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d004      	beq.n	8005de2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e005      	b.n	8005dee <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2220      	movs	r2, #32
 8005de6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	e000      	b.n	8005dee <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005dec:	2302      	movs	r3, #2
  }
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3720      	adds	r7, #32
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b0ba      	sub	sp, #232	@ 0xe8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005e22:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005e26:	4013      	ands	r3, r2
 8005e28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005e2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d115      	bne.n	8005e60 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00f      	beq.n	8005e60 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d009      	beq.n	8005e60 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 82ca 	beq.w	80063ea <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	4798      	blx	r3
      }
      return;
 8005e5e:	e2c4      	b.n	80063ea <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005e60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 8117 	beq.w	8006098 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d106      	bne.n	8005e84 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005e7a:	4b85      	ldr	r3, [pc, #532]	@ (8006090 <HAL_UART_IRQHandler+0x298>)
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 810a 	beq.w	8006098 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d011      	beq.n	8005eb4 <HAL_UART_IRQHandler+0xbc>
 8005e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00b      	beq.n	8005eb4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eaa:	f043 0201 	orr.w	r2, r3, #1
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d011      	beq.n	8005ee4 <HAL_UART_IRQHandler+0xec>
 8005ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00b      	beq.n	8005ee4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eda:	f043 0204 	orr.w	r2, r3, #4
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d011      	beq.n	8005f14 <HAL_UART_IRQHandler+0x11c>
 8005ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00b      	beq.n	8005f14 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2204      	movs	r2, #4
 8005f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f0a:	f043 0202 	orr.w	r2, r3, #2
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d017      	beq.n	8005f50 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d105      	bne.n	8005f38 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f46:	f043 0208 	orr.w	r2, r3, #8
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d012      	beq.n	8005f82 <HAL_UART_IRQHandler+0x18a>
 8005f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00c      	beq.n	8005f82 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f78:	f043 0220 	orr.w	r2, r3, #32
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 8230 	beq.w	80063ee <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00d      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fbc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fca:	2b40      	cmp	r3, #64	@ 0x40
 8005fcc:	d005      	beq.n	8005fda <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fd2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d04f      	beq.n	800607a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fea1 	bl	8006d22 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fea:	2b40      	cmp	r3, #64	@ 0x40
 8005fec:	d141      	bne.n	8006072 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006004:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006008:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800600c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3308      	adds	r3, #8
 8006016:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800601a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800601e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006026:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006032:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1d9      	bne.n	8005fee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800603e:	2b00      	cmp	r3, #0
 8006040:	d013      	beq.n	800606a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006046:	4a13      	ldr	r2, [pc, #76]	@ (8006094 <HAL_UART_IRQHandler+0x29c>)
 8006048:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800604e:	4618      	mov	r0, r3
 8006050:	f7fc f98f 	bl	8002372 <HAL_DMA_Abort_IT>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d017      	beq.n	800608a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800605e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006064:	4610      	mov	r0, r2
 8006066:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006068:	e00f      	b.n	800608a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f9d4 	bl	8006418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006070:	e00b      	b.n	800608a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f9d0 	bl	8006418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006078:	e007      	b.n	800608a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f9cc 	bl	8006418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006088:	e1b1      	b.n	80063ee <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608a:	bf00      	nop
    return;
 800608c:	e1af      	b.n	80063ee <HAL_UART_IRQHandler+0x5f6>
 800608e:	bf00      	nop
 8006090:	04000120 	.word	0x04000120
 8006094:	08006deb 	.word	0x08006deb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800609c:	2b01      	cmp	r3, #1
 800609e:	f040 816a 	bne.w	8006376 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a6:	f003 0310 	and.w	r3, r3, #16
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 8163 	beq.w	8006376 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 815c 	beq.w	8006376 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2210      	movs	r2, #16
 80060c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d0:	2b40      	cmp	r3, #64	@ 0x40
 80060d2:	f040 80d4 	bne.w	800627e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 80ad 	beq.w	8006246 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80060f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060f6:	429a      	cmp	r2, r3
 80060f8:	f080 80a5 	bcs.w	8006246 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006102:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	f040 8086 	bne.w	8006224 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800612c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006134:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006142:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006146:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800614e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800615a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1da      	bne.n	8006118 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3308      	adds	r3, #8
 8006168:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006172:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006174:	f023 0301 	bic.w	r3, r3, #1
 8006178:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3308      	adds	r3, #8
 8006182:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006186:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800618a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800618e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006198:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e1      	bne.n	8006162 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3308      	adds	r3, #8
 80061a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061a8:	e853 3f00 	ldrex	r3, [r3]
 80061ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80061ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3308      	adds	r3, #8
 80061be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80061c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80061c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80061c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80061d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e3      	bne.n	800619e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2220      	movs	r2, #32
 80061da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80061f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061f4:	f023 0310 	bic.w	r3, r3, #16
 80061f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006206:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006208:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800620c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1e4      	bne.n	80061e4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621e:	4618      	mov	r0, r3
 8006220:	f7fc f869 	bl	80022f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006236:	b29b      	uxth	r3, r3
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	b29b      	uxth	r3, r3
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f8f4 	bl	800642c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006244:	e0d5      	b.n	80063f2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800624c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006250:	429a      	cmp	r2, r3
 8006252:	f040 80ce 	bne.w	80063f2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	2b20      	cmp	r3, #32
 8006264:	f040 80c5 	bne.w	80063f2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006274:	4619      	mov	r1, r3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f8d8 	bl	800642c <HAL_UARTEx_RxEventCallback>
      return;
 800627c:	e0b9      	b.n	80063f2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800628a:	b29b      	uxth	r3, r3
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006298:	b29b      	uxth	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 80ab 	beq.w	80063f6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80062a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 80a6 	beq.w	80063f6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e4      	bne.n	80062aa <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3308      	adds	r3, #8
 80062e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ea:	e853 3f00 	ldrex	r3, [r3]
 80062ee:	623b      	str	r3, [r7, #32]
   return(result);
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	f023 0301 	bic.w	r3, r3, #1
 80062f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3308      	adds	r3, #8
 8006300:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006304:	633a      	str	r2, [r7, #48]	@ 0x30
 8006306:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006308:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800630a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800630c:	e841 2300 	strex	r3, r2, [r1]
 8006310:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1e3      	bne.n	80062e0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2220      	movs	r2, #32
 800631c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	60fb      	str	r3, [r7, #12]
   return(result);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f023 0310 	bic.w	r3, r3, #16
 8006340:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	69b9      	ldr	r1, [r7, #24]
 8006354:	69fa      	ldr	r2, [r7, #28]
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	617b      	str	r3, [r7, #20]
   return(result);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e4      	bne.n	800632c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2202      	movs	r2, #2
 8006366:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f85c 	bl	800642c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006374:	e03f      	b.n	80063f6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800637a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00e      	beq.n	80063a0 <HAL_UART_IRQHandler+0x5a8>
 8006382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d008      	beq.n	80063a0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006396:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fd66 	bl	8006e6a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800639e:	e02d      	b.n	80063fc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00e      	beq.n	80063ca <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d008      	beq.n	80063ca <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01c      	beq.n	80063fa <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	4798      	blx	r3
    }
    return;
 80063c8:	e017      	b.n	80063fa <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d012      	beq.n	80063fc <HAL_UART_IRQHandler+0x604>
 80063d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00c      	beq.n	80063fc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fd17 	bl	8006e16 <UART_EndTransmit_IT>
    return;
 80063e8:	e008      	b.n	80063fc <HAL_UART_IRQHandler+0x604>
      return;
 80063ea:	bf00      	nop
 80063ec:	e006      	b.n	80063fc <HAL_UART_IRQHandler+0x604>
    return;
 80063ee:	bf00      	nop
 80063f0:	e004      	b.n	80063fc <HAL_UART_IRQHandler+0x604>
      return;
 80063f2:	bf00      	nop
 80063f4:	e002      	b.n	80063fc <HAL_UART_IRQHandler+0x604>
      return;
 80063f6:	bf00      	nop
 80063f8:	e000      	b.n	80063fc <HAL_UART_IRQHandler+0x604>
    return;
 80063fa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80063fc:	37e8      	adds	r7, #232	@ 0xe8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop

08006404 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006448:	b08a      	sub	sp, #40	@ 0x28
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	431a      	orrs	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	431a      	orrs	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	4313      	orrs	r3, r2
 800646a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	4ba4      	ldr	r3, [pc, #656]	@ (8006704 <UART_SetConfig+0x2c0>)
 8006474:	4013      	ands	r3, r2
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	6812      	ldr	r2, [r2, #0]
 800647a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800647c:	430b      	orrs	r3, r1
 800647e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a99      	ldr	r2, [pc, #612]	@ (8006708 <UART_SetConfig+0x2c4>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d004      	beq.n	80064b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ac:	4313      	orrs	r3, r2
 80064ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064c0:	430a      	orrs	r2, r1
 80064c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a90      	ldr	r2, [pc, #576]	@ (800670c <UART_SetConfig+0x2c8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d126      	bne.n	800651c <UART_SetConfig+0xd8>
 80064ce:	4b90      	ldr	r3, [pc, #576]	@ (8006710 <UART_SetConfig+0x2cc>)
 80064d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d4:	f003 0303 	and.w	r3, r3, #3
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d81b      	bhi.n	8006514 <UART_SetConfig+0xd0>
 80064dc:	a201      	add	r2, pc, #4	@ (adr r2, 80064e4 <UART_SetConfig+0xa0>)
 80064de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e2:	bf00      	nop
 80064e4:	080064f5 	.word	0x080064f5
 80064e8:	08006505 	.word	0x08006505
 80064ec:	080064fd 	.word	0x080064fd
 80064f0:	0800650d 	.word	0x0800650d
 80064f4:	2301      	movs	r3, #1
 80064f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064fa:	e116      	b.n	800672a <UART_SetConfig+0x2e6>
 80064fc:	2302      	movs	r3, #2
 80064fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006502:	e112      	b.n	800672a <UART_SetConfig+0x2e6>
 8006504:	2304      	movs	r3, #4
 8006506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800650a:	e10e      	b.n	800672a <UART_SetConfig+0x2e6>
 800650c:	2308      	movs	r3, #8
 800650e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006512:	e10a      	b.n	800672a <UART_SetConfig+0x2e6>
 8006514:	2310      	movs	r3, #16
 8006516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800651a:	e106      	b.n	800672a <UART_SetConfig+0x2e6>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a7c      	ldr	r2, [pc, #496]	@ (8006714 <UART_SetConfig+0x2d0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d138      	bne.n	8006598 <UART_SetConfig+0x154>
 8006526:	4b7a      	ldr	r3, [pc, #488]	@ (8006710 <UART_SetConfig+0x2cc>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800652c:	f003 030c 	and.w	r3, r3, #12
 8006530:	2b0c      	cmp	r3, #12
 8006532:	d82d      	bhi.n	8006590 <UART_SetConfig+0x14c>
 8006534:	a201      	add	r2, pc, #4	@ (adr r2, 800653c <UART_SetConfig+0xf8>)
 8006536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653a:	bf00      	nop
 800653c:	08006571 	.word	0x08006571
 8006540:	08006591 	.word	0x08006591
 8006544:	08006591 	.word	0x08006591
 8006548:	08006591 	.word	0x08006591
 800654c:	08006581 	.word	0x08006581
 8006550:	08006591 	.word	0x08006591
 8006554:	08006591 	.word	0x08006591
 8006558:	08006591 	.word	0x08006591
 800655c:	08006579 	.word	0x08006579
 8006560:	08006591 	.word	0x08006591
 8006564:	08006591 	.word	0x08006591
 8006568:	08006591 	.word	0x08006591
 800656c:	08006589 	.word	0x08006589
 8006570:	2300      	movs	r3, #0
 8006572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006576:	e0d8      	b.n	800672a <UART_SetConfig+0x2e6>
 8006578:	2302      	movs	r3, #2
 800657a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800657e:	e0d4      	b.n	800672a <UART_SetConfig+0x2e6>
 8006580:	2304      	movs	r3, #4
 8006582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006586:	e0d0      	b.n	800672a <UART_SetConfig+0x2e6>
 8006588:	2308      	movs	r3, #8
 800658a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800658e:	e0cc      	b.n	800672a <UART_SetConfig+0x2e6>
 8006590:	2310      	movs	r3, #16
 8006592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006596:	e0c8      	b.n	800672a <UART_SetConfig+0x2e6>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a5e      	ldr	r2, [pc, #376]	@ (8006718 <UART_SetConfig+0x2d4>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d125      	bne.n	80065ee <UART_SetConfig+0x1aa>
 80065a2:	4b5b      	ldr	r3, [pc, #364]	@ (8006710 <UART_SetConfig+0x2cc>)
 80065a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80065ac:	2b30      	cmp	r3, #48	@ 0x30
 80065ae:	d016      	beq.n	80065de <UART_SetConfig+0x19a>
 80065b0:	2b30      	cmp	r3, #48	@ 0x30
 80065b2:	d818      	bhi.n	80065e6 <UART_SetConfig+0x1a2>
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	d00a      	beq.n	80065ce <UART_SetConfig+0x18a>
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d814      	bhi.n	80065e6 <UART_SetConfig+0x1a2>
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <UART_SetConfig+0x182>
 80065c0:	2b10      	cmp	r3, #16
 80065c2:	d008      	beq.n	80065d6 <UART_SetConfig+0x192>
 80065c4:	e00f      	b.n	80065e6 <UART_SetConfig+0x1a2>
 80065c6:	2300      	movs	r3, #0
 80065c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065cc:	e0ad      	b.n	800672a <UART_SetConfig+0x2e6>
 80065ce:	2302      	movs	r3, #2
 80065d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065d4:	e0a9      	b.n	800672a <UART_SetConfig+0x2e6>
 80065d6:	2304      	movs	r3, #4
 80065d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065dc:	e0a5      	b.n	800672a <UART_SetConfig+0x2e6>
 80065de:	2308      	movs	r3, #8
 80065e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e4:	e0a1      	b.n	800672a <UART_SetConfig+0x2e6>
 80065e6:	2310      	movs	r3, #16
 80065e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ec:	e09d      	b.n	800672a <UART_SetConfig+0x2e6>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a4a      	ldr	r2, [pc, #296]	@ (800671c <UART_SetConfig+0x2d8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d125      	bne.n	8006644 <UART_SetConfig+0x200>
 80065f8:	4b45      	ldr	r3, [pc, #276]	@ (8006710 <UART_SetConfig+0x2cc>)
 80065fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006602:	2bc0      	cmp	r3, #192	@ 0xc0
 8006604:	d016      	beq.n	8006634 <UART_SetConfig+0x1f0>
 8006606:	2bc0      	cmp	r3, #192	@ 0xc0
 8006608:	d818      	bhi.n	800663c <UART_SetConfig+0x1f8>
 800660a:	2b80      	cmp	r3, #128	@ 0x80
 800660c:	d00a      	beq.n	8006624 <UART_SetConfig+0x1e0>
 800660e:	2b80      	cmp	r3, #128	@ 0x80
 8006610:	d814      	bhi.n	800663c <UART_SetConfig+0x1f8>
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <UART_SetConfig+0x1d8>
 8006616:	2b40      	cmp	r3, #64	@ 0x40
 8006618:	d008      	beq.n	800662c <UART_SetConfig+0x1e8>
 800661a:	e00f      	b.n	800663c <UART_SetConfig+0x1f8>
 800661c:	2300      	movs	r3, #0
 800661e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006622:	e082      	b.n	800672a <UART_SetConfig+0x2e6>
 8006624:	2302      	movs	r3, #2
 8006626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800662a:	e07e      	b.n	800672a <UART_SetConfig+0x2e6>
 800662c:	2304      	movs	r3, #4
 800662e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006632:	e07a      	b.n	800672a <UART_SetConfig+0x2e6>
 8006634:	2308      	movs	r3, #8
 8006636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800663a:	e076      	b.n	800672a <UART_SetConfig+0x2e6>
 800663c:	2310      	movs	r3, #16
 800663e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006642:	e072      	b.n	800672a <UART_SetConfig+0x2e6>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a35      	ldr	r2, [pc, #212]	@ (8006720 <UART_SetConfig+0x2dc>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d12a      	bne.n	80066a4 <UART_SetConfig+0x260>
 800664e:	4b30      	ldr	r3, [pc, #192]	@ (8006710 <UART_SetConfig+0x2cc>)
 8006650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006654:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006658:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800665c:	d01a      	beq.n	8006694 <UART_SetConfig+0x250>
 800665e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006662:	d81b      	bhi.n	800669c <UART_SetConfig+0x258>
 8006664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006668:	d00c      	beq.n	8006684 <UART_SetConfig+0x240>
 800666a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800666e:	d815      	bhi.n	800669c <UART_SetConfig+0x258>
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <UART_SetConfig+0x238>
 8006674:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006678:	d008      	beq.n	800668c <UART_SetConfig+0x248>
 800667a:	e00f      	b.n	800669c <UART_SetConfig+0x258>
 800667c:	2300      	movs	r3, #0
 800667e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006682:	e052      	b.n	800672a <UART_SetConfig+0x2e6>
 8006684:	2302      	movs	r3, #2
 8006686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800668a:	e04e      	b.n	800672a <UART_SetConfig+0x2e6>
 800668c:	2304      	movs	r3, #4
 800668e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006692:	e04a      	b.n	800672a <UART_SetConfig+0x2e6>
 8006694:	2308      	movs	r3, #8
 8006696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800669a:	e046      	b.n	800672a <UART_SetConfig+0x2e6>
 800669c:	2310      	movs	r3, #16
 800669e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066a2:	e042      	b.n	800672a <UART_SetConfig+0x2e6>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a17      	ldr	r2, [pc, #92]	@ (8006708 <UART_SetConfig+0x2c4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d13a      	bne.n	8006724 <UART_SetConfig+0x2e0>
 80066ae:	4b18      	ldr	r3, [pc, #96]	@ (8006710 <UART_SetConfig+0x2cc>)
 80066b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80066b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066bc:	d01a      	beq.n	80066f4 <UART_SetConfig+0x2b0>
 80066be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066c2:	d81b      	bhi.n	80066fc <UART_SetConfig+0x2b8>
 80066c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066c8:	d00c      	beq.n	80066e4 <UART_SetConfig+0x2a0>
 80066ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066ce:	d815      	bhi.n	80066fc <UART_SetConfig+0x2b8>
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <UART_SetConfig+0x298>
 80066d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066d8:	d008      	beq.n	80066ec <UART_SetConfig+0x2a8>
 80066da:	e00f      	b.n	80066fc <UART_SetConfig+0x2b8>
 80066dc:	2300      	movs	r3, #0
 80066de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066e2:	e022      	b.n	800672a <UART_SetConfig+0x2e6>
 80066e4:	2302      	movs	r3, #2
 80066e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ea:	e01e      	b.n	800672a <UART_SetConfig+0x2e6>
 80066ec:	2304      	movs	r3, #4
 80066ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066f2:	e01a      	b.n	800672a <UART_SetConfig+0x2e6>
 80066f4:	2308      	movs	r3, #8
 80066f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066fa:	e016      	b.n	800672a <UART_SetConfig+0x2e6>
 80066fc:	2310      	movs	r3, #16
 80066fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006702:	e012      	b.n	800672a <UART_SetConfig+0x2e6>
 8006704:	efff69f3 	.word	0xefff69f3
 8006708:	40008000 	.word	0x40008000
 800670c:	40013800 	.word	0x40013800
 8006710:	40021000 	.word	0x40021000
 8006714:	40004400 	.word	0x40004400
 8006718:	40004800 	.word	0x40004800
 800671c:	40004c00 	.word	0x40004c00
 8006720:	40005000 	.word	0x40005000
 8006724:	2310      	movs	r3, #16
 8006726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a9f      	ldr	r2, [pc, #636]	@ (80069ac <UART_SetConfig+0x568>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d17a      	bne.n	800682a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006734:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006738:	2b08      	cmp	r3, #8
 800673a:	d824      	bhi.n	8006786 <UART_SetConfig+0x342>
 800673c:	a201      	add	r2, pc, #4	@ (adr r2, 8006744 <UART_SetConfig+0x300>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	08006769 	.word	0x08006769
 8006748:	08006787 	.word	0x08006787
 800674c:	08006771 	.word	0x08006771
 8006750:	08006787 	.word	0x08006787
 8006754:	08006777 	.word	0x08006777
 8006758:	08006787 	.word	0x08006787
 800675c:	08006787 	.word	0x08006787
 8006760:	08006787 	.word	0x08006787
 8006764:	0800677f 	.word	0x0800677f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006768:	f7fe f9e2 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 800676c:	61f8      	str	r0, [r7, #28]
        break;
 800676e:	e010      	b.n	8006792 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006770:	4b8f      	ldr	r3, [pc, #572]	@ (80069b0 <UART_SetConfig+0x56c>)
 8006772:	61fb      	str	r3, [r7, #28]
        break;
 8006774:	e00d      	b.n	8006792 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006776:	f7fe f943 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 800677a:	61f8      	str	r0, [r7, #28]
        break;
 800677c:	e009      	b.n	8006792 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800677e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006782:	61fb      	str	r3, [r7, #28]
        break;
 8006784:	e005      	b.n	8006792 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006790:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 80fb 	beq.w	8006990 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	4613      	mov	r3, r2
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	4413      	add	r3, r2
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d305      	bcc.n	80067b6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067b0:	69fa      	ldr	r2, [r7, #28]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d903      	bls.n	80067be <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80067bc:	e0e8      	b.n	8006990 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	2200      	movs	r2, #0
 80067c2:	461c      	mov	r4, r3
 80067c4:	4615      	mov	r5, r2
 80067c6:	f04f 0200 	mov.w	r2, #0
 80067ca:	f04f 0300 	mov.w	r3, #0
 80067ce:	022b      	lsls	r3, r5, #8
 80067d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80067d4:	0222      	lsls	r2, r4, #8
 80067d6:	68f9      	ldr	r1, [r7, #12]
 80067d8:	6849      	ldr	r1, [r1, #4]
 80067da:	0849      	lsrs	r1, r1, #1
 80067dc:	2000      	movs	r0, #0
 80067de:	4688      	mov	r8, r1
 80067e0:	4681      	mov	r9, r0
 80067e2:	eb12 0a08 	adds.w	sl, r2, r8
 80067e6:	eb43 0b09 	adc.w	fp, r3, r9
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	603b      	str	r3, [r7, #0]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067f8:	4650      	mov	r0, sl
 80067fa:	4659      	mov	r1, fp
 80067fc:	f7fa f9f4 	bl	8000be8 <__aeabi_uldivmod>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	4613      	mov	r3, r2
 8006806:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800680e:	d308      	bcc.n	8006822 <UART_SetConfig+0x3de>
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006816:	d204      	bcs.n	8006822 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	60da      	str	r2, [r3, #12]
 8006820:	e0b6      	b.n	8006990 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006828:	e0b2      	b.n	8006990 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006832:	d15e      	bne.n	80068f2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006834:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006838:	2b08      	cmp	r3, #8
 800683a:	d828      	bhi.n	800688e <UART_SetConfig+0x44a>
 800683c:	a201      	add	r2, pc, #4	@ (adr r2, 8006844 <UART_SetConfig+0x400>)
 800683e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006842:	bf00      	nop
 8006844:	08006869 	.word	0x08006869
 8006848:	08006871 	.word	0x08006871
 800684c:	08006879 	.word	0x08006879
 8006850:	0800688f 	.word	0x0800688f
 8006854:	0800687f 	.word	0x0800687f
 8006858:	0800688f 	.word	0x0800688f
 800685c:	0800688f 	.word	0x0800688f
 8006860:	0800688f 	.word	0x0800688f
 8006864:	08006887 	.word	0x08006887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006868:	f7fe f962 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 800686c:	61f8      	str	r0, [r7, #28]
        break;
 800686e:	e014      	b.n	800689a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006870:	f7fe f974 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 8006874:	61f8      	str	r0, [r7, #28]
        break;
 8006876:	e010      	b.n	800689a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006878:	4b4d      	ldr	r3, [pc, #308]	@ (80069b0 <UART_SetConfig+0x56c>)
 800687a:	61fb      	str	r3, [r7, #28]
        break;
 800687c:	e00d      	b.n	800689a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800687e:	f7fe f8bf 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 8006882:	61f8      	str	r0, [r7, #28]
        break;
 8006884:	e009      	b.n	800689a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800688a:	61fb      	str	r3, [r7, #28]
        break;
 800688c:	e005      	b.n	800689a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006898:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d077      	beq.n	8006990 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	005a      	lsls	r2, r3, #1
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	085b      	lsrs	r3, r3, #1
 80068aa:	441a      	add	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	2b0f      	cmp	r3, #15
 80068ba:	d916      	bls.n	80068ea <UART_SetConfig+0x4a6>
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068c2:	d212      	bcs.n	80068ea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	f023 030f 	bic.w	r3, r3, #15
 80068cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	085b      	lsrs	r3, r3, #1
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	b29a      	uxth	r2, r3
 80068da:	8afb      	ldrh	r3, [r7, #22]
 80068dc:	4313      	orrs	r3, r2
 80068de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	8afa      	ldrh	r2, [r7, #22]
 80068e6:	60da      	str	r2, [r3, #12]
 80068e8:	e052      	b.n	8006990 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80068f0:	e04e      	b.n	8006990 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80068f6:	2b08      	cmp	r3, #8
 80068f8:	d827      	bhi.n	800694a <UART_SetConfig+0x506>
 80068fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006900 <UART_SetConfig+0x4bc>)
 80068fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006900:	08006925 	.word	0x08006925
 8006904:	0800692d 	.word	0x0800692d
 8006908:	08006935 	.word	0x08006935
 800690c:	0800694b 	.word	0x0800694b
 8006910:	0800693b 	.word	0x0800693b
 8006914:	0800694b 	.word	0x0800694b
 8006918:	0800694b 	.word	0x0800694b
 800691c:	0800694b 	.word	0x0800694b
 8006920:	08006943 	.word	0x08006943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006924:	f7fe f904 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 8006928:	61f8      	str	r0, [r7, #28]
        break;
 800692a:	e014      	b.n	8006956 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800692c:	f7fe f916 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 8006930:	61f8      	str	r0, [r7, #28]
        break;
 8006932:	e010      	b.n	8006956 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006934:	4b1e      	ldr	r3, [pc, #120]	@ (80069b0 <UART_SetConfig+0x56c>)
 8006936:	61fb      	str	r3, [r7, #28]
        break;
 8006938:	e00d      	b.n	8006956 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800693a:	f7fe f861 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 800693e:	61f8      	str	r0, [r7, #28]
        break;
 8006940:	e009      	b.n	8006956 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006946:	61fb      	str	r3, [r7, #28]
        break;
 8006948:	e005      	b.n	8006956 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006954:	bf00      	nop
    }

    if (pclk != 0U)
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d019      	beq.n	8006990 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	085a      	lsrs	r2, r3, #1
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	441a      	add	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	fbb2 f3f3 	udiv	r3, r2, r3
 800696e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	2b0f      	cmp	r3, #15
 8006974:	d909      	bls.n	800698a <UART_SetConfig+0x546>
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800697c:	d205      	bcs.n	800698a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	60da      	str	r2, [r3, #12]
 8006988:	e002      	b.n	8006990 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800699c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3728      	adds	r7, #40	@ 0x28
 80069a4:	46bd      	mov	sp, r7
 80069a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069aa:	bf00      	nop
 80069ac:	40008000 	.word	0x40008000
 80069b0:	00f42400 	.word	0x00f42400

080069b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c0:	f003 0308 	and.w	r3, r3, #8
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a26:	f003 0304 	and.w	r3, r3, #4
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a48:	f003 0310 	and.w	r3, r3, #16
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00a      	beq.n	8006a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01a      	beq.n	8006aca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ab2:	d10a      	bne.n	8006aca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00a      	beq.n	8006aec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	605a      	str	r2, [r3, #4]
  }
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b098      	sub	sp, #96	@ 0x60
 8006afc:	af02      	add	r7, sp, #8
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b08:	f7fb fab4 	bl	8002074 <HAL_GetTick>
 8006b0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d12e      	bne.n	8006b7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b24:	2200      	movs	r2, #0
 8006b26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f88c 	bl	8006c48 <UART_WaitOnFlagUntilTimeout>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d021      	beq.n	8006b7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b3e:	e853 3f00 	ldrex	r3, [r3]
 8006b42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	461a      	mov	r2, r3
 8006b52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b5c:	e841 2300 	strex	r3, r2, [r1]
 8006b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e6      	bne.n	8006b36 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e062      	b.n	8006c40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b04      	cmp	r3, #4
 8006b86:	d149      	bne.n	8006c1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b90:	2200      	movs	r2, #0
 8006b92:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f856 	bl	8006c48 <UART_WaitOnFlagUntilTimeout>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d03c      	beq.n	8006c1c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	623b      	str	r3, [r7, #32]
   return(result);
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e6      	bne.n	8006ba2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3308      	adds	r3, #8
 8006bda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	e853 3f00 	ldrex	r3, [r3]
 8006be2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0301 	bic.w	r3, r3, #1
 8006bea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bf4:	61fa      	str	r2, [r7, #28]
 8006bf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf8:	69b9      	ldr	r1, [r7, #24]
 8006bfa:	69fa      	ldr	r2, [r7, #28]
 8006bfc:	e841 2300 	strex	r3, r2, [r1]
 8006c00:	617b      	str	r3, [r7, #20]
   return(result);
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1e5      	bne.n	8006bd4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e011      	b.n	8006c40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3758      	adds	r7, #88	@ 0x58
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	4613      	mov	r3, r2
 8006c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c58:	e04f      	b.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c60:	d04b      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c62:	f7fb fa07 	bl	8002074 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d302      	bcc.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e04e      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d037      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2b80      	cmp	r3, #128	@ 0x80
 8006c8e:	d034      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b40      	cmp	r3, #64	@ 0x40
 8006c94:	d031      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	f003 0308 	and.w	r3, r3, #8
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d110      	bne.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2208      	movs	r2, #8
 8006caa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f838 	bl	8006d22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2208      	movs	r2, #8
 8006cb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e029      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cd4:	d111      	bne.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f81e 	bl	8006d22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e00f      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	69da      	ldr	r2, [r3, #28]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4013      	ands	r3, r2
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	bf0c      	ite	eq
 8006d0a:	2301      	moveq	r3, #1
 8006d0c:	2300      	movne	r3, #0
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d0a0      	beq.n	8006c5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b095      	sub	sp, #84	@ 0x54
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	461a      	mov	r2, r3
 8006d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d48:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e6      	bne.n	8006d2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3308      	adds	r3, #8
 8006d62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	e853 3f00 	ldrex	r3, [r3]
 8006d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	f023 0301 	bic.w	r3, r3, #1
 8006d72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3308      	adds	r3, #8
 8006d7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d84:	e841 2300 	strex	r3, r2, [r1]
 8006d88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e5      	bne.n	8006d5c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d118      	bne.n	8006dca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f023 0310 	bic.w	r3, r3, #16
 8006dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006db6:	61bb      	str	r3, [r7, #24]
 8006db8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6979      	ldr	r1, [r7, #20]
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e6      	bne.n	8006d98 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006dde:	bf00      	nop
 8006de0:	3754      	adds	r7, #84	@ 0x54
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f7ff fb05 	bl	8006418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b088      	sub	sp, #32
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e32:	61fb      	str	r3, [r7, #28]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6979      	ldr	r1, [r7, #20]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	613b      	str	r3, [r7, #16]
   return(result);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e6      	bne.n	8006e1e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2220      	movs	r2, #32
 8006e54:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff fad1 	bl	8006404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e62:	bf00      	nop
 8006e64:	3720      	adds	r7, #32
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
	...

08006e80 <std>:
 8006e80:	2300      	movs	r3, #0
 8006e82:	b510      	push	{r4, lr}
 8006e84:	4604      	mov	r4, r0
 8006e86:	e9c0 3300 	strd	r3, r3, [r0]
 8006e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e8e:	6083      	str	r3, [r0, #8]
 8006e90:	8181      	strh	r1, [r0, #12]
 8006e92:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e94:	81c2      	strh	r2, [r0, #14]
 8006e96:	6183      	str	r3, [r0, #24]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	2208      	movs	r2, #8
 8006e9c:	305c      	adds	r0, #92	@ 0x5c
 8006e9e:	f000 f9f9 	bl	8007294 <memset>
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed8 <std+0x58>)
 8006ea4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8006edc <std+0x5c>)
 8006ea8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee0 <std+0x60>)
 8006eac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006eae:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee4 <std+0x64>)
 8006eb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee8 <std+0x68>)
 8006eb4:	6224      	str	r4, [r4, #32]
 8006eb6:	429c      	cmp	r4, r3
 8006eb8:	d006      	beq.n	8006ec8 <std+0x48>
 8006eba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ebe:	4294      	cmp	r4, r2
 8006ec0:	d002      	beq.n	8006ec8 <std+0x48>
 8006ec2:	33d0      	adds	r3, #208	@ 0xd0
 8006ec4:	429c      	cmp	r4, r3
 8006ec6:	d105      	bne.n	8006ed4 <std+0x54>
 8006ec8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed0:	f000 ba58 	b.w	8007384 <__retarget_lock_init_recursive>
 8006ed4:	bd10      	pop	{r4, pc}
 8006ed6:	bf00      	nop
 8006ed8:	080070e5 	.word	0x080070e5
 8006edc:	08007107 	.word	0x08007107
 8006ee0:	0800713f 	.word	0x0800713f
 8006ee4:	08007163 	.word	0x08007163
 8006ee8:	20000298 	.word	0x20000298

08006eec <stdio_exit_handler>:
 8006eec:	4a02      	ldr	r2, [pc, #8]	@ (8006ef8 <stdio_exit_handler+0xc>)
 8006eee:	4903      	ldr	r1, [pc, #12]	@ (8006efc <stdio_exit_handler+0x10>)
 8006ef0:	4803      	ldr	r0, [pc, #12]	@ (8006f00 <stdio_exit_handler+0x14>)
 8006ef2:	f000 b869 	b.w	8006fc8 <_fwalk_sglue>
 8006ef6:	bf00      	nop
 8006ef8:	2000000c 	.word	0x2000000c
 8006efc:	08007c21 	.word	0x08007c21
 8006f00:	2000001c 	.word	0x2000001c

08006f04 <cleanup_stdio>:
 8006f04:	6841      	ldr	r1, [r0, #4]
 8006f06:	4b0c      	ldr	r3, [pc, #48]	@ (8006f38 <cleanup_stdio+0x34>)
 8006f08:	4299      	cmp	r1, r3
 8006f0a:	b510      	push	{r4, lr}
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	d001      	beq.n	8006f14 <cleanup_stdio+0x10>
 8006f10:	f000 fe86 	bl	8007c20 <_fflush_r>
 8006f14:	68a1      	ldr	r1, [r4, #8]
 8006f16:	4b09      	ldr	r3, [pc, #36]	@ (8006f3c <cleanup_stdio+0x38>)
 8006f18:	4299      	cmp	r1, r3
 8006f1a:	d002      	beq.n	8006f22 <cleanup_stdio+0x1e>
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f000 fe7f 	bl	8007c20 <_fflush_r>
 8006f22:	68e1      	ldr	r1, [r4, #12]
 8006f24:	4b06      	ldr	r3, [pc, #24]	@ (8006f40 <cleanup_stdio+0x3c>)
 8006f26:	4299      	cmp	r1, r3
 8006f28:	d004      	beq.n	8006f34 <cleanup_stdio+0x30>
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f30:	f000 be76 	b.w	8007c20 <_fflush_r>
 8006f34:	bd10      	pop	{r4, pc}
 8006f36:	bf00      	nop
 8006f38:	20000298 	.word	0x20000298
 8006f3c:	20000300 	.word	0x20000300
 8006f40:	20000368 	.word	0x20000368

08006f44 <global_stdio_init.part.0>:
 8006f44:	b510      	push	{r4, lr}
 8006f46:	4b0b      	ldr	r3, [pc, #44]	@ (8006f74 <global_stdio_init.part.0+0x30>)
 8006f48:	4c0b      	ldr	r4, [pc, #44]	@ (8006f78 <global_stdio_init.part.0+0x34>)
 8006f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8006f7c <global_stdio_init.part.0+0x38>)
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	4620      	mov	r0, r4
 8006f50:	2200      	movs	r2, #0
 8006f52:	2104      	movs	r1, #4
 8006f54:	f7ff ff94 	bl	8006e80 <std>
 8006f58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	2109      	movs	r1, #9
 8006f60:	f7ff ff8e 	bl	8006e80 <std>
 8006f64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f68:	2202      	movs	r2, #2
 8006f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f6e:	2112      	movs	r1, #18
 8006f70:	f7ff bf86 	b.w	8006e80 <std>
 8006f74:	200003d0 	.word	0x200003d0
 8006f78:	20000298 	.word	0x20000298
 8006f7c:	08006eed 	.word	0x08006eed

08006f80 <__sfp_lock_acquire>:
 8006f80:	4801      	ldr	r0, [pc, #4]	@ (8006f88 <__sfp_lock_acquire+0x8>)
 8006f82:	f000 ba00 	b.w	8007386 <__retarget_lock_acquire_recursive>
 8006f86:	bf00      	nop
 8006f88:	200003d9 	.word	0x200003d9

08006f8c <__sfp_lock_release>:
 8006f8c:	4801      	ldr	r0, [pc, #4]	@ (8006f94 <__sfp_lock_release+0x8>)
 8006f8e:	f000 b9fb 	b.w	8007388 <__retarget_lock_release_recursive>
 8006f92:	bf00      	nop
 8006f94:	200003d9 	.word	0x200003d9

08006f98 <__sinit>:
 8006f98:	b510      	push	{r4, lr}
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	f7ff fff0 	bl	8006f80 <__sfp_lock_acquire>
 8006fa0:	6a23      	ldr	r3, [r4, #32]
 8006fa2:	b11b      	cbz	r3, 8006fac <__sinit+0x14>
 8006fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa8:	f7ff bff0 	b.w	8006f8c <__sfp_lock_release>
 8006fac:	4b04      	ldr	r3, [pc, #16]	@ (8006fc0 <__sinit+0x28>)
 8006fae:	6223      	str	r3, [r4, #32]
 8006fb0:	4b04      	ldr	r3, [pc, #16]	@ (8006fc4 <__sinit+0x2c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1f5      	bne.n	8006fa4 <__sinit+0xc>
 8006fb8:	f7ff ffc4 	bl	8006f44 <global_stdio_init.part.0>
 8006fbc:	e7f2      	b.n	8006fa4 <__sinit+0xc>
 8006fbe:	bf00      	nop
 8006fc0:	08006f05 	.word	0x08006f05
 8006fc4:	200003d0 	.word	0x200003d0

08006fc8 <_fwalk_sglue>:
 8006fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fcc:	4607      	mov	r7, r0
 8006fce:	4688      	mov	r8, r1
 8006fd0:	4614      	mov	r4, r2
 8006fd2:	2600      	movs	r6, #0
 8006fd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fd8:	f1b9 0901 	subs.w	r9, r9, #1
 8006fdc:	d505      	bpl.n	8006fea <_fwalk_sglue+0x22>
 8006fde:	6824      	ldr	r4, [r4, #0]
 8006fe0:	2c00      	cmp	r4, #0
 8006fe2:	d1f7      	bne.n	8006fd4 <_fwalk_sglue+0xc>
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fea:	89ab      	ldrh	r3, [r5, #12]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d907      	bls.n	8007000 <_fwalk_sglue+0x38>
 8006ff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	d003      	beq.n	8007000 <_fwalk_sglue+0x38>
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	47c0      	blx	r8
 8006ffe:	4306      	orrs	r6, r0
 8007000:	3568      	adds	r5, #104	@ 0x68
 8007002:	e7e9      	b.n	8006fd8 <_fwalk_sglue+0x10>

08007004 <iprintf>:
 8007004:	b40f      	push	{r0, r1, r2, r3}
 8007006:	b507      	push	{r0, r1, r2, lr}
 8007008:	4906      	ldr	r1, [pc, #24]	@ (8007024 <iprintf+0x20>)
 800700a:	ab04      	add	r3, sp, #16
 800700c:	6808      	ldr	r0, [r1, #0]
 800700e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007012:	6881      	ldr	r1, [r0, #8]
 8007014:	9301      	str	r3, [sp, #4]
 8007016:	f000 fadb 	bl	80075d0 <_vfiprintf_r>
 800701a:	b003      	add	sp, #12
 800701c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007020:	b004      	add	sp, #16
 8007022:	4770      	bx	lr
 8007024:	20000018 	.word	0x20000018

08007028 <_puts_r>:
 8007028:	6a03      	ldr	r3, [r0, #32]
 800702a:	b570      	push	{r4, r5, r6, lr}
 800702c:	6884      	ldr	r4, [r0, #8]
 800702e:	4605      	mov	r5, r0
 8007030:	460e      	mov	r6, r1
 8007032:	b90b      	cbnz	r3, 8007038 <_puts_r+0x10>
 8007034:	f7ff ffb0 	bl	8006f98 <__sinit>
 8007038:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800703a:	07db      	lsls	r3, r3, #31
 800703c:	d405      	bmi.n	800704a <_puts_r+0x22>
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	0598      	lsls	r0, r3, #22
 8007042:	d402      	bmi.n	800704a <_puts_r+0x22>
 8007044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007046:	f000 f99e 	bl	8007386 <__retarget_lock_acquire_recursive>
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	0719      	lsls	r1, r3, #28
 800704e:	d502      	bpl.n	8007056 <_puts_r+0x2e>
 8007050:	6923      	ldr	r3, [r4, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d135      	bne.n	80070c2 <_puts_r+0x9a>
 8007056:	4621      	mov	r1, r4
 8007058:	4628      	mov	r0, r5
 800705a:	f000 f8c5 	bl	80071e8 <__swsetup_r>
 800705e:	b380      	cbz	r0, 80070c2 <_puts_r+0x9a>
 8007060:	f04f 35ff 	mov.w	r5, #4294967295
 8007064:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007066:	07da      	lsls	r2, r3, #31
 8007068:	d405      	bmi.n	8007076 <_puts_r+0x4e>
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	059b      	lsls	r3, r3, #22
 800706e:	d402      	bmi.n	8007076 <_puts_r+0x4e>
 8007070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007072:	f000 f989 	bl	8007388 <__retarget_lock_release_recursive>
 8007076:	4628      	mov	r0, r5
 8007078:	bd70      	pop	{r4, r5, r6, pc}
 800707a:	2b00      	cmp	r3, #0
 800707c:	da04      	bge.n	8007088 <_puts_r+0x60>
 800707e:	69a2      	ldr	r2, [r4, #24]
 8007080:	429a      	cmp	r2, r3
 8007082:	dc17      	bgt.n	80070b4 <_puts_r+0x8c>
 8007084:	290a      	cmp	r1, #10
 8007086:	d015      	beq.n	80070b4 <_puts_r+0x8c>
 8007088:	6823      	ldr	r3, [r4, #0]
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	6022      	str	r2, [r4, #0]
 800708e:	7019      	strb	r1, [r3, #0]
 8007090:	68a3      	ldr	r3, [r4, #8]
 8007092:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007096:	3b01      	subs	r3, #1
 8007098:	60a3      	str	r3, [r4, #8]
 800709a:	2900      	cmp	r1, #0
 800709c:	d1ed      	bne.n	800707a <_puts_r+0x52>
 800709e:	2b00      	cmp	r3, #0
 80070a0:	da11      	bge.n	80070c6 <_puts_r+0x9e>
 80070a2:	4622      	mov	r2, r4
 80070a4:	210a      	movs	r1, #10
 80070a6:	4628      	mov	r0, r5
 80070a8:	f000 f85f 	bl	800716a <__swbuf_r>
 80070ac:	3001      	adds	r0, #1
 80070ae:	d0d7      	beq.n	8007060 <_puts_r+0x38>
 80070b0:	250a      	movs	r5, #10
 80070b2:	e7d7      	b.n	8007064 <_puts_r+0x3c>
 80070b4:	4622      	mov	r2, r4
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 f857 	bl	800716a <__swbuf_r>
 80070bc:	3001      	adds	r0, #1
 80070be:	d1e7      	bne.n	8007090 <_puts_r+0x68>
 80070c0:	e7ce      	b.n	8007060 <_puts_r+0x38>
 80070c2:	3e01      	subs	r6, #1
 80070c4:	e7e4      	b.n	8007090 <_puts_r+0x68>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	6022      	str	r2, [r4, #0]
 80070cc:	220a      	movs	r2, #10
 80070ce:	701a      	strb	r2, [r3, #0]
 80070d0:	e7ee      	b.n	80070b0 <_puts_r+0x88>
	...

080070d4 <puts>:
 80070d4:	4b02      	ldr	r3, [pc, #8]	@ (80070e0 <puts+0xc>)
 80070d6:	4601      	mov	r1, r0
 80070d8:	6818      	ldr	r0, [r3, #0]
 80070da:	f7ff bfa5 	b.w	8007028 <_puts_r>
 80070de:	bf00      	nop
 80070e0:	20000018 	.word	0x20000018

080070e4 <__sread>:
 80070e4:	b510      	push	{r4, lr}
 80070e6:	460c      	mov	r4, r1
 80070e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ec:	f000 f8fc 	bl	80072e8 <_read_r>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	bfab      	itete	ge
 80070f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80070f6:	89a3      	ldrhlt	r3, [r4, #12]
 80070f8:	181b      	addge	r3, r3, r0
 80070fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80070fe:	bfac      	ite	ge
 8007100:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007102:	81a3      	strhlt	r3, [r4, #12]
 8007104:	bd10      	pop	{r4, pc}

08007106 <__swrite>:
 8007106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800710a:	461f      	mov	r7, r3
 800710c:	898b      	ldrh	r3, [r1, #12]
 800710e:	05db      	lsls	r3, r3, #23
 8007110:	4605      	mov	r5, r0
 8007112:	460c      	mov	r4, r1
 8007114:	4616      	mov	r6, r2
 8007116:	d505      	bpl.n	8007124 <__swrite+0x1e>
 8007118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800711c:	2302      	movs	r3, #2
 800711e:	2200      	movs	r2, #0
 8007120:	f000 f8d0 	bl	80072c4 <_lseek_r>
 8007124:	89a3      	ldrh	r3, [r4, #12]
 8007126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800712a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800712e:	81a3      	strh	r3, [r4, #12]
 8007130:	4632      	mov	r2, r6
 8007132:	463b      	mov	r3, r7
 8007134:	4628      	mov	r0, r5
 8007136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800713a:	f000 b8e7 	b.w	800730c <_write_r>

0800713e <__sseek>:
 800713e:	b510      	push	{r4, lr}
 8007140:	460c      	mov	r4, r1
 8007142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007146:	f000 f8bd 	bl	80072c4 <_lseek_r>
 800714a:	1c43      	adds	r3, r0, #1
 800714c:	89a3      	ldrh	r3, [r4, #12]
 800714e:	bf15      	itete	ne
 8007150:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007152:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007156:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800715a:	81a3      	strheq	r3, [r4, #12]
 800715c:	bf18      	it	ne
 800715e:	81a3      	strhne	r3, [r4, #12]
 8007160:	bd10      	pop	{r4, pc}

08007162 <__sclose>:
 8007162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007166:	f000 b89d 	b.w	80072a4 <_close_r>

0800716a <__swbuf_r>:
 800716a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716c:	460e      	mov	r6, r1
 800716e:	4614      	mov	r4, r2
 8007170:	4605      	mov	r5, r0
 8007172:	b118      	cbz	r0, 800717c <__swbuf_r+0x12>
 8007174:	6a03      	ldr	r3, [r0, #32]
 8007176:	b90b      	cbnz	r3, 800717c <__swbuf_r+0x12>
 8007178:	f7ff ff0e 	bl	8006f98 <__sinit>
 800717c:	69a3      	ldr	r3, [r4, #24]
 800717e:	60a3      	str	r3, [r4, #8]
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	071a      	lsls	r2, r3, #28
 8007184:	d501      	bpl.n	800718a <__swbuf_r+0x20>
 8007186:	6923      	ldr	r3, [r4, #16]
 8007188:	b943      	cbnz	r3, 800719c <__swbuf_r+0x32>
 800718a:	4621      	mov	r1, r4
 800718c:	4628      	mov	r0, r5
 800718e:	f000 f82b 	bl	80071e8 <__swsetup_r>
 8007192:	b118      	cbz	r0, 800719c <__swbuf_r+0x32>
 8007194:	f04f 37ff 	mov.w	r7, #4294967295
 8007198:	4638      	mov	r0, r7
 800719a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800719c:	6823      	ldr	r3, [r4, #0]
 800719e:	6922      	ldr	r2, [r4, #16]
 80071a0:	1a98      	subs	r0, r3, r2
 80071a2:	6963      	ldr	r3, [r4, #20]
 80071a4:	b2f6      	uxtb	r6, r6
 80071a6:	4283      	cmp	r3, r0
 80071a8:	4637      	mov	r7, r6
 80071aa:	dc05      	bgt.n	80071b8 <__swbuf_r+0x4e>
 80071ac:	4621      	mov	r1, r4
 80071ae:	4628      	mov	r0, r5
 80071b0:	f000 fd36 	bl	8007c20 <_fflush_r>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d1ed      	bne.n	8007194 <__swbuf_r+0x2a>
 80071b8:	68a3      	ldr	r3, [r4, #8]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	60a3      	str	r3, [r4, #8]
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	6022      	str	r2, [r4, #0]
 80071c4:	701e      	strb	r6, [r3, #0]
 80071c6:	6962      	ldr	r2, [r4, #20]
 80071c8:	1c43      	adds	r3, r0, #1
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d004      	beq.n	80071d8 <__swbuf_r+0x6e>
 80071ce:	89a3      	ldrh	r3, [r4, #12]
 80071d0:	07db      	lsls	r3, r3, #31
 80071d2:	d5e1      	bpl.n	8007198 <__swbuf_r+0x2e>
 80071d4:	2e0a      	cmp	r6, #10
 80071d6:	d1df      	bne.n	8007198 <__swbuf_r+0x2e>
 80071d8:	4621      	mov	r1, r4
 80071da:	4628      	mov	r0, r5
 80071dc:	f000 fd20 	bl	8007c20 <_fflush_r>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d0d9      	beq.n	8007198 <__swbuf_r+0x2e>
 80071e4:	e7d6      	b.n	8007194 <__swbuf_r+0x2a>
	...

080071e8 <__swsetup_r>:
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4b29      	ldr	r3, [pc, #164]	@ (8007290 <__swsetup_r+0xa8>)
 80071ec:	4605      	mov	r5, r0
 80071ee:	6818      	ldr	r0, [r3, #0]
 80071f0:	460c      	mov	r4, r1
 80071f2:	b118      	cbz	r0, 80071fc <__swsetup_r+0x14>
 80071f4:	6a03      	ldr	r3, [r0, #32]
 80071f6:	b90b      	cbnz	r3, 80071fc <__swsetup_r+0x14>
 80071f8:	f7ff fece 	bl	8006f98 <__sinit>
 80071fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007200:	0719      	lsls	r1, r3, #28
 8007202:	d422      	bmi.n	800724a <__swsetup_r+0x62>
 8007204:	06da      	lsls	r2, r3, #27
 8007206:	d407      	bmi.n	8007218 <__swsetup_r+0x30>
 8007208:	2209      	movs	r2, #9
 800720a:	602a      	str	r2, [r5, #0]
 800720c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007210:	81a3      	strh	r3, [r4, #12]
 8007212:	f04f 30ff 	mov.w	r0, #4294967295
 8007216:	e033      	b.n	8007280 <__swsetup_r+0x98>
 8007218:	0758      	lsls	r0, r3, #29
 800721a:	d512      	bpl.n	8007242 <__swsetup_r+0x5a>
 800721c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800721e:	b141      	cbz	r1, 8007232 <__swsetup_r+0x4a>
 8007220:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007224:	4299      	cmp	r1, r3
 8007226:	d002      	beq.n	800722e <__swsetup_r+0x46>
 8007228:	4628      	mov	r0, r5
 800722a:	f000 f8af 	bl	800738c <_free_r>
 800722e:	2300      	movs	r3, #0
 8007230:	6363      	str	r3, [r4, #52]	@ 0x34
 8007232:	89a3      	ldrh	r3, [r4, #12]
 8007234:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007238:	81a3      	strh	r3, [r4, #12]
 800723a:	2300      	movs	r3, #0
 800723c:	6063      	str	r3, [r4, #4]
 800723e:	6923      	ldr	r3, [r4, #16]
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	f043 0308 	orr.w	r3, r3, #8
 8007248:	81a3      	strh	r3, [r4, #12]
 800724a:	6923      	ldr	r3, [r4, #16]
 800724c:	b94b      	cbnz	r3, 8007262 <__swsetup_r+0x7a>
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007258:	d003      	beq.n	8007262 <__swsetup_r+0x7a>
 800725a:	4621      	mov	r1, r4
 800725c:	4628      	mov	r0, r5
 800725e:	f000 fd2d 	bl	8007cbc <__smakebuf_r>
 8007262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007266:	f013 0201 	ands.w	r2, r3, #1
 800726a:	d00a      	beq.n	8007282 <__swsetup_r+0x9a>
 800726c:	2200      	movs	r2, #0
 800726e:	60a2      	str	r2, [r4, #8]
 8007270:	6962      	ldr	r2, [r4, #20]
 8007272:	4252      	negs	r2, r2
 8007274:	61a2      	str	r2, [r4, #24]
 8007276:	6922      	ldr	r2, [r4, #16]
 8007278:	b942      	cbnz	r2, 800728c <__swsetup_r+0xa4>
 800727a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800727e:	d1c5      	bne.n	800720c <__swsetup_r+0x24>
 8007280:	bd38      	pop	{r3, r4, r5, pc}
 8007282:	0799      	lsls	r1, r3, #30
 8007284:	bf58      	it	pl
 8007286:	6962      	ldrpl	r2, [r4, #20]
 8007288:	60a2      	str	r2, [r4, #8]
 800728a:	e7f4      	b.n	8007276 <__swsetup_r+0x8e>
 800728c:	2000      	movs	r0, #0
 800728e:	e7f7      	b.n	8007280 <__swsetup_r+0x98>
 8007290:	20000018 	.word	0x20000018

08007294 <memset>:
 8007294:	4402      	add	r2, r0
 8007296:	4603      	mov	r3, r0
 8007298:	4293      	cmp	r3, r2
 800729a:	d100      	bne.n	800729e <memset+0xa>
 800729c:	4770      	bx	lr
 800729e:	f803 1b01 	strb.w	r1, [r3], #1
 80072a2:	e7f9      	b.n	8007298 <memset+0x4>

080072a4 <_close_r>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	4d06      	ldr	r5, [pc, #24]	@ (80072c0 <_close_r+0x1c>)
 80072a8:	2300      	movs	r3, #0
 80072aa:	4604      	mov	r4, r0
 80072ac:	4608      	mov	r0, r1
 80072ae:	602b      	str	r3, [r5, #0]
 80072b0:	f7fa fdca 	bl	8001e48 <_close>
 80072b4:	1c43      	adds	r3, r0, #1
 80072b6:	d102      	bne.n	80072be <_close_r+0x1a>
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	b103      	cbz	r3, 80072be <_close_r+0x1a>
 80072bc:	6023      	str	r3, [r4, #0]
 80072be:	bd38      	pop	{r3, r4, r5, pc}
 80072c0:	200003d4 	.word	0x200003d4

080072c4 <_lseek_r>:
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	4d07      	ldr	r5, [pc, #28]	@ (80072e4 <_lseek_r+0x20>)
 80072c8:	4604      	mov	r4, r0
 80072ca:	4608      	mov	r0, r1
 80072cc:	4611      	mov	r1, r2
 80072ce:	2200      	movs	r2, #0
 80072d0:	602a      	str	r2, [r5, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	f7fa fddf 	bl	8001e96 <_lseek>
 80072d8:	1c43      	adds	r3, r0, #1
 80072da:	d102      	bne.n	80072e2 <_lseek_r+0x1e>
 80072dc:	682b      	ldr	r3, [r5, #0]
 80072de:	b103      	cbz	r3, 80072e2 <_lseek_r+0x1e>
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	bd38      	pop	{r3, r4, r5, pc}
 80072e4:	200003d4 	.word	0x200003d4

080072e8 <_read_r>:
 80072e8:	b538      	push	{r3, r4, r5, lr}
 80072ea:	4d07      	ldr	r5, [pc, #28]	@ (8007308 <_read_r+0x20>)
 80072ec:	4604      	mov	r4, r0
 80072ee:	4608      	mov	r0, r1
 80072f0:	4611      	mov	r1, r2
 80072f2:	2200      	movs	r2, #0
 80072f4:	602a      	str	r2, [r5, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	f7fa fd89 	bl	8001e0e <_read>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	d102      	bne.n	8007306 <_read_r+0x1e>
 8007300:	682b      	ldr	r3, [r5, #0]
 8007302:	b103      	cbz	r3, 8007306 <_read_r+0x1e>
 8007304:	6023      	str	r3, [r4, #0]
 8007306:	bd38      	pop	{r3, r4, r5, pc}
 8007308:	200003d4 	.word	0x200003d4

0800730c <_write_r>:
 800730c:	b538      	push	{r3, r4, r5, lr}
 800730e:	4d07      	ldr	r5, [pc, #28]	@ (800732c <_write_r+0x20>)
 8007310:	4604      	mov	r4, r0
 8007312:	4608      	mov	r0, r1
 8007314:	4611      	mov	r1, r2
 8007316:	2200      	movs	r2, #0
 8007318:	602a      	str	r2, [r5, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	f7f9 ff58 	bl	80011d0 <_write>
 8007320:	1c43      	adds	r3, r0, #1
 8007322:	d102      	bne.n	800732a <_write_r+0x1e>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	b103      	cbz	r3, 800732a <_write_r+0x1e>
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	bd38      	pop	{r3, r4, r5, pc}
 800732c:	200003d4 	.word	0x200003d4

08007330 <__errno>:
 8007330:	4b01      	ldr	r3, [pc, #4]	@ (8007338 <__errno+0x8>)
 8007332:	6818      	ldr	r0, [r3, #0]
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	20000018 	.word	0x20000018

0800733c <__libc_init_array>:
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	4d0d      	ldr	r5, [pc, #52]	@ (8007374 <__libc_init_array+0x38>)
 8007340:	4c0d      	ldr	r4, [pc, #52]	@ (8007378 <__libc_init_array+0x3c>)
 8007342:	1b64      	subs	r4, r4, r5
 8007344:	10a4      	asrs	r4, r4, #2
 8007346:	2600      	movs	r6, #0
 8007348:	42a6      	cmp	r6, r4
 800734a:	d109      	bne.n	8007360 <__libc_init_array+0x24>
 800734c:	4d0b      	ldr	r5, [pc, #44]	@ (800737c <__libc_init_array+0x40>)
 800734e:	4c0c      	ldr	r4, [pc, #48]	@ (8007380 <__libc_init_array+0x44>)
 8007350:	f001 f88e 	bl	8008470 <_init>
 8007354:	1b64      	subs	r4, r4, r5
 8007356:	10a4      	asrs	r4, r4, #2
 8007358:	2600      	movs	r6, #0
 800735a:	42a6      	cmp	r6, r4
 800735c:	d105      	bne.n	800736a <__libc_init_array+0x2e>
 800735e:	bd70      	pop	{r4, r5, r6, pc}
 8007360:	f855 3b04 	ldr.w	r3, [r5], #4
 8007364:	4798      	blx	r3
 8007366:	3601      	adds	r6, #1
 8007368:	e7ee      	b.n	8007348 <__libc_init_array+0xc>
 800736a:	f855 3b04 	ldr.w	r3, [r5], #4
 800736e:	4798      	blx	r3
 8007370:	3601      	adds	r6, #1
 8007372:	e7f2      	b.n	800735a <__libc_init_array+0x1e>
 8007374:	080086b8 	.word	0x080086b8
 8007378:	080086b8 	.word	0x080086b8
 800737c:	080086b8 	.word	0x080086b8
 8007380:	080086bc 	.word	0x080086bc

08007384 <__retarget_lock_init_recursive>:
 8007384:	4770      	bx	lr

08007386 <__retarget_lock_acquire_recursive>:
 8007386:	4770      	bx	lr

08007388 <__retarget_lock_release_recursive>:
 8007388:	4770      	bx	lr
	...

0800738c <_free_r>:
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	4605      	mov	r5, r0
 8007390:	2900      	cmp	r1, #0
 8007392:	d041      	beq.n	8007418 <_free_r+0x8c>
 8007394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007398:	1f0c      	subs	r4, r1, #4
 800739a:	2b00      	cmp	r3, #0
 800739c:	bfb8      	it	lt
 800739e:	18e4      	addlt	r4, r4, r3
 80073a0:	f000 f8e0 	bl	8007564 <__malloc_lock>
 80073a4:	4a1d      	ldr	r2, [pc, #116]	@ (800741c <_free_r+0x90>)
 80073a6:	6813      	ldr	r3, [r2, #0]
 80073a8:	b933      	cbnz	r3, 80073b8 <_free_r+0x2c>
 80073aa:	6063      	str	r3, [r4, #4]
 80073ac:	6014      	str	r4, [r2, #0]
 80073ae:	4628      	mov	r0, r5
 80073b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073b4:	f000 b8dc 	b.w	8007570 <__malloc_unlock>
 80073b8:	42a3      	cmp	r3, r4
 80073ba:	d908      	bls.n	80073ce <_free_r+0x42>
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	1821      	adds	r1, r4, r0
 80073c0:	428b      	cmp	r3, r1
 80073c2:	bf01      	itttt	eq
 80073c4:	6819      	ldreq	r1, [r3, #0]
 80073c6:	685b      	ldreq	r3, [r3, #4]
 80073c8:	1809      	addeq	r1, r1, r0
 80073ca:	6021      	streq	r1, [r4, #0]
 80073cc:	e7ed      	b.n	80073aa <_free_r+0x1e>
 80073ce:	461a      	mov	r2, r3
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	b10b      	cbz	r3, 80073d8 <_free_r+0x4c>
 80073d4:	42a3      	cmp	r3, r4
 80073d6:	d9fa      	bls.n	80073ce <_free_r+0x42>
 80073d8:	6811      	ldr	r1, [r2, #0]
 80073da:	1850      	adds	r0, r2, r1
 80073dc:	42a0      	cmp	r0, r4
 80073de:	d10b      	bne.n	80073f8 <_free_r+0x6c>
 80073e0:	6820      	ldr	r0, [r4, #0]
 80073e2:	4401      	add	r1, r0
 80073e4:	1850      	adds	r0, r2, r1
 80073e6:	4283      	cmp	r3, r0
 80073e8:	6011      	str	r1, [r2, #0]
 80073ea:	d1e0      	bne.n	80073ae <_free_r+0x22>
 80073ec:	6818      	ldr	r0, [r3, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	6053      	str	r3, [r2, #4]
 80073f2:	4408      	add	r0, r1
 80073f4:	6010      	str	r0, [r2, #0]
 80073f6:	e7da      	b.n	80073ae <_free_r+0x22>
 80073f8:	d902      	bls.n	8007400 <_free_r+0x74>
 80073fa:	230c      	movs	r3, #12
 80073fc:	602b      	str	r3, [r5, #0]
 80073fe:	e7d6      	b.n	80073ae <_free_r+0x22>
 8007400:	6820      	ldr	r0, [r4, #0]
 8007402:	1821      	adds	r1, r4, r0
 8007404:	428b      	cmp	r3, r1
 8007406:	bf04      	itt	eq
 8007408:	6819      	ldreq	r1, [r3, #0]
 800740a:	685b      	ldreq	r3, [r3, #4]
 800740c:	6063      	str	r3, [r4, #4]
 800740e:	bf04      	itt	eq
 8007410:	1809      	addeq	r1, r1, r0
 8007412:	6021      	streq	r1, [r4, #0]
 8007414:	6054      	str	r4, [r2, #4]
 8007416:	e7ca      	b.n	80073ae <_free_r+0x22>
 8007418:	bd38      	pop	{r3, r4, r5, pc}
 800741a:	bf00      	nop
 800741c:	200003e0 	.word	0x200003e0

08007420 <sbrk_aligned>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	4e0f      	ldr	r6, [pc, #60]	@ (8007460 <sbrk_aligned+0x40>)
 8007424:	460c      	mov	r4, r1
 8007426:	6831      	ldr	r1, [r6, #0]
 8007428:	4605      	mov	r5, r0
 800742a:	b911      	cbnz	r1, 8007432 <sbrk_aligned+0x12>
 800742c:	f000 fca4 	bl	8007d78 <_sbrk_r>
 8007430:	6030      	str	r0, [r6, #0]
 8007432:	4621      	mov	r1, r4
 8007434:	4628      	mov	r0, r5
 8007436:	f000 fc9f 	bl	8007d78 <_sbrk_r>
 800743a:	1c43      	adds	r3, r0, #1
 800743c:	d103      	bne.n	8007446 <sbrk_aligned+0x26>
 800743e:	f04f 34ff 	mov.w	r4, #4294967295
 8007442:	4620      	mov	r0, r4
 8007444:	bd70      	pop	{r4, r5, r6, pc}
 8007446:	1cc4      	adds	r4, r0, #3
 8007448:	f024 0403 	bic.w	r4, r4, #3
 800744c:	42a0      	cmp	r0, r4
 800744e:	d0f8      	beq.n	8007442 <sbrk_aligned+0x22>
 8007450:	1a21      	subs	r1, r4, r0
 8007452:	4628      	mov	r0, r5
 8007454:	f000 fc90 	bl	8007d78 <_sbrk_r>
 8007458:	3001      	adds	r0, #1
 800745a:	d1f2      	bne.n	8007442 <sbrk_aligned+0x22>
 800745c:	e7ef      	b.n	800743e <sbrk_aligned+0x1e>
 800745e:	bf00      	nop
 8007460:	200003dc 	.word	0x200003dc

08007464 <_malloc_r>:
 8007464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007468:	1ccd      	adds	r5, r1, #3
 800746a:	f025 0503 	bic.w	r5, r5, #3
 800746e:	3508      	adds	r5, #8
 8007470:	2d0c      	cmp	r5, #12
 8007472:	bf38      	it	cc
 8007474:	250c      	movcc	r5, #12
 8007476:	2d00      	cmp	r5, #0
 8007478:	4606      	mov	r6, r0
 800747a:	db01      	blt.n	8007480 <_malloc_r+0x1c>
 800747c:	42a9      	cmp	r1, r5
 800747e:	d904      	bls.n	800748a <_malloc_r+0x26>
 8007480:	230c      	movs	r3, #12
 8007482:	6033      	str	r3, [r6, #0]
 8007484:	2000      	movs	r0, #0
 8007486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800748a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007560 <_malloc_r+0xfc>
 800748e:	f000 f869 	bl	8007564 <__malloc_lock>
 8007492:	f8d8 3000 	ldr.w	r3, [r8]
 8007496:	461c      	mov	r4, r3
 8007498:	bb44      	cbnz	r4, 80074ec <_malloc_r+0x88>
 800749a:	4629      	mov	r1, r5
 800749c:	4630      	mov	r0, r6
 800749e:	f7ff ffbf 	bl	8007420 <sbrk_aligned>
 80074a2:	1c43      	adds	r3, r0, #1
 80074a4:	4604      	mov	r4, r0
 80074a6:	d158      	bne.n	800755a <_malloc_r+0xf6>
 80074a8:	f8d8 4000 	ldr.w	r4, [r8]
 80074ac:	4627      	mov	r7, r4
 80074ae:	2f00      	cmp	r7, #0
 80074b0:	d143      	bne.n	800753a <_malloc_r+0xd6>
 80074b2:	2c00      	cmp	r4, #0
 80074b4:	d04b      	beq.n	800754e <_malloc_r+0xea>
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	4639      	mov	r1, r7
 80074ba:	4630      	mov	r0, r6
 80074bc:	eb04 0903 	add.w	r9, r4, r3
 80074c0:	f000 fc5a 	bl	8007d78 <_sbrk_r>
 80074c4:	4581      	cmp	r9, r0
 80074c6:	d142      	bne.n	800754e <_malloc_r+0xea>
 80074c8:	6821      	ldr	r1, [r4, #0]
 80074ca:	1a6d      	subs	r5, r5, r1
 80074cc:	4629      	mov	r1, r5
 80074ce:	4630      	mov	r0, r6
 80074d0:	f7ff ffa6 	bl	8007420 <sbrk_aligned>
 80074d4:	3001      	adds	r0, #1
 80074d6:	d03a      	beq.n	800754e <_malloc_r+0xea>
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	442b      	add	r3, r5
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	f8d8 3000 	ldr.w	r3, [r8]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	bb62      	cbnz	r2, 8007540 <_malloc_r+0xdc>
 80074e6:	f8c8 7000 	str.w	r7, [r8]
 80074ea:	e00f      	b.n	800750c <_malloc_r+0xa8>
 80074ec:	6822      	ldr	r2, [r4, #0]
 80074ee:	1b52      	subs	r2, r2, r5
 80074f0:	d420      	bmi.n	8007534 <_malloc_r+0xd0>
 80074f2:	2a0b      	cmp	r2, #11
 80074f4:	d917      	bls.n	8007526 <_malloc_r+0xc2>
 80074f6:	1961      	adds	r1, r4, r5
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	6025      	str	r5, [r4, #0]
 80074fc:	bf18      	it	ne
 80074fe:	6059      	strne	r1, [r3, #4]
 8007500:	6863      	ldr	r3, [r4, #4]
 8007502:	bf08      	it	eq
 8007504:	f8c8 1000 	streq.w	r1, [r8]
 8007508:	5162      	str	r2, [r4, r5]
 800750a:	604b      	str	r3, [r1, #4]
 800750c:	4630      	mov	r0, r6
 800750e:	f000 f82f 	bl	8007570 <__malloc_unlock>
 8007512:	f104 000b 	add.w	r0, r4, #11
 8007516:	1d23      	adds	r3, r4, #4
 8007518:	f020 0007 	bic.w	r0, r0, #7
 800751c:	1ac2      	subs	r2, r0, r3
 800751e:	bf1c      	itt	ne
 8007520:	1a1b      	subne	r3, r3, r0
 8007522:	50a3      	strne	r3, [r4, r2]
 8007524:	e7af      	b.n	8007486 <_malloc_r+0x22>
 8007526:	6862      	ldr	r2, [r4, #4]
 8007528:	42a3      	cmp	r3, r4
 800752a:	bf0c      	ite	eq
 800752c:	f8c8 2000 	streq.w	r2, [r8]
 8007530:	605a      	strne	r2, [r3, #4]
 8007532:	e7eb      	b.n	800750c <_malloc_r+0xa8>
 8007534:	4623      	mov	r3, r4
 8007536:	6864      	ldr	r4, [r4, #4]
 8007538:	e7ae      	b.n	8007498 <_malloc_r+0x34>
 800753a:	463c      	mov	r4, r7
 800753c:	687f      	ldr	r7, [r7, #4]
 800753e:	e7b6      	b.n	80074ae <_malloc_r+0x4a>
 8007540:	461a      	mov	r2, r3
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	42a3      	cmp	r3, r4
 8007546:	d1fb      	bne.n	8007540 <_malloc_r+0xdc>
 8007548:	2300      	movs	r3, #0
 800754a:	6053      	str	r3, [r2, #4]
 800754c:	e7de      	b.n	800750c <_malloc_r+0xa8>
 800754e:	230c      	movs	r3, #12
 8007550:	6033      	str	r3, [r6, #0]
 8007552:	4630      	mov	r0, r6
 8007554:	f000 f80c 	bl	8007570 <__malloc_unlock>
 8007558:	e794      	b.n	8007484 <_malloc_r+0x20>
 800755a:	6005      	str	r5, [r0, #0]
 800755c:	e7d6      	b.n	800750c <_malloc_r+0xa8>
 800755e:	bf00      	nop
 8007560:	200003e0 	.word	0x200003e0

08007564 <__malloc_lock>:
 8007564:	4801      	ldr	r0, [pc, #4]	@ (800756c <__malloc_lock+0x8>)
 8007566:	f7ff bf0e 	b.w	8007386 <__retarget_lock_acquire_recursive>
 800756a:	bf00      	nop
 800756c:	200003d8 	.word	0x200003d8

08007570 <__malloc_unlock>:
 8007570:	4801      	ldr	r0, [pc, #4]	@ (8007578 <__malloc_unlock+0x8>)
 8007572:	f7ff bf09 	b.w	8007388 <__retarget_lock_release_recursive>
 8007576:	bf00      	nop
 8007578:	200003d8 	.word	0x200003d8

0800757c <__sfputc_r>:
 800757c:	6893      	ldr	r3, [r2, #8]
 800757e:	3b01      	subs	r3, #1
 8007580:	2b00      	cmp	r3, #0
 8007582:	b410      	push	{r4}
 8007584:	6093      	str	r3, [r2, #8]
 8007586:	da08      	bge.n	800759a <__sfputc_r+0x1e>
 8007588:	6994      	ldr	r4, [r2, #24]
 800758a:	42a3      	cmp	r3, r4
 800758c:	db01      	blt.n	8007592 <__sfputc_r+0x16>
 800758e:	290a      	cmp	r1, #10
 8007590:	d103      	bne.n	800759a <__sfputc_r+0x1e>
 8007592:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007596:	f7ff bde8 	b.w	800716a <__swbuf_r>
 800759a:	6813      	ldr	r3, [r2, #0]
 800759c:	1c58      	adds	r0, r3, #1
 800759e:	6010      	str	r0, [r2, #0]
 80075a0:	7019      	strb	r1, [r3, #0]
 80075a2:	4608      	mov	r0, r1
 80075a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <__sfputs_r>:
 80075aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ac:	4606      	mov	r6, r0
 80075ae:	460f      	mov	r7, r1
 80075b0:	4614      	mov	r4, r2
 80075b2:	18d5      	adds	r5, r2, r3
 80075b4:	42ac      	cmp	r4, r5
 80075b6:	d101      	bne.n	80075bc <__sfputs_r+0x12>
 80075b8:	2000      	movs	r0, #0
 80075ba:	e007      	b.n	80075cc <__sfputs_r+0x22>
 80075bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c0:	463a      	mov	r2, r7
 80075c2:	4630      	mov	r0, r6
 80075c4:	f7ff ffda 	bl	800757c <__sfputc_r>
 80075c8:	1c43      	adds	r3, r0, #1
 80075ca:	d1f3      	bne.n	80075b4 <__sfputs_r+0xa>
 80075cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075d0 <_vfiprintf_r>:
 80075d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d4:	460d      	mov	r5, r1
 80075d6:	b09d      	sub	sp, #116	@ 0x74
 80075d8:	4614      	mov	r4, r2
 80075da:	4698      	mov	r8, r3
 80075dc:	4606      	mov	r6, r0
 80075de:	b118      	cbz	r0, 80075e8 <_vfiprintf_r+0x18>
 80075e0:	6a03      	ldr	r3, [r0, #32]
 80075e2:	b90b      	cbnz	r3, 80075e8 <_vfiprintf_r+0x18>
 80075e4:	f7ff fcd8 	bl	8006f98 <__sinit>
 80075e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075ea:	07d9      	lsls	r1, r3, #31
 80075ec:	d405      	bmi.n	80075fa <_vfiprintf_r+0x2a>
 80075ee:	89ab      	ldrh	r3, [r5, #12]
 80075f0:	059a      	lsls	r2, r3, #22
 80075f2:	d402      	bmi.n	80075fa <_vfiprintf_r+0x2a>
 80075f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075f6:	f7ff fec6 	bl	8007386 <__retarget_lock_acquire_recursive>
 80075fa:	89ab      	ldrh	r3, [r5, #12]
 80075fc:	071b      	lsls	r3, r3, #28
 80075fe:	d501      	bpl.n	8007604 <_vfiprintf_r+0x34>
 8007600:	692b      	ldr	r3, [r5, #16]
 8007602:	b99b      	cbnz	r3, 800762c <_vfiprintf_r+0x5c>
 8007604:	4629      	mov	r1, r5
 8007606:	4630      	mov	r0, r6
 8007608:	f7ff fdee 	bl	80071e8 <__swsetup_r>
 800760c:	b170      	cbz	r0, 800762c <_vfiprintf_r+0x5c>
 800760e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007610:	07dc      	lsls	r4, r3, #31
 8007612:	d504      	bpl.n	800761e <_vfiprintf_r+0x4e>
 8007614:	f04f 30ff 	mov.w	r0, #4294967295
 8007618:	b01d      	add	sp, #116	@ 0x74
 800761a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800761e:	89ab      	ldrh	r3, [r5, #12]
 8007620:	0598      	lsls	r0, r3, #22
 8007622:	d4f7      	bmi.n	8007614 <_vfiprintf_r+0x44>
 8007624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007626:	f7ff feaf 	bl	8007388 <__retarget_lock_release_recursive>
 800762a:	e7f3      	b.n	8007614 <_vfiprintf_r+0x44>
 800762c:	2300      	movs	r3, #0
 800762e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007630:	2320      	movs	r3, #32
 8007632:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007636:	f8cd 800c 	str.w	r8, [sp, #12]
 800763a:	2330      	movs	r3, #48	@ 0x30
 800763c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80077ec <_vfiprintf_r+0x21c>
 8007640:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007644:	f04f 0901 	mov.w	r9, #1
 8007648:	4623      	mov	r3, r4
 800764a:	469a      	mov	sl, r3
 800764c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007650:	b10a      	cbz	r2, 8007656 <_vfiprintf_r+0x86>
 8007652:	2a25      	cmp	r2, #37	@ 0x25
 8007654:	d1f9      	bne.n	800764a <_vfiprintf_r+0x7a>
 8007656:	ebba 0b04 	subs.w	fp, sl, r4
 800765a:	d00b      	beq.n	8007674 <_vfiprintf_r+0xa4>
 800765c:	465b      	mov	r3, fp
 800765e:	4622      	mov	r2, r4
 8007660:	4629      	mov	r1, r5
 8007662:	4630      	mov	r0, r6
 8007664:	f7ff ffa1 	bl	80075aa <__sfputs_r>
 8007668:	3001      	adds	r0, #1
 800766a:	f000 80a7 	beq.w	80077bc <_vfiprintf_r+0x1ec>
 800766e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007670:	445a      	add	r2, fp
 8007672:	9209      	str	r2, [sp, #36]	@ 0x24
 8007674:	f89a 3000 	ldrb.w	r3, [sl]
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 809f 	beq.w	80077bc <_vfiprintf_r+0x1ec>
 800767e:	2300      	movs	r3, #0
 8007680:	f04f 32ff 	mov.w	r2, #4294967295
 8007684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007688:	f10a 0a01 	add.w	sl, sl, #1
 800768c:	9304      	str	r3, [sp, #16]
 800768e:	9307      	str	r3, [sp, #28]
 8007690:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007694:	931a      	str	r3, [sp, #104]	@ 0x68
 8007696:	4654      	mov	r4, sl
 8007698:	2205      	movs	r2, #5
 800769a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800769e:	4853      	ldr	r0, [pc, #332]	@ (80077ec <_vfiprintf_r+0x21c>)
 80076a0:	f7f8 fd96 	bl	80001d0 <memchr>
 80076a4:	9a04      	ldr	r2, [sp, #16]
 80076a6:	b9d8      	cbnz	r0, 80076e0 <_vfiprintf_r+0x110>
 80076a8:	06d1      	lsls	r1, r2, #27
 80076aa:	bf44      	itt	mi
 80076ac:	2320      	movmi	r3, #32
 80076ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076b2:	0713      	lsls	r3, r2, #28
 80076b4:	bf44      	itt	mi
 80076b6:	232b      	movmi	r3, #43	@ 0x2b
 80076b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076bc:	f89a 3000 	ldrb.w	r3, [sl]
 80076c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80076c2:	d015      	beq.n	80076f0 <_vfiprintf_r+0x120>
 80076c4:	9a07      	ldr	r2, [sp, #28]
 80076c6:	4654      	mov	r4, sl
 80076c8:	2000      	movs	r0, #0
 80076ca:	f04f 0c0a 	mov.w	ip, #10
 80076ce:	4621      	mov	r1, r4
 80076d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076d4:	3b30      	subs	r3, #48	@ 0x30
 80076d6:	2b09      	cmp	r3, #9
 80076d8:	d94b      	bls.n	8007772 <_vfiprintf_r+0x1a2>
 80076da:	b1b0      	cbz	r0, 800770a <_vfiprintf_r+0x13a>
 80076dc:	9207      	str	r2, [sp, #28]
 80076de:	e014      	b.n	800770a <_vfiprintf_r+0x13a>
 80076e0:	eba0 0308 	sub.w	r3, r0, r8
 80076e4:	fa09 f303 	lsl.w	r3, r9, r3
 80076e8:	4313      	orrs	r3, r2
 80076ea:	9304      	str	r3, [sp, #16]
 80076ec:	46a2      	mov	sl, r4
 80076ee:	e7d2      	b.n	8007696 <_vfiprintf_r+0xc6>
 80076f0:	9b03      	ldr	r3, [sp, #12]
 80076f2:	1d19      	adds	r1, r3, #4
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	9103      	str	r1, [sp, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	bfbb      	ittet	lt
 80076fc:	425b      	neglt	r3, r3
 80076fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007702:	9307      	strge	r3, [sp, #28]
 8007704:	9307      	strlt	r3, [sp, #28]
 8007706:	bfb8      	it	lt
 8007708:	9204      	strlt	r2, [sp, #16]
 800770a:	7823      	ldrb	r3, [r4, #0]
 800770c:	2b2e      	cmp	r3, #46	@ 0x2e
 800770e:	d10a      	bne.n	8007726 <_vfiprintf_r+0x156>
 8007710:	7863      	ldrb	r3, [r4, #1]
 8007712:	2b2a      	cmp	r3, #42	@ 0x2a
 8007714:	d132      	bne.n	800777c <_vfiprintf_r+0x1ac>
 8007716:	9b03      	ldr	r3, [sp, #12]
 8007718:	1d1a      	adds	r2, r3, #4
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	9203      	str	r2, [sp, #12]
 800771e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007722:	3402      	adds	r4, #2
 8007724:	9305      	str	r3, [sp, #20]
 8007726:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80077fc <_vfiprintf_r+0x22c>
 800772a:	7821      	ldrb	r1, [r4, #0]
 800772c:	2203      	movs	r2, #3
 800772e:	4650      	mov	r0, sl
 8007730:	f7f8 fd4e 	bl	80001d0 <memchr>
 8007734:	b138      	cbz	r0, 8007746 <_vfiprintf_r+0x176>
 8007736:	9b04      	ldr	r3, [sp, #16]
 8007738:	eba0 000a 	sub.w	r0, r0, sl
 800773c:	2240      	movs	r2, #64	@ 0x40
 800773e:	4082      	lsls	r2, r0
 8007740:	4313      	orrs	r3, r2
 8007742:	3401      	adds	r4, #1
 8007744:	9304      	str	r3, [sp, #16]
 8007746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800774a:	4829      	ldr	r0, [pc, #164]	@ (80077f0 <_vfiprintf_r+0x220>)
 800774c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007750:	2206      	movs	r2, #6
 8007752:	f7f8 fd3d 	bl	80001d0 <memchr>
 8007756:	2800      	cmp	r0, #0
 8007758:	d03f      	beq.n	80077da <_vfiprintf_r+0x20a>
 800775a:	4b26      	ldr	r3, [pc, #152]	@ (80077f4 <_vfiprintf_r+0x224>)
 800775c:	bb1b      	cbnz	r3, 80077a6 <_vfiprintf_r+0x1d6>
 800775e:	9b03      	ldr	r3, [sp, #12]
 8007760:	3307      	adds	r3, #7
 8007762:	f023 0307 	bic.w	r3, r3, #7
 8007766:	3308      	adds	r3, #8
 8007768:	9303      	str	r3, [sp, #12]
 800776a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800776c:	443b      	add	r3, r7
 800776e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007770:	e76a      	b.n	8007648 <_vfiprintf_r+0x78>
 8007772:	fb0c 3202 	mla	r2, ip, r2, r3
 8007776:	460c      	mov	r4, r1
 8007778:	2001      	movs	r0, #1
 800777a:	e7a8      	b.n	80076ce <_vfiprintf_r+0xfe>
 800777c:	2300      	movs	r3, #0
 800777e:	3401      	adds	r4, #1
 8007780:	9305      	str	r3, [sp, #20]
 8007782:	4619      	mov	r1, r3
 8007784:	f04f 0c0a 	mov.w	ip, #10
 8007788:	4620      	mov	r0, r4
 800778a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800778e:	3a30      	subs	r2, #48	@ 0x30
 8007790:	2a09      	cmp	r2, #9
 8007792:	d903      	bls.n	800779c <_vfiprintf_r+0x1cc>
 8007794:	2b00      	cmp	r3, #0
 8007796:	d0c6      	beq.n	8007726 <_vfiprintf_r+0x156>
 8007798:	9105      	str	r1, [sp, #20]
 800779a:	e7c4      	b.n	8007726 <_vfiprintf_r+0x156>
 800779c:	fb0c 2101 	mla	r1, ip, r1, r2
 80077a0:	4604      	mov	r4, r0
 80077a2:	2301      	movs	r3, #1
 80077a4:	e7f0      	b.n	8007788 <_vfiprintf_r+0x1b8>
 80077a6:	ab03      	add	r3, sp, #12
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	462a      	mov	r2, r5
 80077ac:	4b12      	ldr	r3, [pc, #72]	@ (80077f8 <_vfiprintf_r+0x228>)
 80077ae:	a904      	add	r1, sp, #16
 80077b0:	4630      	mov	r0, r6
 80077b2:	f3af 8000 	nop.w
 80077b6:	4607      	mov	r7, r0
 80077b8:	1c78      	adds	r0, r7, #1
 80077ba:	d1d6      	bne.n	800776a <_vfiprintf_r+0x19a>
 80077bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077be:	07d9      	lsls	r1, r3, #31
 80077c0:	d405      	bmi.n	80077ce <_vfiprintf_r+0x1fe>
 80077c2:	89ab      	ldrh	r3, [r5, #12]
 80077c4:	059a      	lsls	r2, r3, #22
 80077c6:	d402      	bmi.n	80077ce <_vfiprintf_r+0x1fe>
 80077c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077ca:	f7ff fddd 	bl	8007388 <__retarget_lock_release_recursive>
 80077ce:	89ab      	ldrh	r3, [r5, #12]
 80077d0:	065b      	lsls	r3, r3, #25
 80077d2:	f53f af1f 	bmi.w	8007614 <_vfiprintf_r+0x44>
 80077d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077d8:	e71e      	b.n	8007618 <_vfiprintf_r+0x48>
 80077da:	ab03      	add	r3, sp, #12
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	462a      	mov	r2, r5
 80077e0:	4b05      	ldr	r3, [pc, #20]	@ (80077f8 <_vfiprintf_r+0x228>)
 80077e2:	a904      	add	r1, sp, #16
 80077e4:	4630      	mov	r0, r6
 80077e6:	f000 f879 	bl	80078dc <_printf_i>
 80077ea:	e7e4      	b.n	80077b6 <_vfiprintf_r+0x1e6>
 80077ec:	080085fc 	.word	0x080085fc
 80077f0:	08008606 	.word	0x08008606
 80077f4:	00000000 	.word	0x00000000
 80077f8:	080075ab 	.word	0x080075ab
 80077fc:	08008602 	.word	0x08008602

08007800 <_printf_common>:
 8007800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007804:	4616      	mov	r6, r2
 8007806:	4698      	mov	r8, r3
 8007808:	688a      	ldr	r2, [r1, #8]
 800780a:	690b      	ldr	r3, [r1, #16]
 800780c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007810:	4293      	cmp	r3, r2
 8007812:	bfb8      	it	lt
 8007814:	4613      	movlt	r3, r2
 8007816:	6033      	str	r3, [r6, #0]
 8007818:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800781c:	4607      	mov	r7, r0
 800781e:	460c      	mov	r4, r1
 8007820:	b10a      	cbz	r2, 8007826 <_printf_common+0x26>
 8007822:	3301      	adds	r3, #1
 8007824:	6033      	str	r3, [r6, #0]
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	0699      	lsls	r1, r3, #26
 800782a:	bf42      	ittt	mi
 800782c:	6833      	ldrmi	r3, [r6, #0]
 800782e:	3302      	addmi	r3, #2
 8007830:	6033      	strmi	r3, [r6, #0]
 8007832:	6825      	ldr	r5, [r4, #0]
 8007834:	f015 0506 	ands.w	r5, r5, #6
 8007838:	d106      	bne.n	8007848 <_printf_common+0x48>
 800783a:	f104 0a19 	add.w	sl, r4, #25
 800783e:	68e3      	ldr	r3, [r4, #12]
 8007840:	6832      	ldr	r2, [r6, #0]
 8007842:	1a9b      	subs	r3, r3, r2
 8007844:	42ab      	cmp	r3, r5
 8007846:	dc26      	bgt.n	8007896 <_printf_common+0x96>
 8007848:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800784c:	6822      	ldr	r2, [r4, #0]
 800784e:	3b00      	subs	r3, #0
 8007850:	bf18      	it	ne
 8007852:	2301      	movne	r3, #1
 8007854:	0692      	lsls	r2, r2, #26
 8007856:	d42b      	bmi.n	80078b0 <_printf_common+0xb0>
 8007858:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800785c:	4641      	mov	r1, r8
 800785e:	4638      	mov	r0, r7
 8007860:	47c8      	blx	r9
 8007862:	3001      	adds	r0, #1
 8007864:	d01e      	beq.n	80078a4 <_printf_common+0xa4>
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	6922      	ldr	r2, [r4, #16]
 800786a:	f003 0306 	and.w	r3, r3, #6
 800786e:	2b04      	cmp	r3, #4
 8007870:	bf02      	ittt	eq
 8007872:	68e5      	ldreq	r5, [r4, #12]
 8007874:	6833      	ldreq	r3, [r6, #0]
 8007876:	1aed      	subeq	r5, r5, r3
 8007878:	68a3      	ldr	r3, [r4, #8]
 800787a:	bf0c      	ite	eq
 800787c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007880:	2500      	movne	r5, #0
 8007882:	4293      	cmp	r3, r2
 8007884:	bfc4      	itt	gt
 8007886:	1a9b      	subgt	r3, r3, r2
 8007888:	18ed      	addgt	r5, r5, r3
 800788a:	2600      	movs	r6, #0
 800788c:	341a      	adds	r4, #26
 800788e:	42b5      	cmp	r5, r6
 8007890:	d11a      	bne.n	80078c8 <_printf_common+0xc8>
 8007892:	2000      	movs	r0, #0
 8007894:	e008      	b.n	80078a8 <_printf_common+0xa8>
 8007896:	2301      	movs	r3, #1
 8007898:	4652      	mov	r2, sl
 800789a:	4641      	mov	r1, r8
 800789c:	4638      	mov	r0, r7
 800789e:	47c8      	blx	r9
 80078a0:	3001      	adds	r0, #1
 80078a2:	d103      	bne.n	80078ac <_printf_common+0xac>
 80078a4:	f04f 30ff 	mov.w	r0, #4294967295
 80078a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ac:	3501      	adds	r5, #1
 80078ae:	e7c6      	b.n	800783e <_printf_common+0x3e>
 80078b0:	18e1      	adds	r1, r4, r3
 80078b2:	1c5a      	adds	r2, r3, #1
 80078b4:	2030      	movs	r0, #48	@ 0x30
 80078b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078ba:	4422      	add	r2, r4
 80078bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078c4:	3302      	adds	r3, #2
 80078c6:	e7c7      	b.n	8007858 <_printf_common+0x58>
 80078c8:	2301      	movs	r3, #1
 80078ca:	4622      	mov	r2, r4
 80078cc:	4641      	mov	r1, r8
 80078ce:	4638      	mov	r0, r7
 80078d0:	47c8      	blx	r9
 80078d2:	3001      	adds	r0, #1
 80078d4:	d0e6      	beq.n	80078a4 <_printf_common+0xa4>
 80078d6:	3601      	adds	r6, #1
 80078d8:	e7d9      	b.n	800788e <_printf_common+0x8e>
	...

080078dc <_printf_i>:
 80078dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078e0:	7e0f      	ldrb	r7, [r1, #24]
 80078e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80078e4:	2f78      	cmp	r7, #120	@ 0x78
 80078e6:	4691      	mov	r9, r2
 80078e8:	4680      	mov	r8, r0
 80078ea:	460c      	mov	r4, r1
 80078ec:	469a      	mov	sl, r3
 80078ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80078f2:	d807      	bhi.n	8007904 <_printf_i+0x28>
 80078f4:	2f62      	cmp	r7, #98	@ 0x62
 80078f6:	d80a      	bhi.n	800790e <_printf_i+0x32>
 80078f8:	2f00      	cmp	r7, #0
 80078fa:	f000 80d1 	beq.w	8007aa0 <_printf_i+0x1c4>
 80078fe:	2f58      	cmp	r7, #88	@ 0x58
 8007900:	f000 80b8 	beq.w	8007a74 <_printf_i+0x198>
 8007904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007908:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800790c:	e03a      	b.n	8007984 <_printf_i+0xa8>
 800790e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007912:	2b15      	cmp	r3, #21
 8007914:	d8f6      	bhi.n	8007904 <_printf_i+0x28>
 8007916:	a101      	add	r1, pc, #4	@ (adr r1, 800791c <_printf_i+0x40>)
 8007918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800791c:	08007975 	.word	0x08007975
 8007920:	08007989 	.word	0x08007989
 8007924:	08007905 	.word	0x08007905
 8007928:	08007905 	.word	0x08007905
 800792c:	08007905 	.word	0x08007905
 8007930:	08007905 	.word	0x08007905
 8007934:	08007989 	.word	0x08007989
 8007938:	08007905 	.word	0x08007905
 800793c:	08007905 	.word	0x08007905
 8007940:	08007905 	.word	0x08007905
 8007944:	08007905 	.word	0x08007905
 8007948:	08007a87 	.word	0x08007a87
 800794c:	080079b3 	.word	0x080079b3
 8007950:	08007a41 	.word	0x08007a41
 8007954:	08007905 	.word	0x08007905
 8007958:	08007905 	.word	0x08007905
 800795c:	08007aa9 	.word	0x08007aa9
 8007960:	08007905 	.word	0x08007905
 8007964:	080079b3 	.word	0x080079b3
 8007968:	08007905 	.word	0x08007905
 800796c:	08007905 	.word	0x08007905
 8007970:	08007a49 	.word	0x08007a49
 8007974:	6833      	ldr	r3, [r6, #0]
 8007976:	1d1a      	adds	r2, r3, #4
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6032      	str	r2, [r6, #0]
 800797c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007980:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007984:	2301      	movs	r3, #1
 8007986:	e09c      	b.n	8007ac2 <_printf_i+0x1e6>
 8007988:	6833      	ldr	r3, [r6, #0]
 800798a:	6820      	ldr	r0, [r4, #0]
 800798c:	1d19      	adds	r1, r3, #4
 800798e:	6031      	str	r1, [r6, #0]
 8007990:	0606      	lsls	r6, r0, #24
 8007992:	d501      	bpl.n	8007998 <_printf_i+0xbc>
 8007994:	681d      	ldr	r5, [r3, #0]
 8007996:	e003      	b.n	80079a0 <_printf_i+0xc4>
 8007998:	0645      	lsls	r5, r0, #25
 800799a:	d5fb      	bpl.n	8007994 <_printf_i+0xb8>
 800799c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079a0:	2d00      	cmp	r5, #0
 80079a2:	da03      	bge.n	80079ac <_printf_i+0xd0>
 80079a4:	232d      	movs	r3, #45	@ 0x2d
 80079a6:	426d      	negs	r5, r5
 80079a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079ac:	4858      	ldr	r0, [pc, #352]	@ (8007b10 <_printf_i+0x234>)
 80079ae:	230a      	movs	r3, #10
 80079b0:	e011      	b.n	80079d6 <_printf_i+0xfa>
 80079b2:	6821      	ldr	r1, [r4, #0]
 80079b4:	6833      	ldr	r3, [r6, #0]
 80079b6:	0608      	lsls	r0, r1, #24
 80079b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80079bc:	d402      	bmi.n	80079c4 <_printf_i+0xe8>
 80079be:	0649      	lsls	r1, r1, #25
 80079c0:	bf48      	it	mi
 80079c2:	b2ad      	uxthmi	r5, r5
 80079c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80079c6:	4852      	ldr	r0, [pc, #328]	@ (8007b10 <_printf_i+0x234>)
 80079c8:	6033      	str	r3, [r6, #0]
 80079ca:	bf14      	ite	ne
 80079cc:	230a      	movne	r3, #10
 80079ce:	2308      	moveq	r3, #8
 80079d0:	2100      	movs	r1, #0
 80079d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079d6:	6866      	ldr	r6, [r4, #4]
 80079d8:	60a6      	str	r6, [r4, #8]
 80079da:	2e00      	cmp	r6, #0
 80079dc:	db05      	blt.n	80079ea <_printf_i+0x10e>
 80079de:	6821      	ldr	r1, [r4, #0]
 80079e0:	432e      	orrs	r6, r5
 80079e2:	f021 0104 	bic.w	r1, r1, #4
 80079e6:	6021      	str	r1, [r4, #0]
 80079e8:	d04b      	beq.n	8007a82 <_printf_i+0x1a6>
 80079ea:	4616      	mov	r6, r2
 80079ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80079f0:	fb03 5711 	mls	r7, r3, r1, r5
 80079f4:	5dc7      	ldrb	r7, [r0, r7]
 80079f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079fa:	462f      	mov	r7, r5
 80079fc:	42bb      	cmp	r3, r7
 80079fe:	460d      	mov	r5, r1
 8007a00:	d9f4      	bls.n	80079ec <_printf_i+0x110>
 8007a02:	2b08      	cmp	r3, #8
 8007a04:	d10b      	bne.n	8007a1e <_printf_i+0x142>
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	07df      	lsls	r7, r3, #31
 8007a0a:	d508      	bpl.n	8007a1e <_printf_i+0x142>
 8007a0c:	6923      	ldr	r3, [r4, #16]
 8007a0e:	6861      	ldr	r1, [r4, #4]
 8007a10:	4299      	cmp	r1, r3
 8007a12:	bfde      	ittt	le
 8007a14:	2330      	movle	r3, #48	@ 0x30
 8007a16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a1e:	1b92      	subs	r2, r2, r6
 8007a20:	6122      	str	r2, [r4, #16]
 8007a22:	f8cd a000 	str.w	sl, [sp]
 8007a26:	464b      	mov	r3, r9
 8007a28:	aa03      	add	r2, sp, #12
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	f7ff fee7 	bl	8007800 <_printf_common>
 8007a32:	3001      	adds	r0, #1
 8007a34:	d14a      	bne.n	8007acc <_printf_i+0x1f0>
 8007a36:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3a:	b004      	add	sp, #16
 8007a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	f043 0320 	orr.w	r3, r3, #32
 8007a46:	6023      	str	r3, [r4, #0]
 8007a48:	4832      	ldr	r0, [pc, #200]	@ (8007b14 <_printf_i+0x238>)
 8007a4a:	2778      	movs	r7, #120	@ 0x78
 8007a4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a50:	6823      	ldr	r3, [r4, #0]
 8007a52:	6831      	ldr	r1, [r6, #0]
 8007a54:	061f      	lsls	r7, r3, #24
 8007a56:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a5a:	d402      	bmi.n	8007a62 <_printf_i+0x186>
 8007a5c:	065f      	lsls	r7, r3, #25
 8007a5e:	bf48      	it	mi
 8007a60:	b2ad      	uxthmi	r5, r5
 8007a62:	6031      	str	r1, [r6, #0]
 8007a64:	07d9      	lsls	r1, r3, #31
 8007a66:	bf44      	itt	mi
 8007a68:	f043 0320 	orrmi.w	r3, r3, #32
 8007a6c:	6023      	strmi	r3, [r4, #0]
 8007a6e:	b11d      	cbz	r5, 8007a78 <_printf_i+0x19c>
 8007a70:	2310      	movs	r3, #16
 8007a72:	e7ad      	b.n	80079d0 <_printf_i+0xf4>
 8007a74:	4826      	ldr	r0, [pc, #152]	@ (8007b10 <_printf_i+0x234>)
 8007a76:	e7e9      	b.n	8007a4c <_printf_i+0x170>
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	f023 0320 	bic.w	r3, r3, #32
 8007a7e:	6023      	str	r3, [r4, #0]
 8007a80:	e7f6      	b.n	8007a70 <_printf_i+0x194>
 8007a82:	4616      	mov	r6, r2
 8007a84:	e7bd      	b.n	8007a02 <_printf_i+0x126>
 8007a86:	6833      	ldr	r3, [r6, #0]
 8007a88:	6825      	ldr	r5, [r4, #0]
 8007a8a:	6961      	ldr	r1, [r4, #20]
 8007a8c:	1d18      	adds	r0, r3, #4
 8007a8e:	6030      	str	r0, [r6, #0]
 8007a90:	062e      	lsls	r6, r5, #24
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	d501      	bpl.n	8007a9a <_printf_i+0x1be>
 8007a96:	6019      	str	r1, [r3, #0]
 8007a98:	e002      	b.n	8007aa0 <_printf_i+0x1c4>
 8007a9a:	0668      	lsls	r0, r5, #25
 8007a9c:	d5fb      	bpl.n	8007a96 <_printf_i+0x1ba>
 8007a9e:	8019      	strh	r1, [r3, #0]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	6123      	str	r3, [r4, #16]
 8007aa4:	4616      	mov	r6, r2
 8007aa6:	e7bc      	b.n	8007a22 <_printf_i+0x146>
 8007aa8:	6833      	ldr	r3, [r6, #0]
 8007aaa:	1d1a      	adds	r2, r3, #4
 8007aac:	6032      	str	r2, [r6, #0]
 8007aae:	681e      	ldr	r6, [r3, #0]
 8007ab0:	6862      	ldr	r2, [r4, #4]
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f7f8 fb8b 	bl	80001d0 <memchr>
 8007aba:	b108      	cbz	r0, 8007ac0 <_printf_i+0x1e4>
 8007abc:	1b80      	subs	r0, r0, r6
 8007abe:	6060      	str	r0, [r4, #4]
 8007ac0:	6863      	ldr	r3, [r4, #4]
 8007ac2:	6123      	str	r3, [r4, #16]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aca:	e7aa      	b.n	8007a22 <_printf_i+0x146>
 8007acc:	6923      	ldr	r3, [r4, #16]
 8007ace:	4632      	mov	r2, r6
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	47d0      	blx	sl
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	d0ad      	beq.n	8007a36 <_printf_i+0x15a>
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	079b      	lsls	r3, r3, #30
 8007ade:	d413      	bmi.n	8007b08 <_printf_i+0x22c>
 8007ae0:	68e0      	ldr	r0, [r4, #12]
 8007ae2:	9b03      	ldr	r3, [sp, #12]
 8007ae4:	4298      	cmp	r0, r3
 8007ae6:	bfb8      	it	lt
 8007ae8:	4618      	movlt	r0, r3
 8007aea:	e7a6      	b.n	8007a3a <_printf_i+0x15e>
 8007aec:	2301      	movs	r3, #1
 8007aee:	4632      	mov	r2, r6
 8007af0:	4649      	mov	r1, r9
 8007af2:	4640      	mov	r0, r8
 8007af4:	47d0      	blx	sl
 8007af6:	3001      	adds	r0, #1
 8007af8:	d09d      	beq.n	8007a36 <_printf_i+0x15a>
 8007afa:	3501      	adds	r5, #1
 8007afc:	68e3      	ldr	r3, [r4, #12]
 8007afe:	9903      	ldr	r1, [sp, #12]
 8007b00:	1a5b      	subs	r3, r3, r1
 8007b02:	42ab      	cmp	r3, r5
 8007b04:	dcf2      	bgt.n	8007aec <_printf_i+0x210>
 8007b06:	e7eb      	b.n	8007ae0 <_printf_i+0x204>
 8007b08:	2500      	movs	r5, #0
 8007b0a:	f104 0619 	add.w	r6, r4, #25
 8007b0e:	e7f5      	b.n	8007afc <_printf_i+0x220>
 8007b10:	0800860d 	.word	0x0800860d
 8007b14:	0800861e 	.word	0x0800861e

08007b18 <__sflush_r>:
 8007b18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b20:	0716      	lsls	r6, r2, #28
 8007b22:	4605      	mov	r5, r0
 8007b24:	460c      	mov	r4, r1
 8007b26:	d454      	bmi.n	8007bd2 <__sflush_r+0xba>
 8007b28:	684b      	ldr	r3, [r1, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	dc02      	bgt.n	8007b34 <__sflush_r+0x1c>
 8007b2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	dd48      	ble.n	8007bc6 <__sflush_r+0xae>
 8007b34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b36:	2e00      	cmp	r6, #0
 8007b38:	d045      	beq.n	8007bc6 <__sflush_r+0xae>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b40:	682f      	ldr	r7, [r5, #0]
 8007b42:	6a21      	ldr	r1, [r4, #32]
 8007b44:	602b      	str	r3, [r5, #0]
 8007b46:	d030      	beq.n	8007baa <__sflush_r+0x92>
 8007b48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b4a:	89a3      	ldrh	r3, [r4, #12]
 8007b4c:	0759      	lsls	r1, r3, #29
 8007b4e:	d505      	bpl.n	8007b5c <__sflush_r+0x44>
 8007b50:	6863      	ldr	r3, [r4, #4]
 8007b52:	1ad2      	subs	r2, r2, r3
 8007b54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b56:	b10b      	cbz	r3, 8007b5c <__sflush_r+0x44>
 8007b58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b5a:	1ad2      	subs	r2, r2, r3
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b60:	6a21      	ldr	r1, [r4, #32]
 8007b62:	4628      	mov	r0, r5
 8007b64:	47b0      	blx	r6
 8007b66:	1c43      	adds	r3, r0, #1
 8007b68:	89a3      	ldrh	r3, [r4, #12]
 8007b6a:	d106      	bne.n	8007b7a <__sflush_r+0x62>
 8007b6c:	6829      	ldr	r1, [r5, #0]
 8007b6e:	291d      	cmp	r1, #29
 8007b70:	d82b      	bhi.n	8007bca <__sflush_r+0xb2>
 8007b72:	4a2a      	ldr	r2, [pc, #168]	@ (8007c1c <__sflush_r+0x104>)
 8007b74:	40ca      	lsrs	r2, r1
 8007b76:	07d6      	lsls	r6, r2, #31
 8007b78:	d527      	bpl.n	8007bca <__sflush_r+0xb2>
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	6062      	str	r2, [r4, #4]
 8007b7e:	04d9      	lsls	r1, r3, #19
 8007b80:	6922      	ldr	r2, [r4, #16]
 8007b82:	6022      	str	r2, [r4, #0]
 8007b84:	d504      	bpl.n	8007b90 <__sflush_r+0x78>
 8007b86:	1c42      	adds	r2, r0, #1
 8007b88:	d101      	bne.n	8007b8e <__sflush_r+0x76>
 8007b8a:	682b      	ldr	r3, [r5, #0]
 8007b8c:	b903      	cbnz	r3, 8007b90 <__sflush_r+0x78>
 8007b8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b92:	602f      	str	r7, [r5, #0]
 8007b94:	b1b9      	cbz	r1, 8007bc6 <__sflush_r+0xae>
 8007b96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b9a:	4299      	cmp	r1, r3
 8007b9c:	d002      	beq.n	8007ba4 <__sflush_r+0x8c>
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	f7ff fbf4 	bl	800738c <_free_r>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ba8:	e00d      	b.n	8007bc6 <__sflush_r+0xae>
 8007baa:	2301      	movs	r3, #1
 8007bac:	4628      	mov	r0, r5
 8007bae:	47b0      	blx	r6
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	1c50      	adds	r0, r2, #1
 8007bb4:	d1c9      	bne.n	8007b4a <__sflush_r+0x32>
 8007bb6:	682b      	ldr	r3, [r5, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d0c6      	beq.n	8007b4a <__sflush_r+0x32>
 8007bbc:	2b1d      	cmp	r3, #29
 8007bbe:	d001      	beq.n	8007bc4 <__sflush_r+0xac>
 8007bc0:	2b16      	cmp	r3, #22
 8007bc2:	d11e      	bne.n	8007c02 <__sflush_r+0xea>
 8007bc4:	602f      	str	r7, [r5, #0]
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	e022      	b.n	8007c10 <__sflush_r+0xf8>
 8007bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bce:	b21b      	sxth	r3, r3
 8007bd0:	e01b      	b.n	8007c0a <__sflush_r+0xf2>
 8007bd2:	690f      	ldr	r7, [r1, #16]
 8007bd4:	2f00      	cmp	r7, #0
 8007bd6:	d0f6      	beq.n	8007bc6 <__sflush_r+0xae>
 8007bd8:	0793      	lsls	r3, r2, #30
 8007bda:	680e      	ldr	r6, [r1, #0]
 8007bdc:	bf08      	it	eq
 8007bde:	694b      	ldreq	r3, [r1, #20]
 8007be0:	600f      	str	r7, [r1, #0]
 8007be2:	bf18      	it	ne
 8007be4:	2300      	movne	r3, #0
 8007be6:	eba6 0807 	sub.w	r8, r6, r7
 8007bea:	608b      	str	r3, [r1, #8]
 8007bec:	f1b8 0f00 	cmp.w	r8, #0
 8007bf0:	dde9      	ble.n	8007bc6 <__sflush_r+0xae>
 8007bf2:	6a21      	ldr	r1, [r4, #32]
 8007bf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007bf6:	4643      	mov	r3, r8
 8007bf8:	463a      	mov	r2, r7
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	47b0      	blx	r6
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	dc08      	bgt.n	8007c14 <__sflush_r+0xfc>
 8007c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c0a:	81a3      	strh	r3, [r4, #12]
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c14:	4407      	add	r7, r0
 8007c16:	eba8 0800 	sub.w	r8, r8, r0
 8007c1a:	e7e7      	b.n	8007bec <__sflush_r+0xd4>
 8007c1c:	20400001 	.word	0x20400001

08007c20 <_fflush_r>:
 8007c20:	b538      	push	{r3, r4, r5, lr}
 8007c22:	690b      	ldr	r3, [r1, #16]
 8007c24:	4605      	mov	r5, r0
 8007c26:	460c      	mov	r4, r1
 8007c28:	b913      	cbnz	r3, 8007c30 <_fflush_r+0x10>
 8007c2a:	2500      	movs	r5, #0
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	bd38      	pop	{r3, r4, r5, pc}
 8007c30:	b118      	cbz	r0, 8007c3a <_fflush_r+0x1a>
 8007c32:	6a03      	ldr	r3, [r0, #32]
 8007c34:	b90b      	cbnz	r3, 8007c3a <_fflush_r+0x1a>
 8007c36:	f7ff f9af 	bl	8006f98 <__sinit>
 8007c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0f3      	beq.n	8007c2a <_fflush_r+0xa>
 8007c42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c44:	07d0      	lsls	r0, r2, #31
 8007c46:	d404      	bmi.n	8007c52 <_fflush_r+0x32>
 8007c48:	0599      	lsls	r1, r3, #22
 8007c4a:	d402      	bmi.n	8007c52 <_fflush_r+0x32>
 8007c4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c4e:	f7ff fb9a 	bl	8007386 <__retarget_lock_acquire_recursive>
 8007c52:	4628      	mov	r0, r5
 8007c54:	4621      	mov	r1, r4
 8007c56:	f7ff ff5f 	bl	8007b18 <__sflush_r>
 8007c5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c5c:	07da      	lsls	r2, r3, #31
 8007c5e:	4605      	mov	r5, r0
 8007c60:	d4e4      	bmi.n	8007c2c <_fflush_r+0xc>
 8007c62:	89a3      	ldrh	r3, [r4, #12]
 8007c64:	059b      	lsls	r3, r3, #22
 8007c66:	d4e1      	bmi.n	8007c2c <_fflush_r+0xc>
 8007c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c6a:	f7ff fb8d 	bl	8007388 <__retarget_lock_release_recursive>
 8007c6e:	e7dd      	b.n	8007c2c <_fflush_r+0xc>

08007c70 <__swhatbuf_r>:
 8007c70:	b570      	push	{r4, r5, r6, lr}
 8007c72:	460c      	mov	r4, r1
 8007c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c78:	2900      	cmp	r1, #0
 8007c7a:	b096      	sub	sp, #88	@ 0x58
 8007c7c:	4615      	mov	r5, r2
 8007c7e:	461e      	mov	r6, r3
 8007c80:	da0d      	bge.n	8007c9e <__swhatbuf_r+0x2e>
 8007c82:	89a3      	ldrh	r3, [r4, #12]
 8007c84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007c88:	f04f 0100 	mov.w	r1, #0
 8007c8c:	bf14      	ite	ne
 8007c8e:	2340      	movne	r3, #64	@ 0x40
 8007c90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c94:	2000      	movs	r0, #0
 8007c96:	6031      	str	r1, [r6, #0]
 8007c98:	602b      	str	r3, [r5, #0]
 8007c9a:	b016      	add	sp, #88	@ 0x58
 8007c9c:	bd70      	pop	{r4, r5, r6, pc}
 8007c9e:	466a      	mov	r2, sp
 8007ca0:	f000 f848 	bl	8007d34 <_fstat_r>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	dbec      	blt.n	8007c82 <__swhatbuf_r+0x12>
 8007ca8:	9901      	ldr	r1, [sp, #4]
 8007caa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007cae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007cb2:	4259      	negs	r1, r3
 8007cb4:	4159      	adcs	r1, r3
 8007cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007cba:	e7eb      	b.n	8007c94 <__swhatbuf_r+0x24>

08007cbc <__smakebuf_r>:
 8007cbc:	898b      	ldrh	r3, [r1, #12]
 8007cbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cc0:	079d      	lsls	r5, r3, #30
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	d507      	bpl.n	8007cd8 <__smakebuf_r+0x1c>
 8007cc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	6123      	str	r3, [r4, #16]
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	6163      	str	r3, [r4, #20]
 8007cd4:	b003      	add	sp, #12
 8007cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cd8:	ab01      	add	r3, sp, #4
 8007cda:	466a      	mov	r2, sp
 8007cdc:	f7ff ffc8 	bl	8007c70 <__swhatbuf_r>
 8007ce0:	9f00      	ldr	r7, [sp, #0]
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	4639      	mov	r1, r7
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f7ff fbbc 	bl	8007464 <_malloc_r>
 8007cec:	b948      	cbnz	r0, 8007d02 <__smakebuf_r+0x46>
 8007cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cf2:	059a      	lsls	r2, r3, #22
 8007cf4:	d4ee      	bmi.n	8007cd4 <__smakebuf_r+0x18>
 8007cf6:	f023 0303 	bic.w	r3, r3, #3
 8007cfa:	f043 0302 	orr.w	r3, r3, #2
 8007cfe:	81a3      	strh	r3, [r4, #12]
 8007d00:	e7e2      	b.n	8007cc8 <__smakebuf_r+0xc>
 8007d02:	89a3      	ldrh	r3, [r4, #12]
 8007d04:	6020      	str	r0, [r4, #0]
 8007d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d0a:	81a3      	strh	r3, [r4, #12]
 8007d0c:	9b01      	ldr	r3, [sp, #4]
 8007d0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007d12:	b15b      	cbz	r3, 8007d2c <__smakebuf_r+0x70>
 8007d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f000 f81d 	bl	8007d58 <_isatty_r>
 8007d1e:	b128      	cbz	r0, 8007d2c <__smakebuf_r+0x70>
 8007d20:	89a3      	ldrh	r3, [r4, #12]
 8007d22:	f023 0303 	bic.w	r3, r3, #3
 8007d26:	f043 0301 	orr.w	r3, r3, #1
 8007d2a:	81a3      	strh	r3, [r4, #12]
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	431d      	orrs	r5, r3
 8007d30:	81a5      	strh	r5, [r4, #12]
 8007d32:	e7cf      	b.n	8007cd4 <__smakebuf_r+0x18>

08007d34 <_fstat_r>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	4d07      	ldr	r5, [pc, #28]	@ (8007d54 <_fstat_r+0x20>)
 8007d38:	2300      	movs	r3, #0
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	4608      	mov	r0, r1
 8007d3e:	4611      	mov	r1, r2
 8007d40:	602b      	str	r3, [r5, #0]
 8007d42:	f7fa f88d 	bl	8001e60 <_fstat>
 8007d46:	1c43      	adds	r3, r0, #1
 8007d48:	d102      	bne.n	8007d50 <_fstat_r+0x1c>
 8007d4a:	682b      	ldr	r3, [r5, #0]
 8007d4c:	b103      	cbz	r3, 8007d50 <_fstat_r+0x1c>
 8007d4e:	6023      	str	r3, [r4, #0]
 8007d50:	bd38      	pop	{r3, r4, r5, pc}
 8007d52:	bf00      	nop
 8007d54:	200003d4 	.word	0x200003d4

08007d58 <_isatty_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4d06      	ldr	r5, [pc, #24]	@ (8007d74 <_isatty_r+0x1c>)
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4608      	mov	r0, r1
 8007d62:	602b      	str	r3, [r5, #0]
 8007d64:	f7fa f88c 	bl	8001e80 <_isatty>
 8007d68:	1c43      	adds	r3, r0, #1
 8007d6a:	d102      	bne.n	8007d72 <_isatty_r+0x1a>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	b103      	cbz	r3, 8007d72 <_isatty_r+0x1a>
 8007d70:	6023      	str	r3, [r4, #0]
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	200003d4 	.word	0x200003d4

08007d78 <_sbrk_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4d06      	ldr	r5, [pc, #24]	@ (8007d94 <_sbrk_r+0x1c>)
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	4604      	mov	r4, r0
 8007d80:	4608      	mov	r0, r1
 8007d82:	602b      	str	r3, [r5, #0]
 8007d84:	f7fa f894 	bl	8001eb0 <_sbrk>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d102      	bne.n	8007d92 <_sbrk_r+0x1a>
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	b103      	cbz	r3, 8007d92 <_sbrk_r+0x1a>
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	200003d4 	.word	0x200003d4

08007d98 <atan2>:
 8007d98:	f000 b902 	b.w	8007fa0 <__ieee754_atan2>

08007d9c <sqrt>:
 8007d9c:	b538      	push	{r3, r4, r5, lr}
 8007d9e:	ed2d 8b02 	vpush	{d8}
 8007da2:	ec55 4b10 	vmov	r4, r5, d0
 8007da6:	f000 f825 	bl	8007df4 <__ieee754_sqrt>
 8007daa:	4622      	mov	r2, r4
 8007dac:	462b      	mov	r3, r5
 8007dae:	4620      	mov	r0, r4
 8007db0:	4629      	mov	r1, r5
 8007db2:	eeb0 8a40 	vmov.f32	s16, s0
 8007db6:	eef0 8a60 	vmov.f32	s17, s1
 8007dba:	f7f8 feaf 	bl	8000b1c <__aeabi_dcmpun>
 8007dbe:	b990      	cbnz	r0, 8007de6 <sqrt+0x4a>
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7f8 fe80 	bl	8000acc <__aeabi_dcmplt>
 8007dcc:	b158      	cbz	r0, 8007de6 <sqrt+0x4a>
 8007dce:	f7ff faaf 	bl	8007330 <__errno>
 8007dd2:	2321      	movs	r3, #33	@ 0x21
 8007dd4:	6003      	str	r3, [r0, #0]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4610      	mov	r0, r2
 8007ddc:	4619      	mov	r1, r3
 8007dde:	f7f8 fd2d 	bl	800083c <__aeabi_ddiv>
 8007de2:	ec41 0b18 	vmov	d8, r0, r1
 8007de6:	eeb0 0a48 	vmov.f32	s0, s16
 8007dea:	eef0 0a68 	vmov.f32	s1, s17
 8007dee:	ecbd 8b02 	vpop	{d8}
 8007df2:	bd38      	pop	{r3, r4, r5, pc}

08007df4 <__ieee754_sqrt>:
 8007df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df8:	4a66      	ldr	r2, [pc, #408]	@ (8007f94 <__ieee754_sqrt+0x1a0>)
 8007dfa:	ec55 4b10 	vmov	r4, r5, d0
 8007dfe:	43aa      	bics	r2, r5
 8007e00:	462b      	mov	r3, r5
 8007e02:	4621      	mov	r1, r4
 8007e04:	d110      	bne.n	8007e28 <__ieee754_sqrt+0x34>
 8007e06:	4622      	mov	r2, r4
 8007e08:	4620      	mov	r0, r4
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	f7f8 fbec 	bl	80005e8 <__aeabi_dmul>
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	4620      	mov	r0, r4
 8007e16:	4629      	mov	r1, r5
 8007e18:	f7f8 fa30 	bl	800027c <__adddf3>
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	460d      	mov	r5, r1
 8007e20:	ec45 4b10 	vmov	d0, r4, r5
 8007e24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e28:	2d00      	cmp	r5, #0
 8007e2a:	dc0e      	bgt.n	8007e4a <__ieee754_sqrt+0x56>
 8007e2c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007e30:	4322      	orrs	r2, r4
 8007e32:	d0f5      	beq.n	8007e20 <__ieee754_sqrt+0x2c>
 8007e34:	b19d      	cbz	r5, 8007e5e <__ieee754_sqrt+0x6a>
 8007e36:	4622      	mov	r2, r4
 8007e38:	4620      	mov	r0, r4
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	f7f8 fa1c 	bl	8000278 <__aeabi_dsub>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	f7f8 fcfa 	bl	800083c <__aeabi_ddiv>
 8007e48:	e7e8      	b.n	8007e1c <__ieee754_sqrt+0x28>
 8007e4a:	152a      	asrs	r2, r5, #20
 8007e4c:	d115      	bne.n	8007e7a <__ieee754_sqrt+0x86>
 8007e4e:	2000      	movs	r0, #0
 8007e50:	e009      	b.n	8007e66 <__ieee754_sqrt+0x72>
 8007e52:	0acb      	lsrs	r3, r1, #11
 8007e54:	3a15      	subs	r2, #21
 8007e56:	0549      	lsls	r1, r1, #21
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d0fa      	beq.n	8007e52 <__ieee754_sqrt+0x5e>
 8007e5c:	e7f7      	b.n	8007e4e <__ieee754_sqrt+0x5a>
 8007e5e:	462a      	mov	r2, r5
 8007e60:	e7fa      	b.n	8007e58 <__ieee754_sqrt+0x64>
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	3001      	adds	r0, #1
 8007e66:	02dc      	lsls	r4, r3, #11
 8007e68:	d5fb      	bpl.n	8007e62 <__ieee754_sqrt+0x6e>
 8007e6a:	1e44      	subs	r4, r0, #1
 8007e6c:	1b12      	subs	r2, r2, r4
 8007e6e:	f1c0 0420 	rsb	r4, r0, #32
 8007e72:	fa21 f404 	lsr.w	r4, r1, r4
 8007e76:	4323      	orrs	r3, r4
 8007e78:	4081      	lsls	r1, r0
 8007e7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e7e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8007e82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e86:	07d2      	lsls	r2, r2, #31
 8007e88:	bf5c      	itt	pl
 8007e8a:	005b      	lslpl	r3, r3, #1
 8007e8c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007e90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007e94:	bf58      	it	pl
 8007e96:	0049      	lslpl	r1, r1, #1
 8007e98:	2600      	movs	r6, #0
 8007e9a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007e9e:	107f      	asrs	r7, r7, #1
 8007ea0:	0049      	lsls	r1, r1, #1
 8007ea2:	2016      	movs	r0, #22
 8007ea4:	4632      	mov	r2, r6
 8007ea6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007eaa:	1915      	adds	r5, r2, r4
 8007eac:	429d      	cmp	r5, r3
 8007eae:	bfde      	ittt	le
 8007eb0:	192a      	addle	r2, r5, r4
 8007eb2:	1b5b      	suble	r3, r3, r5
 8007eb4:	1936      	addle	r6, r6, r4
 8007eb6:	0fcd      	lsrs	r5, r1, #31
 8007eb8:	3801      	subs	r0, #1
 8007eba:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8007ebe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007ec2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007ec6:	d1f0      	bne.n	8007eaa <__ieee754_sqrt+0xb6>
 8007ec8:	4605      	mov	r5, r0
 8007eca:	2420      	movs	r4, #32
 8007ecc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	eb0c 0e00 	add.w	lr, ip, r0
 8007ed6:	dc02      	bgt.n	8007ede <__ieee754_sqrt+0xea>
 8007ed8:	d113      	bne.n	8007f02 <__ieee754_sqrt+0x10e>
 8007eda:	458e      	cmp	lr, r1
 8007edc:	d811      	bhi.n	8007f02 <__ieee754_sqrt+0x10e>
 8007ede:	f1be 0f00 	cmp.w	lr, #0
 8007ee2:	eb0e 000c 	add.w	r0, lr, ip
 8007ee6:	da3f      	bge.n	8007f68 <__ieee754_sqrt+0x174>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	db3d      	blt.n	8007f68 <__ieee754_sqrt+0x174>
 8007eec:	f102 0801 	add.w	r8, r2, #1
 8007ef0:	1a9b      	subs	r3, r3, r2
 8007ef2:	458e      	cmp	lr, r1
 8007ef4:	bf88      	it	hi
 8007ef6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007efa:	eba1 010e 	sub.w	r1, r1, lr
 8007efe:	4465      	add	r5, ip
 8007f00:	4642      	mov	r2, r8
 8007f02:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007f06:	3c01      	subs	r4, #1
 8007f08:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007f0c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007f10:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007f14:	d1dc      	bne.n	8007ed0 <__ieee754_sqrt+0xdc>
 8007f16:	4319      	orrs	r1, r3
 8007f18:	d01b      	beq.n	8007f52 <__ieee754_sqrt+0x15e>
 8007f1a:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8007f98 <__ieee754_sqrt+0x1a4>
 8007f1e:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8007f9c <__ieee754_sqrt+0x1a8>
 8007f22:	e9da 0100 	ldrd	r0, r1, [sl]
 8007f26:	e9db 2300 	ldrd	r2, r3, [fp]
 8007f2a:	f7f8 f9a5 	bl	8000278 <__aeabi_dsub>
 8007f2e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	4640      	mov	r0, r8
 8007f38:	4649      	mov	r1, r9
 8007f3a:	f7f8 fdd1 	bl	8000ae0 <__aeabi_dcmple>
 8007f3e:	b140      	cbz	r0, 8007f52 <__ieee754_sqrt+0x15e>
 8007f40:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007f44:	e9da 0100 	ldrd	r0, r1, [sl]
 8007f48:	e9db 2300 	ldrd	r2, r3, [fp]
 8007f4c:	d10e      	bne.n	8007f6c <__ieee754_sqrt+0x178>
 8007f4e:	3601      	adds	r6, #1
 8007f50:	4625      	mov	r5, r4
 8007f52:	1073      	asrs	r3, r6, #1
 8007f54:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f58:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8007f5c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8007f60:	086b      	lsrs	r3, r5, #1
 8007f62:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8007f66:	e759      	b.n	8007e1c <__ieee754_sqrt+0x28>
 8007f68:	4690      	mov	r8, r2
 8007f6a:	e7c1      	b.n	8007ef0 <__ieee754_sqrt+0xfc>
 8007f6c:	f7f8 f986 	bl	800027c <__adddf3>
 8007f70:	e9da 8900 	ldrd	r8, r9, [sl]
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	4640      	mov	r0, r8
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	f7f8 fda6 	bl	8000acc <__aeabi_dcmplt>
 8007f80:	b120      	cbz	r0, 8007f8c <__ieee754_sqrt+0x198>
 8007f82:	1cab      	adds	r3, r5, #2
 8007f84:	bf08      	it	eq
 8007f86:	3601      	addeq	r6, #1
 8007f88:	3502      	adds	r5, #2
 8007f8a:	e7e2      	b.n	8007f52 <__ieee754_sqrt+0x15e>
 8007f8c:	1c6b      	adds	r3, r5, #1
 8007f8e:	f023 0501 	bic.w	r5, r3, #1
 8007f92:	e7de      	b.n	8007f52 <__ieee754_sqrt+0x15e>
 8007f94:	7ff00000 	.word	0x7ff00000
 8007f98:	08008638 	.word	0x08008638
 8007f9c:	08008630 	.word	0x08008630

08007fa0 <__ieee754_atan2>:
 8007fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fa4:	ec57 6b11 	vmov	r6, r7, d1
 8007fa8:	4273      	negs	r3, r6
 8007faa:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8008128 <__ieee754_atan2+0x188>
 8007fae:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8007fb2:	4333      	orrs	r3, r6
 8007fb4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007fb8:	4543      	cmp	r3, r8
 8007fba:	ec51 0b10 	vmov	r0, r1, d0
 8007fbe:	4635      	mov	r5, r6
 8007fc0:	d809      	bhi.n	8007fd6 <__ieee754_atan2+0x36>
 8007fc2:	4244      	negs	r4, r0
 8007fc4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007fc8:	4304      	orrs	r4, r0
 8007fca:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007fce:	4544      	cmp	r4, r8
 8007fd0:	468e      	mov	lr, r1
 8007fd2:	4681      	mov	r9, r0
 8007fd4:	d907      	bls.n	8007fe6 <__ieee754_atan2+0x46>
 8007fd6:	4632      	mov	r2, r6
 8007fd8:	463b      	mov	r3, r7
 8007fda:	f7f8 f94f 	bl	800027c <__adddf3>
 8007fde:	ec41 0b10 	vmov	d0, r0, r1
 8007fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fe6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8007fea:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8007fee:	4334      	orrs	r4, r6
 8007ff0:	d103      	bne.n	8007ffa <__ieee754_atan2+0x5a>
 8007ff2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff6:	f000 b89b 	b.w	8008130 <atan>
 8007ffa:	17bc      	asrs	r4, r7, #30
 8007ffc:	f004 0402 	and.w	r4, r4, #2
 8008000:	ea53 0909 	orrs.w	r9, r3, r9
 8008004:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008008:	d107      	bne.n	800801a <__ieee754_atan2+0x7a>
 800800a:	2c02      	cmp	r4, #2
 800800c:	d05f      	beq.n	80080ce <__ieee754_atan2+0x12e>
 800800e:	2c03      	cmp	r4, #3
 8008010:	d1e5      	bne.n	8007fde <__ieee754_atan2+0x3e>
 8008012:	a143      	add	r1, pc, #268	@ (adr r1, 8008120 <__ieee754_atan2+0x180>)
 8008014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008018:	e7e1      	b.n	8007fde <__ieee754_atan2+0x3e>
 800801a:	4315      	orrs	r5, r2
 800801c:	d106      	bne.n	800802c <__ieee754_atan2+0x8c>
 800801e:	f1be 0f00 	cmp.w	lr, #0
 8008022:	db5f      	blt.n	80080e4 <__ieee754_atan2+0x144>
 8008024:	a136      	add	r1, pc, #216	@ (adr r1, 8008100 <__ieee754_atan2+0x160>)
 8008026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800802a:	e7d8      	b.n	8007fde <__ieee754_atan2+0x3e>
 800802c:	4542      	cmp	r2, r8
 800802e:	d10f      	bne.n	8008050 <__ieee754_atan2+0xb0>
 8008030:	4293      	cmp	r3, r2
 8008032:	f104 34ff 	add.w	r4, r4, #4294967295
 8008036:	d107      	bne.n	8008048 <__ieee754_atan2+0xa8>
 8008038:	2c02      	cmp	r4, #2
 800803a:	d84c      	bhi.n	80080d6 <__ieee754_atan2+0x136>
 800803c:	4b36      	ldr	r3, [pc, #216]	@ (8008118 <__ieee754_atan2+0x178>)
 800803e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008042:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008046:	e7ca      	b.n	8007fde <__ieee754_atan2+0x3e>
 8008048:	2c02      	cmp	r4, #2
 800804a:	d848      	bhi.n	80080de <__ieee754_atan2+0x13e>
 800804c:	4b33      	ldr	r3, [pc, #204]	@ (800811c <__ieee754_atan2+0x17c>)
 800804e:	e7f6      	b.n	800803e <__ieee754_atan2+0x9e>
 8008050:	4543      	cmp	r3, r8
 8008052:	d0e4      	beq.n	800801e <__ieee754_atan2+0x7e>
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800805a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800805e:	da1e      	bge.n	800809e <__ieee754_atan2+0xfe>
 8008060:	2f00      	cmp	r7, #0
 8008062:	da01      	bge.n	8008068 <__ieee754_atan2+0xc8>
 8008064:	323c      	adds	r2, #60	@ 0x3c
 8008066:	db1e      	blt.n	80080a6 <__ieee754_atan2+0x106>
 8008068:	4632      	mov	r2, r6
 800806a:	463b      	mov	r3, r7
 800806c:	f7f8 fbe6 	bl	800083c <__aeabi_ddiv>
 8008070:	ec41 0b10 	vmov	d0, r0, r1
 8008074:	f000 f9f4 	bl	8008460 <fabs>
 8008078:	f000 f85a 	bl	8008130 <atan>
 800807c:	ec51 0b10 	vmov	r0, r1, d0
 8008080:	2c01      	cmp	r4, #1
 8008082:	d013      	beq.n	80080ac <__ieee754_atan2+0x10c>
 8008084:	2c02      	cmp	r4, #2
 8008086:	d015      	beq.n	80080b4 <__ieee754_atan2+0x114>
 8008088:	2c00      	cmp	r4, #0
 800808a:	d0a8      	beq.n	8007fde <__ieee754_atan2+0x3e>
 800808c:	a318      	add	r3, pc, #96	@ (adr r3, 80080f0 <__ieee754_atan2+0x150>)
 800808e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008092:	f7f8 f8f1 	bl	8000278 <__aeabi_dsub>
 8008096:	a318      	add	r3, pc, #96	@ (adr r3, 80080f8 <__ieee754_atan2+0x158>)
 8008098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809c:	e014      	b.n	80080c8 <__ieee754_atan2+0x128>
 800809e:	a118      	add	r1, pc, #96	@ (adr r1, 8008100 <__ieee754_atan2+0x160>)
 80080a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080a4:	e7ec      	b.n	8008080 <__ieee754_atan2+0xe0>
 80080a6:	2000      	movs	r0, #0
 80080a8:	2100      	movs	r1, #0
 80080aa:	e7e9      	b.n	8008080 <__ieee754_atan2+0xe0>
 80080ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80080b0:	4619      	mov	r1, r3
 80080b2:	e794      	b.n	8007fde <__ieee754_atan2+0x3e>
 80080b4:	a30e      	add	r3, pc, #56	@ (adr r3, 80080f0 <__ieee754_atan2+0x150>)
 80080b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ba:	f7f8 f8dd 	bl	8000278 <__aeabi_dsub>
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	a10d      	add	r1, pc, #52	@ (adr r1, 80080f8 <__ieee754_atan2+0x158>)
 80080c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080c8:	f7f8 f8d6 	bl	8000278 <__aeabi_dsub>
 80080cc:	e787      	b.n	8007fde <__ieee754_atan2+0x3e>
 80080ce:	a10a      	add	r1, pc, #40	@ (adr r1, 80080f8 <__ieee754_atan2+0x158>)
 80080d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080d4:	e783      	b.n	8007fde <__ieee754_atan2+0x3e>
 80080d6:	a10c      	add	r1, pc, #48	@ (adr r1, 8008108 <__ieee754_atan2+0x168>)
 80080d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080dc:	e77f      	b.n	8007fde <__ieee754_atan2+0x3e>
 80080de:	2000      	movs	r0, #0
 80080e0:	2100      	movs	r1, #0
 80080e2:	e77c      	b.n	8007fde <__ieee754_atan2+0x3e>
 80080e4:	a10a      	add	r1, pc, #40	@ (adr r1, 8008110 <__ieee754_atan2+0x170>)
 80080e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ea:	e778      	b.n	8007fde <__ieee754_atan2+0x3e>
 80080ec:	f3af 8000 	nop.w
 80080f0:	33145c07 	.word	0x33145c07
 80080f4:	3ca1a626 	.word	0x3ca1a626
 80080f8:	54442d18 	.word	0x54442d18
 80080fc:	400921fb 	.word	0x400921fb
 8008100:	54442d18 	.word	0x54442d18
 8008104:	3ff921fb 	.word	0x3ff921fb
 8008108:	54442d18 	.word	0x54442d18
 800810c:	3fe921fb 	.word	0x3fe921fb
 8008110:	54442d18 	.word	0x54442d18
 8008114:	bff921fb 	.word	0xbff921fb
 8008118:	08008658 	.word	0x08008658
 800811c:	08008640 	.word	0x08008640
 8008120:	54442d18 	.word	0x54442d18
 8008124:	c00921fb 	.word	0xc00921fb
 8008128:	7ff00000 	.word	0x7ff00000
 800812c:	00000000 	.word	0x00000000

08008130 <atan>:
 8008130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008134:	ec55 4b10 	vmov	r4, r5, d0
 8008138:	4bbf      	ldr	r3, [pc, #764]	@ (8008438 <atan+0x308>)
 800813a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800813e:	429e      	cmp	r6, r3
 8008140:	46ab      	mov	fp, r5
 8008142:	d918      	bls.n	8008176 <atan+0x46>
 8008144:	4bbd      	ldr	r3, [pc, #756]	@ (800843c <atan+0x30c>)
 8008146:	429e      	cmp	r6, r3
 8008148:	d801      	bhi.n	800814e <atan+0x1e>
 800814a:	d109      	bne.n	8008160 <atan+0x30>
 800814c:	b144      	cbz	r4, 8008160 <atan+0x30>
 800814e:	4622      	mov	r2, r4
 8008150:	462b      	mov	r3, r5
 8008152:	4620      	mov	r0, r4
 8008154:	4629      	mov	r1, r5
 8008156:	f7f8 f891 	bl	800027c <__adddf3>
 800815a:	4604      	mov	r4, r0
 800815c:	460d      	mov	r5, r1
 800815e:	e006      	b.n	800816e <atan+0x3e>
 8008160:	f1bb 0f00 	cmp.w	fp, #0
 8008164:	f340 812b 	ble.w	80083be <atan+0x28e>
 8008168:	a597      	add	r5, pc, #604	@ (adr r5, 80083c8 <atan+0x298>)
 800816a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800816e:	ec45 4b10 	vmov	d0, r4, r5
 8008172:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008176:	4bb2      	ldr	r3, [pc, #712]	@ (8008440 <atan+0x310>)
 8008178:	429e      	cmp	r6, r3
 800817a:	d813      	bhi.n	80081a4 <atan+0x74>
 800817c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8008180:	429e      	cmp	r6, r3
 8008182:	d80c      	bhi.n	800819e <atan+0x6e>
 8008184:	a392      	add	r3, pc, #584	@ (adr r3, 80083d0 <atan+0x2a0>)
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	4620      	mov	r0, r4
 800818c:	4629      	mov	r1, r5
 800818e:	f7f8 f875 	bl	800027c <__adddf3>
 8008192:	4bac      	ldr	r3, [pc, #688]	@ (8008444 <atan+0x314>)
 8008194:	2200      	movs	r2, #0
 8008196:	f7f8 fcb7 	bl	8000b08 <__aeabi_dcmpgt>
 800819a:	2800      	cmp	r0, #0
 800819c:	d1e7      	bne.n	800816e <atan+0x3e>
 800819e:	f04f 3aff 	mov.w	sl, #4294967295
 80081a2:	e029      	b.n	80081f8 <atan+0xc8>
 80081a4:	f000 f95c 	bl	8008460 <fabs>
 80081a8:	4ba7      	ldr	r3, [pc, #668]	@ (8008448 <atan+0x318>)
 80081aa:	429e      	cmp	r6, r3
 80081ac:	ec55 4b10 	vmov	r4, r5, d0
 80081b0:	f200 80bc 	bhi.w	800832c <atan+0x1fc>
 80081b4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80081b8:	429e      	cmp	r6, r3
 80081ba:	f200 809e 	bhi.w	80082fa <atan+0x1ca>
 80081be:	4622      	mov	r2, r4
 80081c0:	462b      	mov	r3, r5
 80081c2:	4620      	mov	r0, r4
 80081c4:	4629      	mov	r1, r5
 80081c6:	f7f8 f859 	bl	800027c <__adddf3>
 80081ca:	4b9e      	ldr	r3, [pc, #632]	@ (8008444 <atan+0x314>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	f7f8 f853 	bl	8000278 <__aeabi_dsub>
 80081d2:	2200      	movs	r2, #0
 80081d4:	4606      	mov	r6, r0
 80081d6:	460f      	mov	r7, r1
 80081d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80081dc:	4620      	mov	r0, r4
 80081de:	4629      	mov	r1, r5
 80081e0:	f7f8 f84c 	bl	800027c <__adddf3>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4630      	mov	r0, r6
 80081ea:	4639      	mov	r1, r7
 80081ec:	f7f8 fb26 	bl	800083c <__aeabi_ddiv>
 80081f0:	f04f 0a00 	mov.w	sl, #0
 80081f4:	4604      	mov	r4, r0
 80081f6:	460d      	mov	r5, r1
 80081f8:	4622      	mov	r2, r4
 80081fa:	462b      	mov	r3, r5
 80081fc:	4620      	mov	r0, r4
 80081fe:	4629      	mov	r1, r5
 8008200:	f7f8 f9f2 	bl	80005e8 <__aeabi_dmul>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4680      	mov	r8, r0
 800820a:	4689      	mov	r9, r1
 800820c:	f7f8 f9ec 	bl	80005e8 <__aeabi_dmul>
 8008210:	a371      	add	r3, pc, #452	@ (adr r3, 80083d8 <atan+0x2a8>)
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	4606      	mov	r6, r0
 8008218:	460f      	mov	r7, r1
 800821a:	f7f8 f9e5 	bl	80005e8 <__aeabi_dmul>
 800821e:	a370      	add	r3, pc, #448	@ (adr r3, 80083e0 <atan+0x2b0>)
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	f7f8 f82a 	bl	800027c <__adddf3>
 8008228:	4632      	mov	r2, r6
 800822a:	463b      	mov	r3, r7
 800822c:	f7f8 f9dc 	bl	80005e8 <__aeabi_dmul>
 8008230:	a36d      	add	r3, pc, #436	@ (adr r3, 80083e8 <atan+0x2b8>)
 8008232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008236:	f7f8 f821 	bl	800027c <__adddf3>
 800823a:	4632      	mov	r2, r6
 800823c:	463b      	mov	r3, r7
 800823e:	f7f8 f9d3 	bl	80005e8 <__aeabi_dmul>
 8008242:	a36b      	add	r3, pc, #428	@ (adr r3, 80083f0 <atan+0x2c0>)
 8008244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008248:	f7f8 f818 	bl	800027c <__adddf3>
 800824c:	4632      	mov	r2, r6
 800824e:	463b      	mov	r3, r7
 8008250:	f7f8 f9ca 	bl	80005e8 <__aeabi_dmul>
 8008254:	a368      	add	r3, pc, #416	@ (adr r3, 80083f8 <atan+0x2c8>)
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	f7f8 f80f 	bl	800027c <__adddf3>
 800825e:	4632      	mov	r2, r6
 8008260:	463b      	mov	r3, r7
 8008262:	f7f8 f9c1 	bl	80005e8 <__aeabi_dmul>
 8008266:	a366      	add	r3, pc, #408	@ (adr r3, 8008400 <atan+0x2d0>)
 8008268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826c:	f7f8 f806 	bl	800027c <__adddf3>
 8008270:	4642      	mov	r2, r8
 8008272:	464b      	mov	r3, r9
 8008274:	f7f8 f9b8 	bl	80005e8 <__aeabi_dmul>
 8008278:	a363      	add	r3, pc, #396	@ (adr r3, 8008408 <atan+0x2d8>)
 800827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827e:	4680      	mov	r8, r0
 8008280:	4689      	mov	r9, r1
 8008282:	4630      	mov	r0, r6
 8008284:	4639      	mov	r1, r7
 8008286:	f7f8 f9af 	bl	80005e8 <__aeabi_dmul>
 800828a:	a361      	add	r3, pc, #388	@ (adr r3, 8008410 <atan+0x2e0>)
 800828c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008290:	f7f7 fff2 	bl	8000278 <__aeabi_dsub>
 8008294:	4632      	mov	r2, r6
 8008296:	463b      	mov	r3, r7
 8008298:	f7f8 f9a6 	bl	80005e8 <__aeabi_dmul>
 800829c:	a35e      	add	r3, pc, #376	@ (adr r3, 8008418 <atan+0x2e8>)
 800829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a2:	f7f7 ffe9 	bl	8000278 <__aeabi_dsub>
 80082a6:	4632      	mov	r2, r6
 80082a8:	463b      	mov	r3, r7
 80082aa:	f7f8 f99d 	bl	80005e8 <__aeabi_dmul>
 80082ae:	a35c      	add	r3, pc, #368	@ (adr r3, 8008420 <atan+0x2f0>)
 80082b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b4:	f7f7 ffe0 	bl	8000278 <__aeabi_dsub>
 80082b8:	4632      	mov	r2, r6
 80082ba:	463b      	mov	r3, r7
 80082bc:	f7f8 f994 	bl	80005e8 <__aeabi_dmul>
 80082c0:	a359      	add	r3, pc, #356	@ (adr r3, 8008428 <atan+0x2f8>)
 80082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c6:	f7f7 ffd7 	bl	8000278 <__aeabi_dsub>
 80082ca:	4632      	mov	r2, r6
 80082cc:	463b      	mov	r3, r7
 80082ce:	f7f8 f98b 	bl	80005e8 <__aeabi_dmul>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	4640      	mov	r0, r8
 80082d8:	4649      	mov	r1, r9
 80082da:	f7f7 ffcf 	bl	800027c <__adddf3>
 80082de:	4622      	mov	r2, r4
 80082e0:	462b      	mov	r3, r5
 80082e2:	f7f8 f981 	bl	80005e8 <__aeabi_dmul>
 80082e6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	d148      	bne.n	8008382 <atan+0x252>
 80082f0:	4620      	mov	r0, r4
 80082f2:	4629      	mov	r1, r5
 80082f4:	f7f7 ffc0 	bl	8000278 <__aeabi_dsub>
 80082f8:	e72f      	b.n	800815a <atan+0x2a>
 80082fa:	4b52      	ldr	r3, [pc, #328]	@ (8008444 <atan+0x314>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	4620      	mov	r0, r4
 8008300:	4629      	mov	r1, r5
 8008302:	f7f7 ffb9 	bl	8000278 <__aeabi_dsub>
 8008306:	4b4f      	ldr	r3, [pc, #316]	@ (8008444 <atan+0x314>)
 8008308:	4606      	mov	r6, r0
 800830a:	460f      	mov	r7, r1
 800830c:	2200      	movs	r2, #0
 800830e:	4620      	mov	r0, r4
 8008310:	4629      	mov	r1, r5
 8008312:	f7f7 ffb3 	bl	800027c <__adddf3>
 8008316:	4602      	mov	r2, r0
 8008318:	460b      	mov	r3, r1
 800831a:	4630      	mov	r0, r6
 800831c:	4639      	mov	r1, r7
 800831e:	f7f8 fa8d 	bl	800083c <__aeabi_ddiv>
 8008322:	f04f 0a01 	mov.w	sl, #1
 8008326:	4604      	mov	r4, r0
 8008328:	460d      	mov	r5, r1
 800832a:	e765      	b.n	80081f8 <atan+0xc8>
 800832c:	4b47      	ldr	r3, [pc, #284]	@ (800844c <atan+0x31c>)
 800832e:	429e      	cmp	r6, r3
 8008330:	d21c      	bcs.n	800836c <atan+0x23c>
 8008332:	4b47      	ldr	r3, [pc, #284]	@ (8008450 <atan+0x320>)
 8008334:	2200      	movs	r2, #0
 8008336:	4620      	mov	r0, r4
 8008338:	4629      	mov	r1, r5
 800833a:	f7f7 ff9d 	bl	8000278 <__aeabi_dsub>
 800833e:	4b44      	ldr	r3, [pc, #272]	@ (8008450 <atan+0x320>)
 8008340:	4606      	mov	r6, r0
 8008342:	460f      	mov	r7, r1
 8008344:	2200      	movs	r2, #0
 8008346:	4620      	mov	r0, r4
 8008348:	4629      	mov	r1, r5
 800834a:	f7f8 f94d 	bl	80005e8 <__aeabi_dmul>
 800834e:	4b3d      	ldr	r3, [pc, #244]	@ (8008444 <atan+0x314>)
 8008350:	2200      	movs	r2, #0
 8008352:	f7f7 ff93 	bl	800027c <__adddf3>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	4630      	mov	r0, r6
 800835c:	4639      	mov	r1, r7
 800835e:	f7f8 fa6d 	bl	800083c <__aeabi_ddiv>
 8008362:	f04f 0a02 	mov.w	sl, #2
 8008366:	4604      	mov	r4, r0
 8008368:	460d      	mov	r5, r1
 800836a:	e745      	b.n	80081f8 <atan+0xc8>
 800836c:	4622      	mov	r2, r4
 800836e:	462b      	mov	r3, r5
 8008370:	4938      	ldr	r1, [pc, #224]	@ (8008454 <atan+0x324>)
 8008372:	2000      	movs	r0, #0
 8008374:	f7f8 fa62 	bl	800083c <__aeabi_ddiv>
 8008378:	f04f 0a03 	mov.w	sl, #3
 800837c:	4604      	mov	r4, r0
 800837e:	460d      	mov	r5, r1
 8008380:	e73a      	b.n	80081f8 <atan+0xc8>
 8008382:	4b35      	ldr	r3, [pc, #212]	@ (8008458 <atan+0x328>)
 8008384:	4e35      	ldr	r6, [pc, #212]	@ (800845c <atan+0x32c>)
 8008386:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800838a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838e:	f7f7 ff73 	bl	8000278 <__aeabi_dsub>
 8008392:	4622      	mov	r2, r4
 8008394:	462b      	mov	r3, r5
 8008396:	f7f7 ff6f 	bl	8000278 <__aeabi_dsub>
 800839a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80083a6:	f7f7 ff67 	bl	8000278 <__aeabi_dsub>
 80083aa:	f1bb 0f00 	cmp.w	fp, #0
 80083ae:	4604      	mov	r4, r0
 80083b0:	460d      	mov	r5, r1
 80083b2:	f6bf aedc 	bge.w	800816e <atan+0x3e>
 80083b6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80083ba:	461d      	mov	r5, r3
 80083bc:	e6d7      	b.n	800816e <atan+0x3e>
 80083be:	a51c      	add	r5, pc, #112	@ (adr r5, 8008430 <atan+0x300>)
 80083c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80083c4:	e6d3      	b.n	800816e <atan+0x3e>
 80083c6:	bf00      	nop
 80083c8:	54442d18 	.word	0x54442d18
 80083cc:	3ff921fb 	.word	0x3ff921fb
 80083d0:	8800759c 	.word	0x8800759c
 80083d4:	7e37e43c 	.word	0x7e37e43c
 80083d8:	e322da11 	.word	0xe322da11
 80083dc:	3f90ad3a 	.word	0x3f90ad3a
 80083e0:	24760deb 	.word	0x24760deb
 80083e4:	3fa97b4b 	.word	0x3fa97b4b
 80083e8:	a0d03d51 	.word	0xa0d03d51
 80083ec:	3fb10d66 	.word	0x3fb10d66
 80083f0:	c54c206e 	.word	0xc54c206e
 80083f4:	3fb745cd 	.word	0x3fb745cd
 80083f8:	920083ff 	.word	0x920083ff
 80083fc:	3fc24924 	.word	0x3fc24924
 8008400:	5555550d 	.word	0x5555550d
 8008404:	3fd55555 	.word	0x3fd55555
 8008408:	2c6a6c2f 	.word	0x2c6a6c2f
 800840c:	bfa2b444 	.word	0xbfa2b444
 8008410:	52defd9a 	.word	0x52defd9a
 8008414:	3fadde2d 	.word	0x3fadde2d
 8008418:	af749a6d 	.word	0xaf749a6d
 800841c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008420:	fe231671 	.word	0xfe231671
 8008424:	3fbc71c6 	.word	0x3fbc71c6
 8008428:	9998ebc4 	.word	0x9998ebc4
 800842c:	3fc99999 	.word	0x3fc99999
 8008430:	54442d18 	.word	0x54442d18
 8008434:	bff921fb 	.word	0xbff921fb
 8008438:	440fffff 	.word	0x440fffff
 800843c:	7ff00000 	.word	0x7ff00000
 8008440:	3fdbffff 	.word	0x3fdbffff
 8008444:	3ff00000 	.word	0x3ff00000
 8008448:	3ff2ffff 	.word	0x3ff2ffff
 800844c:	40038000 	.word	0x40038000
 8008450:	3ff80000 	.word	0x3ff80000
 8008454:	bff00000 	.word	0xbff00000
 8008458:	08008670 	.word	0x08008670
 800845c:	08008690 	.word	0x08008690

08008460 <fabs>:
 8008460:	ec51 0b10 	vmov	r0, r1, d0
 8008464:	4602      	mov	r2, r0
 8008466:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800846a:	ec43 2b10 	vmov	d0, r2, r3
 800846e:	4770      	bx	lr

08008470 <_init>:
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	bf00      	nop
 8008474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008476:	bc08      	pop	{r3}
 8008478:	469e      	mov	lr, r3
 800847a:	4770      	bx	lr

0800847c <_fini>:
 800847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847e:	bf00      	nop
 8008480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008482:	bc08      	pop	{r3}
 8008484:	469e      	mov	lr, r3
 8008486:	4770      	bx	lr
