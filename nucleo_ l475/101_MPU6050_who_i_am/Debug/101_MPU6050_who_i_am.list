
101_MPU6050_who_i_am.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d98  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005f28  08005f28  00006f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fb4  08005fb4  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005fb4  08005fb4  00006fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fbc  08005fbc  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fbc  08005fbc  00006fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fc0  08005fc0  00006fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005fc4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000068  0800602c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  0800602c  00007304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ae2  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a41  00000000  00000000  0001bb7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0001e5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f16  00000000  00000000  0001f900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028489  00000000  00000000  00020816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d2e  00000000  00000000  00048c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f75c2  00000000  00000000  0005f9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156f8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005948  00000000  00000000  00156fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0015c91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f10 	.word	0x08005f10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005f10 	.word	0x08005f10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// This function re-routes the standard `printf` function to use the specified UART peripheral.
// It allows developers to print messages to a connected terminal or serial monitor for debugging.
int _write(int file, char *ptr, int len) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	68b9      	ldr	r1, [r7, #8]
 80005b2:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <_write+0x28>)
 80005b4:	f003 fcb0 	bl	8003f18 <HAL_UART_Transmit>
    return len;
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000124 	.word	0x20000124

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fc12 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f82c 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f928 	bl	8000828 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d8:	f000 f8f6 	bl	80007c8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80005dc:	f000 f8be 	bl	800075c <MX_TIM6_Init>
  MX_I2C1_Init();
 80005e0:	f000 f87e 	bl	80006e0 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005e4:	f000 f867 	bl	80006b6 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // Starts the TIM4 timer in interrupt mode, which triggers the `HAL_TIM_PeriodElapsedCallback` function periodically.
  HAL_TIM_Base_Start_IT(&htim6);
 80005e8:	480c      	ldr	r0, [pc, #48]	@ (800061c <main+0x54>)
 80005ea:	f003 f95b 	bl	80038a4 <HAL_TIM_Base_Start_IT>
  // Calls the MPU6050 initialization function to configure the sensor.
  MPU6050_Init();
 80005ee:	f000 f9d5 	bl	800099c <MPU6050_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(f_imu_send == 1){
 80005f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <main+0x58>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d1fb      	bne.n	80005f2 <main+0x2a>
		  who_am_i = Read_MPU6050_ID();
 80005fa:	f000 f995 	bl	8000928 <Read_MPU6050_ID>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <main+0x5c>)
 8000604:	701a      	strb	r2, [r3, #0]
		  printf("CHIP ID: %d \r\n", who_am_i);
 8000606:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <main+0x5c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4619      	mov	r1, r3
 800060c:	4806      	ldr	r0, [pc, #24]	@ (8000628 <main+0x60>)
 800060e:	f004 fe13 	bl	8005238 <iprintf>
		  f_imu_send = 0;
 8000612:	4b03      	ldr	r3, [pc, #12]	@ (8000620 <main+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
	  if(f_imu_send == 1){
 8000618:	e7eb      	b.n	80005f2 <main+0x2a>
 800061a:	bf00      	nop
 800061c:	200000d8 	.word	0x200000d8
 8000620:	200001ac 	.word	0x200001ac
 8000624:	200001ad 	.word	0x200001ad
 8000628:	08005f28 	.word	0x08005f28

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b096      	sub	sp, #88	@ 0x58
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2244      	movs	r2, #68	@ 0x44
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fe51 	bl	80052e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800064e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000652:	f001 fdbd 	bl	80021d0 <HAL_PWREx_ControlVoltageScaling>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800065c:	f000 f9be 	bl	80009dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000668:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066a:	2310      	movs	r3, #16
 800066c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066e:	2300      	movs	r3, #0
 8000670:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fe00 	bl	800227c <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000682:	f000 f9ab 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800068a:	2301      	movs	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 800068e:	23a0      	movs	r3, #160	@ 0xa0
 8000690:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 f9c8 	bl	8002a34 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006aa:	f000 f997 	bl	80009dc <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3758      	adds	r7, #88	@ 0x58
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2036      	movs	r0, #54	@ 0x36
 80006c0:	f000 fd13 	bl	80010ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006c4:	2036      	movs	r0, #54	@ 0x36
 80006c6:	f000 fd2c 	bl	8001122 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2026      	movs	r0, #38	@ 0x26
 80006d0:	f000 fd0b 	bl	80010ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006d4:	2026      	movs	r0, #38	@ 0x26
 80006d6:	f000 fd24 	bl	8001122 <HAL_NVIC_EnableIRQ>
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <MX_I2C1_Init+0x74>)
 80006e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000758 <MX_I2C1_Init+0x78>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000508;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <MX_I2C1_Init+0x74>)
 80006ec:	f44f 62a1 	mov.w	r2, #1288	@ 0x508
 80006f0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006f2:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <MX_I2C1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <MX_I2C1_Init+0x74>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <MX_I2C1_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <MX_I2C1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800070a:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_I2C1_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000710:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <MX_I2C1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000716:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_I2C1_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071c:	480d      	ldr	r0, [pc, #52]	@ (8000754 <MX_I2C1_Init+0x74>)
 800071e:	f000 ff75 	bl	800160c <HAL_I2C_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000728:	f000 f958 	bl	80009dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800072c:	2100      	movs	r1, #0
 800072e:	4809      	ldr	r0, [pc, #36]	@ (8000754 <MX_I2C1_Init+0x74>)
 8000730:	f001 fca8 	bl	8002084 <HAL_I2CEx_ConfigAnalogFilter>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800073a:	f000 f94f 	bl	80009dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800073e:	2100      	movs	r1, #0
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_I2C1_Init+0x74>)
 8000742:	f001 fcea 	bl	800211a <HAL_I2CEx_ConfigDigitalFilter>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800074c:	f000 f946 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000084 	.word	0x20000084
 8000758:	40005400 	.word	0x40005400

0800075c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800076c:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_TIM6_Init+0x64>)
 800076e:	4a15      	ldr	r2, [pc, #84]	@ (80007c4 <MX_TIM6_Init+0x68>)
 8000770:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 8000772:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <MX_TIM6_Init+0x64>)
 8000774:	2263      	movs	r2, #99	@ 0x63
 8000776:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_TIM6_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <MX_TIM6_Init+0x64>)
 8000780:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000784:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_TIM6_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800078c:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <MX_TIM6_Init+0x64>)
 800078e:	f003 f831 	bl	80037f4 <HAL_TIM_Base_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000798:	f000 f920 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_TIM6_Init+0x64>)
 80007aa:	f003 fac1 	bl	8003d30 <HAL_TIMEx_MasterConfigSynchronization>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80007b4:	f000 f912 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000d8 	.word	0x200000d8
 80007c4:	40001000 	.word	0x40001000

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007ce:	4a15      	ldr	r2, [pc, #84]	@ (8000824 <MX_USART2_UART_Init+0x5c>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 800080c:	f003 fb36 	bl	8003e7c <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000816:	f000 f8e1 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000124 	.word	0x20000124
 8000824:	40004400 	.word	0x40004400

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	@ 0x28
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	4b2b      	ldr	r3, [pc, #172]	@ (80008ec <MX_GPIO_Init+0xc4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	4a2a      	ldr	r2, [pc, #168]	@ (80008ec <MX_GPIO_Init+0xc4>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084a:	4b28      	ldr	r3, [pc, #160]	@ (80008ec <MX_GPIO_Init+0xc4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <MX_GPIO_Init+0xc4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	4a24      	ldr	r2, [pc, #144]	@ (80008ec <MX_GPIO_Init+0xc4>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000862:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <MX_GPIO_Init+0xc4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <MX_GPIO_Init+0xc4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	4a1e      	ldr	r2, [pc, #120]	@ (80008ec <MX_GPIO_Init+0xc4>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <MX_GPIO_Init+0xc4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <MX_GPIO_Init+0xc4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	4a18      	ldr	r2, [pc, #96]	@ (80008ec <MX_GPIO_Init+0xc4>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000892:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <MX_GPIO_Init+0xc4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2120      	movs	r1, #32
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a6:	f000 fe7f 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	480b      	ldr	r0, [pc, #44]	@ (80008f0 <MX_GPIO_Init+0xc8>)
 80008c2:	f000 fcc7 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008c6:	2320      	movs	r3, #32
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e0:	f000 fcb8 	bl	8001254 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	@ 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48000800 	.word	0x48000800

080008f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// This is the callback function that gets called automatically when a timer period elapses.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
    // Checks if the interrupt came from TIM4.
    if (htim->Instance == TIM6) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a07      	ldr	r2, [pc, #28]	@ (8000920 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d107      	bne.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x22>
        // Toggles a pin (PD12) on the board. This can be used as a visual indicator (e.g., an LED) or for debugging.
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000906:	2120      	movs	r1, #32
 8000908:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090c:	f000 fe64 	bl	80015d8 <HAL_GPIO_TogglePin>
        // Sets the flag to 1, signaling the main loop to read and send IMU data.
        f_imu_send = 1;
 8000910:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
    }
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40001000 	.word	0x40001000
 8000924:	200001ac 	.word	0x200001ac

08000928 <Read_MPU6050_ID>:

// Function to read the MPU6050's WHO_AM_I register. This is for verifying the device.
// The return value seems to be a placeholder and doesn't return the actual register value.
uint8_t Read_MPU6050_ID() {
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af04      	add	r7, sp, #16
	// Reads the WHO_AM_I register using HAL's I2C memory read function.
	uint8_t reg = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	71fb      	strb	r3, [r7, #7]
	who_am_i =  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 100);
 8000932:	2364      	movs	r3, #100	@ 0x64
 8000934:	9302      	str	r3, [sp, #8]
 8000936:	2301      	movs	r3, #1
 8000938:	9301      	str	r3, [sp, #4]
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	2301      	movs	r3, #1
 8000940:	2275      	movs	r2, #117	@ 0x75
 8000942:	21d0      	movs	r1, #208	@ 0xd0
 8000944:	4805      	ldr	r0, [pc, #20]	@ (800095c <Read_MPU6050_ID+0x34>)
 8000946:	f001 f815 	bl	8001974 <HAL_I2C_Mem_Read>
 800094a:	4603      	mov	r3, r0
 800094c:	461a      	mov	r2, r3
 800094e:	4b04      	ldr	r3, [pc, #16]	@ (8000960 <Read_MPU6050_ID+0x38>)
 8000950:	701a      	strb	r2, [r3, #0]
	return reg;
 8000952:	79fb      	ldrb	r3, [r7, #7]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000084 	.word	0x20000084
 8000960:	200001ad 	.word	0x200001ad

08000964 <MPU6050_Write>:

// Wraps the HAL I2C Master Transmit function for a single register write.
void MPU6050_Write(uint8_t reg, uint8_t data) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af02      	add	r7, sp, #8
 800096a:	4603      	mov	r3, r0
 800096c:	460a      	mov	r2, r1
 800096e:	71fb      	strb	r3, [r7, #7]
 8000970:	4613      	mov	r3, r2
 8000972:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg, data};
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	733b      	strb	r3, [r7, #12]
 8000978:	79bb      	ldrb	r3, [r7, #6]
 800097a:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buffer, 2, 100);
 800097c:	f107 020c 	add.w	r2, r7, #12
 8000980:	2364      	movs	r3, #100	@ 0x64
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2302      	movs	r3, #2
 8000986:	21d0      	movs	r1, #208	@ 0xd0
 8000988:	4803      	ldr	r0, [pc, #12]	@ (8000998 <MPU6050_Write+0x34>)
 800098a:	f000 fedb 	bl	8001744 <HAL_I2C_Master_Transmit>
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000084 	.word	0x20000084

0800099c <MPU6050_Init>:
    HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, &reg, 1, 100);
    HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, data, length, 100);
}

// Initializes the MPU6050 sensor by writing to its configuration registers.
void MPU6050_Init(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
    // 1. Wakes up the sensor by writing 0x00 to the Power Management 1 register.
    MPU6050_Write(PWR_MGMT_1, 0x00);
 80009a0:	2100      	movs	r1, #0
 80009a2:	206b      	movs	r0, #107	@ 0x6b
 80009a4:	f7ff ffde 	bl	8000964 <MPU6050_Write>
    HAL_Delay(100);
 80009a8:	2064      	movs	r0, #100	@ 0x64
 80009aa:	f000 fa9f 	bl	8000eec <HAL_Delay>
    // 2. Configures the accelerometer full-scale range to ±2g by writing 0x00.
    MPU6050_Write(ACCEL_CONFIG, 0x00);
 80009ae:	2100      	movs	r1, #0
 80009b0:	201c      	movs	r0, #28
 80009b2:	f7ff ffd7 	bl	8000964 <MPU6050_Write>
    HAL_Delay(10);
 80009b6:	200a      	movs	r0, #10
 80009b8:	f000 fa98 	bl	8000eec <HAL_Delay>
    // 2. (commented out) Configures the gyroscope full-scale range to ±250°/s.
    // MPU6050_Write(0x1B, 0x00);
    // HAL_Delay(10);
    // 3. Sets the sample rate divider to 7, resulting in a sample rate of 1kHz / (1+7) = 125Hz.
    MPU6050_Write(SMPLRT_DIV, 0x07);
 80009bc:	2107      	movs	r1, #7
 80009be:	2019      	movs	r0, #25
 80009c0:	f7ff ffd0 	bl	8000964 <MPU6050_Write>
    HAL_Delay(10);
 80009c4:	200a      	movs	r0, #10
 80009c6:	f000 fa91 	bl	8000eec <HAL_Delay>
    // 4. Configures the Digital Low-Pass Filter (DLPF) to a bandwidth of 44Hz.
    MPU6050_Write(CONFIG, 0x03);
 80009ca:	2103      	movs	r1, #3
 80009cc:	201a      	movs	r0, #26
 80009ce:	f7ff ffc9 	bl	8000964 <MPU6050_Write>
    HAL_Delay(10);
 80009d2:	200a      	movs	r0, #10
 80009d4:	f000 fa8a 	bl	8000eec <HAL_Delay>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <Error_Handler+0x8>

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <HAL_MspInit+0x44>)
 80009f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009f2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <HAL_MspInit+0x44>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <HAL_MspInit+0x44>)
 80009fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0a:	4a08      	ldr	r2, [pc, #32]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0ac      	sub	sp, #176	@ 0xb0
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2288      	movs	r2, #136	@ 0x88
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f004 fc46 	bl	80052e2 <memset>
  if(hi2c->Instance==I2C1)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a21      	ldr	r2, [pc, #132]	@ (8000ae0 <HAL_I2C_MspInit+0xb0>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d13b      	bne.n	8000ad8 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a60:	2340      	movs	r3, #64	@ 0x40
 8000a62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 fa05 	bl	8002e7c <HAL_RCCEx_PeriphCLKConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a78:	f7ff ffb0 	bl	80009dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <HAL_I2C_MspInit+0xb4>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a80:	4a18      	ldr	r2, [pc, #96]	@ (8000ae4 <HAL_I2C_MspInit+0xb4>)
 8000a82:	f043 0302 	orr.w	r3, r3, #2
 8000a86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a88:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <HAL_I2C_MspInit+0xb4>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a94:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9c:	2312      	movs	r3, #18
 8000a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480b      	ldr	r0, [pc, #44]	@ (8000ae8 <HAL_I2C_MspInit+0xb8>)
 8000abc:	f000 fbca 	bl	8001254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <HAL_I2C_MspInit+0xb4>)
 8000ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac4:	4a07      	ldr	r2, [pc, #28]	@ (8000ae4 <HAL_I2C_MspInit+0xb4>)
 8000ac6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8000acc:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <HAL_I2C_MspInit+0xb4>)
 8000ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ad8:	bf00      	nop
 8000ada:	37b0      	adds	r7, #176	@ 0xb0
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	48000400 	.word	0x48000400

08000aec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <HAL_TIM_Base_MspInit+0x38>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10b      	bne.n	8000b16 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000afe:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <HAL_TIM_Base_MspInit+0x3c>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b02:	4a09      	ldr	r2, [pc, #36]	@ (8000b28 <HAL_TIM_Base_MspInit+0x3c>)
 8000b04:	f043 0310 	orr.w	r3, r3, #16
 8000b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b0a:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <HAL_TIM_Base_MspInit+0x3c>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40001000 	.word	0x40001000
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b0ac      	sub	sp, #176	@ 0xb0
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2288      	movs	r2, #136	@ 0x88
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f004 fbc8 	bl	80052e2 <memset>
  if(huart->Instance==USART2)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a21      	ldr	r2, [pc, #132]	@ (8000bdc <HAL_UART_MspInit+0xb0>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d13b      	bne.n	8000bd4 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 f987 	bl	8002e7c <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b74:	f7ff ff32 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b78:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <HAL_UART_MspInit+0xb4>)
 8000b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7c:	4a18      	ldr	r2, [pc, #96]	@ (8000be0 <HAL_UART_MspInit+0xb4>)
 8000b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b82:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b84:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <HAL_UART_MspInit+0xb4>)
 8000b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <HAL_UART_MspInit+0xb4>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b94:	4a12      	ldr	r2, [pc, #72]	@ (8000be0 <HAL_UART_MspInit+0xb4>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9c:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <HAL_UART_MspInit+0xb4>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ba8:	230c      	movs	r3, #12
 8000baa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd0:	f000 fb40 	bl	8001254 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bd4:	bf00      	nop
 8000bd6:	37b0      	adds	r7, #176	@ 0xb0
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40004400 	.word	0x40004400
 8000be0:	40021000 	.word	0x40021000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <NMI_Handler+0x4>

08000bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3a:	f000 f937 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <USART2_IRQHandler+0x10>)
 8000c4a:	f003 f9ef 	bl	800402c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000124 	.word	0x20000124

08000c58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <TIM6_DAC_IRQHandler+0x10>)
 8000c5e:	f002 fe91 	bl	8003984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000d8 	.word	0x200000d8

08000c6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e00a      	b.n	8000c94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c7e:	f3af 8000 	nop.w
 8000c82:	4601      	mov	r1, r0
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	60ba      	str	r2, [r7, #8]
 8000c8a:	b2ca      	uxtb	r2, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbf0      	blt.n	8000c7e <_read+0x12>
  }

  return len;
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cce:	605a      	str	r2, [r3, #4]
  return 0;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_isatty>:

int _isatty(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	@ (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f004 fb1e 	bl	8005380 <__errno>
 8000d44:	4603      	mov	r3, r0
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20018000 	.word	0x20018000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	200001b0 	.word	0x200001b0
 8000d78:	20000308 	.word	0x20000308

08000d7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da4:	f7ff ffea 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	@ (8000de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <LoopForever+0xe>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dec <LoopForever+0x16>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f004 fadd 	bl	800538c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dd2:	f7ff fbf9 	bl	80005c8 <main>

08000dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000de4:	08005fc4 	.word	0x08005fc4
  ldr r2, =_sbss
 8000de8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dec:	20000304 	.word	0x20000304

08000df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC1_2_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <HAL_Init+0x3c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a0b      	ldr	r2, [pc, #44]	@ (8000e30 <HAL_Init+0x3c>)
 8000e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	f000 f962 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e10:	2000      	movs	r0, #0
 8000e12:	f000 f80f 	bl	8000e34 <HAL_InitTick>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d002      	beq.n	8000e22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	71fb      	strb	r3, [r7, #7]
 8000e20:	e001      	b.n	8000e26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e22:	f7ff fde1 	bl	80009e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e26:	79fb      	ldrb	r3, [r7, #7]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40022000 	.word	0x40022000

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e40:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <HAL_InitTick+0x6c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d023      	beq.n	8000e90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e48:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <HAL_InitTick+0x70>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <HAL_InitTick+0x6c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f96d 	bl	800113e <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10f      	bne.n	8000e8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d809      	bhi.n	8000e84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f000 f937 	bl	80010ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <HAL_InitTick+0x74>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	e007      	b.n	8000e94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e004      	b.n	8000e94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	e001      	b.n	8000e94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	200001b4 	.word	0x200001b4

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	@ (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200001b4 	.word	0x200001b4

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f06:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db0b      	blt.n	8000fc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	4907      	ldr	r1, [pc, #28]	@ (8000fd0 <__NVIC_EnableIRQ+0x38>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e100 	.word	0xe000e100

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	@ (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	@ (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	@ 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	@ 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f7ff ff8e 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff29 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff3e 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff8e 	bl	8001028 <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5d 	bl	8000fd4 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff31 	bl	8000f98 <__NVIC_EnableIRQ>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffa2 	bl	8001090 <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001156:	b480      	push	{r7}
 8001158:	b085      	sub	sp, #20
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d008      	beq.n	8001180 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2204      	movs	r2, #4
 8001172:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e022      	b.n	80011c6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 020e 	bic.w	r2, r2, #14
 800118e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0201 	bic.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a4:	f003 021c 	and.w	r2, r3, #28
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	2101      	movs	r1, #1
 80011ae:	fa01 f202 	lsl.w	r2, r1, r2
 80011b2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b084      	sub	sp, #16
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d005      	beq.n	80011f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2204      	movs	r2, #4
 80011ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e029      	b.n	800124a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 020e 	bic.w	r2, r2, #14
 8001204:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0201 	bic.w	r2, r2, #1
 8001214:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121a:	f003 021c 	and.w	r2, r3, #28
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	2101      	movs	r1, #1
 8001224:	fa01 f202 	lsl.w	r2, r1, r2
 8001228:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	4798      	blx	r3
    }
  }
  return status;
 800124a:	7bfb      	ldrb	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001262:	e17f      	b.n	8001564 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2101      	movs	r1, #1
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	4013      	ands	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8171 	beq.w	800155e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b01      	cmp	r3, #1
 8001286:	d005      	beq.n	8001294 <HAL_GPIO_Init+0x40>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d130      	bne.n	80012f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ca:	2201      	movs	r2, #1
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	f003 0201 	and.w	r2, r3, #1
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d118      	bne.n	8001334 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001308:	2201      	movs	r2, #1
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	08db      	lsrs	r3, r3, #3
 800131e:	f003 0201 	and.w	r2, r3, #1
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b03      	cmp	r3, #3
 800133e:	d017      	beq.n	8001370 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d123      	bne.n	80013c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3208      	adds	r2, #8
 8001384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	6939      	ldr	r1, [r7, #16]
 80013c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0203 	and.w	r2, r3, #3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80ac 	beq.w	800155e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	4b5f      	ldr	r3, [pc, #380]	@ (8001584 <HAL_GPIO_Init+0x330>)
 8001408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800140a:	4a5e      	ldr	r2, [pc, #376]	@ (8001584 <HAL_GPIO_Init+0x330>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6613      	str	r3, [r2, #96]	@ 0x60
 8001412:	4b5c      	ldr	r3, [pc, #368]	@ (8001584 <HAL_GPIO_Init+0x330>)
 8001414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800141e:	4a5a      	ldr	r2, [pc, #360]	@ (8001588 <HAL_GPIO_Init+0x334>)
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	220f      	movs	r2, #15
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001448:	d025      	beq.n	8001496 <HAL_GPIO_Init+0x242>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4f      	ldr	r2, [pc, #316]	@ (800158c <HAL_GPIO_Init+0x338>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d01f      	beq.n	8001492 <HAL_GPIO_Init+0x23e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4e      	ldr	r2, [pc, #312]	@ (8001590 <HAL_GPIO_Init+0x33c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d019      	beq.n	800148e <HAL_GPIO_Init+0x23a>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4d      	ldr	r2, [pc, #308]	@ (8001594 <HAL_GPIO_Init+0x340>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d013      	beq.n	800148a <HAL_GPIO_Init+0x236>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4c      	ldr	r2, [pc, #304]	@ (8001598 <HAL_GPIO_Init+0x344>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d00d      	beq.n	8001486 <HAL_GPIO_Init+0x232>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4b      	ldr	r2, [pc, #300]	@ (800159c <HAL_GPIO_Init+0x348>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d007      	beq.n	8001482 <HAL_GPIO_Init+0x22e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4a      	ldr	r2, [pc, #296]	@ (80015a0 <HAL_GPIO_Init+0x34c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d101      	bne.n	800147e <HAL_GPIO_Init+0x22a>
 800147a:	2306      	movs	r3, #6
 800147c:	e00c      	b.n	8001498 <HAL_GPIO_Init+0x244>
 800147e:	2307      	movs	r3, #7
 8001480:	e00a      	b.n	8001498 <HAL_GPIO_Init+0x244>
 8001482:	2305      	movs	r3, #5
 8001484:	e008      	b.n	8001498 <HAL_GPIO_Init+0x244>
 8001486:	2304      	movs	r3, #4
 8001488:	e006      	b.n	8001498 <HAL_GPIO_Init+0x244>
 800148a:	2303      	movs	r3, #3
 800148c:	e004      	b.n	8001498 <HAL_GPIO_Init+0x244>
 800148e:	2302      	movs	r3, #2
 8001490:	e002      	b.n	8001498 <HAL_GPIO_Init+0x244>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <HAL_GPIO_Init+0x244>
 8001496:	2300      	movs	r3, #0
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	f002 0203 	and.w	r2, r2, #3
 800149e:	0092      	lsls	r2, r2, #2
 80014a0:	4093      	lsls	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014a8:	4937      	ldr	r1, [pc, #220]	@ (8001588 <HAL_GPIO_Init+0x334>)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	089b      	lsrs	r3, r3, #2
 80014ae:	3302      	adds	r3, #2
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014b6:	4b3b      	ldr	r3, [pc, #236]	@ (80015a4 <HAL_GPIO_Init+0x350>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014da:	4a32      	ldr	r2, [pc, #200]	@ (80015a4 <HAL_GPIO_Init+0x350>)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014e0:	4b30      	ldr	r3, [pc, #192]	@ (80015a4 <HAL_GPIO_Init+0x350>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001504:	4a27      	ldr	r2, [pc, #156]	@ (80015a4 <HAL_GPIO_Init+0x350>)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800150a:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <HAL_GPIO_Init+0x350>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800152e:	4a1d      	ldr	r2, [pc, #116]	@ (80015a4 <HAL_GPIO_Init+0x350>)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001534:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <HAL_GPIO_Init+0x350>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	43db      	mvns	r3, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001558:	4a12      	ldr	r2, [pc, #72]	@ (80015a4 <HAL_GPIO_Init+0x350>)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa22 f303 	lsr.w	r3, r2, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	f47f ae78 	bne.w	8001264 <HAL_GPIO_Init+0x10>
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	371c      	adds	r7, #28
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	40010000 	.word	0x40010000
 800158c:	48000400 	.word	0x48000400
 8001590:	48000800 	.word	0x48000800
 8001594:	48000c00 	.word	0x48000c00
 8001598:	48001000 	.word	0x48001000
 800159c:	48001400 	.word	0x48001400
 80015a0:	48001800 	.word	0x48001800
 80015a4:	40010400 	.word	0x40010400

080015a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
 80015b4:	4613      	mov	r3, r2
 80015b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b8:	787b      	ldrb	r3, [r7, #1]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015be:	887a      	ldrh	r2, [r7, #2]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c4:	e002      	b.n	80015cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4013      	ands	r3, r2
 80015f0:	041a      	lsls	r2, r3, #16
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43d9      	mvns	r1, r3
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	400b      	ands	r3, r1
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	619a      	str	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e08d      	b.n	800173a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d106      	bne.n	8001638 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff f9fc 	bl	8000a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2224      	movs	r2, #36	@ 0x24
 800163c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0201 	bic.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800165c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800166c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d107      	bne.n	8001686 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	e006      	b.n	8001694 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001692:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d108      	bne.n	80016ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	e007      	b.n	80016be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691a      	ldr	r2, [r3, #16]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69d9      	ldr	r1, [r3, #28]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a1a      	ldr	r2, [r3, #32]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 0201 	orr.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2220      	movs	r2, #32
 8001726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af02      	add	r7, sp, #8
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	461a      	mov	r2, r3
 8001750:	460b      	mov	r3, r1
 8001752:	817b      	strh	r3, [r7, #10]
 8001754:	4613      	mov	r3, r2
 8001756:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b20      	cmp	r3, #32
 8001762:	f040 80fd 	bne.w	8001960 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <HAL_I2C_Master_Transmit+0x30>
 8001770:	2302      	movs	r3, #2
 8001772:	e0f6      	b.n	8001962 <HAL_I2C_Master_Transmit+0x21e>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800177c:	f7ff fbaa 	bl	8000ed4 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	2319      	movs	r3, #25
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 fa82 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e0e1      	b.n	8001962 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2221      	movs	r2, #33	@ 0x21
 80017a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2210      	movs	r2, #16
 80017aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	893a      	ldrh	r2, [r7, #8]
 80017be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	2bff      	cmp	r3, #255	@ 0xff
 80017ce:	d906      	bls.n	80017de <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	22ff      	movs	r2, #255	@ 0xff
 80017d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80017d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e007      	b.n	80017ee <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80017e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017ec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d024      	beq.n	8001840 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	781a      	ldrb	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001810:	b29b      	uxth	r3, r3
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800181e:	3b01      	subs	r3, #1
 8001820:	b29a      	uxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800182a:	b2db      	uxtb	r3, r3
 800182c:	3301      	adds	r3, #1
 800182e:	b2da      	uxtb	r2, r3
 8001830:	8979      	ldrh	r1, [r7, #10]
 8001832:	4b4e      	ldr	r3, [pc, #312]	@ (800196c <HAL_I2C_Master_Transmit+0x228>)
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 fbf1 	bl	8002020 <I2C_TransferConfig>
 800183e:	e066      	b.n	800190e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001844:	b2da      	uxtb	r2, r3
 8001846:	8979      	ldrh	r1, [r7, #10]
 8001848:	4b48      	ldr	r3, [pc, #288]	@ (800196c <HAL_I2C_Master_Transmit+0x228>)
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 fbe6 	bl	8002020 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001854:	e05b      	b.n	800190e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	6a39      	ldr	r1, [r7, #32]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 fa75 	bl	8001d4a <I2C_WaitOnTXISFlagUntilTimeout>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e07b      	b.n	8001962 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001884:	b29b      	uxth	r3, r3
 8001886:	3b01      	subs	r3, #1
 8001888:	b29a      	uxth	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001892:	3b01      	subs	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d034      	beq.n	800190e <HAL_I2C_Master_Transmit+0x1ca>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d130      	bne.n	800190e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	2200      	movs	r2, #0
 80018b4:	2180      	movs	r1, #128	@ 0x80
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f9ee 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e04d      	b.n	8001962 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	2bff      	cmp	r3, #255	@ 0xff
 80018ce:	d90e      	bls.n	80018ee <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	22ff      	movs	r2, #255	@ 0xff
 80018d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	8979      	ldrh	r1, [r7, #10]
 80018de:	2300      	movs	r3, #0
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 fb9a 	bl	8002020 <I2C_TransferConfig>
 80018ec:	e00f      	b.n	800190e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	8979      	ldrh	r1, [r7, #10]
 8001900:	2300      	movs	r3, #0
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 fb89 	bl	8002020 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001912:	b29b      	uxth	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d19e      	bne.n	8001856 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	6a39      	ldr	r1, [r7, #32]
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 fa5b 	bl	8001dd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e01a      	b.n	8001962 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2220      	movs	r2, #32
 8001932:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6859      	ldr	r1, [r3, #4]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <HAL_I2C_Master_Transmit+0x22c>)
 8001940:	400b      	ands	r3, r1
 8001942:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2220      	movs	r2, #32
 8001948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	e000      	b.n	8001962 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001960:	2302      	movs	r3, #2
  }
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	80002000 	.word	0x80002000
 8001970:	fe00e800 	.word	0xfe00e800

08001974 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af02      	add	r7, sp, #8
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	4608      	mov	r0, r1
 800197e:	4611      	mov	r1, r2
 8001980:	461a      	mov	r2, r3
 8001982:	4603      	mov	r3, r0
 8001984:	817b      	strh	r3, [r7, #10]
 8001986:	460b      	mov	r3, r1
 8001988:	813b      	strh	r3, [r7, #8]
 800198a:	4613      	mov	r3, r2
 800198c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b20      	cmp	r3, #32
 8001998:	f040 80fd 	bne.w	8001b96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <HAL_I2C_Mem_Read+0x34>
 80019a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d105      	bne.n	80019b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0f1      	b.n	8001b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_I2C_Mem_Read+0x4e>
 80019be:	2302      	movs	r3, #2
 80019c0:	e0ea      	b.n	8001b98 <HAL_I2C_Mem_Read+0x224>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019ca:	f7ff fa83 	bl	8000ed4 <HAL_GetTick>
 80019ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2319      	movs	r3, #25
 80019d6:	2201      	movs	r2, #1
 80019d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 f95b 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0d5      	b.n	8001b98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2222      	movs	r2, #34	@ 0x22
 80019f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2240      	movs	r2, #64	@ 0x40
 80019f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6a3a      	ldr	r2, [r7, #32]
 8001a06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a14:	88f8      	ldrh	r0, [r7, #6]
 8001a16:	893a      	ldrh	r2, [r7, #8]
 8001a18:	8979      	ldrh	r1, [r7, #10]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	4603      	mov	r3, r0
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 f8bf 	bl	8001ba8 <I2C_RequestMemoryRead>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0ad      	b.n	8001b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	2bff      	cmp	r3, #255	@ 0xff
 8001a44:	d90e      	bls.n	8001a64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	8979      	ldrh	r1, [r7, #10]
 8001a54:	4b52      	ldr	r3, [pc, #328]	@ (8001ba0 <HAL_I2C_Mem_Read+0x22c>)
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 fadf 	bl	8002020 <I2C_TransferConfig>
 8001a62:	e00f      	b.n	8001a84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	8979      	ldrh	r1, [r7, #10]
 8001a76:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba0 <HAL_I2C_Mem_Read+0x22c>)
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 face 	bl	8002020 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2104      	movs	r1, #4
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f902 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e07c      	b.n	8001b98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aba:	3b01      	subs	r3, #1
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d034      	beq.n	8001b44 <HAL_I2C_Mem_Read+0x1d0>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d130      	bne.n	8001b44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2180      	movs	r1, #128	@ 0x80
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 f8d3 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e04d      	b.n	8001b98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	2bff      	cmp	r3, #255	@ 0xff
 8001b04:	d90e      	bls.n	8001b24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	8979      	ldrh	r1, [r7, #10]
 8001b14:	2300      	movs	r3, #0
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 fa7f 	bl	8002020 <I2C_TransferConfig>
 8001b22:	e00f      	b.n	8001b44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	8979      	ldrh	r1, [r7, #10]
 8001b36:	2300      	movs	r3, #0
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 fa6e 	bl	8002020 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d19a      	bne.n	8001a84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f940 	bl	8001dd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e01a      	b.n	8001b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2220      	movs	r2, #32
 8001b68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6859      	ldr	r1, [r3, #4]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <HAL_I2C_Mem_Read+0x230>)
 8001b76:	400b      	ands	r3, r1
 8001b78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001b96:	2302      	movs	r3, #2
  }
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	80002400 	.word	0x80002400
 8001ba4:	fe00e800 	.word	0xfe00e800

08001ba8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	4608      	mov	r0, r1
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	817b      	strh	r3, [r7, #10]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	813b      	strh	r3, [r7, #8]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	8979      	ldrh	r1, [r7, #10]
 8001bc8:	4b20      	ldr	r3, [pc, #128]	@ (8001c4c <I2C_RequestMemoryRead+0xa4>)
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 fa26 	bl	8002020 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	69b9      	ldr	r1, [r7, #24]
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f8b6 	bl	8001d4a <I2C_WaitOnTXISFlagUntilTimeout>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e02c      	b.n	8001c42 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d105      	bne.n	8001bfa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bee:	893b      	ldrh	r3, [r7, #8]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bf8:	e015      	b.n	8001c26 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bfa:	893b      	ldrh	r3, [r7, #8]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	69b9      	ldr	r1, [r7, #24]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 f89c 	bl	8001d4a <I2C_WaitOnTXISFlagUntilTimeout>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e012      	b.n	8001c42 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c1c:	893b      	ldrh	r3, [r7, #8]
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2140      	movs	r1, #64	@ 0x40
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 f831 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	80002000 	.word	0x80002000

08001c50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d103      	bne.n	8001c6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d007      	beq.n	8001c8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0201 	orr.w	r2, r2, #1
 8001c8a:	619a      	str	r2, [r3, #24]
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ca8:	e03b      	b.n	8001d22 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	6839      	ldr	r1, [r7, #0]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 f8d6 	bl	8001e60 <I2C_IsErrorOccurred>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e041      	b.n	8001d42 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d02d      	beq.n	8001d22 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc6:	f7ff f905 	bl	8000ed4 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d302      	bcc.n	8001cdc <I2C_WaitOnFlagUntilTimeout+0x44>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d122      	bne.n	8001d22 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	bf0c      	ite	eq
 8001cec:	2301      	moveq	r3, #1
 8001cee:	2300      	movne	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d113      	bne.n	8001d22 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	f043 0220 	orr.w	r2, r3, #32
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00f      	b.n	8001d42 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699a      	ldr	r2, [r3, #24]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	bf0c      	ite	eq
 8001d32:	2301      	moveq	r3, #1
 8001d34:	2300      	movne	r3, #0
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d0b4      	beq.n	8001caa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d56:	e033      	b.n	8001dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f87f 	bl	8001e60 <I2C_IsErrorOccurred>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e031      	b.n	8001dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d72:	d025      	beq.n	8001dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d74:	f7ff f8ae 	bl	8000ed4 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d302      	bcc.n	8001d8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d11a      	bne.n	8001dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d013      	beq.n	8001dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9c:	f043 0220 	orr.w	r2, r3, #32
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e007      	b.n	8001dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d1c4      	bne.n	8001d58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001de4:	e02f      	b.n	8001e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f838 	bl	8001e60 <I2C_IsErrorOccurred>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e02d      	b.n	8001e56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfa:	f7ff f86b 	bl	8000ed4 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d302      	bcc.n	8001e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d11a      	bne.n	8001e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	d013      	beq.n	8001e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	f043 0220 	orr.w	r2, r3, #32
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e007      	b.n	8001e56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	2b20      	cmp	r3, #32
 8001e52:	d1c8      	bne.n	8001de6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08a      	sub	sp, #40	@ 0x28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d068      	beq.n	8001f5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2210      	movs	r2, #16
 8001e92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e94:	e049      	b.n	8001f2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d045      	beq.n	8001f2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e9e:	f7ff f819 	bl	8000ed4 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d302      	bcc.n	8001eb4 <I2C_IsErrorOccurred+0x54>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d13a      	bne.n	8001f2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ebe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ec6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ed2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ed6:	d121      	bne.n	8001f1c <I2C_IsErrorOccurred+0xbc>
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ede:	d01d      	beq.n	8001f1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001ee0:	7cfb      	ldrb	r3, [r7, #19]
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	d01a      	beq.n	8001f1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ef4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ef6:	f7fe ffed 	bl	8000ed4 <HAL_GetTick>
 8001efa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001efc:	e00e      	b.n	8001f1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001efe:	f7fe ffe9 	bl	8000ed4 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b19      	cmp	r3, #25
 8001f0a:	d907      	bls.n	8001f1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	f043 0320 	orr.w	r3, r3, #32
 8001f12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001f1a:	e006      	b.n	8001f2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d1e9      	bne.n	8001efe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d003      	beq.n	8001f40 <I2C_IsErrorOccurred+0xe0>
 8001f38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0aa      	beq.n	8001e96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d103      	bne.n	8001f50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00b      	beq.n	8001f88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	f043 0308 	orr.w	r3, r3, #8
 8001f98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fa2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00b      	beq.n	8001fcc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	f043 0302 	orr.w	r3, r3, #2
 8001fba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01c      	beq.n	800200e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f7ff fe3b 	bl	8001c50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <I2C_IsErrorOccurred+0x1bc>)
 8001fe6:	400b      	ands	r3, r1
 8001fe8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800200e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002012:	4618      	mov	r0, r3
 8002014:	3728      	adds	r7, #40	@ 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	fe00e800 	.word	0xfe00e800

08002020 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	460b      	mov	r3, r1
 800202c:	817b      	strh	r3, [r7, #10]
 800202e:	4613      	mov	r3, r2
 8002030:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002032:	897b      	ldrh	r3, [r7, #10]
 8002034:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002038:	7a7b      	ldrb	r3, [r7, #9]
 800203a:	041b      	lsls	r3, r3, #16
 800203c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002040:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	4313      	orrs	r3, r2
 800204a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800204e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	0d5b      	lsrs	r3, r3, #21
 800205a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800205e:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <I2C_TransferConfig+0x60>)
 8002060:	430b      	orrs	r3, r1
 8002062:	43db      	mvns	r3, r3
 8002064:	ea02 0103 	and.w	r1, r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	430a      	orrs	r2, r1
 8002070:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002072:	bf00      	nop
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	03ff63ff 	.word	0x03ff63ff

08002084 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b20      	cmp	r3, #32
 8002098:	d138      	bne.n	800210c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e032      	b.n	800210e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2224      	movs	r2, #36	@ 0x24
 80020b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80020d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6819      	ldr	r1, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0201 	orr.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800210c:	2302      	movs	r3, #2
  }
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b20      	cmp	r3, #32
 800212e:	d139      	bne.n	80021a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800213a:	2302      	movs	r3, #2
 800213c:	e033      	b.n	80021a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2224      	movs	r2, #36	@ 0x24
 800214a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0201 	bic.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800216c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	e000      	b.n	80021a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021a4:	2302      	movs	r3, #2
  }
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021b8:	4b04      	ldr	r3, [pc, #16]	@ (80021cc <HAL_PWREx_GetVoltageRange+0x18>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40007000 	.word	0x40007000

080021d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021de:	d130      	bne.n	8002242 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021e0:	4b23      	ldr	r3, [pc, #140]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021ec:	d038      	beq.n	8002260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ee:	4b20      	ldr	r3, [pc, #128]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002274 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2232      	movs	r2, #50	@ 0x32
 8002204:	fb02 f303 	mul.w	r3, r2, r3
 8002208:	4a1b      	ldr	r2, [pc, #108]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	0c9b      	lsrs	r3, r3, #18
 8002210:	3301      	adds	r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002214:	e002      	b.n	800221c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3b01      	subs	r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800221c:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002228:	d102      	bne.n	8002230 <HAL_PWREx_ControlVoltageScaling+0x60>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f2      	bne.n	8002216 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002230:	4b0f      	ldr	r3, [pc, #60]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800223c:	d110      	bne.n	8002260 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e00f      	b.n	8002262 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002242:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800224a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800224e:	d007      	beq.n	8002260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002250:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002258:	4a05      	ldr	r2, [pc, #20]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800225a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800225e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40007000 	.word	0x40007000
 8002274:	20000000 	.word	0x20000000
 8002278:	431bde83 	.word	0x431bde83

0800227c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e3ca      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228e:	4b97      	ldr	r3, [pc, #604]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002298:	4b94      	ldr	r3, [pc, #592]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 80e4 	beq.w	8002478 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <HAL_RCC_OscConfig+0x4a>
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	2b0c      	cmp	r3, #12
 80022ba:	f040 808b 	bne.w	80023d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	f040 8087 	bne.w	80023d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022c6:	4b89      	ldr	r3, [pc, #548]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_RCC_OscConfig+0x62>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e3a2      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1a      	ldr	r2, [r3, #32]
 80022e2:	4b82      	ldr	r3, [pc, #520]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d004      	beq.n	80022f8 <HAL_RCC_OscConfig+0x7c>
 80022ee:	4b7f      	ldr	r3, [pc, #508]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022f6:	e005      	b.n	8002304 <HAL_RCC_OscConfig+0x88>
 80022f8:	4b7c      	ldr	r3, [pc, #496]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 80022fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022fe:	091b      	lsrs	r3, r3, #4
 8002300:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002304:	4293      	cmp	r3, r2
 8002306:	d223      	bcs.n	8002350 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fd55 	bl	8002dbc <RCC_SetFlashLatencyFromMSIRange>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e383      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800231c:	4b73      	ldr	r3, [pc, #460]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a72      	ldr	r2, [pc, #456]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	4b70      	ldr	r3, [pc, #448]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	496d      	ldr	r1, [pc, #436]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800233a:	4b6c      	ldr	r3, [pc, #432]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	4968      	ldr	r1, [pc, #416]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
 800234e:	e025      	b.n	800239c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002350:	4b66      	ldr	r3, [pc, #408]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a65      	ldr	r2, [pc, #404]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 8002356:	f043 0308 	orr.w	r3, r3, #8
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	4b63      	ldr	r3, [pc, #396]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4960      	ldr	r1, [pc, #384]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800236e:	4b5f      	ldr	r3, [pc, #380]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	021b      	lsls	r3, r3, #8
 800237c:	495b      	ldr	r1, [pc, #364]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 800237e:	4313      	orrs	r3, r2
 8002380:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4618      	mov	r0, r3
 800238e:	f000 fd15 	bl	8002dbc <RCC_SetFlashLatencyFromMSIRange>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e343      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800239c:	f000 fc4a 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4b52      	ldr	r3, [pc, #328]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	4950      	ldr	r1, [pc, #320]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 80023ae:	5ccb      	ldrb	r3, [r1, r3]
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
 80023b8:	4a4e      	ldr	r2, [pc, #312]	@ (80024f4 <HAL_RCC_OscConfig+0x278>)
 80023ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023bc:	4b4e      	ldr	r3, [pc, #312]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fd37 	bl	8000e34 <HAL_InitTick>
 80023c6:	4603      	mov	r3, r0
 80023c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d052      	beq.n	8002476 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	e327      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d032      	beq.n	8002442 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023dc:	4b43      	ldr	r3, [pc, #268]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a42      	ldr	r2, [pc, #264]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023e8:	f7fe fd74 	bl	8000ed4 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023f0:	f7fe fd70 	bl	8000ed4 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e310      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002402:	4b3a      	ldr	r3, [pc, #232]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800240e:	4b37      	ldr	r3, [pc, #220]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a36      	ldr	r2, [pc, #216]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 8002414:	f043 0308 	orr.w	r3, r3, #8
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	4b34      	ldr	r3, [pc, #208]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4931      	ldr	r1, [pc, #196]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 8002428:	4313      	orrs	r3, r2
 800242a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800242c:	4b2f      	ldr	r3, [pc, #188]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	492c      	ldr	r1, [pc, #176]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
 8002440:	e01a      	b.n	8002478 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002442:	4b2a      	ldr	r3, [pc, #168]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a29      	ldr	r2, [pc, #164]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800244e:	f7fe fd41 	bl	8000ed4 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002456:	f7fe fd3d 	bl	8000ed4 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e2dd      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002468:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f0      	bne.n	8002456 <HAL_RCC_OscConfig+0x1da>
 8002474:	e000      	b.n	8002478 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002476:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d074      	beq.n	800256e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2b08      	cmp	r3, #8
 8002488:	d005      	beq.n	8002496 <HAL_RCC_OscConfig+0x21a>
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	2b0c      	cmp	r3, #12
 800248e:	d10e      	bne.n	80024ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2b03      	cmp	r3, #3
 8002494:	d10b      	bne.n	80024ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002496:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d064      	beq.n	800256c <HAL_RCC_OscConfig+0x2f0>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d160      	bne.n	800256c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e2ba      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x24a>
 80024b8:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0b      	ldr	r2, [pc, #44]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 80024be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	e026      	b.n	8002514 <HAL_RCC_OscConfig+0x298>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024ce:	d115      	bne.n	80024fc <HAL_RCC_OscConfig+0x280>
 80024d0:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a05      	ldr	r2, [pc, #20]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 80024d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b03      	ldr	r3, [pc, #12]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a02      	ldr	r2, [pc, #8]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 80024e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	e014      	b.n	8002514 <HAL_RCC_OscConfig+0x298>
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000
 80024f0:	08005f38 	.word	0x08005f38
 80024f4:	20000000 	.word	0x20000000
 80024f8:	20000004 	.word	0x20000004
 80024fc:	4ba0      	ldr	r3, [pc, #640]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a9f      	ldr	r2, [pc, #636]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 8002502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b9d      	ldr	r3, [pc, #628]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a9c      	ldr	r2, [pc, #624]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 800250e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d013      	beq.n	8002544 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7fe fcda 	bl	8000ed4 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7fe fcd6 	bl	8000ed4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	@ 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e276      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002536:	4b92      	ldr	r3, [pc, #584]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x2a8>
 8002542:	e014      	b.n	800256e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe fcc6 	bl	8000ed4 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800254c:	f7fe fcc2 	bl	8000ed4 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	@ 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e262      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800255e:	4b88      	ldr	r3, [pc, #544]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x2d0>
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d060      	beq.n	800263c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2b04      	cmp	r3, #4
 800257e:	d005      	beq.n	800258c <HAL_RCC_OscConfig+0x310>
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d119      	bne.n	80025ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d116      	bne.n	80025ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800258c:	4b7c      	ldr	r3, [pc, #496]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_OscConfig+0x328>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e23f      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	4b76      	ldr	r3, [pc, #472]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	061b      	lsls	r3, r3, #24
 80025b2:	4973      	ldr	r1, [pc, #460]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b8:	e040      	b.n	800263c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d023      	beq.n	800260a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 80025c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ce:	f7fe fc81 	bl	8000ed4 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d6:	f7fe fc7d 	bl	8000ed4 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e21d      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e8:	4b65      	ldr	r3, [pc, #404]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f4:	4b62      	ldr	r3, [pc, #392]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	495f      	ldr	r1, [pc, #380]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
 8002608:	e018      	b.n	800263c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260a:	4b5d      	ldr	r3, [pc, #372]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a5c      	ldr	r2, [pc, #368]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 8002610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7fe fc5d 	bl	8000ed4 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261e:	f7fe fc59 	bl	8000ed4 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1f9      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002630:	4b53      	ldr	r3, [pc, #332]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f0      	bne.n	800261e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d03c      	beq.n	80026c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01c      	beq.n	800268a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002650:	4b4b      	ldr	r3, [pc, #300]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 8002652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002656:	4a4a      	ldr	r2, [pc, #296]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002660:	f7fe fc38 	bl	8000ed4 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002668:	f7fe fc34 	bl	8000ed4 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e1d4      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800267a:	4b41      	ldr	r3, [pc, #260]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 800267c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0ef      	beq.n	8002668 <HAL_RCC_OscConfig+0x3ec>
 8002688:	e01b      	b.n	80026c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268a:	4b3d      	ldr	r3, [pc, #244]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 800268c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002690:	4a3b      	ldr	r2, [pc, #236]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269a:	f7fe fc1b 	bl	8000ed4 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a2:	f7fe fc17 	bl	8000ed4 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e1b7      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b4:	4b32      	ldr	r3, [pc, #200]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 80026b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1ef      	bne.n	80026a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80a6 	beq.w	800281c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d0:	2300      	movs	r3, #0
 80026d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10d      	bne.n	80026fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e0:	4b27      	ldr	r3, [pc, #156]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e4:	4a26      	ldr	r2, [pc, #152]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 80026e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80026ec:	4b24      	ldr	r3, [pc, #144]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 80026ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f8:	2301      	movs	r3, #1
 80026fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026fc:	4b21      	ldr	r3, [pc, #132]	@ (8002784 <HAL_RCC_OscConfig+0x508>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d118      	bne.n	800273a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002708:	4b1e      	ldr	r3, [pc, #120]	@ (8002784 <HAL_RCC_OscConfig+0x508>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a1d      	ldr	r2, [pc, #116]	@ (8002784 <HAL_RCC_OscConfig+0x508>)
 800270e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002712:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002714:	f7fe fbde 	bl	8000ed4 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271c:	f7fe fbda 	bl	8000ed4 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e17a      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272e:	4b15      	ldr	r3, [pc, #84]	@ (8002784 <HAL_RCC_OscConfig+0x508>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d108      	bne.n	8002754 <HAL_RCC_OscConfig+0x4d8>
 8002742:	4b0f      	ldr	r3, [pc, #60]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 8002744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002748:	4a0d      	ldr	r2, [pc, #52]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002752:	e029      	b.n	80027a8 <HAL_RCC_OscConfig+0x52c>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b05      	cmp	r3, #5
 800275a:	d115      	bne.n	8002788 <HAL_RCC_OscConfig+0x50c>
 800275c:	4b08      	ldr	r3, [pc, #32]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002762:	4a07      	ldr	r2, [pc, #28]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 8002764:	f043 0304 	orr.w	r3, r3, #4
 8002768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800276c:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002772:	4a03      	ldr	r2, [pc, #12]	@ (8002780 <HAL_RCC_OscConfig+0x504>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800277c:	e014      	b.n	80027a8 <HAL_RCC_OscConfig+0x52c>
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
 8002784:	40007000 	.word	0x40007000
 8002788:	4b9c      	ldr	r3, [pc, #624]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278e:	4a9b      	ldr	r2, [pc, #620]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002798:	4b98      	ldr	r3, [pc, #608]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800279e:	4a97      	ldr	r2, [pc, #604]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 80027a0:	f023 0304 	bic.w	r3, r3, #4
 80027a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d016      	beq.n	80027de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7fe fb90 	bl	8000ed4 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f7fe fb8c 	bl	8000ed4 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e12a      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ce:	4b8b      	ldr	r3, [pc, #556]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0ed      	beq.n	80027b8 <HAL_RCC_OscConfig+0x53c>
 80027dc:	e015      	b.n	800280a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027de:	f7fe fb79 	bl	8000ed4 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e6:	f7fe fb75 	bl	8000ed4 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e113      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027fc:	4b7f      	ldr	r3, [pc, #508]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1ed      	bne.n	80027e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800280a:	7ffb      	ldrb	r3, [r7, #31]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d105      	bne.n	800281c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002810:	4b7a      	ldr	r3, [pc, #488]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002814:	4a79      	ldr	r2, [pc, #484]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 8002816:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800281a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80fe 	beq.w	8002a22 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282a:	2b02      	cmp	r3, #2
 800282c:	f040 80d0 	bne.w	80029d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002830:	4b72      	ldr	r3, [pc, #456]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f003 0203 	and.w	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002840:	429a      	cmp	r2, r3
 8002842:	d130      	bne.n	80028a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	3b01      	subs	r3, #1
 8002850:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d127      	bne.n	80028a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002860:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d11f      	bne.n	80028a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002870:	2a07      	cmp	r2, #7
 8002872:	bf14      	ite	ne
 8002874:	2201      	movne	r2, #1
 8002876:	2200      	moveq	r2, #0
 8002878:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800287a:	4293      	cmp	r3, r2
 800287c:	d113      	bne.n	80028a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	3b01      	subs	r3, #1
 800288c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d109      	bne.n	80028a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	3b01      	subs	r3, #1
 80028a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d06e      	beq.n	8002984 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	2b0c      	cmp	r3, #12
 80028aa:	d069      	beq.n	8002980 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028ac:	4b53      	ldr	r3, [pc, #332]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028b8:	4b50      	ldr	r3, [pc, #320]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0ad      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028c8:	4b4c      	ldr	r3, [pc, #304]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a4b      	ldr	r2, [pc, #300]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 80028ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028d4:	f7fe fafe 	bl	8000ed4 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe fafa 	bl	8000ed4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e09a      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ee:	4b43      	ldr	r3, [pc, #268]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028fa:	4b40      	ldr	r3, [pc, #256]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	4b40      	ldr	r3, [pc, #256]	@ (8002a00 <HAL_RCC_OscConfig+0x784>)
 8002900:	4013      	ands	r3, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800290a:	3a01      	subs	r2, #1
 800290c:	0112      	lsls	r2, r2, #4
 800290e:	4311      	orrs	r1, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002914:	0212      	lsls	r2, r2, #8
 8002916:	4311      	orrs	r1, r2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800291c:	0852      	lsrs	r2, r2, #1
 800291e:	3a01      	subs	r2, #1
 8002920:	0552      	lsls	r2, r2, #21
 8002922:	4311      	orrs	r1, r2
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002928:	0852      	lsrs	r2, r2, #1
 800292a:	3a01      	subs	r2, #1
 800292c:	0652      	lsls	r2, r2, #25
 800292e:	4311      	orrs	r1, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002934:	0912      	lsrs	r2, r2, #4
 8002936:	0452      	lsls	r2, r2, #17
 8002938:	430a      	orrs	r2, r1
 800293a:	4930      	ldr	r1, [pc, #192]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 800293c:	4313      	orrs	r3, r2
 800293e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002940:	4b2e      	ldr	r3, [pc, #184]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a2d      	ldr	r2, [pc, #180]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 8002946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800294a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800294c:	4b2b      	ldr	r3, [pc, #172]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a2a      	ldr	r2, [pc, #168]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 8002952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002956:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002958:	f7fe fabc 	bl	8000ed4 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe fab8 	bl	8000ed4 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e058      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002972:	4b22      	ldr	r3, [pc, #136]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800297e:	e050      	b.n	8002a22 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e04f      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002984:	4b1d      	ldr	r3, [pc, #116]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d148      	bne.n	8002a22 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002990:	4b1a      	ldr	r3, [pc, #104]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a19      	ldr	r2, [pc, #100]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 8002996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800299a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800299c:	4b17      	ldr	r3, [pc, #92]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a16      	ldr	r2, [pc, #88]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 80029a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029a8:	f7fe fa94 	bl	8000ed4 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe fa90 	bl	8000ed4 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e030      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c2:	4b0e      	ldr	r3, [pc, #56]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x734>
 80029ce:	e028      	b.n	8002a22 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d023      	beq.n	8002a1e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d6:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a08      	ldr	r2, [pc, #32]	@ (80029fc <HAL_RCC_OscConfig+0x780>)
 80029dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe fa77 	bl	8000ed4 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e8:	e00c      	b.n	8002a04 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ea:	f7fe fa73 	bl	8000ed4 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d905      	bls.n	8002a04 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e013      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
 80029fc:	40021000 	.word	0x40021000
 8002a00:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a04:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <HAL_RCC_OscConfig+0x7b0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ec      	bne.n	80029ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a10:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <HAL_RCC_OscConfig+0x7b0>)
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	4905      	ldr	r1, [pc, #20]	@ (8002a2c <HAL_RCC_OscConfig+0x7b0>)
 8002a16:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <HAL_RCC_OscConfig+0x7b4>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60cb      	str	r3, [r1, #12]
 8002a1c:	e001      	b.n	8002a22 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	feeefffc 	.word	0xfeeefffc

08002a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0e7      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a48:	4b75      	ldr	r3, [pc, #468]	@ (8002c20 <HAL_RCC_ClockConfig+0x1ec>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d910      	bls.n	8002a78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b72      	ldr	r3, [pc, #456]	@ (8002c20 <HAL_RCC_ClockConfig+0x1ec>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 0207 	bic.w	r2, r3, #7
 8002a5e:	4970      	ldr	r1, [pc, #448]	@ (8002c20 <HAL_RCC_ClockConfig+0x1ec>)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b6e      	ldr	r3, [pc, #440]	@ (8002c20 <HAL_RCC_ClockConfig+0x1ec>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0cf      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d010      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	4b66      	ldr	r3, [pc, #408]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d908      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a94:	4b63      	ldr	r3, [pc, #396]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4960      	ldr	r1, [pc, #384]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d04c      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aba:	4b5a      	ldr	r3, [pc, #360]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d121      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0a6      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ad2:	4b54      	ldr	r3, [pc, #336]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d115      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e09a      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aea:	4b4e      	ldr	r3, [pc, #312]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e08e      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002afa:	4b4a      	ldr	r3, [pc, #296]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e086      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b0a:	4b46      	ldr	r3, [pc, #280]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f023 0203 	bic.w	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4943      	ldr	r1, [pc, #268]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b1c:	f7fe f9da 	bl	8000ed4 <HAL_GetTick>
 8002b20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b24:	f7fe f9d6 	bl	8000ed4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e06e      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 020c 	and.w	r2, r3, #12
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d1eb      	bne.n	8002b24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d010      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	4b31      	ldr	r3, [pc, #196]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d208      	bcs.n	8002b7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b68:	4b2e      	ldr	r3, [pc, #184]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	492b      	ldr	r1, [pc, #172]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b7a:	4b29      	ldr	r3, [pc, #164]	@ (8002c20 <HAL_RCC_ClockConfig+0x1ec>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d210      	bcs.n	8002baa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b88:	4b25      	ldr	r3, [pc, #148]	@ (8002c20 <HAL_RCC_ClockConfig+0x1ec>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 0207 	bic.w	r2, r3, #7
 8002b90:	4923      	ldr	r1, [pc, #140]	@ (8002c20 <HAL_RCC_ClockConfig+0x1ec>)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b98:	4b21      	ldr	r3, [pc, #132]	@ (8002c20 <HAL_RCC_ClockConfig+0x1ec>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d001      	beq.n	8002baa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e036      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	4918      	ldr	r1, [pc, #96]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d009      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bd4:	4b13      	ldr	r3, [pc, #76]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4910      	ldr	r1, [pc, #64]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002be8:	f000 f824 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	490b      	ldr	r1, [pc, #44]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f4>)
 8002bfa:	5ccb      	ldrb	r3, [r1, r3]
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
 8002c04:	4a09      	ldr	r2, [pc, #36]	@ (8002c2c <HAL_RCC_ClockConfig+0x1f8>)
 8002c06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c08:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <HAL_RCC_ClockConfig+0x1fc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe f911 	bl	8000e34 <HAL_InitTick>
 8002c12:	4603      	mov	r3, r0
 8002c14:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c16:	7afb      	ldrb	r3, [r7, #11]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40022000 	.word	0x40022000
 8002c24:	40021000 	.word	0x40021000
 8002c28:	08005f38 	.word	0x08005f38
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	20000004 	.word	0x20000004

08002c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b089      	sub	sp, #36	@ 0x24
 8002c38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c42:	4b3e      	ldr	r3, [pc, #248]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x34>
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d121      	bne.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d11e      	bne.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c68:	4b34      	ldr	r3, [pc, #208]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d107      	bne.n	8002c84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c74:	4b31      	ldr	r3, [pc, #196]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c7a:	0a1b      	lsrs	r3, r3, #8
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	e005      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c84:	4b2d      	ldr	r3, [pc, #180]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c90:	4a2b      	ldr	r2, [pc, #172]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10d      	bne.n	8002cbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d102      	bne.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cac:	4b25      	ldr	r3, [pc, #148]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cae:	61bb      	str	r3, [r7, #24]
 8002cb0:	e004      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cb8:	4b23      	ldr	r3, [pc, #140]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d134      	bne.n	8002d2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d003      	beq.n	8002cda <HAL_RCC_GetSysClockFreq+0xa6>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d003      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xac>
 8002cd8:	e005      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cda:	4b1a      	ldr	r3, [pc, #104]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cdc:	617b      	str	r3, [r7, #20]
      break;
 8002cde:	e005      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ce0:	4b19      	ldr	r3, [pc, #100]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ce2:	617b      	str	r3, [r7, #20]
      break;
 8002ce4:	e002      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	617b      	str	r3, [r7, #20]
      break;
 8002cea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cec:	4b13      	ldr	r3, [pc, #76]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cfa:	4b10      	ldr	r3, [pc, #64]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	fb03 f202 	mul.w	r2, r3, r2
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d12:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	0e5b      	lsrs	r3, r3, #25
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d2c:	69bb      	ldr	r3, [r7, #24]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3724      	adds	r7, #36	@ 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	08005f50 	.word	0x08005f50
 8002d44:	00f42400 	.word	0x00f42400
 8002d48:	007a1200 	.word	0x007a1200

08002d4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d50:	4b03      	ldr	r3, [pc, #12]	@ (8002d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000000 	.word	0x20000000

08002d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d68:	f7ff fff0 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	0a1b      	lsrs	r3, r3, #8
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	4904      	ldr	r1, [pc, #16]	@ (8002d8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	08005f48 	.word	0x08005f48

08002d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d94:	f7ff ffda 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	0adb      	lsrs	r3, r3, #11
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	4904      	ldr	r1, [pc, #16]	@ (8002db8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002da6:	5ccb      	ldrb	r3, [r1, r3]
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40021000 	.word	0x40021000
 8002db8:	08005f48 	.word	0x08005f48

08002dbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dd4:	f7ff f9ee 	bl	80021b4 <HAL_PWREx_GetVoltageRange>
 8002dd8:	6178      	str	r0, [r7, #20]
 8002dda:	e014      	b.n	8002e06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ddc:	4b25      	ldr	r3, [pc, #148]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de0:	4a24      	ldr	r2, [pc, #144]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002de8:	4b22      	ldr	r3, [pc, #136]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002df4:	f7ff f9de 	bl	80021b4 <HAL_PWREx_GetVoltageRange>
 8002df8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e0c:	d10b      	bne.n	8002e26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b80      	cmp	r3, #128	@ 0x80
 8002e12:	d919      	bls.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e18:	d902      	bls.n	8002e20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	e013      	b.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e20:	2301      	movs	r3, #1
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	e010      	b.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b80      	cmp	r3, #128	@ 0x80
 8002e2a:	d902      	bls.n	8002e32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	e00a      	b.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b80      	cmp	r3, #128	@ 0x80
 8002e36:	d102      	bne.n	8002e3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e38:	2302      	movs	r3, #2
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	e004      	b.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b70      	cmp	r3, #112	@ 0x70
 8002e42:	d101      	bne.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e44:	2301      	movs	r3, #1
 8002e46:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e48:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 0207 	bic.w	r2, r3, #7
 8002e50:	4909      	ldr	r1, [pc, #36]	@ (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e58:	4b07      	ldr	r3, [pc, #28]	@ (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d001      	beq.n	8002e6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40022000 	.word	0x40022000

08002e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e84:	2300      	movs	r3, #0
 8002e86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e88:	2300      	movs	r3, #0
 8002e8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d041      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ea0:	d02a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ea2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ea6:	d824      	bhi.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ea8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002eac:	d008      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002eae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002eb2:	d81e      	bhi.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002eb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ebc:	d010      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ebe:	e018      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ec0:	4b86      	ldr	r3, [pc, #536]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4a85      	ldr	r2, [pc, #532]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ecc:	e015      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fabb 	bl	8003450 <RCCEx_PLLSAI1_Config>
 8002eda:	4603      	mov	r3, r0
 8002edc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ede:	e00c      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3320      	adds	r3, #32
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fba6 	bl	8003638 <RCCEx_PLLSAI2_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ef0:	e003      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ef6:	e000      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002efa:	7cfb      	ldrb	r3, [r7, #19]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10b      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f00:	4b76      	ldr	r3, [pc, #472]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f0e:	4973      	ldr	r1, [pc, #460]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f16:	e001      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f18:	7cfb      	ldrb	r3, [r7, #19]
 8002f1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d041      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f30:	d02a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f36:	d824      	bhi.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f3c:	d008      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f42:	d81e      	bhi.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f4c:	d010      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f4e:	e018      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f50:	4b62      	ldr	r3, [pc, #392]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4a61      	ldr	r2, [pc, #388]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f5c:	e015      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3304      	adds	r3, #4
 8002f62:	2100      	movs	r1, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fa73 	bl	8003450 <RCCEx_PLLSAI1_Config>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f6e:	e00c      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3320      	adds	r3, #32
 8002f74:	2100      	movs	r1, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fb5e 	bl	8003638 <RCCEx_PLLSAI2_Config>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f80:	e003      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	74fb      	strb	r3, [r7, #19]
      break;
 8002f86:	e000      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f8a:	7cfb      	ldrb	r3, [r7, #19]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10b      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f90:	4b52      	ldr	r3, [pc, #328]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f9e:	494f      	ldr	r1, [pc, #316]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002fa6:	e001      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80a0 	beq.w	80030fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fbe:	4b47      	ldr	r3, [pc, #284]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00d      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd4:	4b41      	ldr	r3, [pc, #260]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd8:	4a40      	ldr	r2, [pc, #256]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fe0:	4b3e      	ldr	r3, [pc, #248]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fec:	2301      	movs	r3, #1
 8002fee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a3a      	ldr	r2, [pc, #232]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ffa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ffc:	f7fd ff6a 	bl	8000ed4 <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003002:	e009      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003004:	f7fd ff66 	bl	8000ed4 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d902      	bls.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	74fb      	strb	r3, [r7, #19]
        break;
 8003016:	e005      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003018:	4b31      	ldr	r3, [pc, #196]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0ef      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d15c      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800302a:	4b2c      	ldr	r3, [pc, #176]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003030:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003034:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01f      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	429a      	cmp	r2, r3
 8003046:	d019      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003048:	4b24      	ldr	r3, [pc, #144]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800304e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003052:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003054:	4b21      	ldr	r3, [pc, #132]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305a:	4a20      	ldr	r2, [pc, #128]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003064:	4b1d      	ldr	r3, [pc, #116]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306a:	4a1c      	ldr	r2, [pc, #112]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003074:	4a19      	ldr	r2, [pc, #100]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d016      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fd ff25 	bl	8000ed4 <HAL_GetTick>
 800308a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800308c:	e00b      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7fd ff21 	bl	8000ed4 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800309c:	4293      	cmp	r3, r2
 800309e:	d902      	bls.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	74fb      	strb	r3, [r7, #19]
            break;
 80030a4:	e006      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a6:	4b0d      	ldr	r3, [pc, #52]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0ec      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ba:	4b08      	ldr	r3, [pc, #32]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ca:	4904      	ldr	r1, [pc, #16]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030d2:	e009      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	74bb      	strb	r3, [r7, #18]
 80030d8:	e006      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e4:	7cfb      	ldrb	r3, [r7, #19]
 80030e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e8:	7c7b      	ldrb	r3, [r7, #17]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d105      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ee:	4b9e      	ldr	r3, [pc, #632]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f2:	4a9d      	ldr	r2, [pc, #628]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003106:	4b98      	ldr	r3, [pc, #608]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310c:	f023 0203 	bic.w	r2, r3, #3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003114:	4994      	ldr	r1, [pc, #592]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003128:	4b8f      	ldr	r3, [pc, #572]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312e:	f023 020c 	bic.w	r2, r3, #12
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003136:	498c      	ldr	r1, [pc, #560]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800314a:	4b87      	ldr	r3, [pc, #540]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003150:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003158:	4983      	ldr	r1, [pc, #524]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800316c:	4b7e      	ldr	r3, [pc, #504]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003172:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317a:	497b      	ldr	r1, [pc, #492]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800318e:	4b76      	ldr	r3, [pc, #472]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800319c:	4972      	ldr	r1, [pc, #456]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031b0:	4b6d      	ldr	r3, [pc, #436]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031be:	496a      	ldr	r1, [pc, #424]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031d2:	4b65      	ldr	r3, [pc, #404]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e0:	4961      	ldr	r1, [pc, #388]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031f4:	4b5c      	ldr	r3, [pc, #368]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003202:	4959      	ldr	r1, [pc, #356]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003216:	4b54      	ldr	r3, [pc, #336]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003224:	4950      	ldr	r1, [pc, #320]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003238:	4b4b      	ldr	r3, [pc, #300]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003246:	4948      	ldr	r1, [pc, #288]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800325a:	4b43      	ldr	r3, [pc, #268]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003260:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003268:	493f      	ldr	r1, [pc, #252]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d028      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800327c:	4b3a      	ldr	r3, [pc, #232]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003282:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800328a:	4937      	ldr	r1, [pc, #220]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800329a:	d106      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800329c:	4b32      	ldr	r3, [pc, #200]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4a31      	ldr	r2, [pc, #196]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032a6:	60d3      	str	r3, [r2, #12]
 80032a8:	e011      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032b2:	d10c      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3304      	adds	r3, #4
 80032b8:	2101      	movs	r1, #1
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 f8c8 	bl	8003450 <RCCEx_PLLSAI1_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032c4:	7cfb      	ldrb	r3, [r7, #19]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032ca:	7cfb      	ldrb	r3, [r7, #19]
 80032cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d028      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032da:	4b23      	ldr	r3, [pc, #140]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e8:	491f      	ldr	r1, [pc, #124]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032f8:	d106      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003300:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003304:	60d3      	str	r3, [r2, #12]
 8003306:	e011      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003310:	d10c      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3304      	adds	r3, #4
 8003316:	2101      	movs	r1, #1
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f899 	bl	8003450 <RCCEx_PLLSAI1_Config>
 800331e:	4603      	mov	r3, r0
 8003320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003322:	7cfb      	ldrb	r3, [r7, #19]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d02b      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003338:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800333e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003346:	4908      	ldr	r1, [pc, #32]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003352:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003356:	d109      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003358:	4b03      	ldr	r3, [pc, #12]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4a02      	ldr	r2, [pc, #8]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003362:	60d3      	str	r3, [r2, #12]
 8003364:	e014      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003370:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003374:	d10c      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3304      	adds	r3, #4
 800337a:	2101      	movs	r1, #1
 800337c:	4618      	mov	r0, r3
 800337e:	f000 f867 	bl	8003450 <RCCEx_PLLSAI1_Config>
 8003382:	4603      	mov	r3, r0
 8003384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003386:	7cfb      	ldrb	r3, [r7, #19]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800338c:	7cfb      	ldrb	r3, [r7, #19]
 800338e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d02f      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800339c:	4b2b      	ldr	r3, [pc, #172]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800339e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033aa:	4928      	ldr	r1, [pc, #160]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033ba:	d10d      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3304      	adds	r3, #4
 80033c0:	2102      	movs	r1, #2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f844 	bl	8003450 <RCCEx_PLLSAI1_Config>
 80033c8:	4603      	mov	r3, r0
 80033ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033cc:	7cfb      	ldrb	r3, [r7, #19]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d014      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033d2:	7cfb      	ldrb	r3, [r7, #19]
 80033d4:	74bb      	strb	r3, [r7, #18]
 80033d6:	e011      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033e0:	d10c      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3320      	adds	r3, #32
 80033e6:	2102      	movs	r1, #2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f925 	bl	8003638 <RCCEx_PLLSAI2_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033f2:	7cfb      	ldrb	r3, [r7, #19]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003408:	4b10      	ldr	r3, [pc, #64]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003416:	490d      	ldr	r1, [pc, #52]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800342a:	4b08      	ldr	r3, [pc, #32]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003430:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800343a:	4904      	ldr	r1, [pc, #16]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003442:	7cbb      	ldrb	r3, [r7, #18]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40021000 	.word	0x40021000

08003450 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800345e:	4b75      	ldr	r3, [pc, #468]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d018      	beq.n	800349c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800346a:	4b72      	ldr	r3, [pc, #456]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0203 	and.w	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d10d      	bne.n	8003496 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
       ||
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003482:	4b6c      	ldr	r3, [pc, #432]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
       ||
 8003492:	429a      	cmp	r2, r3
 8003494:	d047      	beq.n	8003526 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
 800349a:	e044      	b.n	8003526 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d018      	beq.n	80034d6 <RCCEx_PLLSAI1_Config+0x86>
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d825      	bhi.n	80034f4 <RCCEx_PLLSAI1_Config+0xa4>
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d002      	beq.n	80034b2 <RCCEx_PLLSAI1_Config+0x62>
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d009      	beq.n	80034c4 <RCCEx_PLLSAI1_Config+0x74>
 80034b0:	e020      	b.n	80034f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034b2:	4b60      	ldr	r3, [pc, #384]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d11d      	bne.n	80034fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c2:	e01a      	b.n	80034fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034c4:	4b5b      	ldr	r3, [pc, #364]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d116      	bne.n	80034fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d4:	e013      	b.n	80034fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034d6:	4b57      	ldr	r3, [pc, #348]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10f      	bne.n	8003502 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034e2:	4b54      	ldr	r3, [pc, #336]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034f2:	e006      	b.n	8003502 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      break;
 80034f8:	e004      	b.n	8003504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034fa:	bf00      	nop
 80034fc:	e002      	b.n	8003504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034fe:	bf00      	nop
 8003500:	e000      	b.n	8003504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003502:	bf00      	nop
    }

    if(status == HAL_OK)
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10d      	bne.n	8003526 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800350a:	4b4a      	ldr	r3, [pc, #296]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6819      	ldr	r1, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	3b01      	subs	r3, #1
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	430b      	orrs	r3, r1
 8003520:	4944      	ldr	r1, [pc, #272]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003522:	4313      	orrs	r3, r2
 8003524:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d17d      	bne.n	8003628 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800352c:	4b41      	ldr	r3, [pc, #260]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a40      	ldr	r2, [pc, #256]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003532:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003538:	f7fd fccc 	bl	8000ed4 <HAL_GetTick>
 800353c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800353e:	e009      	b.n	8003554 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003540:	f7fd fcc8 	bl	8000ed4 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d902      	bls.n	8003554 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	73fb      	strb	r3, [r7, #15]
        break;
 8003552:	e005      	b.n	8003560 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003554:	4b37      	ldr	r3, [pc, #220]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1ef      	bne.n	8003540 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d160      	bne.n	8003628 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d111      	bne.n	8003590 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800356c:	4b31      	ldr	r3, [pc, #196]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6892      	ldr	r2, [r2, #8]
 800357c:	0211      	lsls	r1, r2, #8
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68d2      	ldr	r2, [r2, #12]
 8003582:	0912      	lsrs	r2, r2, #4
 8003584:	0452      	lsls	r2, r2, #17
 8003586:	430a      	orrs	r2, r1
 8003588:	492a      	ldr	r1, [pc, #168]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358a:	4313      	orrs	r3, r2
 800358c:	610b      	str	r3, [r1, #16]
 800358e:	e027      	b.n	80035e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d112      	bne.n	80035bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003596:	4b27      	ldr	r3, [pc, #156]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800359e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6892      	ldr	r2, [r2, #8]
 80035a6:	0211      	lsls	r1, r2, #8
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6912      	ldr	r2, [r2, #16]
 80035ac:	0852      	lsrs	r2, r2, #1
 80035ae:	3a01      	subs	r2, #1
 80035b0:	0552      	lsls	r2, r2, #21
 80035b2:	430a      	orrs	r2, r1
 80035b4:	491f      	ldr	r1, [pc, #124]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	610b      	str	r3, [r1, #16]
 80035ba:	e011      	b.n	80035e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80035c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6892      	ldr	r2, [r2, #8]
 80035cc:	0211      	lsls	r1, r2, #8
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6952      	ldr	r2, [r2, #20]
 80035d2:	0852      	lsrs	r2, r2, #1
 80035d4:	3a01      	subs	r2, #1
 80035d6:	0652      	lsls	r2, r2, #25
 80035d8:	430a      	orrs	r2, r1
 80035da:	4916      	ldr	r1, [pc, #88]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035e0:	4b14      	ldr	r3, [pc, #80]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a13      	ldr	r2, [pc, #76]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ec:	f7fd fc72 	bl	8000ed4 <HAL_GetTick>
 80035f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035f2:	e009      	b.n	8003608 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035f4:	f7fd fc6e 	bl	8000ed4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d902      	bls.n	8003608 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	73fb      	strb	r3, [r7, #15]
          break;
 8003606:	e005      	b.n	8003614 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003608:	4b0a      	ldr	r3, [pc, #40]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0ef      	beq.n	80035f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800361a:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	4904      	ldr	r1, [pc, #16]	@ (8003634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003624:	4313      	orrs	r3, r2
 8003626:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003628:	7bfb      	ldrb	r3, [r7, #15]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000

08003638 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003646:	4b6a      	ldr	r3, [pc, #424]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d018      	beq.n	8003684 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003652:	4b67      	ldr	r3, [pc, #412]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0203 	and.w	r2, r3, #3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d10d      	bne.n	800367e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
       ||
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800366a:	4b61      	ldr	r3, [pc, #388]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
       ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d047      	beq.n	800370e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
 8003682:	e044      	b.n	800370e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b03      	cmp	r3, #3
 800368a:	d018      	beq.n	80036be <RCCEx_PLLSAI2_Config+0x86>
 800368c:	2b03      	cmp	r3, #3
 800368e:	d825      	bhi.n	80036dc <RCCEx_PLLSAI2_Config+0xa4>
 8003690:	2b01      	cmp	r3, #1
 8003692:	d002      	beq.n	800369a <RCCEx_PLLSAI2_Config+0x62>
 8003694:	2b02      	cmp	r3, #2
 8003696:	d009      	beq.n	80036ac <RCCEx_PLLSAI2_Config+0x74>
 8003698:	e020      	b.n	80036dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800369a:	4b55      	ldr	r3, [pc, #340]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d11d      	bne.n	80036e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036aa:	e01a      	b.n	80036e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036ac:	4b50      	ldr	r3, [pc, #320]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d116      	bne.n	80036e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036bc:	e013      	b.n	80036e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036be:	4b4c      	ldr	r3, [pc, #304]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10f      	bne.n	80036ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036ca:	4b49      	ldr	r3, [pc, #292]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036da:	e006      	b.n	80036ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
      break;
 80036e0:	e004      	b.n	80036ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036e2:	bf00      	nop
 80036e4:	e002      	b.n	80036ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036e6:	bf00      	nop
 80036e8:	e000      	b.n	80036ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10d      	bne.n	800370e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036f2:	4b3f      	ldr	r3, [pc, #252]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6819      	ldr	r1, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	3b01      	subs	r3, #1
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	430b      	orrs	r3, r1
 8003708:	4939      	ldr	r1, [pc, #228]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800370a:	4313      	orrs	r3, r2
 800370c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d167      	bne.n	80037e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003714:	4b36      	ldr	r3, [pc, #216]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a35      	ldr	r2, [pc, #212]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800371a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800371e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003720:	f7fd fbd8 	bl	8000ed4 <HAL_GetTick>
 8003724:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003726:	e009      	b.n	800373c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003728:	f7fd fbd4 	bl	8000ed4 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d902      	bls.n	800373c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	73fb      	strb	r3, [r7, #15]
        break;
 800373a:	e005      	b.n	8003748 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800373c:	4b2c      	ldr	r3, [pc, #176]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1ef      	bne.n	8003728 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d14a      	bne.n	80037e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d111      	bne.n	8003778 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003754:	4b26      	ldr	r3, [pc, #152]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800375c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6892      	ldr	r2, [r2, #8]
 8003764:	0211      	lsls	r1, r2, #8
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	68d2      	ldr	r2, [r2, #12]
 800376a:	0912      	lsrs	r2, r2, #4
 800376c:	0452      	lsls	r2, r2, #17
 800376e:	430a      	orrs	r2, r1
 8003770:	491f      	ldr	r1, [pc, #124]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003772:	4313      	orrs	r3, r2
 8003774:	614b      	str	r3, [r1, #20]
 8003776:	e011      	b.n	800379c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003778:	4b1d      	ldr	r3, [pc, #116]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003780:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6892      	ldr	r2, [r2, #8]
 8003788:	0211      	lsls	r1, r2, #8
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6912      	ldr	r2, [r2, #16]
 800378e:	0852      	lsrs	r2, r2, #1
 8003790:	3a01      	subs	r2, #1
 8003792:	0652      	lsls	r2, r2, #25
 8003794:	430a      	orrs	r2, r1
 8003796:	4916      	ldr	r1, [pc, #88]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003798:	4313      	orrs	r3, r2
 800379a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800379c:	4b14      	ldr	r3, [pc, #80]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a13      	ldr	r2, [pc, #76]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a8:	f7fd fb94 	bl	8000ed4 <HAL_GetTick>
 80037ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037ae:	e009      	b.n	80037c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037b0:	f7fd fb90 	bl	8000ed4 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d902      	bls.n	80037c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	73fb      	strb	r3, [r7, #15]
          break;
 80037c2:	e005      	b.n	80037d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037c4:	4b0a      	ldr	r3, [pc, #40]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0ef      	beq.n	80037b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037d6:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	4904      	ldr	r1, [pc, #16]	@ (80037f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000

080037f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e049      	b.n	800389a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd f966 	bl	8000aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	4619      	mov	r1, r3
 8003832:	4610      	mov	r0, r2
 8003834:	f000 f9d6 	bl	8003be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d001      	beq.n	80038bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e04f      	b.n	800395c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a23      	ldr	r2, [pc, #140]	@ (8003968 <HAL_TIM_Base_Start_IT+0xc4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d01d      	beq.n	800391a <HAL_TIM_Base_Start_IT+0x76>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e6:	d018      	beq.n	800391a <HAL_TIM_Base_Start_IT+0x76>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1f      	ldr	r2, [pc, #124]	@ (800396c <HAL_TIM_Base_Start_IT+0xc8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <HAL_TIM_Base_Start_IT+0x76>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003970 <HAL_TIM_Base_Start_IT+0xcc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00e      	beq.n	800391a <HAL_TIM_Base_Start_IT+0x76>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1c      	ldr	r2, [pc, #112]	@ (8003974 <HAL_TIM_Base_Start_IT+0xd0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d009      	beq.n	800391a <HAL_TIM_Base_Start_IT+0x76>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1b      	ldr	r2, [pc, #108]	@ (8003978 <HAL_TIM_Base_Start_IT+0xd4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d004      	beq.n	800391a <HAL_TIM_Base_Start_IT+0x76>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a19      	ldr	r2, [pc, #100]	@ (800397c <HAL_TIM_Base_Start_IT+0xd8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d115      	bne.n	8003946 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	4b17      	ldr	r3, [pc, #92]	@ (8003980 <HAL_TIM_Base_Start_IT+0xdc>)
 8003922:	4013      	ands	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b06      	cmp	r3, #6
 800392a:	d015      	beq.n	8003958 <HAL_TIM_Base_Start_IT+0xb4>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003932:	d011      	beq.n	8003958 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003944:	e008      	b.n	8003958 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0201 	orr.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	e000      	b.n	800395a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003958:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40000400 	.word	0x40000400
 8003970:	40000800 	.word	0x40000800
 8003974:	40000c00 	.word	0x40000c00
 8003978:	40013400 	.word	0x40013400
 800397c:	40014000 	.word	0x40014000
 8003980:	00010007 	.word	0x00010007

08003984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d020      	beq.n	80039e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d01b      	beq.n	80039e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0202 	mvn.w	r2, #2
 80039b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8e9 	bl	8003ba6 <HAL_TIM_IC_CaptureCallback>
 80039d4:	e005      	b.n	80039e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f8db 	bl	8003b92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f8ec 	bl	8003bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d020      	beq.n	8003a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d01b      	beq.n	8003a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0204 	mvn.w	r2, #4
 8003a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f8c3 	bl	8003ba6 <HAL_TIM_IC_CaptureCallback>
 8003a20:	e005      	b.n	8003a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8b5 	bl	8003b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f8c6 	bl	8003bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d020      	beq.n	8003a80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d01b      	beq.n	8003a80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0208 	mvn.w	r2, #8
 8003a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2204      	movs	r2, #4
 8003a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f89d 	bl	8003ba6 <HAL_TIM_IC_CaptureCallback>
 8003a6c:	e005      	b.n	8003a7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f88f 	bl	8003b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f8a0 	bl	8003bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d020      	beq.n	8003acc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01b      	beq.n	8003acc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0210 	mvn.w	r2, #16
 8003a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2208      	movs	r2, #8
 8003aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f877 	bl	8003ba6 <HAL_TIM_IC_CaptureCallback>
 8003ab8:	e005      	b.n	8003ac6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f869 	bl	8003b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f87a 	bl	8003bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00c      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0201 	mvn.w	r2, #1
 8003ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fc ff02 	bl	80008f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d104      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00c      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d007      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f99b 	bl	8003e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00c      	beq.n	8003b42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f993 	bl	8003e68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00c      	beq.n	8003b66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d007      	beq.n	8003b66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f834 	bl	8003bce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00c      	beq.n	8003b8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f06f 0220 	mvn.w	r2, #32
 8003b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f95b 	bl	8003e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a46      	ldr	r2, [pc, #280]	@ (8003d10 <TIM_Base_SetConfig+0x12c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d013      	beq.n	8003c24 <TIM_Base_SetConfig+0x40>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c02:	d00f      	beq.n	8003c24 <TIM_Base_SetConfig+0x40>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a43      	ldr	r2, [pc, #268]	@ (8003d14 <TIM_Base_SetConfig+0x130>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d00b      	beq.n	8003c24 <TIM_Base_SetConfig+0x40>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a42      	ldr	r2, [pc, #264]	@ (8003d18 <TIM_Base_SetConfig+0x134>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d007      	beq.n	8003c24 <TIM_Base_SetConfig+0x40>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a41      	ldr	r2, [pc, #260]	@ (8003d1c <TIM_Base_SetConfig+0x138>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <TIM_Base_SetConfig+0x40>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a40      	ldr	r2, [pc, #256]	@ (8003d20 <TIM_Base_SetConfig+0x13c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d108      	bne.n	8003c36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a35      	ldr	r2, [pc, #212]	@ (8003d10 <TIM_Base_SetConfig+0x12c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01f      	beq.n	8003c7e <TIM_Base_SetConfig+0x9a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c44:	d01b      	beq.n	8003c7e <TIM_Base_SetConfig+0x9a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a32      	ldr	r2, [pc, #200]	@ (8003d14 <TIM_Base_SetConfig+0x130>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d017      	beq.n	8003c7e <TIM_Base_SetConfig+0x9a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a31      	ldr	r2, [pc, #196]	@ (8003d18 <TIM_Base_SetConfig+0x134>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <TIM_Base_SetConfig+0x9a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a30      	ldr	r2, [pc, #192]	@ (8003d1c <TIM_Base_SetConfig+0x138>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00f      	beq.n	8003c7e <TIM_Base_SetConfig+0x9a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a2f      	ldr	r2, [pc, #188]	@ (8003d20 <TIM_Base_SetConfig+0x13c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00b      	beq.n	8003c7e <TIM_Base_SetConfig+0x9a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a2e      	ldr	r2, [pc, #184]	@ (8003d24 <TIM_Base_SetConfig+0x140>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d007      	beq.n	8003c7e <TIM_Base_SetConfig+0x9a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a2d      	ldr	r2, [pc, #180]	@ (8003d28 <TIM_Base_SetConfig+0x144>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d003      	beq.n	8003c7e <TIM_Base_SetConfig+0x9a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a2c      	ldr	r2, [pc, #176]	@ (8003d2c <TIM_Base_SetConfig+0x148>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d108      	bne.n	8003c90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a16      	ldr	r2, [pc, #88]	@ (8003d10 <TIM_Base_SetConfig+0x12c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00f      	beq.n	8003cdc <TIM_Base_SetConfig+0xf8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a18      	ldr	r2, [pc, #96]	@ (8003d20 <TIM_Base_SetConfig+0x13c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00b      	beq.n	8003cdc <TIM_Base_SetConfig+0xf8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a17      	ldr	r2, [pc, #92]	@ (8003d24 <TIM_Base_SetConfig+0x140>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d007      	beq.n	8003cdc <TIM_Base_SetConfig+0xf8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a16      	ldr	r2, [pc, #88]	@ (8003d28 <TIM_Base_SetConfig+0x144>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d003      	beq.n	8003cdc <TIM_Base_SetConfig+0xf8>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a15      	ldr	r2, [pc, #84]	@ (8003d2c <TIM_Base_SetConfig+0x148>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d103      	bne.n	8003ce4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d105      	bne.n	8003d02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f023 0201 	bic.w	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	611a      	str	r2, [r3, #16]
  }
}
 8003d02:	bf00      	nop
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	40000400 	.word	0x40000400
 8003d18:	40000800 	.word	0x40000800
 8003d1c:	40000c00 	.word	0x40000c00
 8003d20:	40013400 	.word	0x40013400
 8003d24:	40014000 	.word	0x40014000
 8003d28:	40014400 	.word	0x40014400
 8003d2c:	40014800 	.word	0x40014800

08003d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e068      	b.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a2e      	ldr	r2, [pc, #184]	@ (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a2d      	ldr	r2, [pc, #180]	@ (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d108      	bne.n	8003d8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003d82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a1e      	ldr	r2, [pc, #120]	@ (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01d      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dba:	d018      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1a      	ldr	r2, [pc, #104]	@ (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00e      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a18      	ldr	r2, [pc, #96]	@ (8003e38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d009      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a13      	ldr	r2, [pc, #76]	@ (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d004      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a14      	ldr	r2, [pc, #80]	@ (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d10c      	bne.n	8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40013400 	.word	0x40013400
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40000800 	.word	0x40000800
 8003e38:	40000c00 	.word	0x40000c00
 8003e3c:	40014000 	.word	0x40014000

08003e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e040      	b.n	8003f10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fc fe44 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2224      	movs	r2, #36	@ 0x24
 8003ea8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0201 	bic.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fe90 	bl	8004be8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fbd5 	bl	8004678 <UART_SetConfig>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e01b      	b.n	8003f10 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ee6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ef6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 ff0f 	bl	8004d2c <UART_CheckIdleState>
 8003f0e:	4603      	mov	r3, r0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	@ 0x28
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d177      	bne.n	8004020 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <HAL_UART_Transmit+0x24>
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e070      	b.n	8004022 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2221      	movs	r2, #33	@ 0x21
 8003f4c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f4e:	f7fc ffc1 	bl	8000ed4 <HAL_GetTick>
 8003f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	88fa      	ldrh	r2, [r7, #6]
 8003f58:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	88fa      	ldrh	r2, [r7, #6]
 8003f60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f6c:	d108      	bne.n	8003f80 <HAL_UART_Transmit+0x68>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d104      	bne.n	8003f80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	e003      	b.n	8003f88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f88:	e02f      	b.n	8003fea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2200      	movs	r2, #0
 8003f92:	2180      	movs	r1, #128	@ 0x80
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 ff71 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e03b      	b.n	8004022 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10b      	bne.n	8003fc8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	881a      	ldrh	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fbc:	b292      	uxth	r2, r2
 8003fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	3302      	adds	r3, #2
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	e007      	b.n	8003fd8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	781a      	ldrb	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1c9      	bne.n	8003f8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2140      	movs	r1, #64	@ 0x40
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 ff3b 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d004      	beq.n	8004016 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e005      	b.n	8004022 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e000      	b.n	8004022 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004020:	2302      	movs	r3, #2
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	3720      	adds	r7, #32
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b0ba      	sub	sp, #232	@ 0xe8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004052:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004056:	f640 030f 	movw	r3, #2063	@ 0x80f
 800405a:	4013      	ands	r3, r2
 800405c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004064:	2b00      	cmp	r3, #0
 8004066:	d115      	bne.n	8004094 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00f      	beq.n	8004094 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d009      	beq.n	8004094 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 82ca 	beq.w	800461e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	4798      	blx	r3
      }
      return;
 8004092:	e2c4      	b.n	800461e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004094:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8117 	beq.w	80042cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800409e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d106      	bne.n	80040b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80040ae:	4b85      	ldr	r3, [pc, #532]	@ (80042c4 <HAL_UART_IRQHandler+0x298>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 810a 	beq.w	80042cc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d011      	beq.n	80040e8 <HAL_UART_IRQHandler+0xbc>
 80040c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00b      	beq.n	80040e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2201      	movs	r2, #1
 80040d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040de:	f043 0201 	orr.w	r2, r3, #1
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d011      	beq.n	8004118 <HAL_UART_IRQHandler+0xec>
 80040f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00b      	beq.n	8004118 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2202      	movs	r2, #2
 8004106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800410e:	f043 0204 	orr.w	r2, r3, #4
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d011      	beq.n	8004148 <HAL_UART_IRQHandler+0x11c>
 8004124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00b      	beq.n	8004148 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2204      	movs	r2, #4
 8004136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800413e:	f043 0202 	orr.w	r2, r3, #2
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d017      	beq.n	8004184 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d105      	bne.n	800416c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004164:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00b      	beq.n	8004184 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2208      	movs	r2, #8
 8004172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800417a:	f043 0208 	orr.w	r2, r3, #8
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004188:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800418c:	2b00      	cmp	r3, #0
 800418e:	d012      	beq.n	80041b6 <HAL_UART_IRQHandler+0x18a>
 8004190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004194:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00c      	beq.n	80041b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041ac:	f043 0220 	orr.w	r2, r3, #32
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 8230 	beq.w	8004622 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00d      	beq.n	80041ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fe:	2b40      	cmp	r3, #64	@ 0x40
 8004200:	d005      	beq.n	800420e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004206:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800420a:	2b00      	cmp	r3, #0
 800420c:	d04f      	beq.n	80042ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fea1 	bl	8004f56 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421e:	2b40      	cmp	r3, #64	@ 0x40
 8004220:	d141      	bne.n	80042a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3308      	adds	r3, #8
 8004228:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004238:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800423c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004240:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3308      	adds	r3, #8
 800424a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800424e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004252:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800425a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004266:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1d9      	bne.n	8004222 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004272:	2b00      	cmp	r3, #0
 8004274:	d013      	beq.n	800429e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800427a:	4a13      	ldr	r2, [pc, #76]	@ (80042c8 <HAL_UART_IRQHandler+0x29c>)
 800427c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004282:	4618      	mov	r0, r3
 8004284:	f7fc ffa5 	bl	80011d2 <HAL_DMA_Abort_IT>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d017      	beq.n	80042be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004298:	4610      	mov	r0, r2
 800429a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429c:	e00f      	b.n	80042be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f9d4 	bl	800464c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a4:	e00b      	b.n	80042be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f9d0 	bl	800464c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ac:	e007      	b.n	80042be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f9cc 	bl	800464c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80042bc:	e1b1      	b.n	8004622 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042be:	bf00      	nop
    return;
 80042c0:	e1af      	b.n	8004622 <HAL_UART_IRQHandler+0x5f6>
 80042c2:	bf00      	nop
 80042c4:	04000120 	.word	0x04000120
 80042c8:	0800501f 	.word	0x0800501f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	f040 816a 	bne.w	80045aa <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042da:	f003 0310 	and.w	r3, r3, #16
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 8163 	beq.w	80045aa <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 815c 	beq.w	80045aa <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2210      	movs	r2, #16
 80042f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004304:	2b40      	cmp	r3, #64	@ 0x40
 8004306:	f040 80d4 	bne.w	80044b2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004316:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 80ad 	beq.w	800447a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004326:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800432a:	429a      	cmp	r2, r3
 800432c:	f080 80a5 	bcs.w	800447a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004336:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	f040 8086 	bne.w	8004458 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004360:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004368:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004376:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800437a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004382:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800438e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1da      	bne.n	800434c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3308      	adds	r3, #8
 800439c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80043a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043a8:	f023 0301 	bic.w	r3, r3, #1
 80043ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3308      	adds	r3, #8
 80043b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80043be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80043c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80043cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e1      	bne.n	8004396 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3308      	adds	r3, #8
 80043d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80043e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3308      	adds	r3, #8
 80043f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80043f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80043f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80043fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004404:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e3      	bne.n	80043d2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004428:	f023 0310 	bic.w	r3, r3, #16
 800442c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800443a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800443c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004440:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004442:	e841 2300 	strex	r3, r2, [r1]
 8004446:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004448:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e4      	bne.n	8004418 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004452:	4618      	mov	r0, r3
 8004454:	f7fc fe7f 	bl	8001156 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800446a:	b29b      	uxth	r3, r3
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	b29b      	uxth	r3, r3
 8004470:	4619      	mov	r1, r3
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f8f4 	bl	8004660 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004478:	e0d5      	b.n	8004626 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004480:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004484:	429a      	cmp	r2, r3
 8004486:	f040 80ce 	bne.w	8004626 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b20      	cmp	r3, #32
 8004498:	f040 80c5 	bne.w	8004626 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044a8:	4619      	mov	r1, r3
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f8d8 	bl	8004660 <HAL_UARTEx_RxEventCallback>
      return;
 80044b0:	e0b9      	b.n	8004626 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80ab 	beq.w	800462a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80044d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80a6 	beq.w	800462a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004500:	647b      	str	r3, [r7, #68]	@ 0x44
 8004502:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800450e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e4      	bne.n	80044de <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	623b      	str	r3, [r7, #32]
   return(result);
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	f023 0301 	bic.w	r3, r3, #1
 800452a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3308      	adds	r3, #8
 8004534:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004538:	633a      	str	r2, [r7, #48]	@ 0x30
 800453a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800453e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e3      	bne.n	8004514 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	60fb      	str	r3, [r7, #12]
   return(result);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0310 	bic.w	r3, r3, #16
 8004574:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004582:	61fb      	str	r3, [r7, #28]
 8004584:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	69b9      	ldr	r1, [r7, #24]
 8004588:	69fa      	ldr	r2, [r7, #28]
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	617b      	str	r3, [r7, #20]
   return(result);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e4      	bne.n	8004560 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2202      	movs	r2, #2
 800459a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800459c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f85c 	bl	8004660 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045a8:	e03f      	b.n	800462a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00e      	beq.n	80045d4 <HAL_UART_IRQHandler+0x5a8>
 80045b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80045ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fd66 	bl	800509e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045d2:	e02d      	b.n	8004630 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00e      	beq.n	80045fe <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80045e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01c      	beq.n	800462e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	4798      	blx	r3
    }
    return;
 80045fc:	e017      	b.n	800462e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d012      	beq.n	8004630 <HAL_UART_IRQHandler+0x604>
 800460a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800460e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00c      	beq.n	8004630 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fd17 	bl	800504a <UART_EndTransmit_IT>
    return;
 800461c:	e008      	b.n	8004630 <HAL_UART_IRQHandler+0x604>
      return;
 800461e:	bf00      	nop
 8004620:	e006      	b.n	8004630 <HAL_UART_IRQHandler+0x604>
    return;
 8004622:	bf00      	nop
 8004624:	e004      	b.n	8004630 <HAL_UART_IRQHandler+0x604>
      return;
 8004626:	bf00      	nop
 8004628:	e002      	b.n	8004630 <HAL_UART_IRQHandler+0x604>
      return;
 800462a:	bf00      	nop
 800462c:	e000      	b.n	8004630 <HAL_UART_IRQHandler+0x604>
    return;
 800462e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004630:	37e8      	adds	r7, #232	@ 0xe8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop

08004638 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800467c:	b08a      	sub	sp, #40	@ 0x28
 800467e:	af00      	add	r7, sp, #0
 8004680:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	431a      	orrs	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	431a      	orrs	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	4313      	orrs	r3, r2
 800469e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	4ba4      	ldr	r3, [pc, #656]	@ (8004938 <UART_SetConfig+0x2c0>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046b0:	430b      	orrs	r3, r1
 80046b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a99      	ldr	r2, [pc, #612]	@ (800493c <UART_SetConfig+0x2c4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d004      	beq.n	80046e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e0:	4313      	orrs	r3, r2
 80046e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046f4:	430a      	orrs	r2, r1
 80046f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a90      	ldr	r2, [pc, #576]	@ (8004940 <UART_SetConfig+0x2c8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d126      	bne.n	8004750 <UART_SetConfig+0xd8>
 8004702:	4b90      	ldr	r3, [pc, #576]	@ (8004944 <UART_SetConfig+0x2cc>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	2b03      	cmp	r3, #3
 800470e:	d81b      	bhi.n	8004748 <UART_SetConfig+0xd0>
 8004710:	a201      	add	r2, pc, #4	@ (adr r2, 8004718 <UART_SetConfig+0xa0>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	08004729 	.word	0x08004729
 800471c:	08004739 	.word	0x08004739
 8004720:	08004731 	.word	0x08004731
 8004724:	08004741 	.word	0x08004741
 8004728:	2301      	movs	r3, #1
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472e:	e116      	b.n	800495e <UART_SetConfig+0x2e6>
 8004730:	2302      	movs	r3, #2
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004736:	e112      	b.n	800495e <UART_SetConfig+0x2e6>
 8004738:	2304      	movs	r3, #4
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473e:	e10e      	b.n	800495e <UART_SetConfig+0x2e6>
 8004740:	2308      	movs	r3, #8
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004746:	e10a      	b.n	800495e <UART_SetConfig+0x2e6>
 8004748:	2310      	movs	r3, #16
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474e:	e106      	b.n	800495e <UART_SetConfig+0x2e6>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a7c      	ldr	r2, [pc, #496]	@ (8004948 <UART_SetConfig+0x2d0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d138      	bne.n	80047cc <UART_SetConfig+0x154>
 800475a:	4b7a      	ldr	r3, [pc, #488]	@ (8004944 <UART_SetConfig+0x2cc>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004760:	f003 030c 	and.w	r3, r3, #12
 8004764:	2b0c      	cmp	r3, #12
 8004766:	d82d      	bhi.n	80047c4 <UART_SetConfig+0x14c>
 8004768:	a201      	add	r2, pc, #4	@ (adr r2, 8004770 <UART_SetConfig+0xf8>)
 800476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476e:	bf00      	nop
 8004770:	080047a5 	.word	0x080047a5
 8004774:	080047c5 	.word	0x080047c5
 8004778:	080047c5 	.word	0x080047c5
 800477c:	080047c5 	.word	0x080047c5
 8004780:	080047b5 	.word	0x080047b5
 8004784:	080047c5 	.word	0x080047c5
 8004788:	080047c5 	.word	0x080047c5
 800478c:	080047c5 	.word	0x080047c5
 8004790:	080047ad 	.word	0x080047ad
 8004794:	080047c5 	.word	0x080047c5
 8004798:	080047c5 	.word	0x080047c5
 800479c:	080047c5 	.word	0x080047c5
 80047a0:	080047bd 	.word	0x080047bd
 80047a4:	2300      	movs	r3, #0
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047aa:	e0d8      	b.n	800495e <UART_SetConfig+0x2e6>
 80047ac:	2302      	movs	r3, #2
 80047ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b2:	e0d4      	b.n	800495e <UART_SetConfig+0x2e6>
 80047b4:	2304      	movs	r3, #4
 80047b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ba:	e0d0      	b.n	800495e <UART_SetConfig+0x2e6>
 80047bc:	2308      	movs	r3, #8
 80047be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c2:	e0cc      	b.n	800495e <UART_SetConfig+0x2e6>
 80047c4:	2310      	movs	r3, #16
 80047c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ca:	e0c8      	b.n	800495e <UART_SetConfig+0x2e6>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a5e      	ldr	r2, [pc, #376]	@ (800494c <UART_SetConfig+0x2d4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d125      	bne.n	8004822 <UART_SetConfig+0x1aa>
 80047d6:	4b5b      	ldr	r3, [pc, #364]	@ (8004944 <UART_SetConfig+0x2cc>)
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047e0:	2b30      	cmp	r3, #48	@ 0x30
 80047e2:	d016      	beq.n	8004812 <UART_SetConfig+0x19a>
 80047e4:	2b30      	cmp	r3, #48	@ 0x30
 80047e6:	d818      	bhi.n	800481a <UART_SetConfig+0x1a2>
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d00a      	beq.n	8004802 <UART_SetConfig+0x18a>
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	d814      	bhi.n	800481a <UART_SetConfig+0x1a2>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <UART_SetConfig+0x182>
 80047f4:	2b10      	cmp	r3, #16
 80047f6:	d008      	beq.n	800480a <UART_SetConfig+0x192>
 80047f8:	e00f      	b.n	800481a <UART_SetConfig+0x1a2>
 80047fa:	2300      	movs	r3, #0
 80047fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004800:	e0ad      	b.n	800495e <UART_SetConfig+0x2e6>
 8004802:	2302      	movs	r3, #2
 8004804:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004808:	e0a9      	b.n	800495e <UART_SetConfig+0x2e6>
 800480a:	2304      	movs	r3, #4
 800480c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004810:	e0a5      	b.n	800495e <UART_SetConfig+0x2e6>
 8004812:	2308      	movs	r3, #8
 8004814:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004818:	e0a1      	b.n	800495e <UART_SetConfig+0x2e6>
 800481a:	2310      	movs	r3, #16
 800481c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004820:	e09d      	b.n	800495e <UART_SetConfig+0x2e6>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a4a      	ldr	r2, [pc, #296]	@ (8004950 <UART_SetConfig+0x2d8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d125      	bne.n	8004878 <UART_SetConfig+0x200>
 800482c:	4b45      	ldr	r3, [pc, #276]	@ (8004944 <UART_SetConfig+0x2cc>)
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004832:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004836:	2bc0      	cmp	r3, #192	@ 0xc0
 8004838:	d016      	beq.n	8004868 <UART_SetConfig+0x1f0>
 800483a:	2bc0      	cmp	r3, #192	@ 0xc0
 800483c:	d818      	bhi.n	8004870 <UART_SetConfig+0x1f8>
 800483e:	2b80      	cmp	r3, #128	@ 0x80
 8004840:	d00a      	beq.n	8004858 <UART_SetConfig+0x1e0>
 8004842:	2b80      	cmp	r3, #128	@ 0x80
 8004844:	d814      	bhi.n	8004870 <UART_SetConfig+0x1f8>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <UART_SetConfig+0x1d8>
 800484a:	2b40      	cmp	r3, #64	@ 0x40
 800484c:	d008      	beq.n	8004860 <UART_SetConfig+0x1e8>
 800484e:	e00f      	b.n	8004870 <UART_SetConfig+0x1f8>
 8004850:	2300      	movs	r3, #0
 8004852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004856:	e082      	b.n	800495e <UART_SetConfig+0x2e6>
 8004858:	2302      	movs	r3, #2
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485e:	e07e      	b.n	800495e <UART_SetConfig+0x2e6>
 8004860:	2304      	movs	r3, #4
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004866:	e07a      	b.n	800495e <UART_SetConfig+0x2e6>
 8004868:	2308      	movs	r3, #8
 800486a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486e:	e076      	b.n	800495e <UART_SetConfig+0x2e6>
 8004870:	2310      	movs	r3, #16
 8004872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004876:	e072      	b.n	800495e <UART_SetConfig+0x2e6>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a35      	ldr	r2, [pc, #212]	@ (8004954 <UART_SetConfig+0x2dc>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d12a      	bne.n	80048d8 <UART_SetConfig+0x260>
 8004882:	4b30      	ldr	r3, [pc, #192]	@ (8004944 <UART_SetConfig+0x2cc>)
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004888:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800488c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004890:	d01a      	beq.n	80048c8 <UART_SetConfig+0x250>
 8004892:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004896:	d81b      	bhi.n	80048d0 <UART_SetConfig+0x258>
 8004898:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800489c:	d00c      	beq.n	80048b8 <UART_SetConfig+0x240>
 800489e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a2:	d815      	bhi.n	80048d0 <UART_SetConfig+0x258>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <UART_SetConfig+0x238>
 80048a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048ac:	d008      	beq.n	80048c0 <UART_SetConfig+0x248>
 80048ae:	e00f      	b.n	80048d0 <UART_SetConfig+0x258>
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048b6:	e052      	b.n	800495e <UART_SetConfig+0x2e6>
 80048b8:	2302      	movs	r3, #2
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048be:	e04e      	b.n	800495e <UART_SetConfig+0x2e6>
 80048c0:	2304      	movs	r3, #4
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048c6:	e04a      	b.n	800495e <UART_SetConfig+0x2e6>
 80048c8:	2308      	movs	r3, #8
 80048ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ce:	e046      	b.n	800495e <UART_SetConfig+0x2e6>
 80048d0:	2310      	movs	r3, #16
 80048d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048d6:	e042      	b.n	800495e <UART_SetConfig+0x2e6>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a17      	ldr	r2, [pc, #92]	@ (800493c <UART_SetConfig+0x2c4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d13a      	bne.n	8004958 <UART_SetConfig+0x2e0>
 80048e2:	4b18      	ldr	r3, [pc, #96]	@ (8004944 <UART_SetConfig+0x2cc>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048f0:	d01a      	beq.n	8004928 <UART_SetConfig+0x2b0>
 80048f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048f6:	d81b      	bhi.n	8004930 <UART_SetConfig+0x2b8>
 80048f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048fc:	d00c      	beq.n	8004918 <UART_SetConfig+0x2a0>
 80048fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004902:	d815      	bhi.n	8004930 <UART_SetConfig+0x2b8>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <UART_SetConfig+0x298>
 8004908:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800490c:	d008      	beq.n	8004920 <UART_SetConfig+0x2a8>
 800490e:	e00f      	b.n	8004930 <UART_SetConfig+0x2b8>
 8004910:	2300      	movs	r3, #0
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004916:	e022      	b.n	800495e <UART_SetConfig+0x2e6>
 8004918:	2302      	movs	r3, #2
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800491e:	e01e      	b.n	800495e <UART_SetConfig+0x2e6>
 8004920:	2304      	movs	r3, #4
 8004922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004926:	e01a      	b.n	800495e <UART_SetConfig+0x2e6>
 8004928:	2308      	movs	r3, #8
 800492a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800492e:	e016      	b.n	800495e <UART_SetConfig+0x2e6>
 8004930:	2310      	movs	r3, #16
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004936:	e012      	b.n	800495e <UART_SetConfig+0x2e6>
 8004938:	efff69f3 	.word	0xefff69f3
 800493c:	40008000 	.word	0x40008000
 8004940:	40013800 	.word	0x40013800
 8004944:	40021000 	.word	0x40021000
 8004948:	40004400 	.word	0x40004400
 800494c:	40004800 	.word	0x40004800
 8004950:	40004c00 	.word	0x40004c00
 8004954:	40005000 	.word	0x40005000
 8004958:	2310      	movs	r3, #16
 800495a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a9f      	ldr	r2, [pc, #636]	@ (8004be0 <UART_SetConfig+0x568>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d17a      	bne.n	8004a5e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004968:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800496c:	2b08      	cmp	r3, #8
 800496e:	d824      	bhi.n	80049ba <UART_SetConfig+0x342>
 8004970:	a201      	add	r2, pc, #4	@ (adr r2, 8004978 <UART_SetConfig+0x300>)
 8004972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004976:	bf00      	nop
 8004978:	0800499d 	.word	0x0800499d
 800497c:	080049bb 	.word	0x080049bb
 8004980:	080049a5 	.word	0x080049a5
 8004984:	080049bb 	.word	0x080049bb
 8004988:	080049ab 	.word	0x080049ab
 800498c:	080049bb 	.word	0x080049bb
 8004990:	080049bb 	.word	0x080049bb
 8004994:	080049bb 	.word	0x080049bb
 8004998:	080049b3 	.word	0x080049b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800499c:	f7fe f9e2 	bl	8002d64 <HAL_RCC_GetPCLK1Freq>
 80049a0:	61f8      	str	r0, [r7, #28]
        break;
 80049a2:	e010      	b.n	80049c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049a4:	4b8f      	ldr	r3, [pc, #572]	@ (8004be4 <UART_SetConfig+0x56c>)
 80049a6:	61fb      	str	r3, [r7, #28]
        break;
 80049a8:	e00d      	b.n	80049c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049aa:	f7fe f943 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 80049ae:	61f8      	str	r0, [r7, #28]
        break;
 80049b0:	e009      	b.n	80049c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049b6:	61fb      	str	r3, [r7, #28]
        break;
 80049b8:	e005      	b.n	80049c6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 80fb 	beq.w	8004bc4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	4413      	add	r3, r2
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d305      	bcc.n	80049ea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d903      	bls.n	80049f2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049f0:	e0e8      	b.n	8004bc4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	2200      	movs	r2, #0
 80049f6:	461c      	mov	r4, r3
 80049f8:	4615      	mov	r5, r2
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	022b      	lsls	r3, r5, #8
 8004a04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a08:	0222      	lsls	r2, r4, #8
 8004a0a:	68f9      	ldr	r1, [r7, #12]
 8004a0c:	6849      	ldr	r1, [r1, #4]
 8004a0e:	0849      	lsrs	r1, r1, #1
 8004a10:	2000      	movs	r0, #0
 8004a12:	4688      	mov	r8, r1
 8004a14:	4681      	mov	r9, r0
 8004a16:	eb12 0a08 	adds.w	sl, r2, r8
 8004a1a:	eb43 0b09 	adc.w	fp, r3, r9
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	603b      	str	r3, [r7, #0]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a2c:	4650      	mov	r0, sl
 8004a2e:	4659      	mov	r1, fp
 8004a30:	f7fb fc1e 	bl	8000270 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4613      	mov	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a42:	d308      	bcc.n	8004a56 <UART_SetConfig+0x3de>
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a4a:	d204      	bcs.n	8004a56 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	60da      	str	r2, [r3, #12]
 8004a54:	e0b6      	b.n	8004bc4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a5c:	e0b2      	b.n	8004bc4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a66:	d15e      	bne.n	8004b26 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d828      	bhi.n	8004ac2 <UART_SetConfig+0x44a>
 8004a70:	a201      	add	r2, pc, #4	@ (adr r2, 8004a78 <UART_SetConfig+0x400>)
 8004a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a76:	bf00      	nop
 8004a78:	08004a9d 	.word	0x08004a9d
 8004a7c:	08004aa5 	.word	0x08004aa5
 8004a80:	08004aad 	.word	0x08004aad
 8004a84:	08004ac3 	.word	0x08004ac3
 8004a88:	08004ab3 	.word	0x08004ab3
 8004a8c:	08004ac3 	.word	0x08004ac3
 8004a90:	08004ac3 	.word	0x08004ac3
 8004a94:	08004ac3 	.word	0x08004ac3
 8004a98:	08004abb 	.word	0x08004abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a9c:	f7fe f962 	bl	8002d64 <HAL_RCC_GetPCLK1Freq>
 8004aa0:	61f8      	str	r0, [r7, #28]
        break;
 8004aa2:	e014      	b.n	8004ace <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa4:	f7fe f974 	bl	8002d90 <HAL_RCC_GetPCLK2Freq>
 8004aa8:	61f8      	str	r0, [r7, #28]
        break;
 8004aaa:	e010      	b.n	8004ace <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aac:	4b4d      	ldr	r3, [pc, #308]	@ (8004be4 <UART_SetConfig+0x56c>)
 8004aae:	61fb      	str	r3, [r7, #28]
        break;
 8004ab0:	e00d      	b.n	8004ace <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ab2:	f7fe f8bf 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8004ab6:	61f8      	str	r0, [r7, #28]
        break;
 8004ab8:	e009      	b.n	8004ace <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004abe:	61fb      	str	r3, [r7, #28]
        break;
 8004ac0:	e005      	b.n	8004ace <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004acc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d077      	beq.n	8004bc4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	005a      	lsls	r2, r3, #1
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	085b      	lsrs	r3, r3, #1
 8004ade:	441a      	add	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	2b0f      	cmp	r3, #15
 8004aee:	d916      	bls.n	8004b1e <UART_SetConfig+0x4a6>
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af6:	d212      	bcs.n	8004b1e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f023 030f 	bic.w	r3, r3, #15
 8004b00:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	085b      	lsrs	r3, r3, #1
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	8afb      	ldrh	r3, [r7, #22]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	8afa      	ldrh	r2, [r7, #22]
 8004b1a:	60da      	str	r2, [r3, #12]
 8004b1c:	e052      	b.n	8004bc4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b24:	e04e      	b.n	8004bc4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d827      	bhi.n	8004b7e <UART_SetConfig+0x506>
 8004b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b34 <UART_SetConfig+0x4bc>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b61 	.word	0x08004b61
 8004b3c:	08004b69 	.word	0x08004b69
 8004b40:	08004b7f 	.word	0x08004b7f
 8004b44:	08004b6f 	.word	0x08004b6f
 8004b48:	08004b7f 	.word	0x08004b7f
 8004b4c:	08004b7f 	.word	0x08004b7f
 8004b50:	08004b7f 	.word	0x08004b7f
 8004b54:	08004b77 	.word	0x08004b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b58:	f7fe f904 	bl	8002d64 <HAL_RCC_GetPCLK1Freq>
 8004b5c:	61f8      	str	r0, [r7, #28]
        break;
 8004b5e:	e014      	b.n	8004b8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b60:	f7fe f916 	bl	8002d90 <HAL_RCC_GetPCLK2Freq>
 8004b64:	61f8      	str	r0, [r7, #28]
        break;
 8004b66:	e010      	b.n	8004b8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b68:	4b1e      	ldr	r3, [pc, #120]	@ (8004be4 <UART_SetConfig+0x56c>)
 8004b6a:	61fb      	str	r3, [r7, #28]
        break;
 8004b6c:	e00d      	b.n	8004b8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b6e:	f7fe f861 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8004b72:	61f8      	str	r0, [r7, #28]
        break;
 8004b74:	e009      	b.n	8004b8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b7a:	61fb      	str	r3, [r7, #28]
        break;
 8004b7c:	e005      	b.n	8004b8a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b88:	bf00      	nop
    }

    if (pclk != 0U)
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d019      	beq.n	8004bc4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	085a      	lsrs	r2, r3, #1
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	441a      	add	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	2b0f      	cmp	r3, #15
 8004ba8:	d909      	bls.n	8004bbe <UART_SetConfig+0x546>
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb0:	d205      	bcs.n	8004bbe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60da      	str	r2, [r3, #12]
 8004bbc:	e002      	b.n	8004bc4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004bd0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3728      	adds	r7, #40	@ 0x28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bde:	bf00      	nop
 8004be0:	40008000 	.word	0x40008000
 8004be4:	00f42400 	.word	0x00f42400

08004be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01a      	beq.n	8004cfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ce6:	d10a      	bne.n	8004cfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b098      	sub	sp, #96	@ 0x60
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d3c:	f7fc f8ca 	bl	8000ed4 <HAL_GetTick>
 8004d40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d12e      	bne.n	8004dae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f88c 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d021      	beq.n	8004dae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e6      	bne.n	8004d6a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e062      	b.n	8004e74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d149      	bne.n	8004e50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f856 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d03c      	beq.n	8004e50 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dde:	e853 3f00 	ldrex	r3, [r3]
 8004de2:	623b      	str	r3, [r7, #32]
   return(result);
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	461a      	mov	r2, r3
 8004df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004df6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dfc:	e841 2300 	strex	r3, r2, [r1]
 8004e00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e6      	bne.n	8004dd6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3308      	adds	r3, #8
 8004e0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	e853 3f00 	ldrex	r3, [r3]
 8004e16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0301 	bic.w	r3, r3, #1
 8004e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3308      	adds	r3, #8
 8004e26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e28:	61fa      	str	r2, [r7, #28]
 8004e2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2c:	69b9      	ldr	r1, [r7, #24]
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	e841 2300 	strex	r3, r2, [r1]
 8004e34:	617b      	str	r3, [r7, #20]
   return(result);
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e5      	bne.n	8004e08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e011      	b.n	8004e74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3758      	adds	r7, #88	@ 0x58
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8c:	e04f      	b.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e94:	d04b      	beq.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e96:	f7fc f81d 	bl	8000ed4 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d302      	bcc.n	8004eac <UART_WaitOnFlagUntilTimeout+0x30>
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e04e      	b.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d037      	beq.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b80      	cmp	r3, #128	@ 0x80
 8004ec2:	d034      	beq.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b40      	cmp	r3, #64	@ 0x40
 8004ec8:	d031      	beq.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d110      	bne.n	8004efa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2208      	movs	r2, #8
 8004ede:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f838 	bl	8004f56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2208      	movs	r2, #8
 8004eea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e029      	b.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f08:	d111      	bne.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f81e 	bl	8004f56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e00f      	b.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4013      	ands	r3, r2
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	bf0c      	ite	eq
 8004f3e:	2301      	moveq	r3, #1
 8004f40:	2300      	movne	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	461a      	mov	r2, r3
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d0a0      	beq.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b095      	sub	sp, #84	@ 0x54
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e6      	bne.n	8004f5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3308      	adds	r3, #8
 8004f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3308      	adds	r3, #8
 8004fae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e5      	bne.n	8004f90 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d118      	bne.n	8004ffe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f023 0310 	bic.w	r3, r3, #16
 8004fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fea:	61bb      	str	r3, [r7, #24]
 8004fec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fee:	6979      	ldr	r1, [r7, #20]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	e841 2300 	strex	r3, r2, [r1]
 8004ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1e6      	bne.n	8004fcc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005012:	bf00      	nop
 8005014:	3754      	adds	r7, #84	@ 0x54
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f7ff fb05 	bl	800464c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b088      	sub	sp, #32
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005066:	61fb      	str	r3, [r7, #28]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	61bb      	str	r3, [r7, #24]
 8005072:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6979      	ldr	r1, [r7, #20]
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	613b      	str	r3, [r7, #16]
   return(result);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e6      	bne.n	8005052 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff fad1 	bl	8004638 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005096:	bf00      	nop
 8005098:	3720      	adds	r7, #32
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
	...

080050b4 <std>:
 80050b4:	2300      	movs	r3, #0
 80050b6:	b510      	push	{r4, lr}
 80050b8:	4604      	mov	r4, r0
 80050ba:	e9c0 3300 	strd	r3, r3, [r0]
 80050be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050c2:	6083      	str	r3, [r0, #8]
 80050c4:	8181      	strh	r1, [r0, #12]
 80050c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80050c8:	81c2      	strh	r2, [r0, #14]
 80050ca:	6183      	str	r3, [r0, #24]
 80050cc:	4619      	mov	r1, r3
 80050ce:	2208      	movs	r2, #8
 80050d0:	305c      	adds	r0, #92	@ 0x5c
 80050d2:	f000 f906 	bl	80052e2 <memset>
 80050d6:	4b0d      	ldr	r3, [pc, #52]	@ (800510c <std+0x58>)
 80050d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80050da:	4b0d      	ldr	r3, [pc, #52]	@ (8005110 <std+0x5c>)
 80050dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050de:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <std+0x60>)
 80050e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80050e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005118 <std+0x64>)
 80050e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80050e6:	4b0d      	ldr	r3, [pc, #52]	@ (800511c <std+0x68>)
 80050e8:	6224      	str	r4, [r4, #32]
 80050ea:	429c      	cmp	r4, r3
 80050ec:	d006      	beq.n	80050fc <std+0x48>
 80050ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80050f2:	4294      	cmp	r4, r2
 80050f4:	d002      	beq.n	80050fc <std+0x48>
 80050f6:	33d0      	adds	r3, #208	@ 0xd0
 80050f8:	429c      	cmp	r4, r3
 80050fa:	d105      	bne.n	8005108 <std+0x54>
 80050fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005104:	f000 b966 	b.w	80053d4 <__retarget_lock_init_recursive>
 8005108:	bd10      	pop	{r4, pc}
 800510a:	bf00      	nop
 800510c:	0800525d 	.word	0x0800525d
 8005110:	0800527f 	.word	0x0800527f
 8005114:	080052b7 	.word	0x080052b7
 8005118:	080052db 	.word	0x080052db
 800511c:	200001b8 	.word	0x200001b8

08005120 <stdio_exit_handler>:
 8005120:	4a02      	ldr	r2, [pc, #8]	@ (800512c <stdio_exit_handler+0xc>)
 8005122:	4903      	ldr	r1, [pc, #12]	@ (8005130 <stdio_exit_handler+0x10>)
 8005124:	4803      	ldr	r0, [pc, #12]	@ (8005134 <stdio_exit_handler+0x14>)
 8005126:	f000 b869 	b.w	80051fc <_fwalk_sglue>
 800512a:	bf00      	nop
 800512c:	2000000c 	.word	0x2000000c
 8005130:	08005c71 	.word	0x08005c71
 8005134:	2000001c 	.word	0x2000001c

08005138 <cleanup_stdio>:
 8005138:	6841      	ldr	r1, [r0, #4]
 800513a:	4b0c      	ldr	r3, [pc, #48]	@ (800516c <cleanup_stdio+0x34>)
 800513c:	4299      	cmp	r1, r3
 800513e:	b510      	push	{r4, lr}
 8005140:	4604      	mov	r4, r0
 8005142:	d001      	beq.n	8005148 <cleanup_stdio+0x10>
 8005144:	f000 fd94 	bl	8005c70 <_fflush_r>
 8005148:	68a1      	ldr	r1, [r4, #8]
 800514a:	4b09      	ldr	r3, [pc, #36]	@ (8005170 <cleanup_stdio+0x38>)
 800514c:	4299      	cmp	r1, r3
 800514e:	d002      	beq.n	8005156 <cleanup_stdio+0x1e>
 8005150:	4620      	mov	r0, r4
 8005152:	f000 fd8d 	bl	8005c70 <_fflush_r>
 8005156:	68e1      	ldr	r1, [r4, #12]
 8005158:	4b06      	ldr	r3, [pc, #24]	@ (8005174 <cleanup_stdio+0x3c>)
 800515a:	4299      	cmp	r1, r3
 800515c:	d004      	beq.n	8005168 <cleanup_stdio+0x30>
 800515e:	4620      	mov	r0, r4
 8005160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005164:	f000 bd84 	b.w	8005c70 <_fflush_r>
 8005168:	bd10      	pop	{r4, pc}
 800516a:	bf00      	nop
 800516c:	200001b8 	.word	0x200001b8
 8005170:	20000220 	.word	0x20000220
 8005174:	20000288 	.word	0x20000288

08005178 <global_stdio_init.part.0>:
 8005178:	b510      	push	{r4, lr}
 800517a:	4b0b      	ldr	r3, [pc, #44]	@ (80051a8 <global_stdio_init.part.0+0x30>)
 800517c:	4c0b      	ldr	r4, [pc, #44]	@ (80051ac <global_stdio_init.part.0+0x34>)
 800517e:	4a0c      	ldr	r2, [pc, #48]	@ (80051b0 <global_stdio_init.part.0+0x38>)
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	4620      	mov	r0, r4
 8005184:	2200      	movs	r2, #0
 8005186:	2104      	movs	r1, #4
 8005188:	f7ff ff94 	bl	80050b4 <std>
 800518c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005190:	2201      	movs	r2, #1
 8005192:	2109      	movs	r1, #9
 8005194:	f7ff ff8e 	bl	80050b4 <std>
 8005198:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800519c:	2202      	movs	r2, #2
 800519e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051a2:	2112      	movs	r1, #18
 80051a4:	f7ff bf86 	b.w	80050b4 <std>
 80051a8:	200002f0 	.word	0x200002f0
 80051ac:	200001b8 	.word	0x200001b8
 80051b0:	08005121 	.word	0x08005121

080051b4 <__sfp_lock_acquire>:
 80051b4:	4801      	ldr	r0, [pc, #4]	@ (80051bc <__sfp_lock_acquire+0x8>)
 80051b6:	f000 b90e 	b.w	80053d6 <__retarget_lock_acquire_recursive>
 80051ba:	bf00      	nop
 80051bc:	200002f9 	.word	0x200002f9

080051c0 <__sfp_lock_release>:
 80051c0:	4801      	ldr	r0, [pc, #4]	@ (80051c8 <__sfp_lock_release+0x8>)
 80051c2:	f000 b909 	b.w	80053d8 <__retarget_lock_release_recursive>
 80051c6:	bf00      	nop
 80051c8:	200002f9 	.word	0x200002f9

080051cc <__sinit>:
 80051cc:	b510      	push	{r4, lr}
 80051ce:	4604      	mov	r4, r0
 80051d0:	f7ff fff0 	bl	80051b4 <__sfp_lock_acquire>
 80051d4:	6a23      	ldr	r3, [r4, #32]
 80051d6:	b11b      	cbz	r3, 80051e0 <__sinit+0x14>
 80051d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051dc:	f7ff bff0 	b.w	80051c0 <__sfp_lock_release>
 80051e0:	4b04      	ldr	r3, [pc, #16]	@ (80051f4 <__sinit+0x28>)
 80051e2:	6223      	str	r3, [r4, #32]
 80051e4:	4b04      	ldr	r3, [pc, #16]	@ (80051f8 <__sinit+0x2c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1f5      	bne.n	80051d8 <__sinit+0xc>
 80051ec:	f7ff ffc4 	bl	8005178 <global_stdio_init.part.0>
 80051f0:	e7f2      	b.n	80051d8 <__sinit+0xc>
 80051f2:	bf00      	nop
 80051f4:	08005139 	.word	0x08005139
 80051f8:	200002f0 	.word	0x200002f0

080051fc <_fwalk_sglue>:
 80051fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005200:	4607      	mov	r7, r0
 8005202:	4688      	mov	r8, r1
 8005204:	4614      	mov	r4, r2
 8005206:	2600      	movs	r6, #0
 8005208:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800520c:	f1b9 0901 	subs.w	r9, r9, #1
 8005210:	d505      	bpl.n	800521e <_fwalk_sglue+0x22>
 8005212:	6824      	ldr	r4, [r4, #0]
 8005214:	2c00      	cmp	r4, #0
 8005216:	d1f7      	bne.n	8005208 <_fwalk_sglue+0xc>
 8005218:	4630      	mov	r0, r6
 800521a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800521e:	89ab      	ldrh	r3, [r5, #12]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d907      	bls.n	8005234 <_fwalk_sglue+0x38>
 8005224:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005228:	3301      	adds	r3, #1
 800522a:	d003      	beq.n	8005234 <_fwalk_sglue+0x38>
 800522c:	4629      	mov	r1, r5
 800522e:	4638      	mov	r0, r7
 8005230:	47c0      	blx	r8
 8005232:	4306      	orrs	r6, r0
 8005234:	3568      	adds	r5, #104	@ 0x68
 8005236:	e7e9      	b.n	800520c <_fwalk_sglue+0x10>

08005238 <iprintf>:
 8005238:	b40f      	push	{r0, r1, r2, r3}
 800523a:	b507      	push	{r0, r1, r2, lr}
 800523c:	4906      	ldr	r1, [pc, #24]	@ (8005258 <iprintf+0x20>)
 800523e:	ab04      	add	r3, sp, #16
 8005240:	6808      	ldr	r0, [r1, #0]
 8005242:	f853 2b04 	ldr.w	r2, [r3], #4
 8005246:	6881      	ldr	r1, [r0, #8]
 8005248:	9301      	str	r3, [sp, #4]
 800524a:	f000 f9e9 	bl	8005620 <_vfiprintf_r>
 800524e:	b003      	add	sp, #12
 8005250:	f85d eb04 	ldr.w	lr, [sp], #4
 8005254:	b004      	add	sp, #16
 8005256:	4770      	bx	lr
 8005258:	20000018 	.word	0x20000018

0800525c <__sread>:
 800525c:	b510      	push	{r4, lr}
 800525e:	460c      	mov	r4, r1
 8005260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005264:	f000 f868 	bl	8005338 <_read_r>
 8005268:	2800      	cmp	r0, #0
 800526a:	bfab      	itete	ge
 800526c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800526e:	89a3      	ldrhlt	r3, [r4, #12]
 8005270:	181b      	addge	r3, r3, r0
 8005272:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005276:	bfac      	ite	ge
 8005278:	6563      	strge	r3, [r4, #84]	@ 0x54
 800527a:	81a3      	strhlt	r3, [r4, #12]
 800527c:	bd10      	pop	{r4, pc}

0800527e <__swrite>:
 800527e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005282:	461f      	mov	r7, r3
 8005284:	898b      	ldrh	r3, [r1, #12]
 8005286:	05db      	lsls	r3, r3, #23
 8005288:	4605      	mov	r5, r0
 800528a:	460c      	mov	r4, r1
 800528c:	4616      	mov	r6, r2
 800528e:	d505      	bpl.n	800529c <__swrite+0x1e>
 8005290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005294:	2302      	movs	r3, #2
 8005296:	2200      	movs	r2, #0
 8005298:	f000 f83c 	bl	8005314 <_lseek_r>
 800529c:	89a3      	ldrh	r3, [r4, #12]
 800529e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052a6:	81a3      	strh	r3, [r4, #12]
 80052a8:	4632      	mov	r2, r6
 80052aa:	463b      	mov	r3, r7
 80052ac:	4628      	mov	r0, r5
 80052ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052b2:	f000 b853 	b.w	800535c <_write_r>

080052b6 <__sseek>:
 80052b6:	b510      	push	{r4, lr}
 80052b8:	460c      	mov	r4, r1
 80052ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052be:	f000 f829 	bl	8005314 <_lseek_r>
 80052c2:	1c43      	adds	r3, r0, #1
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	bf15      	itete	ne
 80052c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80052ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052d2:	81a3      	strheq	r3, [r4, #12]
 80052d4:	bf18      	it	ne
 80052d6:	81a3      	strhne	r3, [r4, #12]
 80052d8:	bd10      	pop	{r4, pc}

080052da <__sclose>:
 80052da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052de:	f000 b809 	b.w	80052f4 <_close_r>

080052e2 <memset>:
 80052e2:	4402      	add	r2, r0
 80052e4:	4603      	mov	r3, r0
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d100      	bne.n	80052ec <memset+0xa>
 80052ea:	4770      	bx	lr
 80052ec:	f803 1b01 	strb.w	r1, [r3], #1
 80052f0:	e7f9      	b.n	80052e6 <memset+0x4>
	...

080052f4 <_close_r>:
 80052f4:	b538      	push	{r3, r4, r5, lr}
 80052f6:	4d06      	ldr	r5, [pc, #24]	@ (8005310 <_close_r+0x1c>)
 80052f8:	2300      	movs	r3, #0
 80052fa:	4604      	mov	r4, r0
 80052fc:	4608      	mov	r0, r1
 80052fe:	602b      	str	r3, [r5, #0]
 8005300:	f7fb fcd1 	bl	8000ca6 <_close>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d102      	bne.n	800530e <_close_r+0x1a>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	b103      	cbz	r3, 800530e <_close_r+0x1a>
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	200002f4 	.word	0x200002f4

08005314 <_lseek_r>:
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	4d07      	ldr	r5, [pc, #28]	@ (8005334 <_lseek_r+0x20>)
 8005318:	4604      	mov	r4, r0
 800531a:	4608      	mov	r0, r1
 800531c:	4611      	mov	r1, r2
 800531e:	2200      	movs	r2, #0
 8005320:	602a      	str	r2, [r5, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	f7fb fce6 	bl	8000cf4 <_lseek>
 8005328:	1c43      	adds	r3, r0, #1
 800532a:	d102      	bne.n	8005332 <_lseek_r+0x1e>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	b103      	cbz	r3, 8005332 <_lseek_r+0x1e>
 8005330:	6023      	str	r3, [r4, #0]
 8005332:	bd38      	pop	{r3, r4, r5, pc}
 8005334:	200002f4 	.word	0x200002f4

08005338 <_read_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	4d07      	ldr	r5, [pc, #28]	@ (8005358 <_read_r+0x20>)
 800533c:	4604      	mov	r4, r0
 800533e:	4608      	mov	r0, r1
 8005340:	4611      	mov	r1, r2
 8005342:	2200      	movs	r2, #0
 8005344:	602a      	str	r2, [r5, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	f7fb fc90 	bl	8000c6c <_read>
 800534c:	1c43      	adds	r3, r0, #1
 800534e:	d102      	bne.n	8005356 <_read_r+0x1e>
 8005350:	682b      	ldr	r3, [r5, #0]
 8005352:	b103      	cbz	r3, 8005356 <_read_r+0x1e>
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	bd38      	pop	{r3, r4, r5, pc}
 8005358:	200002f4 	.word	0x200002f4

0800535c <_write_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4d07      	ldr	r5, [pc, #28]	@ (800537c <_write_r+0x20>)
 8005360:	4604      	mov	r4, r0
 8005362:	4608      	mov	r0, r1
 8005364:	4611      	mov	r1, r2
 8005366:	2200      	movs	r2, #0
 8005368:	602a      	str	r2, [r5, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	f7fb f916 	bl	800059c <_write>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	d102      	bne.n	800537a <_write_r+0x1e>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	b103      	cbz	r3, 800537a <_write_r+0x1e>
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	bd38      	pop	{r3, r4, r5, pc}
 800537c:	200002f4 	.word	0x200002f4

08005380 <__errno>:
 8005380:	4b01      	ldr	r3, [pc, #4]	@ (8005388 <__errno+0x8>)
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20000018 	.word	0x20000018

0800538c <__libc_init_array>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	4d0d      	ldr	r5, [pc, #52]	@ (80053c4 <__libc_init_array+0x38>)
 8005390:	4c0d      	ldr	r4, [pc, #52]	@ (80053c8 <__libc_init_array+0x3c>)
 8005392:	1b64      	subs	r4, r4, r5
 8005394:	10a4      	asrs	r4, r4, #2
 8005396:	2600      	movs	r6, #0
 8005398:	42a6      	cmp	r6, r4
 800539a:	d109      	bne.n	80053b0 <__libc_init_array+0x24>
 800539c:	4d0b      	ldr	r5, [pc, #44]	@ (80053cc <__libc_init_array+0x40>)
 800539e:	4c0c      	ldr	r4, [pc, #48]	@ (80053d0 <__libc_init_array+0x44>)
 80053a0:	f000 fdb6 	bl	8005f10 <_init>
 80053a4:	1b64      	subs	r4, r4, r5
 80053a6:	10a4      	asrs	r4, r4, #2
 80053a8:	2600      	movs	r6, #0
 80053aa:	42a6      	cmp	r6, r4
 80053ac:	d105      	bne.n	80053ba <__libc_init_array+0x2e>
 80053ae:	bd70      	pop	{r4, r5, r6, pc}
 80053b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b4:	4798      	blx	r3
 80053b6:	3601      	adds	r6, #1
 80053b8:	e7ee      	b.n	8005398 <__libc_init_array+0xc>
 80053ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80053be:	4798      	blx	r3
 80053c0:	3601      	adds	r6, #1
 80053c2:	e7f2      	b.n	80053aa <__libc_init_array+0x1e>
 80053c4:	08005fbc 	.word	0x08005fbc
 80053c8:	08005fbc 	.word	0x08005fbc
 80053cc:	08005fbc 	.word	0x08005fbc
 80053d0:	08005fc0 	.word	0x08005fc0

080053d4 <__retarget_lock_init_recursive>:
 80053d4:	4770      	bx	lr

080053d6 <__retarget_lock_acquire_recursive>:
 80053d6:	4770      	bx	lr

080053d8 <__retarget_lock_release_recursive>:
 80053d8:	4770      	bx	lr
	...

080053dc <_free_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	4605      	mov	r5, r0
 80053e0:	2900      	cmp	r1, #0
 80053e2:	d041      	beq.n	8005468 <_free_r+0x8c>
 80053e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053e8:	1f0c      	subs	r4, r1, #4
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	bfb8      	it	lt
 80053ee:	18e4      	addlt	r4, r4, r3
 80053f0:	f000 f8e0 	bl	80055b4 <__malloc_lock>
 80053f4:	4a1d      	ldr	r2, [pc, #116]	@ (800546c <_free_r+0x90>)
 80053f6:	6813      	ldr	r3, [r2, #0]
 80053f8:	b933      	cbnz	r3, 8005408 <_free_r+0x2c>
 80053fa:	6063      	str	r3, [r4, #4]
 80053fc:	6014      	str	r4, [r2, #0]
 80053fe:	4628      	mov	r0, r5
 8005400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005404:	f000 b8dc 	b.w	80055c0 <__malloc_unlock>
 8005408:	42a3      	cmp	r3, r4
 800540a:	d908      	bls.n	800541e <_free_r+0x42>
 800540c:	6820      	ldr	r0, [r4, #0]
 800540e:	1821      	adds	r1, r4, r0
 8005410:	428b      	cmp	r3, r1
 8005412:	bf01      	itttt	eq
 8005414:	6819      	ldreq	r1, [r3, #0]
 8005416:	685b      	ldreq	r3, [r3, #4]
 8005418:	1809      	addeq	r1, r1, r0
 800541a:	6021      	streq	r1, [r4, #0]
 800541c:	e7ed      	b.n	80053fa <_free_r+0x1e>
 800541e:	461a      	mov	r2, r3
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	b10b      	cbz	r3, 8005428 <_free_r+0x4c>
 8005424:	42a3      	cmp	r3, r4
 8005426:	d9fa      	bls.n	800541e <_free_r+0x42>
 8005428:	6811      	ldr	r1, [r2, #0]
 800542a:	1850      	adds	r0, r2, r1
 800542c:	42a0      	cmp	r0, r4
 800542e:	d10b      	bne.n	8005448 <_free_r+0x6c>
 8005430:	6820      	ldr	r0, [r4, #0]
 8005432:	4401      	add	r1, r0
 8005434:	1850      	adds	r0, r2, r1
 8005436:	4283      	cmp	r3, r0
 8005438:	6011      	str	r1, [r2, #0]
 800543a:	d1e0      	bne.n	80053fe <_free_r+0x22>
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	6053      	str	r3, [r2, #4]
 8005442:	4408      	add	r0, r1
 8005444:	6010      	str	r0, [r2, #0]
 8005446:	e7da      	b.n	80053fe <_free_r+0x22>
 8005448:	d902      	bls.n	8005450 <_free_r+0x74>
 800544a:	230c      	movs	r3, #12
 800544c:	602b      	str	r3, [r5, #0]
 800544e:	e7d6      	b.n	80053fe <_free_r+0x22>
 8005450:	6820      	ldr	r0, [r4, #0]
 8005452:	1821      	adds	r1, r4, r0
 8005454:	428b      	cmp	r3, r1
 8005456:	bf04      	itt	eq
 8005458:	6819      	ldreq	r1, [r3, #0]
 800545a:	685b      	ldreq	r3, [r3, #4]
 800545c:	6063      	str	r3, [r4, #4]
 800545e:	bf04      	itt	eq
 8005460:	1809      	addeq	r1, r1, r0
 8005462:	6021      	streq	r1, [r4, #0]
 8005464:	6054      	str	r4, [r2, #4]
 8005466:	e7ca      	b.n	80053fe <_free_r+0x22>
 8005468:	bd38      	pop	{r3, r4, r5, pc}
 800546a:	bf00      	nop
 800546c:	20000300 	.word	0x20000300

08005470 <sbrk_aligned>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	4e0f      	ldr	r6, [pc, #60]	@ (80054b0 <sbrk_aligned+0x40>)
 8005474:	460c      	mov	r4, r1
 8005476:	6831      	ldr	r1, [r6, #0]
 8005478:	4605      	mov	r5, r0
 800547a:	b911      	cbnz	r1, 8005482 <sbrk_aligned+0x12>
 800547c:	f000 fcb4 	bl	8005de8 <_sbrk_r>
 8005480:	6030      	str	r0, [r6, #0]
 8005482:	4621      	mov	r1, r4
 8005484:	4628      	mov	r0, r5
 8005486:	f000 fcaf 	bl	8005de8 <_sbrk_r>
 800548a:	1c43      	adds	r3, r0, #1
 800548c:	d103      	bne.n	8005496 <sbrk_aligned+0x26>
 800548e:	f04f 34ff 	mov.w	r4, #4294967295
 8005492:	4620      	mov	r0, r4
 8005494:	bd70      	pop	{r4, r5, r6, pc}
 8005496:	1cc4      	adds	r4, r0, #3
 8005498:	f024 0403 	bic.w	r4, r4, #3
 800549c:	42a0      	cmp	r0, r4
 800549e:	d0f8      	beq.n	8005492 <sbrk_aligned+0x22>
 80054a0:	1a21      	subs	r1, r4, r0
 80054a2:	4628      	mov	r0, r5
 80054a4:	f000 fca0 	bl	8005de8 <_sbrk_r>
 80054a8:	3001      	adds	r0, #1
 80054aa:	d1f2      	bne.n	8005492 <sbrk_aligned+0x22>
 80054ac:	e7ef      	b.n	800548e <sbrk_aligned+0x1e>
 80054ae:	bf00      	nop
 80054b0:	200002fc 	.word	0x200002fc

080054b4 <_malloc_r>:
 80054b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054b8:	1ccd      	adds	r5, r1, #3
 80054ba:	f025 0503 	bic.w	r5, r5, #3
 80054be:	3508      	adds	r5, #8
 80054c0:	2d0c      	cmp	r5, #12
 80054c2:	bf38      	it	cc
 80054c4:	250c      	movcc	r5, #12
 80054c6:	2d00      	cmp	r5, #0
 80054c8:	4606      	mov	r6, r0
 80054ca:	db01      	blt.n	80054d0 <_malloc_r+0x1c>
 80054cc:	42a9      	cmp	r1, r5
 80054ce:	d904      	bls.n	80054da <_malloc_r+0x26>
 80054d0:	230c      	movs	r3, #12
 80054d2:	6033      	str	r3, [r6, #0]
 80054d4:	2000      	movs	r0, #0
 80054d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055b0 <_malloc_r+0xfc>
 80054de:	f000 f869 	bl	80055b4 <__malloc_lock>
 80054e2:	f8d8 3000 	ldr.w	r3, [r8]
 80054e6:	461c      	mov	r4, r3
 80054e8:	bb44      	cbnz	r4, 800553c <_malloc_r+0x88>
 80054ea:	4629      	mov	r1, r5
 80054ec:	4630      	mov	r0, r6
 80054ee:	f7ff ffbf 	bl	8005470 <sbrk_aligned>
 80054f2:	1c43      	adds	r3, r0, #1
 80054f4:	4604      	mov	r4, r0
 80054f6:	d158      	bne.n	80055aa <_malloc_r+0xf6>
 80054f8:	f8d8 4000 	ldr.w	r4, [r8]
 80054fc:	4627      	mov	r7, r4
 80054fe:	2f00      	cmp	r7, #0
 8005500:	d143      	bne.n	800558a <_malloc_r+0xd6>
 8005502:	2c00      	cmp	r4, #0
 8005504:	d04b      	beq.n	800559e <_malloc_r+0xea>
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	4639      	mov	r1, r7
 800550a:	4630      	mov	r0, r6
 800550c:	eb04 0903 	add.w	r9, r4, r3
 8005510:	f000 fc6a 	bl	8005de8 <_sbrk_r>
 8005514:	4581      	cmp	r9, r0
 8005516:	d142      	bne.n	800559e <_malloc_r+0xea>
 8005518:	6821      	ldr	r1, [r4, #0]
 800551a:	1a6d      	subs	r5, r5, r1
 800551c:	4629      	mov	r1, r5
 800551e:	4630      	mov	r0, r6
 8005520:	f7ff ffa6 	bl	8005470 <sbrk_aligned>
 8005524:	3001      	adds	r0, #1
 8005526:	d03a      	beq.n	800559e <_malloc_r+0xea>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	442b      	add	r3, r5
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	f8d8 3000 	ldr.w	r3, [r8]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	bb62      	cbnz	r2, 8005590 <_malloc_r+0xdc>
 8005536:	f8c8 7000 	str.w	r7, [r8]
 800553a:	e00f      	b.n	800555c <_malloc_r+0xa8>
 800553c:	6822      	ldr	r2, [r4, #0]
 800553e:	1b52      	subs	r2, r2, r5
 8005540:	d420      	bmi.n	8005584 <_malloc_r+0xd0>
 8005542:	2a0b      	cmp	r2, #11
 8005544:	d917      	bls.n	8005576 <_malloc_r+0xc2>
 8005546:	1961      	adds	r1, r4, r5
 8005548:	42a3      	cmp	r3, r4
 800554a:	6025      	str	r5, [r4, #0]
 800554c:	bf18      	it	ne
 800554e:	6059      	strne	r1, [r3, #4]
 8005550:	6863      	ldr	r3, [r4, #4]
 8005552:	bf08      	it	eq
 8005554:	f8c8 1000 	streq.w	r1, [r8]
 8005558:	5162      	str	r2, [r4, r5]
 800555a:	604b      	str	r3, [r1, #4]
 800555c:	4630      	mov	r0, r6
 800555e:	f000 f82f 	bl	80055c0 <__malloc_unlock>
 8005562:	f104 000b 	add.w	r0, r4, #11
 8005566:	1d23      	adds	r3, r4, #4
 8005568:	f020 0007 	bic.w	r0, r0, #7
 800556c:	1ac2      	subs	r2, r0, r3
 800556e:	bf1c      	itt	ne
 8005570:	1a1b      	subne	r3, r3, r0
 8005572:	50a3      	strne	r3, [r4, r2]
 8005574:	e7af      	b.n	80054d6 <_malloc_r+0x22>
 8005576:	6862      	ldr	r2, [r4, #4]
 8005578:	42a3      	cmp	r3, r4
 800557a:	bf0c      	ite	eq
 800557c:	f8c8 2000 	streq.w	r2, [r8]
 8005580:	605a      	strne	r2, [r3, #4]
 8005582:	e7eb      	b.n	800555c <_malloc_r+0xa8>
 8005584:	4623      	mov	r3, r4
 8005586:	6864      	ldr	r4, [r4, #4]
 8005588:	e7ae      	b.n	80054e8 <_malloc_r+0x34>
 800558a:	463c      	mov	r4, r7
 800558c:	687f      	ldr	r7, [r7, #4]
 800558e:	e7b6      	b.n	80054fe <_malloc_r+0x4a>
 8005590:	461a      	mov	r2, r3
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	42a3      	cmp	r3, r4
 8005596:	d1fb      	bne.n	8005590 <_malloc_r+0xdc>
 8005598:	2300      	movs	r3, #0
 800559a:	6053      	str	r3, [r2, #4]
 800559c:	e7de      	b.n	800555c <_malloc_r+0xa8>
 800559e:	230c      	movs	r3, #12
 80055a0:	6033      	str	r3, [r6, #0]
 80055a2:	4630      	mov	r0, r6
 80055a4:	f000 f80c 	bl	80055c0 <__malloc_unlock>
 80055a8:	e794      	b.n	80054d4 <_malloc_r+0x20>
 80055aa:	6005      	str	r5, [r0, #0]
 80055ac:	e7d6      	b.n	800555c <_malloc_r+0xa8>
 80055ae:	bf00      	nop
 80055b0:	20000300 	.word	0x20000300

080055b4 <__malloc_lock>:
 80055b4:	4801      	ldr	r0, [pc, #4]	@ (80055bc <__malloc_lock+0x8>)
 80055b6:	f7ff bf0e 	b.w	80053d6 <__retarget_lock_acquire_recursive>
 80055ba:	bf00      	nop
 80055bc:	200002f8 	.word	0x200002f8

080055c0 <__malloc_unlock>:
 80055c0:	4801      	ldr	r0, [pc, #4]	@ (80055c8 <__malloc_unlock+0x8>)
 80055c2:	f7ff bf09 	b.w	80053d8 <__retarget_lock_release_recursive>
 80055c6:	bf00      	nop
 80055c8:	200002f8 	.word	0x200002f8

080055cc <__sfputc_r>:
 80055cc:	6893      	ldr	r3, [r2, #8]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	b410      	push	{r4}
 80055d4:	6093      	str	r3, [r2, #8]
 80055d6:	da08      	bge.n	80055ea <__sfputc_r+0x1e>
 80055d8:	6994      	ldr	r4, [r2, #24]
 80055da:	42a3      	cmp	r3, r4
 80055dc:	db01      	blt.n	80055e2 <__sfputc_r+0x16>
 80055de:	290a      	cmp	r1, #10
 80055e0:	d103      	bne.n	80055ea <__sfputc_r+0x1e>
 80055e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055e6:	f000 bb6b 	b.w	8005cc0 <__swbuf_r>
 80055ea:	6813      	ldr	r3, [r2, #0]
 80055ec:	1c58      	adds	r0, r3, #1
 80055ee:	6010      	str	r0, [r2, #0]
 80055f0:	7019      	strb	r1, [r3, #0]
 80055f2:	4608      	mov	r0, r1
 80055f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <__sfputs_r>:
 80055fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fc:	4606      	mov	r6, r0
 80055fe:	460f      	mov	r7, r1
 8005600:	4614      	mov	r4, r2
 8005602:	18d5      	adds	r5, r2, r3
 8005604:	42ac      	cmp	r4, r5
 8005606:	d101      	bne.n	800560c <__sfputs_r+0x12>
 8005608:	2000      	movs	r0, #0
 800560a:	e007      	b.n	800561c <__sfputs_r+0x22>
 800560c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005610:	463a      	mov	r2, r7
 8005612:	4630      	mov	r0, r6
 8005614:	f7ff ffda 	bl	80055cc <__sfputc_r>
 8005618:	1c43      	adds	r3, r0, #1
 800561a:	d1f3      	bne.n	8005604 <__sfputs_r+0xa>
 800561c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005620 <_vfiprintf_r>:
 8005620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005624:	460d      	mov	r5, r1
 8005626:	b09d      	sub	sp, #116	@ 0x74
 8005628:	4614      	mov	r4, r2
 800562a:	4698      	mov	r8, r3
 800562c:	4606      	mov	r6, r0
 800562e:	b118      	cbz	r0, 8005638 <_vfiprintf_r+0x18>
 8005630:	6a03      	ldr	r3, [r0, #32]
 8005632:	b90b      	cbnz	r3, 8005638 <_vfiprintf_r+0x18>
 8005634:	f7ff fdca 	bl	80051cc <__sinit>
 8005638:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800563a:	07d9      	lsls	r1, r3, #31
 800563c:	d405      	bmi.n	800564a <_vfiprintf_r+0x2a>
 800563e:	89ab      	ldrh	r3, [r5, #12]
 8005640:	059a      	lsls	r2, r3, #22
 8005642:	d402      	bmi.n	800564a <_vfiprintf_r+0x2a>
 8005644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005646:	f7ff fec6 	bl	80053d6 <__retarget_lock_acquire_recursive>
 800564a:	89ab      	ldrh	r3, [r5, #12]
 800564c:	071b      	lsls	r3, r3, #28
 800564e:	d501      	bpl.n	8005654 <_vfiprintf_r+0x34>
 8005650:	692b      	ldr	r3, [r5, #16]
 8005652:	b99b      	cbnz	r3, 800567c <_vfiprintf_r+0x5c>
 8005654:	4629      	mov	r1, r5
 8005656:	4630      	mov	r0, r6
 8005658:	f000 fb70 	bl	8005d3c <__swsetup_r>
 800565c:	b170      	cbz	r0, 800567c <_vfiprintf_r+0x5c>
 800565e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005660:	07dc      	lsls	r4, r3, #31
 8005662:	d504      	bpl.n	800566e <_vfiprintf_r+0x4e>
 8005664:	f04f 30ff 	mov.w	r0, #4294967295
 8005668:	b01d      	add	sp, #116	@ 0x74
 800566a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566e:	89ab      	ldrh	r3, [r5, #12]
 8005670:	0598      	lsls	r0, r3, #22
 8005672:	d4f7      	bmi.n	8005664 <_vfiprintf_r+0x44>
 8005674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005676:	f7ff feaf 	bl	80053d8 <__retarget_lock_release_recursive>
 800567a:	e7f3      	b.n	8005664 <_vfiprintf_r+0x44>
 800567c:	2300      	movs	r3, #0
 800567e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005680:	2320      	movs	r3, #32
 8005682:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005686:	f8cd 800c 	str.w	r8, [sp, #12]
 800568a:	2330      	movs	r3, #48	@ 0x30
 800568c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800583c <_vfiprintf_r+0x21c>
 8005690:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005694:	f04f 0901 	mov.w	r9, #1
 8005698:	4623      	mov	r3, r4
 800569a:	469a      	mov	sl, r3
 800569c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056a0:	b10a      	cbz	r2, 80056a6 <_vfiprintf_r+0x86>
 80056a2:	2a25      	cmp	r2, #37	@ 0x25
 80056a4:	d1f9      	bne.n	800569a <_vfiprintf_r+0x7a>
 80056a6:	ebba 0b04 	subs.w	fp, sl, r4
 80056aa:	d00b      	beq.n	80056c4 <_vfiprintf_r+0xa4>
 80056ac:	465b      	mov	r3, fp
 80056ae:	4622      	mov	r2, r4
 80056b0:	4629      	mov	r1, r5
 80056b2:	4630      	mov	r0, r6
 80056b4:	f7ff ffa1 	bl	80055fa <__sfputs_r>
 80056b8:	3001      	adds	r0, #1
 80056ba:	f000 80a7 	beq.w	800580c <_vfiprintf_r+0x1ec>
 80056be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056c0:	445a      	add	r2, fp
 80056c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80056c4:	f89a 3000 	ldrb.w	r3, [sl]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 809f 	beq.w	800580c <_vfiprintf_r+0x1ec>
 80056ce:	2300      	movs	r3, #0
 80056d0:	f04f 32ff 	mov.w	r2, #4294967295
 80056d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056d8:	f10a 0a01 	add.w	sl, sl, #1
 80056dc:	9304      	str	r3, [sp, #16]
 80056de:	9307      	str	r3, [sp, #28]
 80056e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80056e6:	4654      	mov	r4, sl
 80056e8:	2205      	movs	r2, #5
 80056ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ee:	4853      	ldr	r0, [pc, #332]	@ (800583c <_vfiprintf_r+0x21c>)
 80056f0:	f7fa fd6e 	bl	80001d0 <memchr>
 80056f4:	9a04      	ldr	r2, [sp, #16]
 80056f6:	b9d8      	cbnz	r0, 8005730 <_vfiprintf_r+0x110>
 80056f8:	06d1      	lsls	r1, r2, #27
 80056fa:	bf44      	itt	mi
 80056fc:	2320      	movmi	r3, #32
 80056fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005702:	0713      	lsls	r3, r2, #28
 8005704:	bf44      	itt	mi
 8005706:	232b      	movmi	r3, #43	@ 0x2b
 8005708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800570c:	f89a 3000 	ldrb.w	r3, [sl]
 8005710:	2b2a      	cmp	r3, #42	@ 0x2a
 8005712:	d015      	beq.n	8005740 <_vfiprintf_r+0x120>
 8005714:	9a07      	ldr	r2, [sp, #28]
 8005716:	4654      	mov	r4, sl
 8005718:	2000      	movs	r0, #0
 800571a:	f04f 0c0a 	mov.w	ip, #10
 800571e:	4621      	mov	r1, r4
 8005720:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005724:	3b30      	subs	r3, #48	@ 0x30
 8005726:	2b09      	cmp	r3, #9
 8005728:	d94b      	bls.n	80057c2 <_vfiprintf_r+0x1a2>
 800572a:	b1b0      	cbz	r0, 800575a <_vfiprintf_r+0x13a>
 800572c:	9207      	str	r2, [sp, #28]
 800572e:	e014      	b.n	800575a <_vfiprintf_r+0x13a>
 8005730:	eba0 0308 	sub.w	r3, r0, r8
 8005734:	fa09 f303 	lsl.w	r3, r9, r3
 8005738:	4313      	orrs	r3, r2
 800573a:	9304      	str	r3, [sp, #16]
 800573c:	46a2      	mov	sl, r4
 800573e:	e7d2      	b.n	80056e6 <_vfiprintf_r+0xc6>
 8005740:	9b03      	ldr	r3, [sp, #12]
 8005742:	1d19      	adds	r1, r3, #4
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	9103      	str	r1, [sp, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	bfbb      	ittet	lt
 800574c:	425b      	neglt	r3, r3
 800574e:	f042 0202 	orrlt.w	r2, r2, #2
 8005752:	9307      	strge	r3, [sp, #28]
 8005754:	9307      	strlt	r3, [sp, #28]
 8005756:	bfb8      	it	lt
 8005758:	9204      	strlt	r2, [sp, #16]
 800575a:	7823      	ldrb	r3, [r4, #0]
 800575c:	2b2e      	cmp	r3, #46	@ 0x2e
 800575e:	d10a      	bne.n	8005776 <_vfiprintf_r+0x156>
 8005760:	7863      	ldrb	r3, [r4, #1]
 8005762:	2b2a      	cmp	r3, #42	@ 0x2a
 8005764:	d132      	bne.n	80057cc <_vfiprintf_r+0x1ac>
 8005766:	9b03      	ldr	r3, [sp, #12]
 8005768:	1d1a      	adds	r2, r3, #4
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	9203      	str	r2, [sp, #12]
 800576e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005772:	3402      	adds	r4, #2
 8005774:	9305      	str	r3, [sp, #20]
 8005776:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800584c <_vfiprintf_r+0x22c>
 800577a:	7821      	ldrb	r1, [r4, #0]
 800577c:	2203      	movs	r2, #3
 800577e:	4650      	mov	r0, sl
 8005780:	f7fa fd26 	bl	80001d0 <memchr>
 8005784:	b138      	cbz	r0, 8005796 <_vfiprintf_r+0x176>
 8005786:	9b04      	ldr	r3, [sp, #16]
 8005788:	eba0 000a 	sub.w	r0, r0, sl
 800578c:	2240      	movs	r2, #64	@ 0x40
 800578e:	4082      	lsls	r2, r0
 8005790:	4313      	orrs	r3, r2
 8005792:	3401      	adds	r4, #1
 8005794:	9304      	str	r3, [sp, #16]
 8005796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800579a:	4829      	ldr	r0, [pc, #164]	@ (8005840 <_vfiprintf_r+0x220>)
 800579c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057a0:	2206      	movs	r2, #6
 80057a2:	f7fa fd15 	bl	80001d0 <memchr>
 80057a6:	2800      	cmp	r0, #0
 80057a8:	d03f      	beq.n	800582a <_vfiprintf_r+0x20a>
 80057aa:	4b26      	ldr	r3, [pc, #152]	@ (8005844 <_vfiprintf_r+0x224>)
 80057ac:	bb1b      	cbnz	r3, 80057f6 <_vfiprintf_r+0x1d6>
 80057ae:	9b03      	ldr	r3, [sp, #12]
 80057b0:	3307      	adds	r3, #7
 80057b2:	f023 0307 	bic.w	r3, r3, #7
 80057b6:	3308      	adds	r3, #8
 80057b8:	9303      	str	r3, [sp, #12]
 80057ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057bc:	443b      	add	r3, r7
 80057be:	9309      	str	r3, [sp, #36]	@ 0x24
 80057c0:	e76a      	b.n	8005698 <_vfiprintf_r+0x78>
 80057c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80057c6:	460c      	mov	r4, r1
 80057c8:	2001      	movs	r0, #1
 80057ca:	e7a8      	b.n	800571e <_vfiprintf_r+0xfe>
 80057cc:	2300      	movs	r3, #0
 80057ce:	3401      	adds	r4, #1
 80057d0:	9305      	str	r3, [sp, #20]
 80057d2:	4619      	mov	r1, r3
 80057d4:	f04f 0c0a 	mov.w	ip, #10
 80057d8:	4620      	mov	r0, r4
 80057da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057de:	3a30      	subs	r2, #48	@ 0x30
 80057e0:	2a09      	cmp	r2, #9
 80057e2:	d903      	bls.n	80057ec <_vfiprintf_r+0x1cc>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0c6      	beq.n	8005776 <_vfiprintf_r+0x156>
 80057e8:	9105      	str	r1, [sp, #20]
 80057ea:	e7c4      	b.n	8005776 <_vfiprintf_r+0x156>
 80057ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80057f0:	4604      	mov	r4, r0
 80057f2:	2301      	movs	r3, #1
 80057f4:	e7f0      	b.n	80057d8 <_vfiprintf_r+0x1b8>
 80057f6:	ab03      	add	r3, sp, #12
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	462a      	mov	r2, r5
 80057fc:	4b12      	ldr	r3, [pc, #72]	@ (8005848 <_vfiprintf_r+0x228>)
 80057fe:	a904      	add	r1, sp, #16
 8005800:	4630      	mov	r0, r6
 8005802:	f3af 8000 	nop.w
 8005806:	4607      	mov	r7, r0
 8005808:	1c78      	adds	r0, r7, #1
 800580a:	d1d6      	bne.n	80057ba <_vfiprintf_r+0x19a>
 800580c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800580e:	07d9      	lsls	r1, r3, #31
 8005810:	d405      	bmi.n	800581e <_vfiprintf_r+0x1fe>
 8005812:	89ab      	ldrh	r3, [r5, #12]
 8005814:	059a      	lsls	r2, r3, #22
 8005816:	d402      	bmi.n	800581e <_vfiprintf_r+0x1fe>
 8005818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800581a:	f7ff fddd 	bl	80053d8 <__retarget_lock_release_recursive>
 800581e:	89ab      	ldrh	r3, [r5, #12]
 8005820:	065b      	lsls	r3, r3, #25
 8005822:	f53f af1f 	bmi.w	8005664 <_vfiprintf_r+0x44>
 8005826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005828:	e71e      	b.n	8005668 <_vfiprintf_r+0x48>
 800582a:	ab03      	add	r3, sp, #12
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	462a      	mov	r2, r5
 8005830:	4b05      	ldr	r3, [pc, #20]	@ (8005848 <_vfiprintf_r+0x228>)
 8005832:	a904      	add	r1, sp, #16
 8005834:	4630      	mov	r0, r6
 8005836:	f000 f879 	bl	800592c <_printf_i>
 800583a:	e7e4      	b.n	8005806 <_vfiprintf_r+0x1e6>
 800583c:	08005f80 	.word	0x08005f80
 8005840:	08005f8a 	.word	0x08005f8a
 8005844:	00000000 	.word	0x00000000
 8005848:	080055fb 	.word	0x080055fb
 800584c:	08005f86 	.word	0x08005f86

08005850 <_printf_common>:
 8005850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005854:	4616      	mov	r6, r2
 8005856:	4698      	mov	r8, r3
 8005858:	688a      	ldr	r2, [r1, #8]
 800585a:	690b      	ldr	r3, [r1, #16]
 800585c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005860:	4293      	cmp	r3, r2
 8005862:	bfb8      	it	lt
 8005864:	4613      	movlt	r3, r2
 8005866:	6033      	str	r3, [r6, #0]
 8005868:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800586c:	4607      	mov	r7, r0
 800586e:	460c      	mov	r4, r1
 8005870:	b10a      	cbz	r2, 8005876 <_printf_common+0x26>
 8005872:	3301      	adds	r3, #1
 8005874:	6033      	str	r3, [r6, #0]
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	0699      	lsls	r1, r3, #26
 800587a:	bf42      	ittt	mi
 800587c:	6833      	ldrmi	r3, [r6, #0]
 800587e:	3302      	addmi	r3, #2
 8005880:	6033      	strmi	r3, [r6, #0]
 8005882:	6825      	ldr	r5, [r4, #0]
 8005884:	f015 0506 	ands.w	r5, r5, #6
 8005888:	d106      	bne.n	8005898 <_printf_common+0x48>
 800588a:	f104 0a19 	add.w	sl, r4, #25
 800588e:	68e3      	ldr	r3, [r4, #12]
 8005890:	6832      	ldr	r2, [r6, #0]
 8005892:	1a9b      	subs	r3, r3, r2
 8005894:	42ab      	cmp	r3, r5
 8005896:	dc26      	bgt.n	80058e6 <_printf_common+0x96>
 8005898:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800589c:	6822      	ldr	r2, [r4, #0]
 800589e:	3b00      	subs	r3, #0
 80058a0:	bf18      	it	ne
 80058a2:	2301      	movne	r3, #1
 80058a4:	0692      	lsls	r2, r2, #26
 80058a6:	d42b      	bmi.n	8005900 <_printf_common+0xb0>
 80058a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058ac:	4641      	mov	r1, r8
 80058ae:	4638      	mov	r0, r7
 80058b0:	47c8      	blx	r9
 80058b2:	3001      	adds	r0, #1
 80058b4:	d01e      	beq.n	80058f4 <_printf_common+0xa4>
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	6922      	ldr	r2, [r4, #16]
 80058ba:	f003 0306 	and.w	r3, r3, #6
 80058be:	2b04      	cmp	r3, #4
 80058c0:	bf02      	ittt	eq
 80058c2:	68e5      	ldreq	r5, [r4, #12]
 80058c4:	6833      	ldreq	r3, [r6, #0]
 80058c6:	1aed      	subeq	r5, r5, r3
 80058c8:	68a3      	ldr	r3, [r4, #8]
 80058ca:	bf0c      	ite	eq
 80058cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058d0:	2500      	movne	r5, #0
 80058d2:	4293      	cmp	r3, r2
 80058d4:	bfc4      	itt	gt
 80058d6:	1a9b      	subgt	r3, r3, r2
 80058d8:	18ed      	addgt	r5, r5, r3
 80058da:	2600      	movs	r6, #0
 80058dc:	341a      	adds	r4, #26
 80058de:	42b5      	cmp	r5, r6
 80058e0:	d11a      	bne.n	8005918 <_printf_common+0xc8>
 80058e2:	2000      	movs	r0, #0
 80058e4:	e008      	b.n	80058f8 <_printf_common+0xa8>
 80058e6:	2301      	movs	r3, #1
 80058e8:	4652      	mov	r2, sl
 80058ea:	4641      	mov	r1, r8
 80058ec:	4638      	mov	r0, r7
 80058ee:	47c8      	blx	r9
 80058f0:	3001      	adds	r0, #1
 80058f2:	d103      	bne.n	80058fc <_printf_common+0xac>
 80058f4:	f04f 30ff 	mov.w	r0, #4294967295
 80058f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fc:	3501      	adds	r5, #1
 80058fe:	e7c6      	b.n	800588e <_printf_common+0x3e>
 8005900:	18e1      	adds	r1, r4, r3
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	2030      	movs	r0, #48	@ 0x30
 8005906:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800590a:	4422      	add	r2, r4
 800590c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005910:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005914:	3302      	adds	r3, #2
 8005916:	e7c7      	b.n	80058a8 <_printf_common+0x58>
 8005918:	2301      	movs	r3, #1
 800591a:	4622      	mov	r2, r4
 800591c:	4641      	mov	r1, r8
 800591e:	4638      	mov	r0, r7
 8005920:	47c8      	blx	r9
 8005922:	3001      	adds	r0, #1
 8005924:	d0e6      	beq.n	80058f4 <_printf_common+0xa4>
 8005926:	3601      	adds	r6, #1
 8005928:	e7d9      	b.n	80058de <_printf_common+0x8e>
	...

0800592c <_printf_i>:
 800592c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005930:	7e0f      	ldrb	r7, [r1, #24]
 8005932:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005934:	2f78      	cmp	r7, #120	@ 0x78
 8005936:	4691      	mov	r9, r2
 8005938:	4680      	mov	r8, r0
 800593a:	460c      	mov	r4, r1
 800593c:	469a      	mov	sl, r3
 800593e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005942:	d807      	bhi.n	8005954 <_printf_i+0x28>
 8005944:	2f62      	cmp	r7, #98	@ 0x62
 8005946:	d80a      	bhi.n	800595e <_printf_i+0x32>
 8005948:	2f00      	cmp	r7, #0
 800594a:	f000 80d1 	beq.w	8005af0 <_printf_i+0x1c4>
 800594e:	2f58      	cmp	r7, #88	@ 0x58
 8005950:	f000 80b8 	beq.w	8005ac4 <_printf_i+0x198>
 8005954:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005958:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800595c:	e03a      	b.n	80059d4 <_printf_i+0xa8>
 800595e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005962:	2b15      	cmp	r3, #21
 8005964:	d8f6      	bhi.n	8005954 <_printf_i+0x28>
 8005966:	a101      	add	r1, pc, #4	@ (adr r1, 800596c <_printf_i+0x40>)
 8005968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800596c:	080059c5 	.word	0x080059c5
 8005970:	080059d9 	.word	0x080059d9
 8005974:	08005955 	.word	0x08005955
 8005978:	08005955 	.word	0x08005955
 800597c:	08005955 	.word	0x08005955
 8005980:	08005955 	.word	0x08005955
 8005984:	080059d9 	.word	0x080059d9
 8005988:	08005955 	.word	0x08005955
 800598c:	08005955 	.word	0x08005955
 8005990:	08005955 	.word	0x08005955
 8005994:	08005955 	.word	0x08005955
 8005998:	08005ad7 	.word	0x08005ad7
 800599c:	08005a03 	.word	0x08005a03
 80059a0:	08005a91 	.word	0x08005a91
 80059a4:	08005955 	.word	0x08005955
 80059a8:	08005955 	.word	0x08005955
 80059ac:	08005af9 	.word	0x08005af9
 80059b0:	08005955 	.word	0x08005955
 80059b4:	08005a03 	.word	0x08005a03
 80059b8:	08005955 	.word	0x08005955
 80059bc:	08005955 	.word	0x08005955
 80059c0:	08005a99 	.word	0x08005a99
 80059c4:	6833      	ldr	r3, [r6, #0]
 80059c6:	1d1a      	adds	r2, r3, #4
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6032      	str	r2, [r6, #0]
 80059cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059d4:	2301      	movs	r3, #1
 80059d6:	e09c      	b.n	8005b12 <_printf_i+0x1e6>
 80059d8:	6833      	ldr	r3, [r6, #0]
 80059da:	6820      	ldr	r0, [r4, #0]
 80059dc:	1d19      	adds	r1, r3, #4
 80059de:	6031      	str	r1, [r6, #0]
 80059e0:	0606      	lsls	r6, r0, #24
 80059e2:	d501      	bpl.n	80059e8 <_printf_i+0xbc>
 80059e4:	681d      	ldr	r5, [r3, #0]
 80059e6:	e003      	b.n	80059f0 <_printf_i+0xc4>
 80059e8:	0645      	lsls	r5, r0, #25
 80059ea:	d5fb      	bpl.n	80059e4 <_printf_i+0xb8>
 80059ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059f0:	2d00      	cmp	r5, #0
 80059f2:	da03      	bge.n	80059fc <_printf_i+0xd0>
 80059f4:	232d      	movs	r3, #45	@ 0x2d
 80059f6:	426d      	negs	r5, r5
 80059f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059fc:	4858      	ldr	r0, [pc, #352]	@ (8005b60 <_printf_i+0x234>)
 80059fe:	230a      	movs	r3, #10
 8005a00:	e011      	b.n	8005a26 <_printf_i+0xfa>
 8005a02:	6821      	ldr	r1, [r4, #0]
 8005a04:	6833      	ldr	r3, [r6, #0]
 8005a06:	0608      	lsls	r0, r1, #24
 8005a08:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a0c:	d402      	bmi.n	8005a14 <_printf_i+0xe8>
 8005a0e:	0649      	lsls	r1, r1, #25
 8005a10:	bf48      	it	mi
 8005a12:	b2ad      	uxthmi	r5, r5
 8005a14:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a16:	4852      	ldr	r0, [pc, #328]	@ (8005b60 <_printf_i+0x234>)
 8005a18:	6033      	str	r3, [r6, #0]
 8005a1a:	bf14      	ite	ne
 8005a1c:	230a      	movne	r3, #10
 8005a1e:	2308      	moveq	r3, #8
 8005a20:	2100      	movs	r1, #0
 8005a22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a26:	6866      	ldr	r6, [r4, #4]
 8005a28:	60a6      	str	r6, [r4, #8]
 8005a2a:	2e00      	cmp	r6, #0
 8005a2c:	db05      	blt.n	8005a3a <_printf_i+0x10e>
 8005a2e:	6821      	ldr	r1, [r4, #0]
 8005a30:	432e      	orrs	r6, r5
 8005a32:	f021 0104 	bic.w	r1, r1, #4
 8005a36:	6021      	str	r1, [r4, #0]
 8005a38:	d04b      	beq.n	8005ad2 <_printf_i+0x1a6>
 8005a3a:	4616      	mov	r6, r2
 8005a3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a40:	fb03 5711 	mls	r7, r3, r1, r5
 8005a44:	5dc7      	ldrb	r7, [r0, r7]
 8005a46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a4a:	462f      	mov	r7, r5
 8005a4c:	42bb      	cmp	r3, r7
 8005a4e:	460d      	mov	r5, r1
 8005a50:	d9f4      	bls.n	8005a3c <_printf_i+0x110>
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d10b      	bne.n	8005a6e <_printf_i+0x142>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	07df      	lsls	r7, r3, #31
 8005a5a:	d508      	bpl.n	8005a6e <_printf_i+0x142>
 8005a5c:	6923      	ldr	r3, [r4, #16]
 8005a5e:	6861      	ldr	r1, [r4, #4]
 8005a60:	4299      	cmp	r1, r3
 8005a62:	bfde      	ittt	le
 8005a64:	2330      	movle	r3, #48	@ 0x30
 8005a66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a6e:	1b92      	subs	r2, r2, r6
 8005a70:	6122      	str	r2, [r4, #16]
 8005a72:	f8cd a000 	str.w	sl, [sp]
 8005a76:	464b      	mov	r3, r9
 8005a78:	aa03      	add	r2, sp, #12
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	4640      	mov	r0, r8
 8005a7e:	f7ff fee7 	bl	8005850 <_printf_common>
 8005a82:	3001      	adds	r0, #1
 8005a84:	d14a      	bne.n	8005b1c <_printf_i+0x1f0>
 8005a86:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8a:	b004      	add	sp, #16
 8005a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	f043 0320 	orr.w	r3, r3, #32
 8005a96:	6023      	str	r3, [r4, #0]
 8005a98:	4832      	ldr	r0, [pc, #200]	@ (8005b64 <_printf_i+0x238>)
 8005a9a:	2778      	movs	r7, #120	@ 0x78
 8005a9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	6831      	ldr	r1, [r6, #0]
 8005aa4:	061f      	lsls	r7, r3, #24
 8005aa6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005aaa:	d402      	bmi.n	8005ab2 <_printf_i+0x186>
 8005aac:	065f      	lsls	r7, r3, #25
 8005aae:	bf48      	it	mi
 8005ab0:	b2ad      	uxthmi	r5, r5
 8005ab2:	6031      	str	r1, [r6, #0]
 8005ab4:	07d9      	lsls	r1, r3, #31
 8005ab6:	bf44      	itt	mi
 8005ab8:	f043 0320 	orrmi.w	r3, r3, #32
 8005abc:	6023      	strmi	r3, [r4, #0]
 8005abe:	b11d      	cbz	r5, 8005ac8 <_printf_i+0x19c>
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	e7ad      	b.n	8005a20 <_printf_i+0xf4>
 8005ac4:	4826      	ldr	r0, [pc, #152]	@ (8005b60 <_printf_i+0x234>)
 8005ac6:	e7e9      	b.n	8005a9c <_printf_i+0x170>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	f023 0320 	bic.w	r3, r3, #32
 8005ace:	6023      	str	r3, [r4, #0]
 8005ad0:	e7f6      	b.n	8005ac0 <_printf_i+0x194>
 8005ad2:	4616      	mov	r6, r2
 8005ad4:	e7bd      	b.n	8005a52 <_printf_i+0x126>
 8005ad6:	6833      	ldr	r3, [r6, #0]
 8005ad8:	6825      	ldr	r5, [r4, #0]
 8005ada:	6961      	ldr	r1, [r4, #20]
 8005adc:	1d18      	adds	r0, r3, #4
 8005ade:	6030      	str	r0, [r6, #0]
 8005ae0:	062e      	lsls	r6, r5, #24
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	d501      	bpl.n	8005aea <_printf_i+0x1be>
 8005ae6:	6019      	str	r1, [r3, #0]
 8005ae8:	e002      	b.n	8005af0 <_printf_i+0x1c4>
 8005aea:	0668      	lsls	r0, r5, #25
 8005aec:	d5fb      	bpl.n	8005ae6 <_printf_i+0x1ba>
 8005aee:	8019      	strh	r1, [r3, #0]
 8005af0:	2300      	movs	r3, #0
 8005af2:	6123      	str	r3, [r4, #16]
 8005af4:	4616      	mov	r6, r2
 8005af6:	e7bc      	b.n	8005a72 <_printf_i+0x146>
 8005af8:	6833      	ldr	r3, [r6, #0]
 8005afa:	1d1a      	adds	r2, r3, #4
 8005afc:	6032      	str	r2, [r6, #0]
 8005afe:	681e      	ldr	r6, [r3, #0]
 8005b00:	6862      	ldr	r2, [r4, #4]
 8005b02:	2100      	movs	r1, #0
 8005b04:	4630      	mov	r0, r6
 8005b06:	f7fa fb63 	bl	80001d0 <memchr>
 8005b0a:	b108      	cbz	r0, 8005b10 <_printf_i+0x1e4>
 8005b0c:	1b80      	subs	r0, r0, r6
 8005b0e:	6060      	str	r0, [r4, #4]
 8005b10:	6863      	ldr	r3, [r4, #4]
 8005b12:	6123      	str	r3, [r4, #16]
 8005b14:	2300      	movs	r3, #0
 8005b16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b1a:	e7aa      	b.n	8005a72 <_printf_i+0x146>
 8005b1c:	6923      	ldr	r3, [r4, #16]
 8005b1e:	4632      	mov	r2, r6
 8005b20:	4649      	mov	r1, r9
 8005b22:	4640      	mov	r0, r8
 8005b24:	47d0      	blx	sl
 8005b26:	3001      	adds	r0, #1
 8005b28:	d0ad      	beq.n	8005a86 <_printf_i+0x15a>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	079b      	lsls	r3, r3, #30
 8005b2e:	d413      	bmi.n	8005b58 <_printf_i+0x22c>
 8005b30:	68e0      	ldr	r0, [r4, #12]
 8005b32:	9b03      	ldr	r3, [sp, #12]
 8005b34:	4298      	cmp	r0, r3
 8005b36:	bfb8      	it	lt
 8005b38:	4618      	movlt	r0, r3
 8005b3a:	e7a6      	b.n	8005a8a <_printf_i+0x15e>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	4632      	mov	r2, r6
 8005b40:	4649      	mov	r1, r9
 8005b42:	4640      	mov	r0, r8
 8005b44:	47d0      	blx	sl
 8005b46:	3001      	adds	r0, #1
 8005b48:	d09d      	beq.n	8005a86 <_printf_i+0x15a>
 8005b4a:	3501      	adds	r5, #1
 8005b4c:	68e3      	ldr	r3, [r4, #12]
 8005b4e:	9903      	ldr	r1, [sp, #12]
 8005b50:	1a5b      	subs	r3, r3, r1
 8005b52:	42ab      	cmp	r3, r5
 8005b54:	dcf2      	bgt.n	8005b3c <_printf_i+0x210>
 8005b56:	e7eb      	b.n	8005b30 <_printf_i+0x204>
 8005b58:	2500      	movs	r5, #0
 8005b5a:	f104 0619 	add.w	r6, r4, #25
 8005b5e:	e7f5      	b.n	8005b4c <_printf_i+0x220>
 8005b60:	08005f91 	.word	0x08005f91
 8005b64:	08005fa2 	.word	0x08005fa2

08005b68 <__sflush_r>:
 8005b68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b70:	0716      	lsls	r6, r2, #28
 8005b72:	4605      	mov	r5, r0
 8005b74:	460c      	mov	r4, r1
 8005b76:	d454      	bmi.n	8005c22 <__sflush_r+0xba>
 8005b78:	684b      	ldr	r3, [r1, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	dc02      	bgt.n	8005b84 <__sflush_r+0x1c>
 8005b7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	dd48      	ble.n	8005c16 <__sflush_r+0xae>
 8005b84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b86:	2e00      	cmp	r6, #0
 8005b88:	d045      	beq.n	8005c16 <__sflush_r+0xae>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005b90:	682f      	ldr	r7, [r5, #0]
 8005b92:	6a21      	ldr	r1, [r4, #32]
 8005b94:	602b      	str	r3, [r5, #0]
 8005b96:	d030      	beq.n	8005bfa <__sflush_r+0x92>
 8005b98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b9a:	89a3      	ldrh	r3, [r4, #12]
 8005b9c:	0759      	lsls	r1, r3, #29
 8005b9e:	d505      	bpl.n	8005bac <__sflush_r+0x44>
 8005ba0:	6863      	ldr	r3, [r4, #4]
 8005ba2:	1ad2      	subs	r2, r2, r3
 8005ba4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ba6:	b10b      	cbz	r3, 8005bac <__sflush_r+0x44>
 8005ba8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005baa:	1ad2      	subs	r2, r2, r3
 8005bac:	2300      	movs	r3, #0
 8005bae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bb0:	6a21      	ldr	r1, [r4, #32]
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	47b0      	blx	r6
 8005bb6:	1c43      	adds	r3, r0, #1
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	d106      	bne.n	8005bca <__sflush_r+0x62>
 8005bbc:	6829      	ldr	r1, [r5, #0]
 8005bbe:	291d      	cmp	r1, #29
 8005bc0:	d82b      	bhi.n	8005c1a <__sflush_r+0xb2>
 8005bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8005c6c <__sflush_r+0x104>)
 8005bc4:	40ca      	lsrs	r2, r1
 8005bc6:	07d6      	lsls	r6, r2, #31
 8005bc8:	d527      	bpl.n	8005c1a <__sflush_r+0xb2>
 8005bca:	2200      	movs	r2, #0
 8005bcc:	6062      	str	r2, [r4, #4]
 8005bce:	04d9      	lsls	r1, r3, #19
 8005bd0:	6922      	ldr	r2, [r4, #16]
 8005bd2:	6022      	str	r2, [r4, #0]
 8005bd4:	d504      	bpl.n	8005be0 <__sflush_r+0x78>
 8005bd6:	1c42      	adds	r2, r0, #1
 8005bd8:	d101      	bne.n	8005bde <__sflush_r+0x76>
 8005bda:	682b      	ldr	r3, [r5, #0]
 8005bdc:	b903      	cbnz	r3, 8005be0 <__sflush_r+0x78>
 8005bde:	6560      	str	r0, [r4, #84]	@ 0x54
 8005be0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005be2:	602f      	str	r7, [r5, #0]
 8005be4:	b1b9      	cbz	r1, 8005c16 <__sflush_r+0xae>
 8005be6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bea:	4299      	cmp	r1, r3
 8005bec:	d002      	beq.n	8005bf4 <__sflush_r+0x8c>
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f7ff fbf4 	bl	80053dc <_free_r>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bf8:	e00d      	b.n	8005c16 <__sflush_r+0xae>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	47b0      	blx	r6
 8005c00:	4602      	mov	r2, r0
 8005c02:	1c50      	adds	r0, r2, #1
 8005c04:	d1c9      	bne.n	8005b9a <__sflush_r+0x32>
 8005c06:	682b      	ldr	r3, [r5, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0c6      	beq.n	8005b9a <__sflush_r+0x32>
 8005c0c:	2b1d      	cmp	r3, #29
 8005c0e:	d001      	beq.n	8005c14 <__sflush_r+0xac>
 8005c10:	2b16      	cmp	r3, #22
 8005c12:	d11e      	bne.n	8005c52 <__sflush_r+0xea>
 8005c14:	602f      	str	r7, [r5, #0]
 8005c16:	2000      	movs	r0, #0
 8005c18:	e022      	b.n	8005c60 <__sflush_r+0xf8>
 8005c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c1e:	b21b      	sxth	r3, r3
 8005c20:	e01b      	b.n	8005c5a <__sflush_r+0xf2>
 8005c22:	690f      	ldr	r7, [r1, #16]
 8005c24:	2f00      	cmp	r7, #0
 8005c26:	d0f6      	beq.n	8005c16 <__sflush_r+0xae>
 8005c28:	0793      	lsls	r3, r2, #30
 8005c2a:	680e      	ldr	r6, [r1, #0]
 8005c2c:	bf08      	it	eq
 8005c2e:	694b      	ldreq	r3, [r1, #20]
 8005c30:	600f      	str	r7, [r1, #0]
 8005c32:	bf18      	it	ne
 8005c34:	2300      	movne	r3, #0
 8005c36:	eba6 0807 	sub.w	r8, r6, r7
 8005c3a:	608b      	str	r3, [r1, #8]
 8005c3c:	f1b8 0f00 	cmp.w	r8, #0
 8005c40:	dde9      	ble.n	8005c16 <__sflush_r+0xae>
 8005c42:	6a21      	ldr	r1, [r4, #32]
 8005c44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c46:	4643      	mov	r3, r8
 8005c48:	463a      	mov	r2, r7
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	47b0      	blx	r6
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	dc08      	bgt.n	8005c64 <__sflush_r+0xfc>
 8005c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c5a:	81a3      	strh	r3, [r4, #12]
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c64:	4407      	add	r7, r0
 8005c66:	eba8 0800 	sub.w	r8, r8, r0
 8005c6a:	e7e7      	b.n	8005c3c <__sflush_r+0xd4>
 8005c6c:	20400001 	.word	0x20400001

08005c70 <_fflush_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	690b      	ldr	r3, [r1, #16]
 8005c74:	4605      	mov	r5, r0
 8005c76:	460c      	mov	r4, r1
 8005c78:	b913      	cbnz	r3, 8005c80 <_fflush_r+0x10>
 8005c7a:	2500      	movs	r5, #0
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	b118      	cbz	r0, 8005c8a <_fflush_r+0x1a>
 8005c82:	6a03      	ldr	r3, [r0, #32]
 8005c84:	b90b      	cbnz	r3, 8005c8a <_fflush_r+0x1a>
 8005c86:	f7ff faa1 	bl	80051cc <__sinit>
 8005c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0f3      	beq.n	8005c7a <_fflush_r+0xa>
 8005c92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c94:	07d0      	lsls	r0, r2, #31
 8005c96:	d404      	bmi.n	8005ca2 <_fflush_r+0x32>
 8005c98:	0599      	lsls	r1, r3, #22
 8005c9a:	d402      	bmi.n	8005ca2 <_fflush_r+0x32>
 8005c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c9e:	f7ff fb9a 	bl	80053d6 <__retarget_lock_acquire_recursive>
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	f7ff ff5f 	bl	8005b68 <__sflush_r>
 8005caa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cac:	07da      	lsls	r2, r3, #31
 8005cae:	4605      	mov	r5, r0
 8005cb0:	d4e4      	bmi.n	8005c7c <_fflush_r+0xc>
 8005cb2:	89a3      	ldrh	r3, [r4, #12]
 8005cb4:	059b      	lsls	r3, r3, #22
 8005cb6:	d4e1      	bmi.n	8005c7c <_fflush_r+0xc>
 8005cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cba:	f7ff fb8d 	bl	80053d8 <__retarget_lock_release_recursive>
 8005cbe:	e7dd      	b.n	8005c7c <_fflush_r+0xc>

08005cc0 <__swbuf_r>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	460e      	mov	r6, r1
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	4605      	mov	r5, r0
 8005cc8:	b118      	cbz	r0, 8005cd2 <__swbuf_r+0x12>
 8005cca:	6a03      	ldr	r3, [r0, #32]
 8005ccc:	b90b      	cbnz	r3, 8005cd2 <__swbuf_r+0x12>
 8005cce:	f7ff fa7d 	bl	80051cc <__sinit>
 8005cd2:	69a3      	ldr	r3, [r4, #24]
 8005cd4:	60a3      	str	r3, [r4, #8]
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	071a      	lsls	r2, r3, #28
 8005cda:	d501      	bpl.n	8005ce0 <__swbuf_r+0x20>
 8005cdc:	6923      	ldr	r3, [r4, #16]
 8005cde:	b943      	cbnz	r3, 8005cf2 <__swbuf_r+0x32>
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f000 f82a 	bl	8005d3c <__swsetup_r>
 8005ce8:	b118      	cbz	r0, 8005cf2 <__swbuf_r+0x32>
 8005cea:	f04f 37ff 	mov.w	r7, #4294967295
 8005cee:	4638      	mov	r0, r7
 8005cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	6922      	ldr	r2, [r4, #16]
 8005cf6:	1a98      	subs	r0, r3, r2
 8005cf8:	6963      	ldr	r3, [r4, #20]
 8005cfa:	b2f6      	uxtb	r6, r6
 8005cfc:	4283      	cmp	r3, r0
 8005cfe:	4637      	mov	r7, r6
 8005d00:	dc05      	bgt.n	8005d0e <__swbuf_r+0x4e>
 8005d02:	4621      	mov	r1, r4
 8005d04:	4628      	mov	r0, r5
 8005d06:	f7ff ffb3 	bl	8005c70 <_fflush_r>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d1ed      	bne.n	8005cea <__swbuf_r+0x2a>
 8005d0e:	68a3      	ldr	r3, [r4, #8]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	60a3      	str	r3, [r4, #8]
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	6022      	str	r2, [r4, #0]
 8005d1a:	701e      	strb	r6, [r3, #0]
 8005d1c:	6962      	ldr	r2, [r4, #20]
 8005d1e:	1c43      	adds	r3, r0, #1
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d004      	beq.n	8005d2e <__swbuf_r+0x6e>
 8005d24:	89a3      	ldrh	r3, [r4, #12]
 8005d26:	07db      	lsls	r3, r3, #31
 8005d28:	d5e1      	bpl.n	8005cee <__swbuf_r+0x2e>
 8005d2a:	2e0a      	cmp	r6, #10
 8005d2c:	d1df      	bne.n	8005cee <__swbuf_r+0x2e>
 8005d2e:	4621      	mov	r1, r4
 8005d30:	4628      	mov	r0, r5
 8005d32:	f7ff ff9d 	bl	8005c70 <_fflush_r>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d0d9      	beq.n	8005cee <__swbuf_r+0x2e>
 8005d3a:	e7d6      	b.n	8005cea <__swbuf_r+0x2a>

08005d3c <__swsetup_r>:
 8005d3c:	b538      	push	{r3, r4, r5, lr}
 8005d3e:	4b29      	ldr	r3, [pc, #164]	@ (8005de4 <__swsetup_r+0xa8>)
 8005d40:	4605      	mov	r5, r0
 8005d42:	6818      	ldr	r0, [r3, #0]
 8005d44:	460c      	mov	r4, r1
 8005d46:	b118      	cbz	r0, 8005d50 <__swsetup_r+0x14>
 8005d48:	6a03      	ldr	r3, [r0, #32]
 8005d4a:	b90b      	cbnz	r3, 8005d50 <__swsetup_r+0x14>
 8005d4c:	f7ff fa3e 	bl	80051cc <__sinit>
 8005d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d54:	0719      	lsls	r1, r3, #28
 8005d56:	d422      	bmi.n	8005d9e <__swsetup_r+0x62>
 8005d58:	06da      	lsls	r2, r3, #27
 8005d5a:	d407      	bmi.n	8005d6c <__swsetup_r+0x30>
 8005d5c:	2209      	movs	r2, #9
 8005d5e:	602a      	str	r2, [r5, #0]
 8005d60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d64:	81a3      	strh	r3, [r4, #12]
 8005d66:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6a:	e033      	b.n	8005dd4 <__swsetup_r+0x98>
 8005d6c:	0758      	lsls	r0, r3, #29
 8005d6e:	d512      	bpl.n	8005d96 <__swsetup_r+0x5a>
 8005d70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d72:	b141      	cbz	r1, 8005d86 <__swsetup_r+0x4a>
 8005d74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d78:	4299      	cmp	r1, r3
 8005d7a:	d002      	beq.n	8005d82 <__swsetup_r+0x46>
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f7ff fb2d 	bl	80053dc <_free_r>
 8005d82:	2300      	movs	r3, #0
 8005d84:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d8c:	81a3      	strh	r3, [r4, #12]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	6063      	str	r3, [r4, #4]
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	6023      	str	r3, [r4, #0]
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	f043 0308 	orr.w	r3, r3, #8
 8005d9c:	81a3      	strh	r3, [r4, #12]
 8005d9e:	6923      	ldr	r3, [r4, #16]
 8005da0:	b94b      	cbnz	r3, 8005db6 <__swsetup_r+0x7a>
 8005da2:	89a3      	ldrh	r3, [r4, #12]
 8005da4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dac:	d003      	beq.n	8005db6 <__swsetup_r+0x7a>
 8005dae:	4621      	mov	r1, r4
 8005db0:	4628      	mov	r0, r5
 8005db2:	f000 f84f 	bl	8005e54 <__smakebuf_r>
 8005db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dba:	f013 0201 	ands.w	r2, r3, #1
 8005dbe:	d00a      	beq.n	8005dd6 <__swsetup_r+0x9a>
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	60a2      	str	r2, [r4, #8]
 8005dc4:	6962      	ldr	r2, [r4, #20]
 8005dc6:	4252      	negs	r2, r2
 8005dc8:	61a2      	str	r2, [r4, #24]
 8005dca:	6922      	ldr	r2, [r4, #16]
 8005dcc:	b942      	cbnz	r2, 8005de0 <__swsetup_r+0xa4>
 8005dce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005dd2:	d1c5      	bne.n	8005d60 <__swsetup_r+0x24>
 8005dd4:	bd38      	pop	{r3, r4, r5, pc}
 8005dd6:	0799      	lsls	r1, r3, #30
 8005dd8:	bf58      	it	pl
 8005dda:	6962      	ldrpl	r2, [r4, #20]
 8005ddc:	60a2      	str	r2, [r4, #8]
 8005dde:	e7f4      	b.n	8005dca <__swsetup_r+0x8e>
 8005de0:	2000      	movs	r0, #0
 8005de2:	e7f7      	b.n	8005dd4 <__swsetup_r+0x98>
 8005de4:	20000018 	.word	0x20000018

08005de8 <_sbrk_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4d06      	ldr	r5, [pc, #24]	@ (8005e04 <_sbrk_r+0x1c>)
 8005dec:	2300      	movs	r3, #0
 8005dee:	4604      	mov	r4, r0
 8005df0:	4608      	mov	r0, r1
 8005df2:	602b      	str	r3, [r5, #0]
 8005df4:	f7fa ff8c 	bl	8000d10 <_sbrk>
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	d102      	bne.n	8005e02 <_sbrk_r+0x1a>
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	b103      	cbz	r3, 8005e02 <_sbrk_r+0x1a>
 8005e00:	6023      	str	r3, [r4, #0]
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	200002f4 	.word	0x200002f4

08005e08 <__swhatbuf_r>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e10:	2900      	cmp	r1, #0
 8005e12:	b096      	sub	sp, #88	@ 0x58
 8005e14:	4615      	mov	r5, r2
 8005e16:	461e      	mov	r6, r3
 8005e18:	da0d      	bge.n	8005e36 <__swhatbuf_r+0x2e>
 8005e1a:	89a3      	ldrh	r3, [r4, #12]
 8005e1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e20:	f04f 0100 	mov.w	r1, #0
 8005e24:	bf14      	ite	ne
 8005e26:	2340      	movne	r3, #64	@ 0x40
 8005e28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	6031      	str	r1, [r6, #0]
 8005e30:	602b      	str	r3, [r5, #0]
 8005e32:	b016      	add	sp, #88	@ 0x58
 8005e34:	bd70      	pop	{r4, r5, r6, pc}
 8005e36:	466a      	mov	r2, sp
 8005e38:	f000 f848 	bl	8005ecc <_fstat_r>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	dbec      	blt.n	8005e1a <__swhatbuf_r+0x12>
 8005e40:	9901      	ldr	r1, [sp, #4]
 8005e42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e4a:	4259      	negs	r1, r3
 8005e4c:	4159      	adcs	r1, r3
 8005e4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e52:	e7eb      	b.n	8005e2c <__swhatbuf_r+0x24>

08005e54 <__smakebuf_r>:
 8005e54:	898b      	ldrh	r3, [r1, #12]
 8005e56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e58:	079d      	lsls	r5, r3, #30
 8005e5a:	4606      	mov	r6, r0
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	d507      	bpl.n	8005e70 <__smakebuf_r+0x1c>
 8005e60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	6123      	str	r3, [r4, #16]
 8005e68:	2301      	movs	r3, #1
 8005e6a:	6163      	str	r3, [r4, #20]
 8005e6c:	b003      	add	sp, #12
 8005e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e70:	ab01      	add	r3, sp, #4
 8005e72:	466a      	mov	r2, sp
 8005e74:	f7ff ffc8 	bl	8005e08 <__swhatbuf_r>
 8005e78:	9f00      	ldr	r7, [sp, #0]
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	4639      	mov	r1, r7
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f7ff fb18 	bl	80054b4 <_malloc_r>
 8005e84:	b948      	cbnz	r0, 8005e9a <__smakebuf_r+0x46>
 8005e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e8a:	059a      	lsls	r2, r3, #22
 8005e8c:	d4ee      	bmi.n	8005e6c <__smakebuf_r+0x18>
 8005e8e:	f023 0303 	bic.w	r3, r3, #3
 8005e92:	f043 0302 	orr.w	r3, r3, #2
 8005e96:	81a3      	strh	r3, [r4, #12]
 8005e98:	e7e2      	b.n	8005e60 <__smakebuf_r+0xc>
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	6020      	str	r0, [r4, #0]
 8005e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea2:	81a3      	strh	r3, [r4, #12]
 8005ea4:	9b01      	ldr	r3, [sp, #4]
 8005ea6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005eaa:	b15b      	cbz	r3, 8005ec4 <__smakebuf_r+0x70>
 8005eac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f000 f81d 	bl	8005ef0 <_isatty_r>
 8005eb6:	b128      	cbz	r0, 8005ec4 <__smakebuf_r+0x70>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	f023 0303 	bic.w	r3, r3, #3
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	431d      	orrs	r5, r3
 8005ec8:	81a5      	strh	r5, [r4, #12]
 8005eca:	e7cf      	b.n	8005e6c <__smakebuf_r+0x18>

08005ecc <_fstat_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	4d07      	ldr	r5, [pc, #28]	@ (8005eec <_fstat_r+0x20>)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	4608      	mov	r0, r1
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	602b      	str	r3, [r5, #0]
 8005eda:	f7fa fef0 	bl	8000cbe <_fstat>
 8005ede:	1c43      	adds	r3, r0, #1
 8005ee0:	d102      	bne.n	8005ee8 <_fstat_r+0x1c>
 8005ee2:	682b      	ldr	r3, [r5, #0]
 8005ee4:	b103      	cbz	r3, 8005ee8 <_fstat_r+0x1c>
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	bd38      	pop	{r3, r4, r5, pc}
 8005eea:	bf00      	nop
 8005eec:	200002f4 	.word	0x200002f4

08005ef0 <_isatty_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4d06      	ldr	r5, [pc, #24]	@ (8005f0c <_isatty_r+0x1c>)
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	4608      	mov	r0, r1
 8005efa:	602b      	str	r3, [r5, #0]
 8005efc:	f7fa feef 	bl	8000cde <_isatty>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d102      	bne.n	8005f0a <_isatty_r+0x1a>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	b103      	cbz	r3, 8005f0a <_isatty_r+0x1a>
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	200002f4 	.word	0x200002f4

08005f10 <_init>:
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f12:	bf00      	nop
 8005f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f16:	bc08      	pop	{r3}
 8005f18:	469e      	mov	lr, r3
 8005f1a:	4770      	bx	lr

08005f1c <_fini>:
 8005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1e:	bf00      	nop
 8005f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f22:	bc08      	pop	{r3}
 8005f24:	469e      	mov	lr, r3
 8005f26:	4770      	bx	lr
