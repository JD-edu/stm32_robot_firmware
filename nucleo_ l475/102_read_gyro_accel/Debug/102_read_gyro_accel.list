
102_read_gyro_accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008058  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080081e8  080081e8  000091e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008428  08008428  0000a070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008428  08008428  00009428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008430  08008430  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008430  08008430  00009430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008434  08008434  00009434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008438  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000070  080084a8  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  080084a8  0000a374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150a0  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a91  00000000  00000000  0001f140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  00021bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f3e  00000000  00000000  00022f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028637  00000000  00000000  00023e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f67  00000000  00000000  0004c4bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7e93  00000000  00000000  00063424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b2b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d8c  00000000  00000000  0015b2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00161088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081d0 	.word	0x080081d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080081d0 	.word	0x080081d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	4804      	ldr	r0, [pc, #16]	@ (8000f3c <_write+0x28>)
 8000f2c:	f004 fd88 	bl	8005a40 <HAL_UART_Transmit>
    return len;
 8000f30:	687b      	ldr	r3, [r7, #4]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000178 	.word	0x20000178

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f46:	f000 fed3 	bl	8001cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4a:	f000 f865 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4e:	f000 f9af 	bl	80012b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f52:	f000 f97d 	bl	8001250 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f56:	f000 f8d1 	bl	80010fc <MX_I2C1_Init>
  MX_TIM6_Init();
 8000f5a:	f000 f90d 	bl	8001178 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000f5e:	f000 f941 	bl	80011e4 <MX_TIM7_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000f62:	f000 f89e 	bl	80010a2 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // Starts the timers in interrupt mode
  HAL_TIM_Base_Start_IT(&htim6);
 8000f66:	4821      	ldr	r0, [pc, #132]	@ (8000fec <main+0xac>)
 8000f68:	f004 fa30 	bl	80053cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000f6c:	4820      	ldr	r0, [pc, #128]	@ (8000ff0 <main+0xb0>)
 8000f6e:	f004 fa2d 	bl	80053cc <HAL_TIM_Base_Start_IT>
  // Initializes the MPU6050 sensor
  MPU6050_Init();
 8000f72:	f000 fabb 	bl	80014ec <MPU6050_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Checks for IMU read flag set by TIM2 interrupt
	  if(f_imu_read == 1){
 8000f76:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <main+0xb4>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d10e      	bne.n	8000f9c <main+0x5c>
		   MPU6050_ReadAccel(&ax, &ay, &az); // Read accelerometer data
 8000f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff8 <main+0xb8>)
 8000f80:	491e      	ldr	r1, [pc, #120]	@ (8000ffc <main+0xbc>)
 8000f82:	481f      	ldr	r0, [pc, #124]	@ (8001000 <main+0xc0>)
 8000f84:	f000 fad2 	bl	800152c <MPU6050_ReadAccel>
		   MPU6050_ReadGyro(&gx, &gy, &gz);   // Read gyroscope data
 8000f88:	4a1e      	ldr	r2, [pc, #120]	@ (8001004 <main+0xc4>)
 8000f8a:	491f      	ldr	r1, [pc, #124]	@ (8001008 <main+0xc8>)
 8000f8c:	481f      	ldr	r0, [pc, #124]	@ (800100c <main+0xcc>)
 8000f8e:	f000 fafc 	bl	800158a <MPU6050_ReadGyro>
		   Compute_Orientation();            // Calculate orientation
 8000f92:	f000 fb29 	bl	80015e8 <Compute_Orientation>
		   f_imu_read = 0; // Reset flag
 8000f96:	4b17      	ldr	r3, [pc, #92]	@ (8000ff4 <main+0xb4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
	  }
	  // Checks for UART send flag set by TIM3 interrupt
	  if(f_uart_send == 1){
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <main+0xd0>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d1e8      	bne.n	8000f76 <main+0x36>
		  printf("Accel X: %d Y: %d Z: %d Gyro: X: %d, Y: %d, Z: %d \r\n", ax, ay, az, gx, gy, gz);
 8000fa4:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <main+0xc0>)
 8000fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000faa:	4618      	mov	r0, r3
 8000fac:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <main+0xbc>)
 8000fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb2:	461c      	mov	r4, r3
 8000fb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <main+0xb8>)
 8000fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fba:	461d      	mov	r5, r3
 8000fbc:	4b13      	ldr	r3, [pc, #76]	@ (800100c <main+0xcc>)
 8000fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <main+0xc8>)
 8000fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <main+0xc4>)
 8000fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	9101      	str	r1, [sp, #4]
 8000fd6:	9200      	str	r2, [sp, #0]
 8000fd8:	462b      	mov	r3, r5
 8000fda:	4622      	mov	r2, r4
 8000fdc:	4601      	mov	r1, r0
 8000fde:	480d      	ldr	r0, [pc, #52]	@ (8001014 <main+0xd4>)
 8000fe0:	f005 febe 	bl	8006d60 <iprintf>
		  //Send_IMU_Data(&ax, &ay, &az, &gx, &gy, &gz, &pitch, &roll, &yaw);
		  f_uart_send = 0; // Reset flag
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <main+0xd0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
	  if(f_imu_read == 1){
 8000fea:	e7c4      	b.n	8000f76 <main+0x36>
 8000fec:	200000e0 	.word	0x200000e0
 8000ff0:	2000012c 	.word	0x2000012c
 8000ff4:	20000200 	.word	0x20000200
 8000ff8:	20000206 	.word	0x20000206
 8000ffc:	20000204 	.word	0x20000204
 8001000:	20000202 	.word	0x20000202
 8001004:	2000020c 	.word	0x2000020c
 8001008:	2000020a 	.word	0x2000020a
 800100c:	20000208 	.word	0x20000208
 8001010:	20000201 	.word	0x20000201
 8001014:	080081e8 	.word	0x080081e8

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b096      	sub	sp, #88	@ 0x58
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	2244      	movs	r2, #68	@ 0x44
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f005 ffe2 	bl	8006ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	463b      	mov	r3, r7
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800103a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800103e:	f002 fe5b 	bl	8003cf8 <HAL_PWREx_ControlVoltageScaling>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001048:	f000 fc14 	bl	8001874 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800104c:	2302      	movs	r3, #2
 800104e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001050:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001054:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001056:	2310      	movs	r3, #16
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800105a:	2300      	movs	r3, #0
 800105c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fe9e 	bl	8003da4 <HAL_RCC_OscConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800106e:	f000 fc01 	bl	8001874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001072:	230f      	movs	r3, #15
 8001074:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001076:	2301      	movs	r3, #1
 8001078:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 800107a:	23a0      	movs	r3, #160	@ 0xa0
 800107c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f003 fa66 	bl	800455c <HAL_RCC_ClockConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001096:	f000 fbed 	bl	8001874 <Error_Handler>
  }
}
 800109a:	bf00      	nop
 800109c:	3758      	adds	r7, #88	@ 0x58
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2037      	movs	r0, #55	@ 0x37
 80010ac:	f000 ff9b 	bl	8001fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80010b0:	2037      	movs	r0, #55	@ 0x37
 80010b2:	f000 ffb4 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	2036      	movs	r0, #54	@ 0x36
 80010bc:	f000 ff93 	bl	8001fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010c0:	2036      	movs	r0, #54	@ 0x36
 80010c2:	f000 ffac 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	2026      	movs	r0, #38	@ 0x26
 80010cc:	f000 ff8b 	bl	8001fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010d0:	2026      	movs	r0, #38	@ 0x26
 80010d2:	f000 ffa4 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2020      	movs	r0, #32
 80010dc:	f000 ff83 	bl	8001fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80010e0:	2020      	movs	r0, #32
 80010e2:	f000 ff9c 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	201f      	movs	r0, #31
 80010ec:	f000 ff7b 	bl	8001fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010f0:	201f      	movs	r0, #31
 80010f2:	f000 ff94 	bl	800201e <HAL_NVIC_EnableIRQ>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001100:	4b1b      	ldr	r3, [pc, #108]	@ (8001170 <MX_I2C1_Init+0x74>)
 8001102:	4a1c      	ldr	r2, [pc, #112]	@ (8001174 <MX_I2C1_Init+0x78>)
 8001104:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000508;
 8001106:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <MX_I2C1_Init+0x74>)
 8001108:	f44f 62a1 	mov.w	r2, #1288	@ 0x508
 800110c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800110e:	4b18      	ldr	r3, [pc, #96]	@ (8001170 <MX_I2C1_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001114:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <MX_I2C1_Init+0x74>)
 8001116:	2201      	movs	r2, #1
 8001118:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <MX_I2C1_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001120:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <MX_I2C1_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001126:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <MX_I2C1_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800112c:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <MX_I2C1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <MX_I2C1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001138:	480d      	ldr	r0, [pc, #52]	@ (8001170 <MX_I2C1_Init+0x74>)
 800113a:	f001 f9f3 	bl	8002524 <HAL_I2C_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001144:	f000 fb96 	bl	8001874 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001148:	2100      	movs	r1, #0
 800114a:	4809      	ldr	r0, [pc, #36]	@ (8001170 <MX_I2C1_Init+0x74>)
 800114c:	f002 fd2e 	bl	8003bac <HAL_I2CEx_ConfigAnalogFilter>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001156:	f000 fb8d 	bl	8001874 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800115a:	2100      	movs	r1, #0
 800115c:	4804      	ldr	r0, [pc, #16]	@ (8001170 <MX_I2C1_Init+0x74>)
 800115e:	f002 fd70 	bl	8003c42 <HAL_I2CEx_ConfigDigitalFilter>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001168:	f000 fb84 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000008c 	.word	0x2000008c
 8001174:	40005400 	.word	0x40005400

08001178 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <MX_TIM6_Init+0x64>)
 800118a:	4a15      	ldr	r2, [pc, #84]	@ (80011e0 <MX_TIM6_Init+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 800118e:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <MX_TIM6_Init+0x64>)
 8001190:	2263      	movs	r2, #99	@ 0x63
 8001192:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_TIM6_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <MX_TIM6_Init+0x64>)
 800119c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_TIM6_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011a8:	480c      	ldr	r0, [pc, #48]	@ (80011dc <MX_TIM6_Init+0x64>)
 80011aa:	f004 f8b7 	bl	800531c <HAL_TIM_Base_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011b4:	f000 fb5e 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_TIM6_Init+0x64>)
 80011c6:	f004 fb47 	bl	8005858 <HAL_TIMEx_MasterConfigSynchronization>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011d0:	f000 fb50 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200000e0 	.word	0x200000e0
 80011e0:	40001000 	.word	0x40001000

080011e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <MX_TIM7_Init+0x64>)
 80011f6:	4a15      	ldr	r2, [pc, #84]	@ (800124c <MX_TIM7_Init+0x68>)
 80011f8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 80011fa:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <MX_TIM7_Init+0x64>)
 80011fc:	2263      	movs	r2, #99	@ 0x63
 80011fe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001200:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <MX_TIM7_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000-1;
 8001206:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <MX_TIM7_Init+0x64>)
 8001208:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800120c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <MX_TIM7_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <MX_TIM7_Init+0x64>)
 8001216:	f004 f881 	bl	800531c <HAL_TIM_Base_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001220:	f000 fb28 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_TIM7_Init+0x64>)
 8001232:	f004 fb11 	bl	8005858 <HAL_TIMEx_MasterConfigSynchronization>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800123c:	f000 fb1a 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000012c 	.word	0x2000012c
 800124c:	40001400 	.word	0x40001400

08001250 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001254:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <MX_USART2_UART_Init+0x58>)
 8001256:	4a15      	ldr	r2, [pc, #84]	@ (80012ac <MX_USART2_UART_Init+0x5c>)
 8001258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <MX_USART2_UART_Init+0x58>)
 800125c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001260:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <MX_USART2_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <MX_USART2_UART_Init+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126e:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <MX_USART2_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <MX_USART2_UART_Init+0x58>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <MX_USART2_UART_Init+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <MX_USART2_UART_Init+0x58>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <MX_USART2_UART_Init+0x58>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <MX_USART2_UART_Init+0x58>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001292:	4805      	ldr	r0, [pc, #20]	@ (80012a8 <MX_USART2_UART_Init+0x58>)
 8001294:	f004 fb86 	bl	80059a4 <HAL_UART_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800129e:	f000 fae9 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000178 	.word	0x20000178
 80012ac:	40004400 	.word	0x40004400

080012b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	@ 0x28
 80012b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001374 <MX_GPIO_Init+0xc4>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	4a2a      	ldr	r2, [pc, #168]	@ (8001374 <MX_GPIO_Init+0xc4>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d2:	4b28      	ldr	r3, [pc, #160]	@ (8001374 <MX_GPIO_Init+0xc4>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012de:	4b25      	ldr	r3, [pc, #148]	@ (8001374 <MX_GPIO_Init+0xc4>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	4a24      	ldr	r2, [pc, #144]	@ (8001374 <MX_GPIO_Init+0xc4>)
 80012e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ea:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <MX_GPIO_Init+0xc4>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001374 <MX_GPIO_Init+0xc4>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001374 <MX_GPIO_Init+0xc4>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001302:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <MX_GPIO_Init+0xc4>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <MX_GPIO_Init+0xc4>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	4a18      	ldr	r2, [pc, #96]	@ (8001374 <MX_GPIO_Init+0xc4>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131a:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <MX_GPIO_Init+0xc4>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2120      	movs	r1, #32
 800132a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800132e:	f001 f8c7 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001332:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001338:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	480b      	ldr	r0, [pc, #44]	@ (8001378 <MX_GPIO_Init+0xc8>)
 800134a:	f000 ff0f 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800134e:	2320      	movs	r3, #32
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001368:	f000 ff00 	bl	800216c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	@ 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	48000800 	.word	0x48000800

0800137c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback function for TIM2 and TIM3 interrupts
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) { // 10ms interrupt for IMU data reading
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0b      	ldr	r2, [pc, #44]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d108      	bne.n	80013a0 <HAL_TIM_PeriodElapsedCallback+0x24>
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800138e:	2120      	movs	r1, #32
 8001390:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001394:	f001 f8ac 	bl	80024f0 <HAL_GPIO_TogglePin>
        f_imu_read = 1;
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x40>)
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
    }else if(htim->Instance == TIM7){ // 100ms interrupt for UART data sending
    	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12); // Toggle onboard LED
    	f_uart_send = 1;
    }
}
 800139e:	e007      	b.n	80013b0 <HAL_TIM_PeriodElapsedCallback+0x34>
    }else if(htim->Instance == TIM7){ // 100ms interrupt for UART data sending
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a06      	ldr	r2, [pc, #24]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d102      	bne.n	80013b0 <HAL_TIM_PeriodElapsedCallback+0x34>
    	f_uart_send = 1;
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40001000 	.word	0x40001000
 80013bc:	20000200 	.word	0x20000200
 80013c0:	40001400 	.word	0x40001400
 80013c4:	20000201 	.word	0x20000201

080013c8 <MPU6050_Write>:
	who_am_i =  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, 100);
	return uga; // Returns an unused variable
}

// Writes a single byte of data to an MPU6050 register
void MPU6050_Write(uint8_t reg, uint8_t data) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	4603      	mov	r3, r0
 80013d0:	460a      	mov	r2, r1
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	4613      	mov	r3, r2
 80013d6:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg, data}; // Buffer containing register address and data
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	733b      	strb	r3, [r7, #12]
 80013dc:	79bb      	ldrb	r3, [r7, #6]
 80013de:	737b      	strb	r3, [r7, #13]
    if(HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buffer, 2, 100) != HAL_OK){
 80013e0:	f107 020c 	add.w	r2, r7, #12
 80013e4:	2364      	movs	r3, #100	@ 0x64
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2302      	movs	r3, #2
 80013ea:	21d0      	movs	r1, #208	@ 0xd0
 80013ec:	4806      	ldr	r0, [pc, #24]	@ (8001408 <MPU6050_Write+0x40>)
 80013ee:	f001 f935 	bl	800265c <HAL_I2C_Master_Transmit>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <MPU6050_Write+0x36>
    	printf("I2C error\n");
 80013f8:	4804      	ldr	r0, [pc, #16]	@ (800140c <MPU6050_Write+0x44>)
 80013fa:	f005 fd19 	bl	8006e30 <puts>
    }
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000008c 	.word	0x2000008c
 800140c:	08008220 	.word	0x08008220

08001410 <MPU6050_Read>:

// Reads multiple bytes from a specified MPU6050 register
void MPU6050_Read(uint8_t reg, uint8_t* data, uint8_t length) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af02      	add	r7, sp, #8
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
 800141c:	4613      	mov	r3, r2
 800141e:	71bb      	strb	r3, [r7, #6]
    // Transmits the register address to start reading from
	HAL_StatusTypeDef status;

	    // 1. 레지스터 주소 전송
	    status = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, &reg, 1, 100);
 8001420:	1dfa      	adds	r2, r7, #7
 8001422:	2364      	movs	r3, #100	@ 0x64
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2301      	movs	r3, #1
 8001428:	21d0      	movs	r1, #208	@ 0xd0
 800142a:	4827      	ldr	r0, [pc, #156]	@ (80014c8 <MPU6050_Read+0xb8>)
 800142c:	f001 f916 	bl	800265c <HAL_I2C_Master_Transmit>
 8001430:	4603      	mov	r3, r0
 8001432:	73fb      	strb	r3, [r7, #15]
	    if (status != HAL_OK) {
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d01a      	beq.n	8001470 <MPU6050_Read+0x60>
	        // 전송 에러 종류 확인
	        switch (status) {
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d00e      	beq.n	800145e <MPU6050_Read+0x4e>
 8001440:	2b03      	cmp	r3, #3
 8001442:	dc10      	bgt.n	8001466 <MPU6050_Read+0x56>
 8001444:	2b01      	cmp	r3, #1
 8001446:	d002      	beq.n	800144e <MPU6050_Read+0x3e>
 8001448:	2b02      	cmp	r3, #2
 800144a:	d004      	beq.n	8001456 <MPU6050_Read+0x46>
 800144c:	e00b      	b.n	8001466 <MPU6050_Read+0x56>
	            case HAL_ERROR:
	                printf("I2C Transmit Error: HAL_ERROR\r\n");
 800144e:	481f      	ldr	r0, [pc, #124]	@ (80014cc <MPU6050_Read+0xbc>)
 8001450:	f005 fcee 	bl	8006e30 <puts>
	                break;
 8001454:	e00b      	b.n	800146e <MPU6050_Read+0x5e>
	            case HAL_BUSY:
	                printf("I2C Transmit Error: HAL_BUSY\r\n");
 8001456:	481e      	ldr	r0, [pc, #120]	@ (80014d0 <MPU6050_Read+0xc0>)
 8001458:	f005 fcea 	bl	8006e30 <puts>
	                break;
 800145c:	e007      	b.n	800146e <MPU6050_Read+0x5e>
	            case HAL_TIMEOUT:
	                printf("I2C Transmit Error: HAL_TIMEOUT\r\n");
 800145e:	481d      	ldr	r0, [pc, #116]	@ (80014d4 <MPU6050_Read+0xc4>)
 8001460:	f005 fce6 	bl	8006e30 <puts>
	                break;
 8001464:	e003      	b.n	800146e <MPU6050_Read+0x5e>
	            default:
	                printf("I2C Transmit Error: Unknown\r\n");
 8001466:	481c      	ldr	r0, [pc, #112]	@ (80014d8 <MPU6050_Read+0xc8>)
 8001468:	f005 fce2 	bl	8006e30 <puts>
	                break;
 800146c:	bf00      	nop
	        }
	        return; // 에러 발생 시 함수 종료
 800146e:	e028      	b.n	80014c2 <MPU6050_Read+0xb2>
	    }

	    // 2. 데이터 수신
	    status = HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, data, length, 100);
 8001470:	79bb      	ldrb	r3, [r7, #6]
 8001472:	b29b      	uxth	r3, r3
 8001474:	2264      	movs	r2, #100	@ 0x64
 8001476:	9200      	str	r2, [sp, #0]
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	21d0      	movs	r1, #208	@ 0xd0
 800147c:	4812      	ldr	r0, [pc, #72]	@ (80014c8 <MPU6050_Read+0xb8>)
 800147e:	f001 fa05 	bl	800288c <HAL_I2C_Master_Receive>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]
	    if (status != HAL_OK) {
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d01a      	beq.n	80014c2 <MPU6050_Read+0xb2>
	        // 수신 에러 종류 확인
	        switch (status) {
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	2b03      	cmp	r3, #3
 8001490:	d00e      	beq.n	80014b0 <MPU6050_Read+0xa0>
 8001492:	2b03      	cmp	r3, #3
 8001494:	dc10      	bgt.n	80014b8 <MPU6050_Read+0xa8>
 8001496:	2b01      	cmp	r3, #1
 8001498:	d002      	beq.n	80014a0 <MPU6050_Read+0x90>
 800149a:	2b02      	cmp	r3, #2
 800149c:	d004      	beq.n	80014a8 <MPU6050_Read+0x98>
 800149e:	e00b      	b.n	80014b8 <MPU6050_Read+0xa8>
	            case HAL_ERROR:
	                printf("I2C Receive Error: HAL_ERROR\r\n");
 80014a0:	480e      	ldr	r0, [pc, #56]	@ (80014dc <MPU6050_Read+0xcc>)
 80014a2:	f005 fcc5 	bl	8006e30 <puts>
	                break;
 80014a6:	e00b      	b.n	80014c0 <MPU6050_Read+0xb0>
	            case HAL_BUSY:
	                printf("I2C Receive Error: HAL_BUSY\r\n");
 80014a8:	480d      	ldr	r0, [pc, #52]	@ (80014e0 <MPU6050_Read+0xd0>)
 80014aa:	f005 fcc1 	bl	8006e30 <puts>
	                break;
 80014ae:	e007      	b.n	80014c0 <MPU6050_Read+0xb0>
	            case HAL_TIMEOUT:
	                printf("I2C Receive Error: HAL_TIMEOUT\r\n");
 80014b0:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <MPU6050_Read+0xd4>)
 80014b2:	f005 fcbd 	bl	8006e30 <puts>
	                break;
 80014b6:	e003      	b.n	80014c0 <MPU6050_Read+0xb0>
	            default:
	                printf("I2C Receive Error: Unknown\r\n");
 80014b8:	480b      	ldr	r0, [pc, #44]	@ (80014e8 <MPU6050_Read+0xd8>)
 80014ba:	f005 fcb9 	bl	8006e30 <puts>
	                break;
 80014be:	bf00      	nop
	        }
	        return; // 에러 발생 시 함수 종료
 80014c0:	bf00      	nop
	    }
}
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	2000008c 	.word	0x2000008c
 80014cc:	0800822c 	.word	0x0800822c
 80014d0:	0800824c 	.word	0x0800824c
 80014d4:	0800826c 	.word	0x0800826c
 80014d8:	08008290 	.word	0x08008290
 80014dc:	080082b0 	.word	0x080082b0
 80014e0:	080082d0 	.word	0x080082d0
 80014e4:	080082f0 	.word	0x080082f0
 80014e8:	08008310 	.word	0x08008310

080014ec <MPU6050_Init>:

// Initializes the MPU6050 sensor with a few key settings
void MPU6050_Init(void) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
    // 1. Wake up the sensor (Power Management 1)
    MPU6050_Write(PWR_MGMT_1, 0x00);
 80014f0:	2100      	movs	r1, #0
 80014f2:	206b      	movs	r0, #107	@ 0x6b
 80014f4:	f7ff ff68 	bl	80013c8 <MPU6050_Write>
    HAL_Delay(100);
 80014f8:	2064      	movs	r0, #100	@ 0x64
 80014fa:	f000 fc75 	bl	8001de8 <HAL_Delay>

    // 2. Set accelerometer range to ±2g
    MPU6050_Write(ACCEL_CONFIG, 0x00);
 80014fe:	2100      	movs	r1, #0
 8001500:	201c      	movs	r0, #28
 8001502:	f7ff ff61 	bl	80013c8 <MPU6050_Write>
    HAL_Delay(10);
 8001506:	200a      	movs	r0, #10
 8001508:	f000 fc6e 	bl	8001de8 <HAL_Delay>
    // 2. Set gyroscope range to ±250°/s
    //MPU6050_Write(0x1B, 0x00);
    //HAL_Delay(10);

    // 3. Set sample rate to 125Hz (1kHz / (1+7))
    MPU6050_Write(SMPLRT_DIV, 0x07);
 800150c:	2107      	movs	r1, #7
 800150e:	2019      	movs	r0, #25
 8001510:	f7ff ff5a 	bl	80013c8 <MPU6050_Write>
    HAL_Delay(10);
 8001514:	200a      	movs	r0, #10
 8001516:	f000 fc67 	bl	8001de8 <HAL_Delay>

    // 4. Set Digital Low-Pass Filter (DLPF) to 44Hz
    MPU6050_Write(CONFIG, 0x03);
 800151a:	2103      	movs	r1, #3
 800151c:	201a      	movs	r0, #26
 800151e:	f7ff ff53 	bl	80013c8 <MPU6050_Write>
    HAL_Delay(10);
 8001522:	200a      	movs	r0, #10
 8001524:	f000 fc60 	bl	8001de8 <HAL_Delay>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <MPU6050_ReadAccel>:

// Reads and combines high and low bytes of accelerometer data
void MPU6050_ReadAccel(int16_t* ax, int16_t* ay, int16_t* az) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];  // Buffer for 6 bytes of accelerometer data (X, Y, Z)

    MPU6050_Read(ACCEL_XOUT_H, buffer, 6);
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	2206      	movs	r2, #6
 800153e:	4619      	mov	r1, r3
 8001540:	203b      	movs	r0, #59	@ 0x3b
 8001542:	f7ff ff65 	bl	8001410 <MPU6050_Read>

    *ax = (int16_t)(buffer[0] << 8 | buffer[1]);  // Combine X high and low bytes
 8001546:	7c3b      	ldrb	r3, [r7, #16]
 8001548:	b21b      	sxth	r3, r3
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	b21a      	sxth	r2, r3
 800154e:	7c7b      	ldrb	r3, [r7, #17]
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b21a      	sxth	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	801a      	strh	r2, [r3, #0]
    *ay = (int16_t)(buffer[2] << 8 | buffer[3]);  // Combine Y high and low bytes
 800155a:	7cbb      	ldrb	r3, [r7, #18]
 800155c:	b21b      	sxth	r3, r3
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	b21a      	sxth	r2, r3
 8001562:	7cfb      	ldrb	r3, [r7, #19]
 8001564:	b21b      	sxth	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b21a      	sxth	r2, r3
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	801a      	strh	r2, [r3, #0]
    *az = (int16_t)(buffer[4] << 8 | buffer[5]);  // Combine Z high and low bytes
 800156e:	7d3b      	ldrb	r3, [r7, #20]
 8001570:	b21b      	sxth	r3, r3
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	b21a      	sxth	r2, r3
 8001576:	7d7b      	ldrb	r3, [r7, #21]
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b21a      	sxth	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	801a      	strh	r2, [r3, #0]
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <MPU6050_ReadGyro>:

// Reads and combines high and low bytes of gyroscope data
void MPU6050_ReadGyro(int16_t* gx, int16_t* gy, int16_t* gz) {
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];  // Buffer for 6 bytes of gyroscope data (X, Y, Z)

    MPU6050_Read(GYRO_XOUT_H, buffer, 6);
 8001596:	f107 0310 	add.w	r3, r7, #16
 800159a:	2206      	movs	r2, #6
 800159c:	4619      	mov	r1, r3
 800159e:	2043      	movs	r0, #67	@ 0x43
 80015a0:	f7ff ff36 	bl	8001410 <MPU6050_Read>

    *gx = (int16_t)(buffer[0] << 8 | buffer[1]);  // Combine X high and low bytes
 80015a4:	7c3b      	ldrb	r3, [r7, #16]
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	7c7b      	ldrb	r3, [r7, #17]
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	801a      	strh	r2, [r3, #0]
    *gy = (int16_t)(buffer[2] << 8 | buffer[3]);  // Combine Y high and low bytes
 80015b8:	7cbb      	ldrb	r3, [r7, #18]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b21a      	sxth	r2, r3
 80015c0:	7cfb      	ldrb	r3, [r7, #19]
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	801a      	strh	r2, [r3, #0]
    *gz = (int16_t)(buffer[4] << 8 | buffer[5]);  // Combine Z high and low bytes
 80015cc:	7d3b      	ldrb	r3, [r7, #20]
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	7d7b      	ldrb	r3, [r7, #21]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b21a      	sxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	801a      	strh	r2, [r3, #0]
}
 80015e0:	bf00      	nop
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <Compute_Orientation>:
    // Transmits the data buffer over UART
    HAL_UART_Transmit(&huart2, tx_buffer, 18, 100);
}

// Computes orientation angles using a complementary filter
void Compute_Orientation() {
 80015e8:	b5b0      	push	{r4, r5, r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
    // Calculate pitch and roll from accelerometer data
    float acc_pitch = atan2(-ax, sqrt(ay * ay + az * az)) * 57.2958; // Convert radians to degrees
 80015ee:	4b92      	ldr	r3, [pc, #584]	@ (8001838 <Compute_Orientation+0x250>)
 80015f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f4:	425b      	negs	r3, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff8c 	bl	8000514 <__aeabi_i2d>
 80015fc:	4604      	mov	r4, r0
 80015fe:	460d      	mov	r5, r1
 8001600:	4b8e      	ldr	r3, [pc, #568]	@ (800183c <Compute_Orientation+0x254>)
 8001602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001606:	461a      	mov	r2, r3
 8001608:	4b8c      	ldr	r3, [pc, #560]	@ (800183c <Compute_Orientation+0x254>)
 800160a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160e:	fb03 f202 	mul.w	r2, r3, r2
 8001612:	4b8b      	ldr	r3, [pc, #556]	@ (8001840 <Compute_Orientation+0x258>)
 8001614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001618:	4619      	mov	r1, r3
 800161a:	4b89      	ldr	r3, [pc, #548]	@ (8001840 <Compute_Orientation+0x258>)
 800161c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001620:	fb01 f303 	mul.w	r3, r1, r3
 8001624:	4413      	add	r3, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff74 	bl	8000514 <__aeabi_i2d>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	ec43 2b10 	vmov	d0, r2, r3
 8001634:	f006 fa60 	bl	8007af8 <sqrt>
 8001638:	eeb0 7a40 	vmov.f32	s14, s0
 800163c:	eef0 7a60 	vmov.f32	s15, s1
 8001640:	eeb0 1a47 	vmov.f32	s2, s14
 8001644:	eef0 1a67 	vmov.f32	s3, s15
 8001648:	ec45 4b10 	vmov	d0, r4, r5
 800164c:	f006 fa52 	bl	8007af4 <atan2>
 8001650:	ec51 0b10 	vmov	r0, r1, d0
 8001654:	a374      	add	r3, pc, #464	@ (adr r3, 8001828 <Compute_Orientation+0x240>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7fe ffc5 	bl	80005e8 <__aeabi_dmul>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff fa6f 	bl	8000b48 <__aeabi_d2f>
 800166a:	4603      	mov	r3, r0
 800166c:	617b      	str	r3, [r7, #20]
    float acc_roll  = atan2(ay, az) * 57.2958;
 800166e:	4b73      	ldr	r3, [pc, #460]	@ (800183c <Compute_Orientation+0x254>)
 8001670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff4d 	bl	8000514 <__aeabi_i2d>
 800167a:	4604      	mov	r4, r0
 800167c:	460d      	mov	r5, r1
 800167e:	4b70      	ldr	r3, [pc, #448]	@ (8001840 <Compute_Orientation+0x258>)
 8001680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff45 	bl	8000514 <__aeabi_i2d>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	ec43 2b11 	vmov	d1, r2, r3
 8001692:	ec45 4b10 	vmov	d0, r4, r5
 8001696:	f006 fa2d 	bl	8007af4 <atan2>
 800169a:	ec51 0b10 	vmov	r0, r1, d0
 800169e:	a362      	add	r3, pc, #392	@ (adr r3, 8001828 <Compute_Orientation+0x240>)
 80016a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a4:	f7fe ffa0 	bl	80005e8 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff fa4a 	bl	8000b48 <__aeabi_d2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	613b      	str	r3, [r7, #16]

    // Convert gyroscope raw data to degrees per second
    float gx_dps = gx / 131.0;
 80016b8:	4b62      	ldr	r3, [pc, #392]	@ (8001844 <Compute_Orientation+0x25c>)
 80016ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff28 	bl	8000514 <__aeabi_i2d>
 80016c4:	a35a      	add	r3, pc, #360	@ (adr r3, 8001830 <Compute_Orientation+0x248>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7ff f8b7 	bl	800083c <__aeabi_ddiv>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff fa37 	bl	8000b48 <__aeabi_d2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	60fb      	str	r3, [r7, #12]
    float gy_dps = gy / 131.0;
 80016de:	4b5a      	ldr	r3, [pc, #360]	@ (8001848 <Compute_Orientation+0x260>)
 80016e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff15 	bl	8000514 <__aeabi_i2d>
 80016ea:	a351      	add	r3, pc, #324	@ (adr r3, 8001830 <Compute_Orientation+0x248>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	f7ff f8a4 	bl	800083c <__aeabi_ddiv>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f7ff fa24 	bl	8000b48 <__aeabi_d2f>
 8001700:	4603      	mov	r3, r0
 8001702:	60bb      	str	r3, [r7, #8]
    float gz_dps = gz / 131.0;
 8001704:	4b51      	ldr	r3, [pc, #324]	@ (800184c <Compute_Orientation+0x264>)
 8001706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff02 	bl	8000514 <__aeabi_i2d>
 8001710:	a347      	add	r3, pc, #284	@ (adr r3, 8001830 <Compute_Orientation+0x248>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	f7ff f891 	bl	800083c <__aeabi_ddiv>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff fa11 	bl	8000b48 <__aeabi_d2f>
 8001726:	4603      	mov	r3, r0
 8001728:	607b      	str	r3, [r7, #4]

    // Apply the complementary filter to combine accelerometer and gyroscope data
    pitch_f = alpha * (pitch_f + gy_dps * dt) + (1 - alpha) * acc_pitch;
 800172a:	4b49      	ldr	r3, [pc, #292]	@ (8001850 <Compute_Orientation+0x268>)
 800172c:	ed93 7a00 	vldr	s14, [r3]
 8001730:	edd7 7a02 	vldr	s15, [r7, #8]
 8001734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001738:	4b46      	ldr	r3, [pc, #280]	@ (8001854 <Compute_Orientation+0x26c>)
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001742:	4b45      	ldr	r3, [pc, #276]	@ (8001858 <Compute_Orientation+0x270>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	ee27 7a27 	vmul.f32	s14, s14, s15
 800174c:	4b42      	ldr	r3, [pc, #264]	@ (8001858 <Compute_Orientation+0x270>)
 800174e:	edd3 7a00 	vldr	s15, [r3]
 8001752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001756:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800175a:	edd7 7a05 	vldr	s15, [r7, #20]
 800175e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001766:	4b3b      	ldr	r3, [pc, #236]	@ (8001854 <Compute_Orientation+0x26c>)
 8001768:	edc3 7a00 	vstr	s15, [r3]
    roll_f = alpha * (roll_f + gx_dps * dt) + (1 - alpha) * acc_roll;
 800176c:	4b38      	ldr	r3, [pc, #224]	@ (8001850 <Compute_Orientation+0x268>)
 800176e:	ed93 7a00 	vldr	s14, [r3]
 8001772:	edd7 7a03 	vldr	s15, [r7, #12]
 8001776:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177a:	4b38      	ldr	r3, [pc, #224]	@ (800185c <Compute_Orientation+0x274>)
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001784:	4b34      	ldr	r3, [pc, #208]	@ (8001858 <Compute_Orientation+0x270>)
 8001786:	edd3 7a00 	vldr	s15, [r3]
 800178a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800178e:	4b32      	ldr	r3, [pc, #200]	@ (8001858 <Compute_Orientation+0x270>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001798:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800179c:	edd7 7a04 	vldr	s15, [r7, #16]
 80017a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a8:	4b2c      	ldr	r3, [pc, #176]	@ (800185c <Compute_Orientation+0x274>)
 80017aa:	edc3 7a00 	vstr	s15, [r3]
    yaw_f += gz_dps * dt; // Yaw is only integrated from gyroscope
 80017ae:	4b28      	ldr	r3, [pc, #160]	@ (8001850 <Compute_Orientation+0x268>)
 80017b0:	ed93 7a00 	vldr	s14, [r3]
 80017b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017bc:	4b28      	ldr	r3, [pc, #160]	@ (8001860 <Compute_Orientation+0x278>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c6:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <Compute_Orientation+0x278>)
 80017c8:	edc3 7a00 	vstr	s15, [r3]

    // Convert float angles to integer angles for storage
    pitch = (int16_t)(pitch_f * 100);
 80017cc:	4b21      	ldr	r3, [pc, #132]	@ (8001854 <Compute_Orientation+0x26c>)
 80017ce:	edd3 7a00 	vldr	s15, [r3]
 80017d2:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001864 <Compute_Orientation+0x27c>
 80017d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017de:	ee17 3a90 	vmov	r3, s15
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	4b20      	ldr	r3, [pc, #128]	@ (8001868 <Compute_Orientation+0x280>)
 80017e6:	801a      	strh	r2, [r3, #0]
    roll = (int16_t)(roll_f * 100);
 80017e8:	4b1c      	ldr	r3, [pc, #112]	@ (800185c <Compute_Orientation+0x274>)
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001864 <Compute_Orientation+0x27c>
 80017f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017fa:	ee17 3a90 	vmov	r3, s15
 80017fe:	b21a      	sxth	r2, r3
 8001800:	4b1a      	ldr	r3, [pc, #104]	@ (800186c <Compute_Orientation+0x284>)
 8001802:	801a      	strh	r2, [r3, #0]
    yaw = (int16_t)(yaw_f * 100);
 8001804:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <Compute_Orientation+0x278>)
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001864 <Compute_Orientation+0x27c>
 800180e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001816:	ee17 3a90 	vmov	r3, s15
 800181a:	b21a      	sxth	r2, r3
 800181c:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <Compute_Orientation+0x288>)
 800181e:	801a      	strh	r2, [r3, #0]
}
 8001820:	bf00      	nop
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bdb0      	pop	{r4, r5, r7, pc}
 8001828:	c63f1412 	.word	0xc63f1412
 800182c:	404ca5dc 	.word	0x404ca5dc
 8001830:	00000000 	.word	0x00000000
 8001834:	40606000 	.word	0x40606000
 8001838:	20000202 	.word	0x20000202
 800183c:	20000204 	.word	0x20000204
 8001840:	20000206 	.word	0x20000206
 8001844:	20000208 	.word	0x20000208
 8001848:	2000020a 	.word	0x2000020a
 800184c:	2000020c 	.word	0x2000020c
 8001850:	20000004 	.word	0x20000004
 8001854:	20000214 	.word	0x20000214
 8001858:	20000000 	.word	0x20000000
 800185c:	20000218 	.word	0x20000218
 8001860:	2000021c 	.word	0x2000021c
 8001864:	42c80000 	.word	0x42c80000
 8001868:	2000020e 	.word	0x2000020e
 800186c:	20000210 	.word	0x20000210
 8001870:	20000212 	.word	0x20000212

08001874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001878:	b672      	cpsid	i
}
 800187a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <Error_Handler+0x8>

08001880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	4b0f      	ldr	r3, [pc, #60]	@ (80018c4 <HAL_MspInit+0x44>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188a:	4a0e      	ldr	r2, [pc, #56]	@ (80018c4 <HAL_MspInit+0x44>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6613      	str	r3, [r2, #96]	@ 0x60
 8001892:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <HAL_MspInit+0x44>)
 8001894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <HAL_MspInit+0x44>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a2:	4a08      	ldr	r2, [pc, #32]	@ (80018c4 <HAL_MspInit+0x44>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_MspInit+0x44>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000

080018c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b0ac      	sub	sp, #176	@ 0xb0
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2288      	movs	r2, #136	@ 0x88
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f005 fb81 	bl	8006ff0 <memset>
  if(hi2c->Instance==I2C1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a21      	ldr	r2, [pc, #132]	@ (8001978 <HAL_I2C_MspInit+0xb0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d13b      	bne.n	8001970 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018f8:	2340      	movs	r3, #64	@ 0x40
 80018fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4618      	mov	r0, r3
 8001906:	f003 f84d 	bl	80049a4 <HAL_RCCEx_PeriphCLKConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001910:	f7ff ffb0 	bl	8001874 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	4b19      	ldr	r3, [pc, #100]	@ (800197c <HAL_I2C_MspInit+0xb4>)
 8001916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001918:	4a18      	ldr	r2, [pc, #96]	@ (800197c <HAL_I2C_MspInit+0xb4>)
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001920:	4b16      	ldr	r3, [pc, #88]	@ (800197c <HAL_I2C_MspInit+0xb4>)
 8001922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800192c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001930:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001934:	2312      	movs	r3, #18
 8001936:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001946:	2304      	movs	r3, #4
 8001948:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001950:	4619      	mov	r1, r3
 8001952:	480b      	ldr	r0, [pc, #44]	@ (8001980 <HAL_I2C_MspInit+0xb8>)
 8001954:	f000 fc0a 	bl	800216c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	@ (800197c <HAL_I2C_MspInit+0xb4>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195c:	4a07      	ldr	r2, [pc, #28]	@ (800197c <HAL_I2C_MspInit+0xb4>)
 800195e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001962:	6593      	str	r3, [r2, #88]	@ 0x58
 8001964:	4b05      	ldr	r3, [pc, #20]	@ (800197c <HAL_I2C_MspInit+0xb4>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001968:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001970:	bf00      	nop
 8001972:	37b0      	adds	r7, #176	@ 0xb0
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40005400 	.word	0x40005400
 800197c:	40021000 	.word	0x40021000
 8001980:	48000400 	.word	0x48000400

08001984 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a13      	ldr	r2, [pc, #76]	@ (80019e0 <HAL_TIM_Base_MspInit+0x5c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d10c      	bne.n	80019b0 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001996:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <HAL_TIM_Base_MspInit+0x60>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199a:	4a12      	ldr	r2, [pc, #72]	@ (80019e4 <HAL_TIM_Base_MspInit+0x60>)
 800199c:	f043 0310 	orr.w	r3, r3, #16
 80019a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a2:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <HAL_TIM_Base_MspInit+0x60>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 80019ae:	e010      	b.n	80019d2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0c      	ldr	r2, [pc, #48]	@ (80019e8 <HAL_TIM_Base_MspInit+0x64>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d10b      	bne.n	80019d2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80019ba:	4b0a      	ldr	r3, [pc, #40]	@ (80019e4 <HAL_TIM_Base_MspInit+0x60>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019be:	4a09      	ldr	r2, [pc, #36]	@ (80019e4 <HAL_TIM_Base_MspInit+0x60>)
 80019c0:	f043 0320 	orr.w	r3, r3, #32
 80019c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019c6:	4b07      	ldr	r3, [pc, #28]	@ (80019e4 <HAL_TIM_Base_MspInit+0x60>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	f003 0320 	and.w	r3, r3, #32
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
}
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40001000 	.word	0x40001000
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40001400 	.word	0x40001400

080019ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b0ac      	sub	sp, #176	@ 0xb0
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2288      	movs	r2, #136	@ 0x88
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f005 faef 	bl	8006ff0 <memset>
  if(huart->Instance==USART2)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a21      	ldr	r2, [pc, #132]	@ (8001a9c <HAL_UART_MspInit+0xb0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d13b      	bne.n	8001a94 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 ffbb 	bl	80049a4 <HAL_RCCEx_PeriphCLKConfig>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a34:	f7ff ff1e 	bl	8001874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a38:	4b19      	ldr	r3, [pc, #100]	@ (8001aa0 <HAL_UART_MspInit+0xb4>)
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3c:	4a18      	ldr	r2, [pc, #96]	@ (8001aa0 <HAL_UART_MspInit+0xb4>)
 8001a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a44:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <HAL_UART_MspInit+0xb4>)
 8001a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <HAL_UART_MspInit+0xb4>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a54:	4a12      	ldr	r2, [pc, #72]	@ (8001aa0 <HAL_UART_MspInit+0xb4>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a5c:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <HAL_UART_MspInit+0xb4>)
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a68:	230c      	movs	r3, #12
 8001a6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a80:	2307      	movs	r3, #7
 8001a82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a90:	f000 fb6c 	bl	800216c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a94:	bf00      	nop
 8001a96:	37b0      	adds	r7, #176	@ 0xb0
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40004400 	.word	0x40004400
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <NMI_Handler+0x4>

08001aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <MemManage_Handler+0x4>

08001abc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afa:	f000 f955 	bl	8001da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b08:	4802      	ldr	r0, [pc, #8]	@ (8001b14 <I2C1_EV_IRQHandler+0x10>)
 8001b0a:	f000 ffb5 	bl	8002a78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000008c 	.word	0x2000008c

08001b18 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b1c:	4802      	ldr	r0, [pc, #8]	@ (8001b28 <I2C1_ER_IRQHandler+0x10>)
 8001b1e:	f000 ffc5 	bl	8002aac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000008c 	.word	0x2000008c

08001b2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <USART2_IRQHandler+0x10>)
 8001b32:	f004 f80f 	bl	8005b54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000178 	.word	0x20000178

08001b40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b44:	4802      	ldr	r0, [pc, #8]	@ (8001b50 <TIM6_DAC_IRQHandler+0x10>)
 8001b46:	f003 fcb1 	bl	80054ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200000e0 	.word	0x200000e0

08001b54 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b58:	4802      	ldr	r0, [pc, #8]	@ (8001b64 <TIM7_IRQHandler+0x10>)
 8001b5a:	f003 fca7 	bl	80054ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000012c 	.word	0x2000012c

08001b68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e00a      	b.n	8001b90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b7a:	f3af 8000 	nop.w
 8001b7e:	4601      	mov	r1, r0
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	60ba      	str	r2, [r7, #8]
 8001b86:	b2ca      	uxtb	r2, r1
 8001b88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbf0      	blt.n	8001b7a <_read+0x12>
  }

  return len;
 8001b98:	687b      	ldr	r3, [r7, #4]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bca:	605a      	str	r2, [r3, #4]
  return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_isatty>:

int _isatty(int file)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c14:	4a14      	ldr	r2, [pc, #80]	@ (8001c68 <_sbrk+0x5c>)
 8001c16:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <_sbrk+0x60>)
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c20:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c28:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <_sbrk+0x64>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	@ (8001c74 <_sbrk+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c3c:	f005 fa26 	bl	800708c <__errno>
 8001c40:	4603      	mov	r3, r0
 8001c42:	220c      	movs	r2, #12
 8001c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	e009      	b.n	8001c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c52:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a05      	ldr	r2, [pc, #20]	@ (8001c70 <_sbrk+0x64>)
 8001c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20018000 	.word	0x20018000
 8001c6c:	00000400 	.word	0x00000400
 8001c70:	20000220 	.word	0x20000220
 8001c74:	20000378 	.word	0x20000378

08001c78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <SystemInit+0x20>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c82:	4a05      	ldr	r2, [pc, #20]	@ (8001c98 <SystemInit+0x20>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca0:	f7ff ffea 	bl	8001c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca4:	480c      	ldr	r0, [pc, #48]	@ (8001cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ca6:	490d      	ldr	r1, [pc, #52]	@ (8001cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce0 <LoopForever+0xe>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cac:	e002      	b.n	8001cb4 <LoopCopyDataInit>

08001cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb2:	3304      	adds	r3, #4

08001cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb8:	d3f9      	bcc.n	8001cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ce8 <LoopForever+0x16>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc0:	e001      	b.n	8001cc6 <LoopFillZerobss>

08001cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc4:	3204      	adds	r2, #4

08001cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc8:	d3fb      	bcc.n	8001cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cca:	f005 f9e5 	bl	8007098 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cce:	f7ff f937 	bl	8000f40 <main>

08001cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cd2:	e7fe      	b.n	8001cd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cdc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ce0:	08008438 	.word	0x08008438
  ldr r2, =_sbss
 8001ce4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ce8:	20000374 	.word	0x20000374

08001cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC1_2_IRQHandler>
	...

08001cf0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <HAL_Init+0x3c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	@ (8001d2c <HAL_Init+0x3c>)
 8001d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d04:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d06:	2003      	movs	r0, #3
 8001d08:	f000 f962 	bl	8001fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f000 f80f 	bl	8001d30 <HAL_InitTick>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	71fb      	strb	r3, [r7, #7]
 8001d1c:	e001      	b.n	8001d22 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d1e:	f7ff fdaf 	bl	8001880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d22:	79fb      	ldrb	r3, [r7, #7]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40022000 	.word	0x40022000

08001d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d3c:	4b17      	ldr	r3, [pc, #92]	@ (8001d9c <HAL_InitTick+0x6c>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d023      	beq.n	8001d8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d44:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <HAL_InitTick+0x70>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b14      	ldr	r3, [pc, #80]	@ (8001d9c <HAL_InitTick+0x6c>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f96d 	bl	800203a <HAL_SYSTICK_Config>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10f      	bne.n	8001d86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b0f      	cmp	r3, #15
 8001d6a:	d809      	bhi.n	8001d80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	f000 f937 	bl	8001fe6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d78:	4a0a      	ldr	r2, [pc, #40]	@ (8001da4 <HAL_InitTick+0x74>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e007      	b.n	8001d90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	e004      	b.n	8001d90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	73fb      	strb	r3, [r7, #15]
 8001d8a:	e001      	b.n	8001d90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000010 	.word	0x20000010
 8001da0:	20000008 	.word	0x20000008
 8001da4:	2000000c 	.word	0x2000000c

08001da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dac:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <HAL_IncTick+0x20>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <HAL_IncTick+0x24>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <HAL_IncTick+0x24>)
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000010 	.word	0x20000010
 8001dcc:	20000224 	.word	0x20000224

08001dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	@ (8001de4 <HAL_GetTick+0x14>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000224 	.word	0x20000224

08001de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7ff ffee 	bl	8001dd0 <HAL_GetTick>
 8001df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e00:	d005      	beq.n	8001e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e02:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <HAL_Delay+0x44>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e0e:	bf00      	nop
 8001e10:	f7ff ffde 	bl	8001dd0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d8f7      	bhi.n	8001e10 <HAL_Delay+0x28>
  {
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000010 	.word	0x20000010

08001e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e40:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e62:	4a04      	ldr	r2, [pc, #16]	@ (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	60d3      	str	r3, [r2, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e7c:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <__NVIC_GetPriorityGrouping+0x18>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	f003 0307 	and.w	r3, r3, #7
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db0b      	blt.n	8001ebe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	4907      	ldr	r1, [pc, #28]	@ (8001ecc <__NVIC_EnableIRQ+0x38>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000e100 	.word	0xe000e100

08001ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	db0a      	blt.n	8001efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	490c      	ldr	r1, [pc, #48]	@ (8001f1c <__NVIC_SetPriority+0x4c>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	0112      	lsls	r2, r2, #4
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef8:	e00a      	b.n	8001f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4908      	ldr	r1, [pc, #32]	@ (8001f20 <__NVIC_SetPriority+0x50>)
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	3b04      	subs	r3, #4
 8001f08:	0112      	lsls	r2, r2, #4
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	761a      	strb	r2, [r3, #24]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000e100 	.word	0xe000e100
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	@ 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f1c3 0307 	rsb	r3, r3, #7
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	bf28      	it	cs
 8001f42:	2304      	movcs	r3, #4
 8001f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d902      	bls.n	8001f54 <NVIC_EncodePriority+0x30>
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3b03      	subs	r3, #3
 8001f52:	e000      	b.n	8001f56 <NVIC_EncodePriority+0x32>
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	401a      	ands	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43d9      	mvns	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	4313      	orrs	r3, r2
         );
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	@ 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f9c:	d301      	bcc.n	8001fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00f      	b.n	8001fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <SysTick_Config+0x40>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001faa:	210f      	movs	r1, #15
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f7ff ff8e 	bl	8001ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <SysTick_Config+0x40>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fba:	4b04      	ldr	r3, [pc, #16]	@ (8001fcc <SysTick_Config+0x40>)
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	e000e010 	.word	0xe000e010

08001fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff29 	bl	8001e30 <__NVIC_SetPriorityGrouping>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff8:	f7ff ff3e 	bl	8001e78 <__NVIC_GetPriorityGrouping>
 8001ffc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	6978      	ldr	r0, [r7, #20]
 8002004:	f7ff ff8e 	bl	8001f24 <NVIC_EncodePriority>
 8002008:	4602      	mov	r2, r0
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff5d 	bl	8001ed0 <__NVIC_SetPriority>
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	4603      	mov	r3, r0
 8002026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff31 	bl	8001e94 <__NVIC_EnableIRQ>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ffa2 	bl	8001f8c <SysTick_Config>
 8002048:	4603      	mov	r3, r0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d008      	beq.n	800207c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2204      	movs	r2, #4
 800206e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e022      	b.n	80020c2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 020e 	bic.w	r2, r2, #14
 800208a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a0:	f003 021c 	and.w	r2, r3, #28
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	2101      	movs	r1, #1
 80020aa:	fa01 f202 	lsl.w	r2, r1, r2
 80020ae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d005      	beq.n	80020f2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2204      	movs	r2, #4
 80020ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	e029      	b.n	8002146 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 020e 	bic.w	r2, r2, #14
 8002100:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0201 	bic.w	r2, r2, #1
 8002110:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	f003 021c 	and.w	r2, r3, #28
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	2101      	movs	r1, #1
 8002120:	fa01 f202 	lsl.w	r2, r1, r2
 8002124:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	4798      	blx	r3
    }
  }
  return status;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800215e:	b2db      	uxtb	r3, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217a:	e17f      	b.n	800247c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2101      	movs	r1, #1
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	4013      	ands	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8171 	beq.w	8002476 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d005      	beq.n	80021ac <HAL_GPIO_Init+0x40>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d130      	bne.n	800220e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021e2:	2201      	movs	r2, #1
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4013      	ands	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	f003 0201 	and.w	r2, r3, #1
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b03      	cmp	r3, #3
 8002218:	d118      	bne.n	800224c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002220:	2201      	movs	r2, #1
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	08db      	lsrs	r3, r3, #3
 8002236:	f003 0201 	and.w	r2, r3, #1
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b03      	cmp	r3, #3
 8002256:	d017      	beq.n	8002288 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d123      	bne.n	80022dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	08da      	lsrs	r2, r3, #3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3208      	adds	r2, #8
 800229c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	220f      	movs	r2, #15
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	08da      	lsrs	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3208      	adds	r2, #8
 80022d6:	6939      	ldr	r1, [r7, #16]
 80022d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0203 	and.w	r2, r3, #3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80ac 	beq.w	8002476 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231e:	4b5f      	ldr	r3, [pc, #380]	@ (800249c <HAL_GPIO_Init+0x330>)
 8002320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002322:	4a5e      	ldr	r2, [pc, #376]	@ (800249c <HAL_GPIO_Init+0x330>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6613      	str	r3, [r2, #96]	@ 0x60
 800232a:	4b5c      	ldr	r3, [pc, #368]	@ (800249c <HAL_GPIO_Init+0x330>)
 800232c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002336:	4a5a      	ldr	r2, [pc, #360]	@ (80024a0 <HAL_GPIO_Init+0x334>)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002360:	d025      	beq.n	80023ae <HAL_GPIO_Init+0x242>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4f      	ldr	r2, [pc, #316]	@ (80024a4 <HAL_GPIO_Init+0x338>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01f      	beq.n	80023aa <HAL_GPIO_Init+0x23e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4e      	ldr	r2, [pc, #312]	@ (80024a8 <HAL_GPIO_Init+0x33c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d019      	beq.n	80023a6 <HAL_GPIO_Init+0x23a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4d      	ldr	r2, [pc, #308]	@ (80024ac <HAL_GPIO_Init+0x340>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_GPIO_Init+0x236>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4c      	ldr	r2, [pc, #304]	@ (80024b0 <HAL_GPIO_Init+0x344>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00d      	beq.n	800239e <HAL_GPIO_Init+0x232>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4b      	ldr	r2, [pc, #300]	@ (80024b4 <HAL_GPIO_Init+0x348>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d007      	beq.n	800239a <HAL_GPIO_Init+0x22e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4a      	ldr	r2, [pc, #296]	@ (80024b8 <HAL_GPIO_Init+0x34c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_GPIO_Init+0x22a>
 8002392:	2306      	movs	r3, #6
 8002394:	e00c      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 8002396:	2307      	movs	r3, #7
 8002398:	e00a      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 800239a:	2305      	movs	r3, #5
 800239c:	e008      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 800239e:	2304      	movs	r3, #4
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 80023a2:	2303      	movs	r3, #3
 80023a4:	e004      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e002      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 80023ae:	2300      	movs	r3, #0
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	f002 0203 	and.w	r2, r2, #3
 80023b6:	0092      	lsls	r2, r2, #2
 80023b8:	4093      	lsls	r3, r2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023c0:	4937      	ldr	r1, [pc, #220]	@ (80024a0 <HAL_GPIO_Init+0x334>)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	3302      	adds	r3, #2
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023ce:	4b3b      	ldr	r3, [pc, #236]	@ (80024bc <HAL_GPIO_Init+0x350>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023f2:	4a32      	ldr	r2, [pc, #200]	@ (80024bc <HAL_GPIO_Init+0x350>)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023f8:	4b30      	ldr	r3, [pc, #192]	@ (80024bc <HAL_GPIO_Init+0x350>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	43db      	mvns	r3, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800241c:	4a27      	ldr	r2, [pc, #156]	@ (80024bc <HAL_GPIO_Init+0x350>)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002422:	4b26      	ldr	r3, [pc, #152]	@ (80024bc <HAL_GPIO_Init+0x350>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	43db      	mvns	r3, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002446:	4a1d      	ldr	r2, [pc, #116]	@ (80024bc <HAL_GPIO_Init+0x350>)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800244c:	4b1b      	ldr	r3, [pc, #108]	@ (80024bc <HAL_GPIO_Init+0x350>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002470:	4a12      	ldr	r2, [pc, #72]	@ (80024bc <HAL_GPIO_Init+0x350>)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	3301      	adds	r3, #1
 800247a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	f47f ae78 	bne.w	800217c <HAL_GPIO_Init+0x10>
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	371c      	adds	r7, #28
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000
 80024a0:	40010000 	.word	0x40010000
 80024a4:	48000400 	.word	0x48000400
 80024a8:	48000800 	.word	0x48000800
 80024ac:	48000c00 	.word	0x48000c00
 80024b0:	48001000 	.word	0x48001000
 80024b4:	48001400 	.word	0x48001400
 80024b8:	48001800 	.word	0x48001800
 80024bc:	40010400 	.word	0x40010400

080024c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
 80024cc:	4613      	mov	r3, r2
 80024ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d0:	787b      	ldrb	r3, [r7, #1]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024dc:	e002      	b.n	80024e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4013      	ands	r3, r2
 8002508:	041a      	lsls	r2, r3, #16
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	43d9      	mvns	r1, r3
 800250e:	887b      	ldrh	r3, [r7, #2]
 8002510:	400b      	ands	r3, r1
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	619a      	str	r2, [r3, #24]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e08d      	b.n	8002652 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d106      	bne.n	8002550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff f9bc 	bl	80018c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2224      	movs	r2, #36	@ 0x24
 8002554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002574:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002584:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d107      	bne.n	800259e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	e006      	b.n	80025ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80025aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d108      	bne.n	80025c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	e007      	b.n	80025d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69d9      	ldr	r1, [r3, #28]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1a      	ldr	r2, [r3, #32]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	461a      	mov	r2, r3
 8002668:	460b      	mov	r3, r1
 800266a:	817b      	strh	r3, [r7, #10]
 800266c:	4613      	mov	r3, r2
 800266e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b20      	cmp	r3, #32
 800267a:	f040 80fd 	bne.w	8002878 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_I2C_Master_Transmit+0x30>
 8002688:	2302      	movs	r3, #2
 800268a:	e0f6      	b.n	800287a <HAL_I2C_Master_Transmit+0x21e>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002694:	f7ff fb9c 	bl	8001dd0 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2319      	movs	r3, #25
 80026a0:	2201      	movs	r2, #1
 80026a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 ffa1 	bl	80035ee <I2C_WaitOnFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0e1      	b.n	800287a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2221      	movs	r2, #33	@ 0x21
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2210      	movs	r2, #16
 80026c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	893a      	ldrh	r2, [r7, #8]
 80026d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2bff      	cmp	r3, #255	@ 0xff
 80026e6:	d906      	bls.n	80026f6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	22ff      	movs	r2, #255	@ 0xff
 80026ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80026ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	e007      	b.n	8002706 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002700:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002704:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270a:	2b00      	cmp	r3, #0
 800270c:	d024      	beq.n	8002758 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002712:	781a      	ldrb	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002728:	b29b      	uxth	r3, r3
 800272a:	3b01      	subs	r3, #1
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002742:	b2db      	uxtb	r3, r3
 8002744:	3301      	adds	r3, #1
 8002746:	b2da      	uxtb	r2, r3
 8002748:	8979      	ldrh	r1, [r7, #10]
 800274a:	4b4e      	ldr	r3, [pc, #312]	@ (8002884 <HAL_I2C_Master_Transmit+0x228>)
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f001 f99b 	bl	8003a8c <I2C_TransferConfig>
 8002756:	e066      	b.n	8002826 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275c:	b2da      	uxtb	r2, r3
 800275e:	8979      	ldrh	r1, [r7, #10]
 8002760:	4b48      	ldr	r3, [pc, #288]	@ (8002884 <HAL_I2C_Master_Transmit+0x228>)
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f001 f990 	bl	8003a8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800276c:	e05b      	b.n	8002826 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	6a39      	ldr	r1, [r7, #32]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 ff94 	bl	80036a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e07b      	b.n	800287a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002786:	781a      	ldrb	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d034      	beq.n	8002826 <HAL_I2C_Master_Transmit+0x1ca>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d130      	bne.n	8002826 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	2200      	movs	r2, #0
 80027cc:	2180      	movs	r1, #128	@ 0x80
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 ff0d 	bl	80035ee <I2C_WaitOnFlagUntilTimeout>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e04d      	b.n	800287a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2bff      	cmp	r3, #255	@ 0xff
 80027e6:	d90e      	bls.n	8002806 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	22ff      	movs	r2, #255	@ 0xff
 80027ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	8979      	ldrh	r1, [r7, #10]
 80027f6:	2300      	movs	r3, #0
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f001 f944 	bl	8003a8c <I2C_TransferConfig>
 8002804:	e00f      	b.n	8002826 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002814:	b2da      	uxtb	r2, r3
 8002816:	8979      	ldrh	r1, [r7, #10]
 8002818:	2300      	movs	r3, #0
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f001 f933 	bl	8003a8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d19e      	bne.n	800276e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	6a39      	ldr	r1, [r7, #32]
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 ff7a 	bl	800372e <I2C_WaitOnSTOPFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e01a      	b.n	800287a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2220      	movs	r2, #32
 800284a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6859      	ldr	r1, [r3, #4]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	4b0c      	ldr	r3, [pc, #48]	@ (8002888 <HAL_I2C_Master_Transmit+0x22c>)
 8002858:	400b      	ands	r3, r1
 800285a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	e000      	b.n	800287a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002878:	2302      	movs	r3, #2
  }
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	80002000 	.word	0x80002000
 8002888:	fe00e800 	.word	0xfe00e800

0800288c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af02      	add	r7, sp, #8
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	461a      	mov	r2, r3
 8002898:	460b      	mov	r3, r1
 800289a:	817b      	strh	r3, [r7, #10]
 800289c:	4613      	mov	r3, r2
 800289e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	f040 80db 	bne.w	8002a64 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_I2C_Master_Receive+0x30>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e0d4      	b.n	8002a66 <HAL_I2C_Master_Receive+0x1da>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028c4:	f7ff fa84 	bl	8001dd0 <HAL_GetTick>
 80028c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	2319      	movs	r3, #25
 80028d0:	2201      	movs	r2, #1
 80028d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fe89 	bl	80035ee <I2C_WaitOnFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e0bf      	b.n	8002a66 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2222      	movs	r2, #34	@ 0x22
 80028ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2210      	movs	r2, #16
 80028f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	893a      	ldrh	r2, [r7, #8]
 8002906:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	2bff      	cmp	r3, #255	@ 0xff
 8002916:	d90e      	bls.n	8002936 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002922:	b2da      	uxtb	r2, r3
 8002924:	8979      	ldrh	r1, [r7, #10]
 8002926:	4b52      	ldr	r3, [pc, #328]	@ (8002a70 <HAL_I2C_Master_Receive+0x1e4>)
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f001 f8ac 	bl	8003a8c <I2C_TransferConfig>
 8002934:	e06d      	b.n	8002a12 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002944:	b2da      	uxtb	r2, r3
 8002946:	8979      	ldrh	r1, [r7, #10]
 8002948:	4b49      	ldr	r3, [pc, #292]	@ (8002a70 <HAL_I2C_Master_Receive+0x1e4>)
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f001 f89b 	bl	8003a8c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002956:	e05c      	b.n	8002a12 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	6a39      	ldr	r1, [r7, #32]
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 ff29 	bl	80037b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e07c      	b.n	8002a66 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d034      	beq.n	8002a12 <HAL_I2C_Master_Receive+0x186>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d130      	bne.n	8002a12 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	2200      	movs	r2, #0
 80029b8:	2180      	movs	r1, #128	@ 0x80
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fe17 	bl	80035ee <I2C_WaitOnFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e04d      	b.n	8002a66 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2bff      	cmp	r3, #255	@ 0xff
 80029d2:	d90e      	bls.n	80029f2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	22ff      	movs	r2, #255	@ 0xff
 80029d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	8979      	ldrh	r1, [r7, #10]
 80029e2:	2300      	movs	r3, #0
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f001 f84e 	bl	8003a8c <I2C_TransferConfig>
 80029f0:	e00f      	b.n	8002a12 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	8979      	ldrh	r1, [r7, #10]
 8002a04:	2300      	movs	r3, #0
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f001 f83d 	bl	8003a8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d19d      	bne.n	8002958 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	6a39      	ldr	r1, [r7, #32]
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 fe84 	bl	800372e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e01a      	b.n	8002a66 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2220      	movs	r2, #32
 8002a36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6859      	ldr	r1, [r3, #4]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	4b0c      	ldr	r3, [pc, #48]	@ (8002a74 <HAL_I2C_Master_Receive+0x1e8>)
 8002a44:	400b      	ands	r3, r1
 8002a46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e000      	b.n	8002a66 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002a64:	2302      	movs	r3, #2
  }
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	80002400 	.word	0x80002400
 8002a74:	fe00e800 	.word	0xfe00e800

08002a78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	68f9      	ldr	r1, [r7, #12]
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d010      	beq.n	8002af2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	09db      	lsrs	r3, r3, #7
 8002ad4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae0:	f043 0201 	orr.w	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002af0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	0a9b      	lsrs	r3, r3, #10
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d010      	beq.n	8002b20 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	09db      	lsrs	r3, r3, #7
 8002b02:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0e:	f043 0208 	orr.w	r2, r3, #8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b1e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	0a5b      	lsrs	r3, r3, #9
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d010      	beq.n	8002b4e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	09db      	lsrs	r3, r3, #7
 8002b30:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3c:	f043 0202 	orr.w	r2, r3, #2
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b4c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 030b 	and.w	r3, r3, #11
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002b5e:	68f9      	ldr	r1, [r7, #12]
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fbeb 	bl	800333c <I2C_ITError>
  }
}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	70fb      	strb	r3, [r7, #3]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <I2C_Slave_ISR_IT+0x24>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e0ed      	b.n	8002dee <I2C_Slave_ISR_IT+0x200>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d004      	beq.n	8002c3c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002c32:	6939      	ldr	r1, [r7, #16]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f9c1 	bl	8002fbc <I2C_ITSlaveCplt>
 8002c3a:	e0d3      	b.n	8002de4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d04d      	beq.n	8002ce4 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	091b      	lsrs	r3, r3, #4
 8002c4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d047      	beq.n	8002ce4 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d128      	bne.n	8002cb0 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b28      	cmp	r3, #40	@ 0x28
 8002c68:	d108      	bne.n	8002c7c <I2C_Slave_ISR_IT+0x8e>
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c70:	d104      	bne.n	8002c7c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c72:	6939      	ldr	r1, [r7, #16]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 fb0b 	bl	8003290 <I2C_ITListenCplt>
 8002c7a:	e032      	b.n	8002ce2 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b29      	cmp	r3, #41	@ 0x29
 8002c86:	d10e      	bne.n	8002ca6 <I2C_Slave_ISR_IT+0xb8>
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c8e:	d00a      	beq.n	8002ca6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2210      	movs	r2, #16
 8002c96:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 fc66 	bl	800356a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f92d 	bl	8002efe <I2C_ITSlaveSeqCplt>
 8002ca4:	e01d      	b.n	8002ce2 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2210      	movs	r2, #16
 8002cac:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002cae:	e096      	b.n	8002dde <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2210      	movs	r2, #16
 8002cb6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbc:	f043 0204 	orr.w	r2, r3, #4
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <I2C_Slave_ISR_IT+0xe6>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cd0:	f040 8085 	bne.w	8002dde <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd8:	4619      	mov	r1, r3
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fb2e 	bl	800333c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002ce0:	e07d      	b.n	8002dde <I2C_Slave_ISR_IT+0x1f0>
 8002ce2:	e07c      	b.n	8002dde <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d030      	beq.n	8002d52 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d02a      	beq.n	8002d52 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d018      	beq.n	8002d38 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d14f      	bne.n	8002de2 <I2C_Slave_ISR_IT+0x1f4>
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d48:	d04b      	beq.n	8002de2 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f8d7 	bl	8002efe <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002d50:	e047      	b.n	8002de2 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	08db      	lsrs	r3, r3, #3
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d004      	beq.n	8002d74 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002d6a:	6939      	ldr	r1, [r7, #16]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f842 	bl	8002df6 <I2C_ITAddrCplt>
 8002d72:	e037      	b.n	8002de4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	085b      	lsrs	r3, r3, #1
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d031      	beq.n	8002de4 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02b      	beq.n	8002de4 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d018      	beq.n	8002dc8 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	781a      	ldrb	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002dc6:	e00d      	b.n	8002de4 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dce:	d002      	beq.n	8002dd6 <I2C_Slave_ISR_IT+0x1e8>
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f891 	bl	8002efe <I2C_ITSlaveSeqCplt>
 8002ddc:	e002      	b.n	8002de4 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8002dde:	bf00      	nop
 8002de0:	e000      	b.n	8002de4 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8002de2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e0c:	2b28      	cmp	r3, #40	@ 0x28
 8002e0e:	d16a      	bne.n	8002ee6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	0c1b      	lsrs	r3, r3, #16
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	0c1b      	lsrs	r3, r3, #16
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002e2e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e3c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002e4a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d138      	bne.n	8002ec6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002e54:	897b      	ldrh	r3, [r7, #10]
 8002e56:	09db      	lsrs	r3, r3, #7
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	89bb      	ldrh	r3, [r7, #12]
 8002e5c:	4053      	eors	r3, r2
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f003 0306 	and.w	r3, r3, #6
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d11c      	bne.n	8002ea2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002e68:	897b      	ldrh	r3, [r7, #10]
 8002e6a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d13b      	bne.n	8002ef6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2208      	movs	r2, #8
 8002e8a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e94:	89ba      	ldrh	r2, [r7, #12]
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff fe7b 	bl	8002b96 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002ea0:	e029      	b.n	8002ef6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002ea2:	893b      	ldrh	r3, [r7, #8]
 8002ea4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ea6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fe20 	bl	8003af0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002eb8:	89ba      	ldrh	r2, [r7, #12]
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff fe69 	bl	8002b96 <HAL_I2C_AddrCallback>
}
 8002ec4:	e017      	b.n	8002ef6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ec6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fe10 	bl	8003af0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ed8:	89ba      	ldrh	r2, [r7, #12]
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	4619      	mov	r1, r3
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff fe59 	bl	8002b96 <HAL_I2C_AddrCallback>
}
 8002ee4:	e007      	b.n	8002ef6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2208      	movs	r2, #8
 8002eec:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	0b9b      	lsrs	r3, r3, #14
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	e00d      	b.n	8002f50 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	0bdb      	lsrs	r3, r3, #15
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d007      	beq.n	8002f50 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f4e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b29      	cmp	r3, #41	@ 0x29
 8002f5a:	d112      	bne.n	8002f82 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2228      	movs	r2, #40	@ 0x28
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2221      	movs	r2, #33	@ 0x21
 8002f68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fdbf 	bl	8003af0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff fdf7 	bl	8002b6e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f80:	e017      	b.n	8002fb2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f8c:	d111      	bne.n	8002fb2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2228      	movs	r2, #40	@ 0x28
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2222      	movs	r2, #34	@ 0x22
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fda6 	bl	8003af0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff fde8 	bl	8002b82 <HAL_I2C_SlaveRxCpltCallback>
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fde:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fe8:	7afb      	ldrb	r3, [r7, #11]
 8002fea:	2b21      	cmp	r3, #33	@ 0x21
 8002fec:	d002      	beq.n	8002ff4 <I2C_ITSlaveCplt+0x38>
 8002fee:	7afb      	ldrb	r3, [r7, #11]
 8002ff0:	2b29      	cmp	r3, #41	@ 0x29
 8002ff2:	d108      	bne.n	8003006 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002ff4:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fd79 	bl	8003af0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2221      	movs	r2, #33	@ 0x21
 8003002:	631a      	str	r2, [r3, #48]	@ 0x30
 8003004:	e019      	b.n	800303a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003006:	7afb      	ldrb	r3, [r7, #11]
 8003008:	2b22      	cmp	r3, #34	@ 0x22
 800300a:	d002      	beq.n	8003012 <I2C_ITSlaveCplt+0x56>
 800300c:	7afb      	ldrb	r3, [r7, #11]
 800300e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003010:	d108      	bne.n	8003024 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003012:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fd6a 	bl	8003af0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2222      	movs	r2, #34	@ 0x22
 8003020:	631a      	str	r2, [r3, #48]	@ 0x30
 8003022:	e00a      	b.n	800303a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003024:	7afb      	ldrb	r3, [r7, #11]
 8003026:	2b28      	cmp	r3, #40	@ 0x28
 8003028:	d107      	bne.n	800303a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800302a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fd5e 	bl	8003af0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003048:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b8c      	ldr	r3, [pc, #560]	@ (8003288 <I2C_ITSlaveCplt+0x2cc>)
 8003056:	400b      	ands	r3, r1
 8003058:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fa85 	bl	800356a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	0b9b      	lsrs	r3, r3, #14
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d013      	beq.n	8003094 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800307a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	b29a      	uxth	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003092:	e018      	b.n	80030c6 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	0bdb      	lsrs	r3, r3, #15
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d012      	beq.n	80030c6 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030ae:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d006      	beq.n	80030c6 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	089b      	lsrs	r3, r3, #2
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d020      	beq.n	8003114 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f023 0304 	bic.w	r3, r3, #4
 80030d8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00c      	beq.n	8003114 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d005      	beq.n	800312a <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003122:	f043 0204 	orr.w	r2, r3, #4
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d04a      	beq.n	80031cc <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800313e:	2b00      	cmp	r3, #0
 8003140:	d044      	beq.n	80031cc <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d128      	bne.n	800319e <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b28      	cmp	r3, #40	@ 0x28
 8003156:	d108      	bne.n	800316a <I2C_ITSlaveCplt+0x1ae>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800315e:	d104      	bne.n	800316a <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003160:	6979      	ldr	r1, [r7, #20]
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f894 	bl	8003290 <I2C_ITListenCplt>
 8003168:	e030      	b.n	80031cc <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b29      	cmp	r3, #41	@ 0x29
 8003174:	d10e      	bne.n	8003194 <I2C_ITSlaveCplt+0x1d8>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800317c:	d00a      	beq.n	8003194 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2210      	movs	r2, #16
 8003184:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f9ef 	bl	800356a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff feb6 	bl	8002efe <I2C_ITSlaveSeqCplt>
 8003192:	e01b      	b.n	80031cc <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2210      	movs	r2, #16
 800319a:	61da      	str	r2, [r3, #28]
 800319c:	e016      	b.n	80031cc <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2210      	movs	r2, #16
 80031a4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031aa:	f043 0204 	orr.w	r2, r3, #4
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <I2C_ITSlaveCplt+0x204>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031be:	d105      	bne.n	80031cc <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c4:	4619      	mov	r1, r3
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8b8 	bl	800333c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d010      	beq.n	8003204 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e6:	4619      	mov	r1, r3
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f8a7 	bl	800333c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b28      	cmp	r3, #40	@ 0x28
 80031f8:	d141      	bne.n	800327e <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80031fa:	6979      	ldr	r1, [r7, #20]
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f847 	bl	8003290 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003202:	e03c      	b.n	800327e <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003208:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800320c:	d014      	beq.n	8003238 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff fe75 	bl	8002efe <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a1d      	ldr	r2, [pc, #116]	@ (800328c <I2C_ITSlaveCplt+0x2d0>)
 8003218:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff fcbe 	bl	8002bb2 <HAL_I2C_ListenCpltCallback>
}
 8003236:	e022      	b.n	800327e <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b22      	cmp	r3, #34	@ 0x22
 8003242:	d10e      	bne.n	8003262 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff fc91 	bl	8002b82 <HAL_I2C_SlaveRxCpltCallback>
}
 8003260:	e00d      	b.n	800327e <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff fc78 	bl	8002b6e <HAL_I2C_SlaveTxCpltCallback>
}
 800327e:	bf00      	nop
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	fe00e800 	.word	0xfe00e800
 800328c:	ffff0000 	.word	0xffff0000

08003290 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a26      	ldr	r2, [pc, #152]	@ (8003338 <I2C_ITListenCplt+0xa8>)
 800329e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	089b      	lsrs	r3, r3, #2
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d022      	beq.n	800330e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d012      	beq.n	800330e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	f043 0204 	orr.w	r2, r3, #4
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800330e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fbec 	bl	8003af0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2210      	movs	r2, #16
 800331e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff fc42 	bl	8002bb2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	ffff0000 	.word	0xffff0000

0800333c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800334c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a6d      	ldr	r2, [pc, #436]	@ (8003510 <I2C_ITError+0x1d4>)
 800335a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	2b28      	cmp	r3, #40	@ 0x28
 8003372:	d005      	beq.n	8003380 <I2C_ITError+0x44>
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	2b29      	cmp	r3, #41	@ 0x29
 8003378:	d002      	beq.n	8003380 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2b2a      	cmp	r3, #42	@ 0x2a
 800337e:	d10b      	bne.n	8003398 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003380:	2103      	movs	r1, #3
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fbb4 	bl	8003af0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2228      	movs	r2, #40	@ 0x28
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a60      	ldr	r2, [pc, #384]	@ (8003514 <I2C_ITError+0x1d8>)
 8003394:	635a      	str	r2, [r3, #52]	@ 0x34
 8003396:	e030      	b.n	80033fa <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003398:	f248 0103 	movw	r1, #32771	@ 0x8003
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fba7 	bl	8003af0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f8e1 	bl	800356a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b60      	cmp	r3, #96	@ 0x60
 80033b2:	d01f      	beq.n	80033f4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d114      	bne.n	80033f4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f003 0310 	and.w	r3, r3, #16
 80033d4:	2b10      	cmp	r3, #16
 80033d6:	d109      	bne.n	80033ec <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2210      	movs	r2, #16
 80033de:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e4:	f043 0204 	orr.w	r2, r3, #4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2220      	movs	r2, #32
 80033f2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003404:	2b00      	cmp	r3, #0
 8003406:	d039      	beq.n	800347c <I2C_ITError+0x140>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b11      	cmp	r3, #17
 800340c:	d002      	beq.n	8003414 <I2C_ITError+0xd8>
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b21      	cmp	r3, #33	@ 0x21
 8003412:	d133      	bne.n	800347c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800341e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003422:	d107      	bne.n	8003434 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003432:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe fe89 	bl	8002150 <HAL_DMA_GetState>
 800343e:	4603      	mov	r3, r0
 8003440:	2b01      	cmp	r3, #1
 8003442:	d017      	beq.n	8003474 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003448:	4a33      	ldr	r2, [pc, #204]	@ (8003518 <I2C_ITError+0x1dc>)
 800344a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe fe38 	bl	80020ce <HAL_DMA_Abort_IT>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d04d      	beq.n	8003500 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800346e:	4610      	mov	r0, r2
 8003470:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003472:	e045      	b.n	8003500 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f851 	bl	800351c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800347a:	e041      	b.n	8003500 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003480:	2b00      	cmp	r3, #0
 8003482:	d039      	beq.n	80034f8 <I2C_ITError+0x1bc>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b12      	cmp	r3, #18
 8003488:	d002      	beq.n	8003490 <I2C_ITError+0x154>
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b22      	cmp	r3, #34	@ 0x22
 800348e:	d133      	bne.n	80034f8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800349a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800349e:	d107      	bne.n	80034b0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fe fe4b 	bl	8002150 <HAL_DMA_GetState>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d017      	beq.n	80034f0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c4:	4a14      	ldr	r2, [pc, #80]	@ (8003518 <I2C_ITError+0x1dc>)
 80034c6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fe fdfa 	bl	80020ce <HAL_DMA_Abort_IT>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d011      	beq.n	8003504 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034ea:	4610      	mov	r0, r2
 80034ec:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034ee:	e009      	b.n	8003504 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f813 	bl	800351c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034f6:	e005      	b.n	8003504 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f80f 	bl	800351c <I2C_TreatErrorCallback>
  }
}
 80034fe:	e002      	b.n	8003506 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003500:	bf00      	nop
 8003502:	e000      	b.n	8003506 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003504:	bf00      	nop
}
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	ffff0000 	.word	0xffff0000
 8003514:	08002bef 	.word	0x08002bef
 8003518:	080035b3 	.word	0x080035b3

0800351c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b60      	cmp	r3, #96	@ 0x60
 800352e:	d10e      	bne.n	800354e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff fb47 	bl	8002bda <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800354c:	e009      	b.n	8003562 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff fb32 	bl	8002bc6 <HAL_I2C_ErrorCallback>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b02      	cmp	r3, #2
 800357e:	d103      	bne.n	8003588 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2200      	movs	r2, #0
 8003586:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b01      	cmp	r3, #1
 8003594:	d007      	beq.n	80035a6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699a      	ldr	r2, [r3, #24]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0201 	orr.w	r2, r2, #1
 80035a4:	619a      	str	r2, [r3, #24]
  }
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035be:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035cc:	2200      	movs	r2, #0
 80035ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035dc:	2200      	movs	r2, #0
 80035de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7ff ff9b 	bl	800351c <I2C_TreatErrorCallback>
}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	4613      	mov	r3, r2
 80035fc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035fe:	e03b      	b.n	8003678 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	6839      	ldr	r1, [r7, #0]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f961 	bl	80038cc <I2C_IsErrorOccurred>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e041      	b.n	8003698 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361a:	d02d      	beq.n	8003678 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361c:	f7fe fbd8 	bl	8001dd0 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d302      	bcc.n	8003632 <I2C_WaitOnFlagUntilTimeout+0x44>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d122      	bne.n	8003678 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699a      	ldr	r2, [r3, #24]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4013      	ands	r3, r2
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	429a      	cmp	r2, r3
 8003640:	bf0c      	ite	eq
 8003642:	2301      	moveq	r3, #1
 8003644:	2300      	movne	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	461a      	mov	r2, r3
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	429a      	cmp	r2, r3
 800364e:	d113      	bne.n	8003678 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003654:	f043 0220 	orr.w	r2, r3, #32
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e00f      	b.n	8003698 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4013      	ands	r3, r2
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	429a      	cmp	r2, r3
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	429a      	cmp	r2, r3
 8003694:	d0b4      	beq.n	8003600 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036ac:	e033      	b.n	8003716 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f90a 	bl	80038cc <I2C_IsErrorOccurred>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e031      	b.n	8003726 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c8:	d025      	beq.n	8003716 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ca:	f7fe fb81 	bl	8001dd0 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d302      	bcc.n	80036e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d11a      	bne.n	8003716 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d013      	beq.n	8003716 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e007      	b.n	8003726 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b02      	cmp	r3, #2
 8003722:	d1c4      	bne.n	80036ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800373a:	e02f      	b.n	800379c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f8c3 	bl	80038cc <I2C_IsErrorOccurred>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e02d      	b.n	80037ac <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003750:	f7fe fb3e 	bl	8001dd0 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	429a      	cmp	r2, r3
 800375e:	d302      	bcc.n	8003766 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d11a      	bne.n	800379c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b20      	cmp	r3, #32
 8003772:	d013      	beq.n	800379c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003778:	f043 0220 	orr.w	r2, r3, #32
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e007      	b.n	80037ac <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d1c8      	bne.n	800373c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80037c4:	e071      	b.n	80038aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f87e 	bl	80038cc <I2C_IsErrorOccurred>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d13b      	bne.n	8003860 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80037e8:	7dfb      	ldrb	r3, [r7, #23]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d138      	bne.n	8003860 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d105      	bne.n	8003808 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b10      	cmp	r3, #16
 8003814:	d121      	bne.n	800385a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2210      	movs	r2, #16
 800381c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2204      	movs	r2, #4
 8003822:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2220      	movs	r2, #32
 800382a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6859      	ldr	r1, [r3, #4]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b24      	ldr	r3, [pc, #144]	@ (80038c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003838:	400b      	ands	r3, r1
 800383a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	75fb      	strb	r3, [r7, #23]
 8003858:	e002      	b.n	8003860 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003860:	f7fe fab6 	bl	8001dd0 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	429a      	cmp	r2, r3
 800386e:	d302      	bcc.n	8003876 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d119      	bne.n	80038aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d116      	bne.n	80038aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b04      	cmp	r3, #4
 8003888:	d00f      	beq.n	80038aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388e:	f043 0220 	orr.w	r2, r3, #32
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d002      	beq.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d083      	beq.n	80037c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80038be:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	fe00e800 	.word	0xfe00e800

080038cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	@ 0x28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d068      	beq.n	80039ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2210      	movs	r2, #16
 80038fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003900:	e049      	b.n	8003996 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003908:	d045      	beq.n	8003996 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800390a:	f7fe fa61 	bl	8001dd0 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	429a      	cmp	r2, r3
 8003918:	d302      	bcc.n	8003920 <I2C_IsErrorOccurred+0x54>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d13a      	bne.n	8003996 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800392a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003932:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800393e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003942:	d121      	bne.n	8003988 <I2C_IsErrorOccurred+0xbc>
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800394a:	d01d      	beq.n	8003988 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800394c:	7cfb      	ldrb	r3, [r7, #19]
 800394e:	2b20      	cmp	r3, #32
 8003950:	d01a      	beq.n	8003988 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003960:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003962:	f7fe fa35 	bl	8001dd0 <HAL_GetTick>
 8003966:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003968:	e00e      	b.n	8003988 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800396a:	f7fe fa31 	bl	8001dd0 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b19      	cmp	r3, #25
 8003976:	d907      	bls.n	8003988 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	f043 0320 	orr.w	r3, r3, #32
 800397e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003986:	e006      	b.n	8003996 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b20      	cmp	r3, #32
 8003994:	d1e9      	bne.n	800396a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d003      	beq.n	80039ac <I2C_IsErrorOccurred+0xe0>
 80039a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0aa      	beq.n	8003902 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d103      	bne.n	80039bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2220      	movs	r2, #32
 80039ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	f043 0304 	orr.w	r3, r3, #4
 80039c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00b      	beq.n	80039f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	f043 0308 	orr.w	r3, r3, #8
 8003a04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00b      	beq.n	8003a38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	f043 0302 	orr.w	r3, r3, #2
 8003a26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01c      	beq.n	8003a7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f7ff fd92 	bl	800356a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6859      	ldr	r1, [r3, #4]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4b0d      	ldr	r3, [pc, #52]	@ (8003a88 <I2C_IsErrorOccurred+0x1bc>)
 8003a52:	400b      	ands	r3, r1
 8003a54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3728      	adds	r7, #40	@ 0x28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	fe00e800 	.word	0xfe00e800

08003a8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	607b      	str	r3, [r7, #4]
 8003a96:	460b      	mov	r3, r1
 8003a98:	817b      	strh	r3, [r7, #10]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a9e:	897b      	ldrh	r3, [r7, #10]
 8003aa0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003aa4:	7a7b      	ldrb	r3, [r7, #9]
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003aba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	0d5b      	lsrs	r3, r3, #21
 8003ac6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003aca:	4b08      	ldr	r3, [pc, #32]	@ (8003aec <I2C_TransferConfig+0x60>)
 8003acc:	430b      	orrs	r3, r1
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	ea02 0103 	and.w	r1, r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ade:	bf00      	nop
 8003ae0:	371c      	adds	r7, #28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	03ff63ff 	.word	0x03ff63ff

08003af0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003b00:	887b      	ldrh	r3, [r7, #2]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00f      	beq.n	8003b2a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003b10:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b1e:	2b28      	cmp	r3, #40	@ 0x28
 8003b20:	d003      	beq.n	8003b2a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003b28:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003b2a:	887b      	ldrh	r3, [r7, #2]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00f      	beq.n	8003b54 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003b3a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b48:	2b28      	cmp	r3, #40	@ 0x28
 8003b4a:	d003      	beq.n	8003b54 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003b52:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	da03      	bge.n	8003b64 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003b62:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b64:	887b      	ldrh	r3, [r7, #2]
 8003b66:	2b10      	cmp	r3, #16
 8003b68:	d103      	bne.n	8003b72 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003b70:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b72:	887b      	ldrh	r3, [r7, #2]
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d103      	bne.n	8003b80 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f043 0320 	orr.w	r3, r3, #32
 8003b7e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b80:	887b      	ldrh	r3, [r7, #2]
 8003b82:	2b40      	cmp	r3, #64	@ 0x40
 8003b84:	d103      	bne.n	8003b8e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b8c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6819      	ldr	r1, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	43da      	mvns	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	400a      	ands	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]
}
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d138      	bne.n	8003c34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e032      	b.n	8003c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2224      	movs	r2, #36	@ 0x24
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0201 	bic.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6819      	ldr	r1, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e000      	b.n	8003c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d139      	bne.n	8003ccc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e033      	b.n	8003cce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2224      	movs	r2, #36	@ 0x24
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0201 	bic.w	r2, r2, #1
 8003c84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	021b      	lsls	r3, r3, #8
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e000      	b.n	8003cce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ccc:	2302      	movs	r3, #2
  }
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
	...

08003cdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ce0:	4b04      	ldr	r3, [pc, #16]	@ (8003cf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40007000 	.word	0x40007000

08003cf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d06:	d130      	bne.n	8003d6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d08:	4b23      	ldr	r3, [pc, #140]	@ (8003d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d14:	d038      	beq.n	8003d88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d16:	4b20      	ldr	r3, [pc, #128]	@ (8003d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8003d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d26:	4b1d      	ldr	r3, [pc, #116]	@ (8003d9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2232      	movs	r2, #50	@ 0x32
 8003d2c:	fb02 f303 	mul.w	r3, r2, r3
 8003d30:	4a1b      	ldr	r2, [pc, #108]	@ (8003da0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	0c9b      	lsrs	r3, r3, #18
 8003d38:	3301      	adds	r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d3c:	e002      	b.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d44:	4b14      	ldr	r3, [pc, #80]	@ (8003d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d50:	d102      	bne.n	8003d58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1f2      	bne.n	8003d3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d58:	4b0f      	ldr	r3, [pc, #60]	@ (8003d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d64:	d110      	bne.n	8003d88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e00f      	b.n	8003d8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d76:	d007      	beq.n	8003d88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d78:	4b07      	ldr	r3, [pc, #28]	@ (8003d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d80:	4a05      	ldr	r2, [pc, #20]	@ (8003d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40007000 	.word	0x40007000
 8003d9c:	20000008 	.word	0x20000008
 8003da0:	431bde83 	.word	0x431bde83

08003da4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e3ca      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003db6:	4b97      	ldr	r3, [pc, #604]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dc0:	4b94      	ldr	r3, [pc, #592]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 80e4 	beq.w	8003fa0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d007      	beq.n	8003dee <HAL_RCC_OscConfig+0x4a>
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2b0c      	cmp	r3, #12
 8003de2:	f040 808b 	bne.w	8003efc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	f040 8087 	bne.w	8003efc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dee:	4b89      	ldr	r3, [pc, #548]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_RCC_OscConfig+0x62>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e3a2      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1a      	ldr	r2, [r3, #32]
 8003e0a:	4b82      	ldr	r3, [pc, #520]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d004      	beq.n	8003e20 <HAL_RCC_OscConfig+0x7c>
 8003e16:	4b7f      	ldr	r3, [pc, #508]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e1e:	e005      	b.n	8003e2c <HAL_RCC_OscConfig+0x88>
 8003e20:	4b7c      	ldr	r3, [pc, #496]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d223      	bcs.n	8003e78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fd55 	bl	80048e4 <RCC_SetFlashLatencyFromMSIRange>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e383      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e44:	4b73      	ldr	r3, [pc, #460]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a72      	ldr	r2, [pc, #456]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	f043 0308 	orr.w	r3, r3, #8
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	4b70      	ldr	r3, [pc, #448]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	496d      	ldr	r1, [pc, #436]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e62:	4b6c      	ldr	r3, [pc, #432]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	4968      	ldr	r1, [pc, #416]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
 8003e76:	e025      	b.n	8003ec4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e78:	4b66      	ldr	r3, [pc, #408]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a65      	ldr	r2, [pc, #404]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	f043 0308 	orr.w	r3, r3, #8
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b63      	ldr	r3, [pc, #396]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	4960      	ldr	r1, [pc, #384]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e96:	4b5f      	ldr	r3, [pc, #380]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	495b      	ldr	r1, [pc, #364]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d109      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fd15 	bl	80048e4 <RCC_SetFlashLatencyFromMSIRange>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e343      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ec4:	f000 fc4a 	bl	800475c <HAL_RCC_GetSysClockFreq>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	4b52      	ldr	r3, [pc, #328]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	091b      	lsrs	r3, r3, #4
 8003ed0:	f003 030f 	and.w	r3, r3, #15
 8003ed4:	4950      	ldr	r1, [pc, #320]	@ (8004018 <HAL_RCC_OscConfig+0x274>)
 8003ed6:	5ccb      	ldrb	r3, [r1, r3]
 8003ed8:	f003 031f 	and.w	r3, r3, #31
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee0:	4a4e      	ldr	r2, [pc, #312]	@ (800401c <HAL_RCC_OscConfig+0x278>)
 8003ee2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ee4:	4b4e      	ldr	r3, [pc, #312]	@ (8004020 <HAL_RCC_OscConfig+0x27c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fd ff21 	bl	8001d30 <HAL_InitTick>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d052      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	e327      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d032      	beq.n	8003f6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f04:	4b43      	ldr	r3, [pc, #268]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a42      	ldr	r2, [pc, #264]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f10:	f7fd ff5e 	bl	8001dd0 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f18:	f7fd ff5a 	bl	8001dd0 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e310      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f36:	4b37      	ldr	r3, [pc, #220]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a36      	ldr	r2, [pc, #216]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003f3c:	f043 0308 	orr.w	r3, r3, #8
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	4b34      	ldr	r3, [pc, #208]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	4931      	ldr	r1, [pc, #196]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f54:	4b2f      	ldr	r3, [pc, #188]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	492c      	ldr	r1, [pc, #176]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]
 8003f68:	e01a      	b.n	8003fa0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a29      	ldr	r2, [pc, #164]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f76:	f7fd ff2b 	bl	8001dd0 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f7e:	f7fd ff27 	bl	8001dd0 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e2dd      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f90:	4b20      	ldr	r3, [pc, #128]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f0      	bne.n	8003f7e <HAL_RCC_OscConfig+0x1da>
 8003f9c:	e000      	b.n	8003fa0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d074      	beq.n	8004096 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d005      	beq.n	8003fbe <HAL_RCC_OscConfig+0x21a>
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	2b0c      	cmp	r3, #12
 8003fb6:	d10e      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d10b      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fbe:	4b15      	ldr	r3, [pc, #84]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d064      	beq.n	8004094 <HAL_RCC_OscConfig+0x2f0>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d160      	bne.n	8004094 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e2ba      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fde:	d106      	bne.n	8003fee <HAL_RCC_OscConfig+0x24a>
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	e026      	b.n	800403c <HAL_RCC_OscConfig+0x298>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ff6:	d115      	bne.n	8004024 <HAL_RCC_OscConfig+0x280>
 8003ff8:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a05      	ldr	r2, [pc, #20]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003ffe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	4b03      	ldr	r3, [pc, #12]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a02      	ldr	r2, [pc, #8]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 800400a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	e014      	b.n	800403c <HAL_RCC_OscConfig+0x298>
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000
 8004018:	0800832c 	.word	0x0800832c
 800401c:	20000008 	.word	0x20000008
 8004020:	2000000c 	.word	0x2000000c
 8004024:	4ba0      	ldr	r3, [pc, #640]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a9f      	ldr	r2, [pc, #636]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 800402a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	4b9d      	ldr	r3, [pc, #628]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a9c      	ldr	r2, [pc, #624]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 8004036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800403a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d013      	beq.n	800406c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fd fec4 	bl	8001dd0 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800404c:	f7fd fec0 	bl	8001dd0 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	@ 0x64
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e276      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800405e:	4b92      	ldr	r3, [pc, #584]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0x2a8>
 800406a:	e014      	b.n	8004096 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fd feb0 	bl	8001dd0 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004074:	f7fd feac 	bl	8001dd0 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	@ 0x64
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e262      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004086:	4b88      	ldr	r3, [pc, #544]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x2d0>
 8004092:	e000      	b.n	8004096 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d060      	beq.n	8004164 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_OscConfig+0x310>
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	2b0c      	cmp	r3, #12
 80040ac:	d119      	bne.n	80040e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d116      	bne.n	80040e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040b4:	4b7c      	ldr	r3, [pc, #496]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_OscConfig+0x328>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e23f      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040cc:	4b76      	ldr	r3, [pc, #472]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	061b      	lsls	r3, r3, #24
 80040da:	4973      	ldr	r1, [pc, #460]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e0:	e040      	b.n	8004164 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d023      	beq.n	8004132 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040ea:	4b6f      	ldr	r3, [pc, #444]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a6e      	ldr	r2, [pc, #440]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 80040f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f6:	f7fd fe6b 	bl	8001dd0 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040fe:	f7fd fe67 	bl	8001dd0 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e21d      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004110:	4b65      	ldr	r3, [pc, #404]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f0      	beq.n	80040fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411c:	4b62      	ldr	r3, [pc, #392]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	495f      	ldr	r1, [pc, #380]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 800412c:	4313      	orrs	r3, r2
 800412e:	604b      	str	r3, [r1, #4]
 8004130:	e018      	b.n	8004164 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004132:	4b5d      	ldr	r3, [pc, #372]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a5c      	ldr	r2, [pc, #368]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 8004138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800413c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413e:	f7fd fe47 	bl	8001dd0 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004146:	f7fd fe43 	bl	8001dd0 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e1f9      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004158:	4b53      	ldr	r3, [pc, #332]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1f0      	bne.n	8004146 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b00      	cmp	r3, #0
 800416e:	d03c      	beq.n	80041ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d01c      	beq.n	80041b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004178:	4b4b      	ldr	r3, [pc, #300]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 800417a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800417e:	4a4a      	ldr	r2, [pc, #296]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004188:	f7fd fe22 	bl	8001dd0 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004190:	f7fd fe1e 	bl	8001dd0 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e1d4      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041a2:	4b41      	ldr	r3, [pc, #260]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 80041a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0ef      	beq.n	8004190 <HAL_RCC_OscConfig+0x3ec>
 80041b0:	e01b      	b.n	80041ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b2:	4b3d      	ldr	r3, [pc, #244]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 80041b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041b8:	4a3b      	ldr	r2, [pc, #236]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 80041ba:	f023 0301 	bic.w	r3, r3, #1
 80041be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c2:	f7fd fe05 	bl	8001dd0 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ca:	f7fd fe01 	bl	8001dd0 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e1b7      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041dc:	4b32      	ldr	r3, [pc, #200]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 80041de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1ef      	bne.n	80041ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 80a6 	beq.w	8004344 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f8:	2300      	movs	r3, #0
 80041fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041fc:	4b2a      	ldr	r3, [pc, #168]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 80041fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10d      	bne.n	8004224 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004208:	4b27      	ldr	r3, [pc, #156]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 800420a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420c:	4a26      	ldr	r2, [pc, #152]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 800420e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004212:	6593      	str	r3, [r2, #88]	@ 0x58
 8004214:	4b24      	ldr	r3, [pc, #144]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 8004216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004220:	2301      	movs	r3, #1
 8004222:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004224:	4b21      	ldr	r3, [pc, #132]	@ (80042ac <HAL_RCC_OscConfig+0x508>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d118      	bne.n	8004262 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004230:	4b1e      	ldr	r3, [pc, #120]	@ (80042ac <HAL_RCC_OscConfig+0x508>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1d      	ldr	r2, [pc, #116]	@ (80042ac <HAL_RCC_OscConfig+0x508>)
 8004236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800423a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800423c:	f7fd fdc8 	bl	8001dd0 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004244:	f7fd fdc4 	bl	8001dd0 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e17a      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004256:	4b15      	ldr	r3, [pc, #84]	@ (80042ac <HAL_RCC_OscConfig+0x508>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d108      	bne.n	800427c <HAL_RCC_OscConfig+0x4d8>
 800426a:	4b0f      	ldr	r3, [pc, #60]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004270:	4a0d      	ldr	r2, [pc, #52]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800427a:	e029      	b.n	80042d0 <HAL_RCC_OscConfig+0x52c>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b05      	cmp	r3, #5
 8004282:	d115      	bne.n	80042b0 <HAL_RCC_OscConfig+0x50c>
 8004284:	4b08      	ldr	r3, [pc, #32]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428a:	4a07      	ldr	r2, [pc, #28]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 800428c:	f043 0304 	orr.w	r3, r3, #4
 8004290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004294:	4b04      	ldr	r3, [pc, #16]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429a:	4a03      	ldr	r2, [pc, #12]	@ (80042a8 <HAL_RCC_OscConfig+0x504>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042a4:	e014      	b.n	80042d0 <HAL_RCC_OscConfig+0x52c>
 80042a6:	bf00      	nop
 80042a8:	40021000 	.word	0x40021000
 80042ac:	40007000 	.word	0x40007000
 80042b0:	4b9c      	ldr	r3, [pc, #624]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b6:	4a9b      	ldr	r2, [pc, #620]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042c0:	4b98      	ldr	r3, [pc, #608]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c6:	4a97      	ldr	r2, [pc, #604]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 80042c8:	f023 0304 	bic.w	r3, r3, #4
 80042cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d016      	beq.n	8004306 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d8:	f7fd fd7a 	bl	8001dd0 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e0:	f7fd fd76 	bl	8001dd0 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e12a      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f6:	4b8b      	ldr	r3, [pc, #556]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ed      	beq.n	80042e0 <HAL_RCC_OscConfig+0x53c>
 8004304:	e015      	b.n	8004332 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004306:	f7fd fd63 	bl	8001dd0 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fd fd5f 	bl	8001dd0 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e113      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004324:	4b7f      	ldr	r3, [pc, #508]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1ed      	bne.n	800430e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004332:	7ffb      	ldrb	r3, [r7, #31]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d105      	bne.n	8004344 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004338:	4b7a      	ldr	r3, [pc, #488]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 800433a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433c:	4a79      	ldr	r2, [pc, #484]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 800433e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004342:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80fe 	beq.w	800454a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004352:	2b02      	cmp	r3, #2
 8004354:	f040 80d0 	bne.w	80044f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004358:	4b72      	ldr	r3, [pc, #456]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f003 0203 	and.w	r2, r3, #3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004368:	429a      	cmp	r2, r3
 800436a:	d130      	bne.n	80043ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004376:	3b01      	subs	r3, #1
 8004378:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d127      	bne.n	80043ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004388:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800438a:	429a      	cmp	r2, r3
 800438c:	d11f      	bne.n	80043ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004398:	2a07      	cmp	r2, #7
 800439a:	bf14      	ite	ne
 800439c:	2201      	movne	r2, #1
 800439e:	2200      	moveq	r2, #0
 80043a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d113      	bne.n	80043ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	3b01      	subs	r3, #1
 80043b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d109      	bne.n	80043ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	3b01      	subs	r3, #1
 80043c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d06e      	beq.n	80044ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	2b0c      	cmp	r3, #12
 80043d2:	d069      	beq.n	80044a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043d4:	4b53      	ldr	r3, [pc, #332]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d105      	bne.n	80043ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80043e0:	4b50      	ldr	r3, [pc, #320]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0ad      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043f0:	4b4c      	ldr	r3, [pc, #304]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 80043f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043fc:	f7fd fce8 	bl	8001dd0 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004404:	f7fd fce4 	bl	8001dd0 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e09a      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004416:	4b43      	ldr	r3, [pc, #268]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004422:	4b40      	ldr	r3, [pc, #256]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	4b40      	ldr	r3, [pc, #256]	@ (8004528 <HAL_RCC_OscConfig+0x784>)
 8004428:	4013      	ands	r3, r2
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004432:	3a01      	subs	r2, #1
 8004434:	0112      	lsls	r2, r2, #4
 8004436:	4311      	orrs	r1, r2
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800443c:	0212      	lsls	r2, r2, #8
 800443e:	4311      	orrs	r1, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004444:	0852      	lsrs	r2, r2, #1
 8004446:	3a01      	subs	r2, #1
 8004448:	0552      	lsls	r2, r2, #21
 800444a:	4311      	orrs	r1, r2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004450:	0852      	lsrs	r2, r2, #1
 8004452:	3a01      	subs	r2, #1
 8004454:	0652      	lsls	r2, r2, #25
 8004456:	4311      	orrs	r1, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800445c:	0912      	lsrs	r2, r2, #4
 800445e:	0452      	lsls	r2, r2, #17
 8004460:	430a      	orrs	r2, r1
 8004462:	4930      	ldr	r1, [pc, #192]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 8004464:	4313      	orrs	r3, r2
 8004466:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004468:	4b2e      	ldr	r3, [pc, #184]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a2d      	ldr	r2, [pc, #180]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 800446e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004472:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004474:	4b2b      	ldr	r3, [pc, #172]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a2a      	ldr	r2, [pc, #168]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 800447a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800447e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004480:	f7fd fca6 	bl	8001dd0 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004488:	f7fd fca2 	bl	8001dd0 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e058      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449a:	4b22      	ldr	r3, [pc, #136]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044a6:	e050      	b.n	800454a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e04f      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d148      	bne.n	800454a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a19      	ldr	r2, [pc, #100]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 80044be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044c4:	4b17      	ldr	r3, [pc, #92]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	4a16      	ldr	r2, [pc, #88]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 80044ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044d0:	f7fd fc7e 	bl	8001dd0 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fd fc7a 	bl	8001dd0 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e030      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x734>
 80044f6:	e028      	b.n	800454a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b0c      	cmp	r3, #12
 80044fc:	d023      	beq.n	8004546 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fe:	4b09      	ldr	r3, [pc, #36]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a08      	ldr	r2, [pc, #32]	@ (8004524 <HAL_RCC_OscConfig+0x780>)
 8004504:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450a:	f7fd fc61 	bl	8001dd0 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004510:	e00c      	b.n	800452c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004512:	f7fd fc5d 	bl	8001dd0 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d905      	bls.n	800452c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e013      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
 8004524:	40021000 	.word	0x40021000
 8004528:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800452c:	4b09      	ldr	r3, [pc, #36]	@ (8004554 <HAL_RCC_OscConfig+0x7b0>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1ec      	bne.n	8004512 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004538:	4b06      	ldr	r3, [pc, #24]	@ (8004554 <HAL_RCC_OscConfig+0x7b0>)
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	4905      	ldr	r1, [pc, #20]	@ (8004554 <HAL_RCC_OscConfig+0x7b0>)
 800453e:	4b06      	ldr	r3, [pc, #24]	@ (8004558 <HAL_RCC_OscConfig+0x7b4>)
 8004540:	4013      	ands	r3, r2
 8004542:	60cb      	str	r3, [r1, #12]
 8004544:	e001      	b.n	800454a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3720      	adds	r7, #32
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40021000 	.word	0x40021000
 8004558:	feeefffc 	.word	0xfeeefffc

0800455c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0e7      	b.n	8004740 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004570:	4b75      	ldr	r3, [pc, #468]	@ (8004748 <HAL_RCC_ClockConfig+0x1ec>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d910      	bls.n	80045a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b72      	ldr	r3, [pc, #456]	@ (8004748 <HAL_RCC_ClockConfig+0x1ec>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 0207 	bic.w	r2, r3, #7
 8004586:	4970      	ldr	r1, [pc, #448]	@ (8004748 <HAL_RCC_ClockConfig+0x1ec>)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	4313      	orrs	r3, r2
 800458c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458e:	4b6e      	ldr	r3, [pc, #440]	@ (8004748 <HAL_RCC_ClockConfig+0x1ec>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0cf      	b.n	8004740 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d010      	beq.n	80045ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	4b66      	ldr	r3, [pc, #408]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d908      	bls.n	80045ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045bc:	4b63      	ldr	r3, [pc, #396]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4960      	ldr	r1, [pc, #384]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d04c      	beq.n	8004674 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d107      	bne.n	80045f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e2:	4b5a      	ldr	r3, [pc, #360]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d121      	bne.n	8004632 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e0a6      	b.n	8004740 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d107      	bne.n	800460a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045fa:	4b54      	ldr	r3, [pc, #336]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d115      	bne.n	8004632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e09a      	b.n	8004740 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d107      	bne.n	8004622 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004612:	4b4e      	ldr	r3, [pc, #312]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e08e      	b.n	8004740 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004622:	4b4a      	ldr	r3, [pc, #296]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e086      	b.n	8004740 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004632:	4b46      	ldr	r3, [pc, #280]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f023 0203 	bic.w	r2, r3, #3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	4943      	ldr	r1, [pc, #268]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004640:	4313      	orrs	r3, r2
 8004642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004644:	f7fd fbc4 	bl	8001dd0 <HAL_GetTick>
 8004648:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464a:	e00a      	b.n	8004662 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464c:	f7fd fbc0 	bl	8001dd0 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800465a:	4293      	cmp	r3, r2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e06e      	b.n	8004740 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004662:	4b3a      	ldr	r3, [pc, #232]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 020c 	and.w	r2, r3, #12
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	429a      	cmp	r2, r3
 8004672:	d1eb      	bne.n	800464c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d010      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	4b31      	ldr	r3, [pc, #196]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800468c:	429a      	cmp	r2, r3
 800468e:	d208      	bcs.n	80046a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004690:	4b2e      	ldr	r3, [pc, #184]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	492b      	ldr	r1, [pc, #172]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046a2:	4b29      	ldr	r3, [pc, #164]	@ (8004748 <HAL_RCC_ClockConfig+0x1ec>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d210      	bcs.n	80046d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b0:	4b25      	ldr	r3, [pc, #148]	@ (8004748 <HAL_RCC_ClockConfig+0x1ec>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f023 0207 	bic.w	r2, r3, #7
 80046b8:	4923      	ldr	r1, [pc, #140]	@ (8004748 <HAL_RCC_ClockConfig+0x1ec>)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	4313      	orrs	r3, r2
 80046be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c0:	4b21      	ldr	r3, [pc, #132]	@ (8004748 <HAL_RCC_ClockConfig+0x1ec>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d001      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e036      	b.n	8004740 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046de:	4b1b      	ldr	r3, [pc, #108]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	4918      	ldr	r1, [pc, #96]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d009      	beq.n	8004710 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046fc:	4b13      	ldr	r3, [pc, #76]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4910      	ldr	r1, [pc, #64]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 800470c:	4313      	orrs	r3, r2
 800470e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004710:	f000 f824 	bl	800475c <HAL_RCC_GetSysClockFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b0d      	ldr	r3, [pc, #52]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	490b      	ldr	r1, [pc, #44]	@ (8004750 <HAL_RCC_ClockConfig+0x1f4>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
 800472c:	4a09      	ldr	r2, [pc, #36]	@ (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 800472e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004730:	4b09      	ldr	r3, [pc, #36]	@ (8004758 <HAL_RCC_ClockConfig+0x1fc>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7fd fafb 	bl	8001d30 <HAL_InitTick>
 800473a:	4603      	mov	r3, r0
 800473c:	72fb      	strb	r3, [r7, #11]

  return status;
 800473e:	7afb      	ldrb	r3, [r7, #11]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40022000 	.word	0x40022000
 800474c:	40021000 	.word	0x40021000
 8004750:	0800832c 	.word	0x0800832c
 8004754:	20000008 	.word	0x20000008
 8004758:	2000000c 	.word	0x2000000c

0800475c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800475c:	b480      	push	{r7}
 800475e:	b089      	sub	sp, #36	@ 0x24
 8004760:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	2300      	movs	r3, #0
 8004768:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800476a:	4b3e      	ldr	r3, [pc, #248]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004774:	4b3b      	ldr	r3, [pc, #236]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <HAL_RCC_GetSysClockFreq+0x34>
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b0c      	cmp	r3, #12
 8004788:	d121      	bne.n	80047ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d11e      	bne.n	80047ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004790:	4b34      	ldr	r3, [pc, #208]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d107      	bne.n	80047ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800479c:	4b31      	ldr	r3, [pc, #196]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 800479e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	e005      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	091b      	lsrs	r3, r3, #4
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10d      	bne.n	80047e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047cc:	e00a      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d102      	bne.n	80047da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047d4:	4b25      	ldr	r3, [pc, #148]	@ (800486c <HAL_RCC_GetSysClockFreq+0x110>)
 80047d6:	61bb      	str	r3, [r7, #24]
 80047d8:	e004      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d101      	bne.n	80047e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047e0:	4b23      	ldr	r3, [pc, #140]	@ (8004870 <HAL_RCC_GetSysClockFreq+0x114>)
 80047e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	2b0c      	cmp	r3, #12
 80047e8:	d134      	bne.n	8004854 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d003      	beq.n	8004802 <HAL_RCC_GetSysClockFreq+0xa6>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d003      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0xac>
 8004800:	e005      	b.n	800480e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004802:	4b1a      	ldr	r3, [pc, #104]	@ (800486c <HAL_RCC_GetSysClockFreq+0x110>)
 8004804:	617b      	str	r3, [r7, #20]
      break;
 8004806:	e005      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004808:	4b19      	ldr	r3, [pc, #100]	@ (8004870 <HAL_RCC_GetSysClockFreq+0x114>)
 800480a:	617b      	str	r3, [r7, #20]
      break;
 800480c:	e002      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	617b      	str	r3, [r7, #20]
      break;
 8004812:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004814:	4b13      	ldr	r3, [pc, #76]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	3301      	adds	r3, #1
 8004820:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004822:	4b10      	ldr	r3, [pc, #64]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	0a1b      	lsrs	r3, r3, #8
 8004828:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	fb03 f202 	mul.w	r2, r3, r2
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	fbb2 f3f3 	udiv	r3, r2, r3
 8004838:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800483a:	4b0a      	ldr	r3, [pc, #40]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	0e5b      	lsrs	r3, r3, #25
 8004840:	f003 0303 	and.w	r3, r3, #3
 8004844:	3301      	adds	r3, #1
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004852:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004854:	69bb      	ldr	r3, [r7, #24]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3724      	adds	r7, #36	@ 0x24
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000
 8004868:	08008344 	.word	0x08008344
 800486c:	00f42400 	.word	0x00f42400
 8004870:	007a1200 	.word	0x007a1200

08004874 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004878:	4b03      	ldr	r3, [pc, #12]	@ (8004888 <HAL_RCC_GetHCLKFreq+0x14>)
 800487a:	681b      	ldr	r3, [r3, #0]
}
 800487c:	4618      	mov	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000008 	.word	0x20000008

0800488c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004890:	f7ff fff0 	bl	8004874 <HAL_RCC_GetHCLKFreq>
 8004894:	4602      	mov	r2, r0
 8004896:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	0a1b      	lsrs	r3, r3, #8
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	4904      	ldr	r1, [pc, #16]	@ (80048b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048a2:	5ccb      	ldrb	r3, [r1, r3]
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40021000 	.word	0x40021000
 80048b4:	0800833c 	.word	0x0800833c

080048b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048bc:	f7ff ffda 	bl	8004874 <HAL_RCC_GetHCLKFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	0adb      	lsrs	r3, r3, #11
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	4904      	ldr	r1, [pc, #16]	@ (80048e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d8:	4618      	mov	r0, r3
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40021000 	.word	0x40021000
 80048e0:	0800833c 	.word	0x0800833c

080048e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048ec:	2300      	movs	r3, #0
 80048ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048f0:	4b2a      	ldr	r3, [pc, #168]	@ (800499c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048fc:	f7ff f9ee 	bl	8003cdc <HAL_PWREx_GetVoltageRange>
 8004900:	6178      	str	r0, [r7, #20]
 8004902:	e014      	b.n	800492e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004904:	4b25      	ldr	r3, [pc, #148]	@ (800499c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004908:	4a24      	ldr	r2, [pc, #144]	@ (800499c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800490a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800490e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004910:	4b22      	ldr	r3, [pc, #136]	@ (800499c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800491c:	f7ff f9de 	bl	8003cdc <HAL_PWREx_GetVoltageRange>
 8004920:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004922:	4b1e      	ldr	r3, [pc, #120]	@ (800499c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004926:	4a1d      	ldr	r2, [pc, #116]	@ (800499c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004928:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800492c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004934:	d10b      	bne.n	800494e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b80      	cmp	r3, #128	@ 0x80
 800493a:	d919      	bls.n	8004970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004940:	d902      	bls.n	8004948 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004942:	2302      	movs	r3, #2
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	e013      	b.n	8004970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004948:	2301      	movs	r3, #1
 800494a:	613b      	str	r3, [r7, #16]
 800494c:	e010      	b.n	8004970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b80      	cmp	r3, #128	@ 0x80
 8004952:	d902      	bls.n	800495a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004954:	2303      	movs	r3, #3
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	e00a      	b.n	8004970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b80      	cmp	r3, #128	@ 0x80
 800495e:	d102      	bne.n	8004966 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004960:	2302      	movs	r3, #2
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	e004      	b.n	8004970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b70      	cmp	r3, #112	@ 0x70
 800496a:	d101      	bne.n	8004970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800496c:	2301      	movs	r3, #1
 800496e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004970:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 0207 	bic.w	r2, r3, #7
 8004978:	4909      	ldr	r1, [pc, #36]	@ (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004980:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	429a      	cmp	r2, r3
 800498c:	d001      	beq.n	8004992 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40021000 	.word	0x40021000
 80049a0:	40022000 	.word	0x40022000

080049a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049ac:	2300      	movs	r3, #0
 80049ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049b0:	2300      	movs	r3, #0
 80049b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d041      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049c8:	d02a      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049ce:	d824      	bhi.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049d4:	d008      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049da:	d81e      	bhi.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049e4:	d010      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049e6:	e018      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049e8:	4b86      	ldr	r3, [pc, #536]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	4a85      	ldr	r2, [pc, #532]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049f4:	e015      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3304      	adds	r3, #4
 80049fa:	2100      	movs	r1, #0
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fabb 	bl	8004f78 <RCCEx_PLLSAI1_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a06:	e00c      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3320      	adds	r3, #32
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fba6 	bl	8005160 <RCCEx_PLLSAI2_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a18:	e003      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	74fb      	strb	r3, [r7, #19]
      break;
 8004a1e:	e000      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a22:	7cfb      	ldrb	r3, [r7, #19]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10b      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a28:	4b76      	ldr	r3, [pc, #472]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a36:	4973      	ldr	r1, [pc, #460]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a3e:	e001      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a40:	7cfb      	ldrb	r3, [r7, #19]
 8004a42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d041      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a58:	d02a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a5e:	d824      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a64:	d008      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a6a:	d81e      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a74:	d010      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a76:	e018      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a78:	4b62      	ldr	r3, [pc, #392]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4a61      	ldr	r2, [pc, #388]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a84:	e015      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fa73 	bl	8004f78 <RCCEx_PLLSAI1_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a96:	e00c      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3320      	adds	r3, #32
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fb5e 	bl	8005160 <RCCEx_PLLSAI2_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aa8:	e003      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	74fb      	strb	r3, [r7, #19]
      break;
 8004aae:	e000      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ab2:	7cfb      	ldrb	r3, [r7, #19]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10b      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ab8:	4b52      	ldr	r3, [pc, #328]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004abe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ac6:	494f      	ldr	r1, [pc, #316]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004ace:	e001      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 80a0 	beq.w	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ae6:	4b47      	ldr	r3, [pc, #284]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004af6:	2300      	movs	r3, #0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00d      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004afc:	4b41      	ldr	r3, [pc, #260]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b00:	4a40      	ldr	r2, [pc, #256]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b06:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b08:	4b3e      	ldr	r3, [pc, #248]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b14:	2301      	movs	r3, #1
 8004b16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b18:	4b3b      	ldr	r3, [pc, #236]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a3a      	ldr	r2, [pc, #232]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b24:	f7fd f954 	bl	8001dd0 <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b2a:	e009      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b2c:	f7fd f950 	bl	8001dd0 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d902      	bls.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	74fb      	strb	r3, [r7, #19]
        break;
 8004b3e:	e005      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b40:	4b31      	ldr	r3, [pc, #196]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ef      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b4c:	7cfb      	ldrb	r3, [r7, #19]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d15c      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b52:	4b2c      	ldr	r3, [pc, #176]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01f      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d019      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b70:	4b24      	ldr	r3, [pc, #144]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b7c:	4b21      	ldr	r3, [pc, #132]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b82:	4a20      	ldr	r2, [pc, #128]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b92:	4a1c      	ldr	r2, [pc, #112]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b9c:	4a19      	ldr	r2, [pc, #100]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d016      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bae:	f7fd f90f 	bl	8001dd0 <HAL_GetTick>
 8004bb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bb4:	e00b      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb6:	f7fd f90b 	bl	8001dd0 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d902      	bls.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	74fb      	strb	r3, [r7, #19]
            break;
 8004bcc:	e006      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bce:	4b0d      	ldr	r3, [pc, #52]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0ec      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004bdc:	7cfb      	ldrb	r3, [r7, #19]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10c      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004be2:	4b08      	ldr	r3, [pc, #32]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bf2:	4904      	ldr	r1, [pc, #16]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004bfa:	e009      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bfc:	7cfb      	ldrb	r3, [r7, #19]
 8004bfe:	74bb      	strb	r3, [r7, #18]
 8004c00:	e006      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c02:	bf00      	nop
 8004c04:	40021000 	.word	0x40021000
 8004c08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0c:	7cfb      	ldrb	r3, [r7, #19]
 8004c0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c10:	7c7b      	ldrb	r3, [r7, #17]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d105      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c16:	4b9e      	ldr	r3, [pc, #632]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1a:	4a9d      	ldr	r2, [pc, #628]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c2e:	4b98      	ldr	r3, [pc, #608]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c34:	f023 0203 	bic.w	r2, r3, #3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3c:	4994      	ldr	r1, [pc, #592]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c50:	4b8f      	ldr	r3, [pc, #572]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c56:	f023 020c 	bic.w	r2, r3, #12
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5e:	498c      	ldr	r1, [pc, #560]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c72:	4b87      	ldr	r3, [pc, #540]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c80:	4983      	ldr	r1, [pc, #524]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c94:	4b7e      	ldr	r3, [pc, #504]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca2:	497b      	ldr	r1, [pc, #492]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cb6:	4b76      	ldr	r3, [pc, #472]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cc4:	4972      	ldr	r1, [pc, #456]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0320 	and.w	r3, r3, #32
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cd8:	4b6d      	ldr	r3, [pc, #436]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce6:	496a      	ldr	r1, [pc, #424]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cfa:	4b65      	ldr	r3, [pc, #404]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d08:	4961      	ldr	r1, [pc, #388]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d2a:	4959      	ldr	r1, [pc, #356]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d3e:	4b54      	ldr	r3, [pc, #336]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d44:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d4c:	4950      	ldr	r1, [pc, #320]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d60:	4b4b      	ldr	r3, [pc, #300]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6e:	4948      	ldr	r1, [pc, #288]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d82:	4b43      	ldr	r3, [pc, #268]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d90:	493f      	ldr	r1, [pc, #252]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d028      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004da4:	4b3a      	ldr	r3, [pc, #232]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004daa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004db2:	4937      	ldr	r1, [pc, #220]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dc2:	d106      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dc4:	4b32      	ldr	r3, [pc, #200]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4a31      	ldr	r2, [pc, #196]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dce:	60d3      	str	r3, [r2, #12]
 8004dd0:	e011      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dd6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004dda:	d10c      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3304      	adds	r3, #4
 8004de0:	2101      	movs	r1, #1
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f8c8 	bl	8004f78 <RCCEx_PLLSAI1_Config>
 8004de8:	4603      	mov	r3, r0
 8004dea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004dec:	7cfb      	ldrb	r3, [r7, #19]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004df2:	7cfb      	ldrb	r3, [r7, #19]
 8004df4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d028      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e02:	4b23      	ldr	r3, [pc, #140]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e08:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e10:	491f      	ldr	r1, [pc, #124]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e20:	d106      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e22:	4b1b      	ldr	r3, [pc, #108]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	4a1a      	ldr	r2, [pc, #104]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e2c:	60d3      	str	r3, [r2, #12]
 8004e2e:	e011      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e38:	d10c      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	2101      	movs	r1, #1
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 f899 	bl	8004f78 <RCCEx_PLLSAI1_Config>
 8004e46:	4603      	mov	r3, r0
 8004e48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e4a:	7cfb      	ldrb	r3, [r7, #19]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e50:	7cfb      	ldrb	r3, [r7, #19]
 8004e52:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d02b      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e60:	4b0b      	ldr	r3, [pc, #44]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e6e:	4908      	ldr	r1, [pc, #32]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e7e:	d109      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e80:	4b03      	ldr	r3, [pc, #12]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	4a02      	ldr	r2, [pc, #8]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e8a:	60d3      	str	r3, [r2, #12]
 8004e8c:	e014      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e8e:	bf00      	nop
 8004e90:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 f867 	bl	8004f78 <RCCEx_PLLSAI1_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eae:	7cfb      	ldrb	r3, [r7, #19]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004eb4:	7cfb      	ldrb	r3, [r7, #19]
 8004eb6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d02f      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ed2:	4928      	ldr	r1, [pc, #160]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ede:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ee2:	d10d      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	2102      	movs	r1, #2
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 f844 	bl	8004f78 <RCCEx_PLLSAI1_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ef4:	7cfb      	ldrb	r3, [r7, #19]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d014      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004efa:	7cfb      	ldrb	r3, [r7, #19]
 8004efc:	74bb      	strb	r3, [r7, #18]
 8004efe:	e011      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f08:	d10c      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3320      	adds	r3, #32
 8004f0e:	2102      	movs	r1, #2
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f925 	bl	8005160 <RCCEx_PLLSAI2_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f1a:	7cfb      	ldrb	r3, [r7, #19]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f20:	7cfb      	ldrb	r3, [r7, #19]
 8004f22:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f30:	4b10      	ldr	r3, [pc, #64]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f36:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f3e:	490d      	ldr	r1, [pc, #52]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00b      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f52:	4b08      	ldr	r3, [pc, #32]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f58:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f62:	4904      	ldr	r1, [pc, #16]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40021000 	.word	0x40021000

08004f78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f86:	4b75      	ldr	r3, [pc, #468]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d018      	beq.n	8004fc4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f92:	4b72      	ldr	r3, [pc, #456]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f003 0203 	and.w	r2, r3, #3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d10d      	bne.n	8004fbe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
       ||
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d009      	beq.n	8004fbe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004faa:	4b6c      	ldr	r3, [pc, #432]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	091b      	lsrs	r3, r3, #4
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
       ||
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d047      	beq.n	800504e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	73fb      	strb	r3, [r7, #15]
 8004fc2:	e044      	b.n	800504e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d018      	beq.n	8004ffe <RCCEx_PLLSAI1_Config+0x86>
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d825      	bhi.n	800501c <RCCEx_PLLSAI1_Config+0xa4>
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d002      	beq.n	8004fda <RCCEx_PLLSAI1_Config+0x62>
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d009      	beq.n	8004fec <RCCEx_PLLSAI1_Config+0x74>
 8004fd8:	e020      	b.n	800501c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fda:	4b60      	ldr	r3, [pc, #384]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d11d      	bne.n	8005022 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fea:	e01a      	b.n	8005022 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fec:	4b5b      	ldr	r3, [pc, #364]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d116      	bne.n	8005026 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ffc:	e013      	b.n	8005026 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ffe:	4b57      	ldr	r3, [pc, #348]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10f      	bne.n	800502a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800500a:	4b54      	ldr	r3, [pc, #336]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d109      	bne.n	800502a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800501a:	e006      	b.n	800502a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	73fb      	strb	r3, [r7, #15]
      break;
 8005020:	e004      	b.n	800502c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005022:	bf00      	nop
 8005024:	e002      	b.n	800502c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005026:	bf00      	nop
 8005028:	e000      	b.n	800502c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800502a:	bf00      	nop
    }

    if(status == HAL_OK)
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10d      	bne.n	800504e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005032:	4b4a      	ldr	r3, [pc, #296]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6819      	ldr	r1, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	3b01      	subs	r3, #1
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	430b      	orrs	r3, r1
 8005048:	4944      	ldr	r1, [pc, #272]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 800504a:	4313      	orrs	r3, r2
 800504c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d17d      	bne.n	8005150 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005054:	4b41      	ldr	r3, [pc, #260]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a40      	ldr	r2, [pc, #256]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 800505a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800505e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005060:	f7fc feb6 	bl	8001dd0 <HAL_GetTick>
 8005064:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005066:	e009      	b.n	800507c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005068:	f7fc feb2 	bl	8001dd0 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d902      	bls.n	800507c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	73fb      	strb	r3, [r7, #15]
        break;
 800507a:	e005      	b.n	8005088 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800507c:	4b37      	ldr	r3, [pc, #220]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1ef      	bne.n	8005068 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d160      	bne.n	8005150 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d111      	bne.n	80050b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005094:	4b31      	ldr	r3, [pc, #196]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800509c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6892      	ldr	r2, [r2, #8]
 80050a4:	0211      	lsls	r1, r2, #8
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	68d2      	ldr	r2, [r2, #12]
 80050aa:	0912      	lsrs	r2, r2, #4
 80050ac:	0452      	lsls	r2, r2, #17
 80050ae:	430a      	orrs	r2, r1
 80050b0:	492a      	ldr	r1, [pc, #168]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	610b      	str	r3, [r1, #16]
 80050b6:	e027      	b.n	8005108 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d112      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050be:	4b27      	ldr	r3, [pc, #156]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80050c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6892      	ldr	r2, [r2, #8]
 80050ce:	0211      	lsls	r1, r2, #8
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6912      	ldr	r2, [r2, #16]
 80050d4:	0852      	lsrs	r2, r2, #1
 80050d6:	3a01      	subs	r2, #1
 80050d8:	0552      	lsls	r2, r2, #21
 80050da:	430a      	orrs	r2, r1
 80050dc:	491f      	ldr	r1, [pc, #124]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	610b      	str	r3, [r1, #16]
 80050e2:	e011      	b.n	8005108 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050e4:	4b1d      	ldr	r3, [pc, #116]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80050ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6892      	ldr	r2, [r2, #8]
 80050f4:	0211      	lsls	r1, r2, #8
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6952      	ldr	r2, [r2, #20]
 80050fa:	0852      	lsrs	r2, r2, #1
 80050fc:	3a01      	subs	r2, #1
 80050fe:	0652      	lsls	r2, r2, #25
 8005100:	430a      	orrs	r2, r1
 8005102:	4916      	ldr	r1, [pc, #88]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005104:	4313      	orrs	r3, r2
 8005106:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005108:	4b14      	ldr	r3, [pc, #80]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a13      	ldr	r2, [pc, #76]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 800510e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005112:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005114:	f7fc fe5c 	bl	8001dd0 <HAL_GetTick>
 8005118:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800511a:	e009      	b.n	8005130 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800511c:	f7fc fe58 	bl	8001dd0 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d902      	bls.n	8005130 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	73fb      	strb	r3, [r7, #15]
          break;
 800512e:	e005      	b.n	800513c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005130:	4b0a      	ldr	r3, [pc, #40]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0ef      	beq.n	800511c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005142:	4b06      	ldr	r3, [pc, #24]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	4904      	ldr	r1, [pc, #16]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 800514c:	4313      	orrs	r3, r2
 800514e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40021000 	.word	0x40021000

08005160 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800516e:	4b6a      	ldr	r3, [pc, #424]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d018      	beq.n	80051ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800517a:	4b67      	ldr	r3, [pc, #412]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f003 0203 	and.w	r2, r3, #3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d10d      	bne.n	80051a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
       ||
 800518e:	2b00      	cmp	r3, #0
 8005190:	d009      	beq.n	80051a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005192:	4b61      	ldr	r3, [pc, #388]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	091b      	lsrs	r3, r3, #4
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
       ||
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d047      	beq.n	8005236 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	73fb      	strb	r3, [r7, #15]
 80051aa:	e044      	b.n	8005236 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d018      	beq.n	80051e6 <RCCEx_PLLSAI2_Config+0x86>
 80051b4:	2b03      	cmp	r3, #3
 80051b6:	d825      	bhi.n	8005204 <RCCEx_PLLSAI2_Config+0xa4>
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d002      	beq.n	80051c2 <RCCEx_PLLSAI2_Config+0x62>
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d009      	beq.n	80051d4 <RCCEx_PLLSAI2_Config+0x74>
 80051c0:	e020      	b.n	8005204 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051c2:	4b55      	ldr	r3, [pc, #340]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d11d      	bne.n	800520a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051d2:	e01a      	b.n	800520a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051d4:	4b50      	ldr	r3, [pc, #320]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d116      	bne.n	800520e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051e4:	e013      	b.n	800520e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051e6:	4b4c      	ldr	r3, [pc, #304]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10f      	bne.n	8005212 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051f2:	4b49      	ldr	r3, [pc, #292]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005202:	e006      	b.n	8005212 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
      break;
 8005208:	e004      	b.n	8005214 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800520a:	bf00      	nop
 800520c:	e002      	b.n	8005214 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800520e:	bf00      	nop
 8005210:	e000      	b.n	8005214 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005212:	bf00      	nop
    }

    if(status == HAL_OK)
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10d      	bne.n	8005236 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800521a:	4b3f      	ldr	r3, [pc, #252]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6819      	ldr	r1, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	3b01      	subs	r3, #1
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	430b      	orrs	r3, r1
 8005230:	4939      	ldr	r1, [pc, #228]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005232:	4313      	orrs	r3, r2
 8005234:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d167      	bne.n	800530c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800523c:	4b36      	ldr	r3, [pc, #216]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a35      	ldr	r2, [pc, #212]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005242:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005248:	f7fc fdc2 	bl	8001dd0 <HAL_GetTick>
 800524c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800524e:	e009      	b.n	8005264 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005250:	f7fc fdbe 	bl	8001dd0 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d902      	bls.n	8005264 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	73fb      	strb	r3, [r7, #15]
        break;
 8005262:	e005      	b.n	8005270 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005264:	4b2c      	ldr	r3, [pc, #176]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1ef      	bne.n	8005250 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d14a      	bne.n	800530c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d111      	bne.n	80052a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800527c:	4b26      	ldr	r3, [pc, #152]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6892      	ldr	r2, [r2, #8]
 800528c:	0211      	lsls	r1, r2, #8
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	68d2      	ldr	r2, [r2, #12]
 8005292:	0912      	lsrs	r2, r2, #4
 8005294:	0452      	lsls	r2, r2, #17
 8005296:	430a      	orrs	r2, r1
 8005298:	491f      	ldr	r1, [pc, #124]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529a:	4313      	orrs	r3, r2
 800529c:	614b      	str	r3, [r1, #20]
 800529e:	e011      	b.n	80052c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80052a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6892      	ldr	r2, [r2, #8]
 80052b0:	0211      	lsls	r1, r2, #8
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6912      	ldr	r2, [r2, #16]
 80052b6:	0852      	lsrs	r2, r2, #1
 80052b8:	3a01      	subs	r2, #1
 80052ba:	0652      	lsls	r2, r2, #25
 80052bc:	430a      	orrs	r2, r1
 80052be:	4916      	ldr	r1, [pc, #88]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80052c4:	4b14      	ldr	r3, [pc, #80]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a13      	ldr	r2, [pc, #76]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d0:	f7fc fd7e 	bl	8001dd0 <HAL_GetTick>
 80052d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052d6:	e009      	b.n	80052ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052d8:	f7fc fd7a 	bl	8001dd0 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d902      	bls.n	80052ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	73fb      	strb	r3, [r7, #15]
          break;
 80052ea:	e005      	b.n	80052f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0ef      	beq.n	80052d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052fe:	4b06      	ldr	r3, [pc, #24]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	4904      	ldr	r1, [pc, #16]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005308:	4313      	orrs	r3, r2
 800530a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40021000 	.word	0x40021000

0800531c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e049      	b.n	80053c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fc fb1e 	bl	8001984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3304      	adds	r3, #4
 8005358:	4619      	mov	r1, r3
 800535a:	4610      	mov	r0, r2
 800535c:	f000 f9d6 	bl	800570c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d001      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e04f      	b.n	8005484 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a23      	ldr	r2, [pc, #140]	@ (8005490 <HAL_TIM_Base_Start_IT+0xc4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d01d      	beq.n	8005442 <HAL_TIM_Base_Start_IT+0x76>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800540e:	d018      	beq.n	8005442 <HAL_TIM_Base_Start_IT+0x76>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a1f      	ldr	r2, [pc, #124]	@ (8005494 <HAL_TIM_Base_Start_IT+0xc8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d013      	beq.n	8005442 <HAL_TIM_Base_Start_IT+0x76>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a1e      	ldr	r2, [pc, #120]	@ (8005498 <HAL_TIM_Base_Start_IT+0xcc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00e      	beq.n	8005442 <HAL_TIM_Base_Start_IT+0x76>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1c      	ldr	r2, [pc, #112]	@ (800549c <HAL_TIM_Base_Start_IT+0xd0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d009      	beq.n	8005442 <HAL_TIM_Base_Start_IT+0x76>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1b      	ldr	r2, [pc, #108]	@ (80054a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d004      	beq.n	8005442 <HAL_TIM_Base_Start_IT+0x76>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a19      	ldr	r2, [pc, #100]	@ (80054a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d115      	bne.n	800546e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	4b17      	ldr	r3, [pc, #92]	@ (80054a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800544a:	4013      	ands	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b06      	cmp	r3, #6
 8005452:	d015      	beq.n	8005480 <HAL_TIM_Base_Start_IT+0xb4>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800545a:	d011      	beq.n	8005480 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546c:	e008      	b.n	8005480 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 0201 	orr.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	e000      	b.n	8005482 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005480:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	40012c00 	.word	0x40012c00
 8005494:	40000400 	.word	0x40000400
 8005498:	40000800 	.word	0x40000800
 800549c:	40000c00 	.word	0x40000c00
 80054a0:	40013400 	.word	0x40013400
 80054a4:	40014000 	.word	0x40014000
 80054a8:	00010007 	.word	0x00010007

080054ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d020      	beq.n	8005510 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01b      	beq.n	8005510 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f06f 0202 	mvn.w	r2, #2
 80054e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f8e9 	bl	80056ce <HAL_TIM_IC_CaptureCallback>
 80054fc:	e005      	b.n	800550a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f8db 	bl	80056ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f8ec 	bl	80056e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b00      	cmp	r3, #0
 8005518:	d020      	beq.n	800555c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01b      	beq.n	800555c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0204 	mvn.w	r2, #4
 800552c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2202      	movs	r2, #2
 8005532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f8c3 	bl	80056ce <HAL_TIM_IC_CaptureCallback>
 8005548:	e005      	b.n	8005556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f8b5 	bl	80056ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f8c6 	bl	80056e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b00      	cmp	r3, #0
 8005564:	d020      	beq.n	80055a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01b      	beq.n	80055a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0208 	mvn.w	r2, #8
 8005578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2204      	movs	r2, #4
 800557e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f89d 	bl	80056ce <HAL_TIM_IC_CaptureCallback>
 8005594:	e005      	b.n	80055a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f88f 	bl	80056ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f8a0 	bl	80056e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d020      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f003 0310 	and.w	r3, r3, #16
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d01b      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0210 	mvn.w	r2, #16
 80055c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2208      	movs	r2, #8
 80055ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f877 	bl	80056ce <HAL_TIM_IC_CaptureCallback>
 80055e0:	e005      	b.n	80055ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f869 	bl	80056ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f87a 	bl	80056e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00c      	beq.n	8005618 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0201 	mvn.w	r2, #1
 8005610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fb feb2 	bl	800137c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800561e:	2b00      	cmp	r3, #0
 8005620:	d104      	bne.n	800562c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00c      	beq.n	8005646 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800563e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f99b 	bl	800597c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00c      	beq.n	800566a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005656:	2b00      	cmp	r3, #0
 8005658:	d007      	beq.n	800566a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f993 	bl	8005990 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00c      	beq.n	800568e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f834 	bl	80056f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00c      	beq.n	80056b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f06f 0220 	mvn.w	r2, #32
 80056aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f95b 	bl	8005968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056b2:	bf00      	nop
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
	...

0800570c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a46      	ldr	r2, [pc, #280]	@ (8005838 <TIM_Base_SetConfig+0x12c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d013      	beq.n	800574c <TIM_Base_SetConfig+0x40>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800572a:	d00f      	beq.n	800574c <TIM_Base_SetConfig+0x40>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a43      	ldr	r2, [pc, #268]	@ (800583c <TIM_Base_SetConfig+0x130>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00b      	beq.n	800574c <TIM_Base_SetConfig+0x40>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a42      	ldr	r2, [pc, #264]	@ (8005840 <TIM_Base_SetConfig+0x134>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d007      	beq.n	800574c <TIM_Base_SetConfig+0x40>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a41      	ldr	r2, [pc, #260]	@ (8005844 <TIM_Base_SetConfig+0x138>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_Base_SetConfig+0x40>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a40      	ldr	r2, [pc, #256]	@ (8005848 <TIM_Base_SetConfig+0x13c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d108      	bne.n	800575e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a35      	ldr	r2, [pc, #212]	@ (8005838 <TIM_Base_SetConfig+0x12c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d01f      	beq.n	80057a6 <TIM_Base_SetConfig+0x9a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800576c:	d01b      	beq.n	80057a6 <TIM_Base_SetConfig+0x9a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a32      	ldr	r2, [pc, #200]	@ (800583c <TIM_Base_SetConfig+0x130>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d017      	beq.n	80057a6 <TIM_Base_SetConfig+0x9a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a31      	ldr	r2, [pc, #196]	@ (8005840 <TIM_Base_SetConfig+0x134>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d013      	beq.n	80057a6 <TIM_Base_SetConfig+0x9a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a30      	ldr	r2, [pc, #192]	@ (8005844 <TIM_Base_SetConfig+0x138>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00f      	beq.n	80057a6 <TIM_Base_SetConfig+0x9a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a2f      	ldr	r2, [pc, #188]	@ (8005848 <TIM_Base_SetConfig+0x13c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00b      	beq.n	80057a6 <TIM_Base_SetConfig+0x9a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2e      	ldr	r2, [pc, #184]	@ (800584c <TIM_Base_SetConfig+0x140>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d007      	beq.n	80057a6 <TIM_Base_SetConfig+0x9a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a2d      	ldr	r2, [pc, #180]	@ (8005850 <TIM_Base_SetConfig+0x144>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d003      	beq.n	80057a6 <TIM_Base_SetConfig+0x9a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005854 <TIM_Base_SetConfig+0x148>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d108      	bne.n	80057b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a16      	ldr	r2, [pc, #88]	@ (8005838 <TIM_Base_SetConfig+0x12c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00f      	beq.n	8005804 <TIM_Base_SetConfig+0xf8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a18      	ldr	r2, [pc, #96]	@ (8005848 <TIM_Base_SetConfig+0x13c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00b      	beq.n	8005804 <TIM_Base_SetConfig+0xf8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a17      	ldr	r2, [pc, #92]	@ (800584c <TIM_Base_SetConfig+0x140>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <TIM_Base_SetConfig+0xf8>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a16      	ldr	r2, [pc, #88]	@ (8005850 <TIM_Base_SetConfig+0x144>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_Base_SetConfig+0xf8>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a15      	ldr	r2, [pc, #84]	@ (8005854 <TIM_Base_SetConfig+0x148>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d103      	bne.n	800580c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	691a      	ldr	r2, [r3, #16]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b01      	cmp	r3, #1
 800581c:	d105      	bne.n	800582a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f023 0201 	bic.w	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	611a      	str	r2, [r3, #16]
  }
}
 800582a:	bf00      	nop
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40012c00 	.word	0x40012c00
 800583c:	40000400 	.word	0x40000400
 8005840:	40000800 	.word	0x40000800
 8005844:	40000c00 	.word	0x40000c00
 8005848:	40013400 	.word	0x40013400
 800584c:	40014000 	.word	0x40014000
 8005850:	40014400 	.word	0x40014400
 8005854:	40014800 	.word	0x40014800

08005858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800586c:	2302      	movs	r3, #2
 800586e:	e068      	b.n	8005942 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a2e      	ldr	r2, [pc, #184]	@ (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d004      	beq.n	80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a2d      	ldr	r2, [pc, #180]	@ (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d108      	bne.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d01d      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e2:	d018      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005958 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d013      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a1a      	ldr	r2, [pc, #104]	@ (800595c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00e      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a18      	ldr	r2, [pc, #96]	@ (8005960 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d009      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a13      	ldr	r2, [pc, #76]	@ (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d004      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a14      	ldr	r2, [pc, #80]	@ (8005964 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d10c      	bne.n	8005930 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800591c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	4313      	orrs	r3, r2
 8005926:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40012c00 	.word	0x40012c00
 8005954:	40013400 	.word	0x40013400
 8005958:	40000400 	.word	0x40000400
 800595c:	40000800 	.word	0x40000800
 8005960:	40000c00 	.word	0x40000c00
 8005964:	40014000 	.word	0x40014000

08005968 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e040      	b.n	8005a38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d106      	bne.n	80059cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fc f810 	bl	80019ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2224      	movs	r2, #36	@ 0x24
 80059d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0201 	bic.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fe90 	bl	8006710 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fbd5 	bl	80061a0 <UART_SetConfig>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e01b      	b.n	8005a38 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 ff0f 	bl	8006854 <UART_CheckIdleState>
 8005a36:	4603      	mov	r3, r0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08a      	sub	sp, #40	@ 0x28
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a54:	2b20      	cmp	r3, #32
 8005a56:	d177      	bne.n	8005b48 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <HAL_UART_Transmit+0x24>
 8005a5e:	88fb      	ldrh	r3, [r7, #6]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e070      	b.n	8005b4a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2221      	movs	r2, #33	@ 0x21
 8005a74:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a76:	f7fc f9ab 	bl	8001dd0 <HAL_GetTick>
 8005a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	88fa      	ldrh	r2, [r7, #6]
 8005a80:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	88fa      	ldrh	r2, [r7, #6]
 8005a88:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a94:	d108      	bne.n	8005aa8 <HAL_UART_Transmit+0x68>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d104      	bne.n	8005aa8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	e003      	b.n	8005ab0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ab0:	e02f      	b.n	8005b12 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2180      	movs	r1, #128	@ 0x80
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 ff71 	bl	80069a4 <UART_WaitOnFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d004      	beq.n	8005ad2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2220      	movs	r2, #32
 8005acc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e03b      	b.n	8005b4a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10b      	bne.n	8005af0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	881a      	ldrh	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ae4:	b292      	uxth	r2, r2
 8005ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	3302      	adds	r3, #2
 8005aec:	61bb      	str	r3, [r7, #24]
 8005aee:	e007      	b.n	8005b00 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	781a      	ldrb	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	3301      	adds	r3, #1
 8005afe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1c9      	bne.n	8005ab2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2200      	movs	r2, #0
 8005b26:	2140      	movs	r1, #64	@ 0x40
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 ff3b 	bl	80069a4 <UART_WaitOnFlagUntilTimeout>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d004      	beq.n	8005b3e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e005      	b.n	8005b4a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2220      	movs	r2, #32
 8005b42:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	e000      	b.n	8005b4a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005b48:	2302      	movs	r3, #2
  }
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3720      	adds	r7, #32
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b0ba      	sub	sp, #232	@ 0xe8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005b7e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005b82:	4013      	ands	r3, r2
 8005b84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005b88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d115      	bne.n	8005bbc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00f      	beq.n	8005bbc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ba0:	f003 0320 	and.w	r3, r3, #32
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d009      	beq.n	8005bbc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 82ca 	beq.w	8006146 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	4798      	blx	r3
      }
      return;
 8005bba:	e2c4      	b.n	8006146 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005bbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 8117 	beq.w	8005df4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d106      	bne.n	8005be0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005bd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005bd6:	4b85      	ldr	r3, [pc, #532]	@ (8005dec <HAL_UART_IRQHandler+0x298>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 810a 	beq.w	8005df4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d011      	beq.n	8005c10 <HAL_UART_IRQHandler+0xbc>
 8005bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00b      	beq.n	8005c10 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c06:	f043 0201 	orr.w	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d011      	beq.n	8005c40 <HAL_UART_IRQHandler+0xec>
 8005c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00b      	beq.n	8005c40 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c36:	f043 0204 	orr.w	r2, r3, #4
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d011      	beq.n	8005c70 <HAL_UART_IRQHandler+0x11c>
 8005c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00b      	beq.n	8005c70 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2204      	movs	r2, #4
 8005c5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c66:	f043 0202 	orr.w	r2, r3, #2
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d017      	beq.n	8005cac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d105      	bne.n	8005c94 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c8c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00b      	beq.n	8005cac <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2208      	movs	r2, #8
 8005c9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ca2:	f043 0208 	orr.w	r2, r3, #8
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d012      	beq.n	8005cde <HAL_UART_IRQHandler+0x18a>
 8005cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00c      	beq.n	8005cde <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ccc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cd4:	f043 0220 	orr.w	r2, r3, #32
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 8230 	beq.w	800614a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00d      	beq.n	8005d12 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d26:	2b40      	cmp	r3, #64	@ 0x40
 8005d28:	d005      	beq.n	8005d36 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d2e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d04f      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fea1 	bl	8006a7e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d46:	2b40      	cmp	r3, #64	@ 0x40
 8005d48:	d141      	bne.n	8005dce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3308      	adds	r3, #8
 8005d50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3308      	adds	r3, #8
 8005d72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1d9      	bne.n	8005d4a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d013      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005da2:	4a13      	ldr	r2, [pc, #76]	@ (8005df0 <HAL_UART_IRQHandler+0x29c>)
 8005da4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fc f98f 	bl	80020ce <HAL_DMA_Abort_IT>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d017      	beq.n	8005de6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc4:	e00f      	b.n	8005de6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f9d4 	bl	8006174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	e00b      	b.n	8005de6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f9d0 	bl	8006174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd4:	e007      	b.n	8005de6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f9cc 	bl	8006174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005de4:	e1b1      	b.n	800614a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de6:	bf00      	nop
    return;
 8005de8:	e1af      	b.n	800614a <HAL_UART_IRQHandler+0x5f6>
 8005dea:	bf00      	nop
 8005dec:	04000120 	.word	0x04000120
 8005df0:	08006b47 	.word	0x08006b47

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	f040 816a 	bne.w	80060d2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 8163 	beq.w	80060d2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e10:	f003 0310 	and.w	r3, r3, #16
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 815c 	beq.w	80060d2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2210      	movs	r2, #16
 8005e20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e2c:	2b40      	cmp	r3, #64	@ 0x40
 8005e2e:	f040 80d4 	bne.w	8005fda <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e3e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 80ad 	beq.w	8005fa2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e52:	429a      	cmp	r2, r3
 8005e54:	f080 80a5 	bcs.w	8005fa2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e5e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f040 8086 	bne.w	8005f80 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ea2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005eaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1da      	bne.n	8005e74 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ece:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ed0:	f023 0301 	bic.w	r3, r3, #1
 8005ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3308      	adds	r3, #8
 8005ede:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ee2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005eea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e1      	bne.n	8005ebe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3308      	adds	r3, #8
 8005f00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3308      	adds	r3, #8
 8005f1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e3      	bne.n	8005efa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f50:	f023 0310 	bic.w	r3, r3, #16
 8005f54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e4      	bne.n	8005f40 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fc f869 	bl	8002052 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f8f4 	bl	8006188 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005fa0:	e0d5      	b.n	800614e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005fa8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fac:	429a      	cmp	r2, r3
 8005fae:	f040 80ce 	bne.w	800614e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	f040 80c5 	bne.w	800614e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f8d8 	bl	8006188 <HAL_UARTEx_RxEventCallback>
      return;
 8005fd8:	e0b9      	b.n	800614e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 80ab 	beq.w	8006152 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005ffc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 80a6 	beq.w	8006152 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006016:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800601a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006028:	647b      	str	r3, [r7, #68]	@ 0x44
 800602a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800602e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006030:	e841 2300 	strex	r3, r2, [r1]
 8006034:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e4      	bne.n	8006006 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3308      	adds	r3, #8
 8006042:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	623b      	str	r3, [r7, #32]
   return(result);
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	f023 0301 	bic.w	r3, r3, #1
 8006052:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3308      	adds	r3, #8
 800605c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006060:	633a      	str	r2, [r7, #48]	@ 0x30
 8006062:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006064:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006068:	e841 2300 	strex	r3, r2, [r1]
 800606c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800606e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e3      	bne.n	800603c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2220      	movs	r2, #32
 8006078:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	60fb      	str	r3, [r7, #12]
   return(result);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f023 0310 	bic.w	r3, r3, #16
 800609c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	461a      	mov	r2, r3
 80060a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80060aa:	61fb      	str	r3, [r7, #28]
 80060ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	69b9      	ldr	r1, [r7, #24]
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	617b      	str	r3, [r7, #20]
   return(result);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e4      	bne.n	8006088 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2202      	movs	r2, #2
 80060c2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f85c 	bl	8006188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060d0:	e03f      	b.n	8006152 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00e      	beq.n	80060fc <HAL_UART_IRQHandler+0x5a8>
 80060de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d008      	beq.n	80060fc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80060f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fd66 	bl	8006bc6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060fa:	e02d      	b.n	8006158 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80060fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00e      	beq.n	8006126 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800610c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006110:	2b00      	cmp	r3, #0
 8006112:	d008      	beq.n	8006126 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01c      	beq.n	8006156 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	4798      	blx	r3
    }
    return;
 8006124:	e017      	b.n	8006156 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800612a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612e:	2b00      	cmp	r3, #0
 8006130:	d012      	beq.n	8006158 <HAL_UART_IRQHandler+0x604>
 8006132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00c      	beq.n	8006158 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fd17 	bl	8006b72 <UART_EndTransmit_IT>
    return;
 8006144:	e008      	b.n	8006158 <HAL_UART_IRQHandler+0x604>
      return;
 8006146:	bf00      	nop
 8006148:	e006      	b.n	8006158 <HAL_UART_IRQHandler+0x604>
    return;
 800614a:	bf00      	nop
 800614c:	e004      	b.n	8006158 <HAL_UART_IRQHandler+0x604>
      return;
 800614e:	bf00      	nop
 8006150:	e002      	b.n	8006158 <HAL_UART_IRQHandler+0x604>
      return;
 8006152:	bf00      	nop
 8006154:	e000      	b.n	8006158 <HAL_UART_IRQHandler+0x604>
    return;
 8006156:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006158:	37e8      	adds	r7, #232	@ 0xe8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop

08006160 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061a4:	b08a      	sub	sp, #40	@ 0x28
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	431a      	orrs	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	431a      	orrs	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	4ba4      	ldr	r3, [pc, #656]	@ (8006460 <UART_SetConfig+0x2c0>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061d8:	430b      	orrs	r3, r1
 80061da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a99      	ldr	r2, [pc, #612]	@ (8006464 <UART_SetConfig+0x2c4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d004      	beq.n	800620c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006208:	4313      	orrs	r3, r2
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800621c:	430a      	orrs	r2, r1
 800621e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a90      	ldr	r2, [pc, #576]	@ (8006468 <UART_SetConfig+0x2c8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d126      	bne.n	8006278 <UART_SetConfig+0xd8>
 800622a:	4b90      	ldr	r3, [pc, #576]	@ (800646c <UART_SetConfig+0x2cc>)
 800622c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006230:	f003 0303 	and.w	r3, r3, #3
 8006234:	2b03      	cmp	r3, #3
 8006236:	d81b      	bhi.n	8006270 <UART_SetConfig+0xd0>
 8006238:	a201      	add	r2, pc, #4	@ (adr r2, 8006240 <UART_SetConfig+0xa0>)
 800623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623e:	bf00      	nop
 8006240:	08006251 	.word	0x08006251
 8006244:	08006261 	.word	0x08006261
 8006248:	08006259 	.word	0x08006259
 800624c:	08006269 	.word	0x08006269
 8006250:	2301      	movs	r3, #1
 8006252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006256:	e116      	b.n	8006486 <UART_SetConfig+0x2e6>
 8006258:	2302      	movs	r3, #2
 800625a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800625e:	e112      	b.n	8006486 <UART_SetConfig+0x2e6>
 8006260:	2304      	movs	r3, #4
 8006262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006266:	e10e      	b.n	8006486 <UART_SetConfig+0x2e6>
 8006268:	2308      	movs	r3, #8
 800626a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800626e:	e10a      	b.n	8006486 <UART_SetConfig+0x2e6>
 8006270:	2310      	movs	r3, #16
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006276:	e106      	b.n	8006486 <UART_SetConfig+0x2e6>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a7c      	ldr	r2, [pc, #496]	@ (8006470 <UART_SetConfig+0x2d0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d138      	bne.n	80062f4 <UART_SetConfig+0x154>
 8006282:	4b7a      	ldr	r3, [pc, #488]	@ (800646c <UART_SetConfig+0x2cc>)
 8006284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006288:	f003 030c 	and.w	r3, r3, #12
 800628c:	2b0c      	cmp	r3, #12
 800628e:	d82d      	bhi.n	80062ec <UART_SetConfig+0x14c>
 8006290:	a201      	add	r2, pc, #4	@ (adr r2, 8006298 <UART_SetConfig+0xf8>)
 8006292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006296:	bf00      	nop
 8006298:	080062cd 	.word	0x080062cd
 800629c:	080062ed 	.word	0x080062ed
 80062a0:	080062ed 	.word	0x080062ed
 80062a4:	080062ed 	.word	0x080062ed
 80062a8:	080062dd 	.word	0x080062dd
 80062ac:	080062ed 	.word	0x080062ed
 80062b0:	080062ed 	.word	0x080062ed
 80062b4:	080062ed 	.word	0x080062ed
 80062b8:	080062d5 	.word	0x080062d5
 80062bc:	080062ed 	.word	0x080062ed
 80062c0:	080062ed 	.word	0x080062ed
 80062c4:	080062ed 	.word	0x080062ed
 80062c8:	080062e5 	.word	0x080062e5
 80062cc:	2300      	movs	r3, #0
 80062ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062d2:	e0d8      	b.n	8006486 <UART_SetConfig+0x2e6>
 80062d4:	2302      	movs	r3, #2
 80062d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062da:	e0d4      	b.n	8006486 <UART_SetConfig+0x2e6>
 80062dc:	2304      	movs	r3, #4
 80062de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062e2:	e0d0      	b.n	8006486 <UART_SetConfig+0x2e6>
 80062e4:	2308      	movs	r3, #8
 80062e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ea:	e0cc      	b.n	8006486 <UART_SetConfig+0x2e6>
 80062ec:	2310      	movs	r3, #16
 80062ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062f2:	e0c8      	b.n	8006486 <UART_SetConfig+0x2e6>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a5e      	ldr	r2, [pc, #376]	@ (8006474 <UART_SetConfig+0x2d4>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d125      	bne.n	800634a <UART_SetConfig+0x1aa>
 80062fe:	4b5b      	ldr	r3, [pc, #364]	@ (800646c <UART_SetConfig+0x2cc>)
 8006300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006304:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006308:	2b30      	cmp	r3, #48	@ 0x30
 800630a:	d016      	beq.n	800633a <UART_SetConfig+0x19a>
 800630c:	2b30      	cmp	r3, #48	@ 0x30
 800630e:	d818      	bhi.n	8006342 <UART_SetConfig+0x1a2>
 8006310:	2b20      	cmp	r3, #32
 8006312:	d00a      	beq.n	800632a <UART_SetConfig+0x18a>
 8006314:	2b20      	cmp	r3, #32
 8006316:	d814      	bhi.n	8006342 <UART_SetConfig+0x1a2>
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <UART_SetConfig+0x182>
 800631c:	2b10      	cmp	r3, #16
 800631e:	d008      	beq.n	8006332 <UART_SetConfig+0x192>
 8006320:	e00f      	b.n	8006342 <UART_SetConfig+0x1a2>
 8006322:	2300      	movs	r3, #0
 8006324:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006328:	e0ad      	b.n	8006486 <UART_SetConfig+0x2e6>
 800632a:	2302      	movs	r3, #2
 800632c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006330:	e0a9      	b.n	8006486 <UART_SetConfig+0x2e6>
 8006332:	2304      	movs	r3, #4
 8006334:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006338:	e0a5      	b.n	8006486 <UART_SetConfig+0x2e6>
 800633a:	2308      	movs	r3, #8
 800633c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006340:	e0a1      	b.n	8006486 <UART_SetConfig+0x2e6>
 8006342:	2310      	movs	r3, #16
 8006344:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006348:	e09d      	b.n	8006486 <UART_SetConfig+0x2e6>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a4a      	ldr	r2, [pc, #296]	@ (8006478 <UART_SetConfig+0x2d8>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d125      	bne.n	80063a0 <UART_SetConfig+0x200>
 8006354:	4b45      	ldr	r3, [pc, #276]	@ (800646c <UART_SetConfig+0x2cc>)
 8006356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800635a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800635e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006360:	d016      	beq.n	8006390 <UART_SetConfig+0x1f0>
 8006362:	2bc0      	cmp	r3, #192	@ 0xc0
 8006364:	d818      	bhi.n	8006398 <UART_SetConfig+0x1f8>
 8006366:	2b80      	cmp	r3, #128	@ 0x80
 8006368:	d00a      	beq.n	8006380 <UART_SetConfig+0x1e0>
 800636a:	2b80      	cmp	r3, #128	@ 0x80
 800636c:	d814      	bhi.n	8006398 <UART_SetConfig+0x1f8>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <UART_SetConfig+0x1d8>
 8006372:	2b40      	cmp	r3, #64	@ 0x40
 8006374:	d008      	beq.n	8006388 <UART_SetConfig+0x1e8>
 8006376:	e00f      	b.n	8006398 <UART_SetConfig+0x1f8>
 8006378:	2300      	movs	r3, #0
 800637a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800637e:	e082      	b.n	8006486 <UART_SetConfig+0x2e6>
 8006380:	2302      	movs	r3, #2
 8006382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006386:	e07e      	b.n	8006486 <UART_SetConfig+0x2e6>
 8006388:	2304      	movs	r3, #4
 800638a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800638e:	e07a      	b.n	8006486 <UART_SetConfig+0x2e6>
 8006390:	2308      	movs	r3, #8
 8006392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006396:	e076      	b.n	8006486 <UART_SetConfig+0x2e6>
 8006398:	2310      	movs	r3, #16
 800639a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800639e:	e072      	b.n	8006486 <UART_SetConfig+0x2e6>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a35      	ldr	r2, [pc, #212]	@ (800647c <UART_SetConfig+0x2dc>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d12a      	bne.n	8006400 <UART_SetConfig+0x260>
 80063aa:	4b30      	ldr	r3, [pc, #192]	@ (800646c <UART_SetConfig+0x2cc>)
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063b8:	d01a      	beq.n	80063f0 <UART_SetConfig+0x250>
 80063ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063be:	d81b      	bhi.n	80063f8 <UART_SetConfig+0x258>
 80063c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063c4:	d00c      	beq.n	80063e0 <UART_SetConfig+0x240>
 80063c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ca:	d815      	bhi.n	80063f8 <UART_SetConfig+0x258>
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <UART_SetConfig+0x238>
 80063d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063d4:	d008      	beq.n	80063e8 <UART_SetConfig+0x248>
 80063d6:	e00f      	b.n	80063f8 <UART_SetConfig+0x258>
 80063d8:	2300      	movs	r3, #0
 80063da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063de:	e052      	b.n	8006486 <UART_SetConfig+0x2e6>
 80063e0:	2302      	movs	r3, #2
 80063e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063e6:	e04e      	b.n	8006486 <UART_SetConfig+0x2e6>
 80063e8:	2304      	movs	r3, #4
 80063ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ee:	e04a      	b.n	8006486 <UART_SetConfig+0x2e6>
 80063f0:	2308      	movs	r3, #8
 80063f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063f6:	e046      	b.n	8006486 <UART_SetConfig+0x2e6>
 80063f8:	2310      	movs	r3, #16
 80063fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063fe:	e042      	b.n	8006486 <UART_SetConfig+0x2e6>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a17      	ldr	r2, [pc, #92]	@ (8006464 <UART_SetConfig+0x2c4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d13a      	bne.n	8006480 <UART_SetConfig+0x2e0>
 800640a:	4b18      	ldr	r3, [pc, #96]	@ (800646c <UART_SetConfig+0x2cc>)
 800640c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006410:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006414:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006418:	d01a      	beq.n	8006450 <UART_SetConfig+0x2b0>
 800641a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800641e:	d81b      	bhi.n	8006458 <UART_SetConfig+0x2b8>
 8006420:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006424:	d00c      	beq.n	8006440 <UART_SetConfig+0x2a0>
 8006426:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800642a:	d815      	bhi.n	8006458 <UART_SetConfig+0x2b8>
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <UART_SetConfig+0x298>
 8006430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006434:	d008      	beq.n	8006448 <UART_SetConfig+0x2a8>
 8006436:	e00f      	b.n	8006458 <UART_SetConfig+0x2b8>
 8006438:	2300      	movs	r3, #0
 800643a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800643e:	e022      	b.n	8006486 <UART_SetConfig+0x2e6>
 8006440:	2302      	movs	r3, #2
 8006442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006446:	e01e      	b.n	8006486 <UART_SetConfig+0x2e6>
 8006448:	2304      	movs	r3, #4
 800644a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800644e:	e01a      	b.n	8006486 <UART_SetConfig+0x2e6>
 8006450:	2308      	movs	r3, #8
 8006452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006456:	e016      	b.n	8006486 <UART_SetConfig+0x2e6>
 8006458:	2310      	movs	r3, #16
 800645a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800645e:	e012      	b.n	8006486 <UART_SetConfig+0x2e6>
 8006460:	efff69f3 	.word	0xefff69f3
 8006464:	40008000 	.word	0x40008000
 8006468:	40013800 	.word	0x40013800
 800646c:	40021000 	.word	0x40021000
 8006470:	40004400 	.word	0x40004400
 8006474:	40004800 	.word	0x40004800
 8006478:	40004c00 	.word	0x40004c00
 800647c:	40005000 	.word	0x40005000
 8006480:	2310      	movs	r3, #16
 8006482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a9f      	ldr	r2, [pc, #636]	@ (8006708 <UART_SetConfig+0x568>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d17a      	bne.n	8006586 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006490:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006494:	2b08      	cmp	r3, #8
 8006496:	d824      	bhi.n	80064e2 <UART_SetConfig+0x342>
 8006498:	a201      	add	r2, pc, #4	@ (adr r2, 80064a0 <UART_SetConfig+0x300>)
 800649a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649e:	bf00      	nop
 80064a0:	080064c5 	.word	0x080064c5
 80064a4:	080064e3 	.word	0x080064e3
 80064a8:	080064cd 	.word	0x080064cd
 80064ac:	080064e3 	.word	0x080064e3
 80064b0:	080064d3 	.word	0x080064d3
 80064b4:	080064e3 	.word	0x080064e3
 80064b8:	080064e3 	.word	0x080064e3
 80064bc:	080064e3 	.word	0x080064e3
 80064c0:	080064db 	.word	0x080064db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c4:	f7fe f9e2 	bl	800488c <HAL_RCC_GetPCLK1Freq>
 80064c8:	61f8      	str	r0, [r7, #28]
        break;
 80064ca:	e010      	b.n	80064ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064cc:	4b8f      	ldr	r3, [pc, #572]	@ (800670c <UART_SetConfig+0x56c>)
 80064ce:	61fb      	str	r3, [r7, #28]
        break;
 80064d0:	e00d      	b.n	80064ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064d2:	f7fe f943 	bl	800475c <HAL_RCC_GetSysClockFreq>
 80064d6:	61f8      	str	r0, [r7, #28]
        break;
 80064d8:	e009      	b.n	80064ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064de:	61fb      	str	r3, [r7, #28]
        break;
 80064e0:	e005      	b.n	80064ee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80064ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 80fb 	beq.w	80066ec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	4613      	mov	r3, r2
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	4413      	add	r3, r2
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	429a      	cmp	r2, r3
 8006504:	d305      	bcc.n	8006512 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	429a      	cmp	r2, r3
 8006510:	d903      	bls.n	800651a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006518:	e0e8      	b.n	80066ec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	2200      	movs	r2, #0
 800651e:	461c      	mov	r4, r3
 8006520:	4615      	mov	r5, r2
 8006522:	f04f 0200 	mov.w	r2, #0
 8006526:	f04f 0300 	mov.w	r3, #0
 800652a:	022b      	lsls	r3, r5, #8
 800652c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006530:	0222      	lsls	r2, r4, #8
 8006532:	68f9      	ldr	r1, [r7, #12]
 8006534:	6849      	ldr	r1, [r1, #4]
 8006536:	0849      	lsrs	r1, r1, #1
 8006538:	2000      	movs	r0, #0
 800653a:	4688      	mov	r8, r1
 800653c:	4681      	mov	r9, r0
 800653e:	eb12 0a08 	adds.w	sl, r2, r8
 8006542:	eb43 0b09 	adc.w	fp, r3, r9
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	603b      	str	r3, [r7, #0]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006554:	4650      	mov	r0, sl
 8006556:	4659      	mov	r1, fp
 8006558:	f7fa fb46 	bl	8000be8 <__aeabi_uldivmod>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4613      	mov	r3, r2
 8006562:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800656a:	d308      	bcc.n	800657e <UART_SetConfig+0x3de>
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006572:	d204      	bcs.n	800657e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	60da      	str	r2, [r3, #12]
 800657c:	e0b6      	b.n	80066ec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006584:	e0b2      	b.n	80066ec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800658e:	d15e      	bne.n	800664e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006590:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006594:	2b08      	cmp	r3, #8
 8006596:	d828      	bhi.n	80065ea <UART_SetConfig+0x44a>
 8006598:	a201      	add	r2, pc, #4	@ (adr r2, 80065a0 <UART_SetConfig+0x400>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	080065c5 	.word	0x080065c5
 80065a4:	080065cd 	.word	0x080065cd
 80065a8:	080065d5 	.word	0x080065d5
 80065ac:	080065eb 	.word	0x080065eb
 80065b0:	080065db 	.word	0x080065db
 80065b4:	080065eb 	.word	0x080065eb
 80065b8:	080065eb 	.word	0x080065eb
 80065bc:	080065eb 	.word	0x080065eb
 80065c0:	080065e3 	.word	0x080065e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c4:	f7fe f962 	bl	800488c <HAL_RCC_GetPCLK1Freq>
 80065c8:	61f8      	str	r0, [r7, #28]
        break;
 80065ca:	e014      	b.n	80065f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065cc:	f7fe f974 	bl	80048b8 <HAL_RCC_GetPCLK2Freq>
 80065d0:	61f8      	str	r0, [r7, #28]
        break;
 80065d2:	e010      	b.n	80065f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065d4:	4b4d      	ldr	r3, [pc, #308]	@ (800670c <UART_SetConfig+0x56c>)
 80065d6:	61fb      	str	r3, [r7, #28]
        break;
 80065d8:	e00d      	b.n	80065f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065da:	f7fe f8bf 	bl	800475c <HAL_RCC_GetSysClockFreq>
 80065de:	61f8      	str	r0, [r7, #28]
        break;
 80065e0:	e009      	b.n	80065f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065e6:	61fb      	str	r3, [r7, #28]
        break;
 80065e8:	e005      	b.n	80065f6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80065f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d077      	beq.n	80066ec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	005a      	lsls	r2, r3, #1
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	085b      	lsrs	r3, r3, #1
 8006606:	441a      	add	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006610:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	2b0f      	cmp	r3, #15
 8006616:	d916      	bls.n	8006646 <UART_SetConfig+0x4a6>
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800661e:	d212      	bcs.n	8006646 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	b29b      	uxth	r3, r3
 8006624:	f023 030f 	bic.w	r3, r3, #15
 8006628:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	085b      	lsrs	r3, r3, #1
 800662e:	b29b      	uxth	r3, r3
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	b29a      	uxth	r2, r3
 8006636:	8afb      	ldrh	r3, [r7, #22]
 8006638:	4313      	orrs	r3, r2
 800663a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	8afa      	ldrh	r2, [r7, #22]
 8006642:	60da      	str	r2, [r3, #12]
 8006644:	e052      	b.n	80066ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800664c:	e04e      	b.n	80066ec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800664e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006652:	2b08      	cmp	r3, #8
 8006654:	d827      	bhi.n	80066a6 <UART_SetConfig+0x506>
 8006656:	a201      	add	r2, pc, #4	@ (adr r2, 800665c <UART_SetConfig+0x4bc>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	08006681 	.word	0x08006681
 8006660:	08006689 	.word	0x08006689
 8006664:	08006691 	.word	0x08006691
 8006668:	080066a7 	.word	0x080066a7
 800666c:	08006697 	.word	0x08006697
 8006670:	080066a7 	.word	0x080066a7
 8006674:	080066a7 	.word	0x080066a7
 8006678:	080066a7 	.word	0x080066a7
 800667c:	0800669f 	.word	0x0800669f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006680:	f7fe f904 	bl	800488c <HAL_RCC_GetPCLK1Freq>
 8006684:	61f8      	str	r0, [r7, #28]
        break;
 8006686:	e014      	b.n	80066b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006688:	f7fe f916 	bl	80048b8 <HAL_RCC_GetPCLK2Freq>
 800668c:	61f8      	str	r0, [r7, #28]
        break;
 800668e:	e010      	b.n	80066b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006690:	4b1e      	ldr	r3, [pc, #120]	@ (800670c <UART_SetConfig+0x56c>)
 8006692:	61fb      	str	r3, [r7, #28]
        break;
 8006694:	e00d      	b.n	80066b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006696:	f7fe f861 	bl	800475c <HAL_RCC_GetSysClockFreq>
 800669a:	61f8      	str	r0, [r7, #28]
        break;
 800669c:	e009      	b.n	80066b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800669e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066a2:	61fb      	str	r3, [r7, #28]
        break;
 80066a4:	e005      	b.n	80066b2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80066b0:	bf00      	nop
    }

    if (pclk != 0U)
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d019      	beq.n	80066ec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	085a      	lsrs	r2, r3, #1
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	441a      	add	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	2b0f      	cmp	r3, #15
 80066d0:	d909      	bls.n	80066e6 <UART_SetConfig+0x546>
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066d8:	d205      	bcs.n	80066e6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	60da      	str	r2, [r3, #12]
 80066e4:	e002      	b.n	80066ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80066f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3728      	adds	r7, #40	@ 0x28
 8006700:	46bd      	mov	sp, r7
 8006702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006706:	bf00      	nop
 8006708:	40008000 	.word	0x40008000
 800670c:	00f42400 	.word	0x00f42400

08006710 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671c:	f003 0308 	and.w	r3, r3, #8
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00a      	beq.n	800673a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00a      	beq.n	800675c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00a      	beq.n	800677e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006782:	f003 0304 	and.w	r3, r3, #4
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a4:	f003 0310 	and.w	r3, r3, #16
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d01a      	beq.n	8006826 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800680e:	d10a      	bne.n	8006826 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	430a      	orrs	r2, r1
 8006846:	605a      	str	r2, [r3, #4]
  }
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b098      	sub	sp, #96	@ 0x60
 8006858:	af02      	add	r7, sp, #8
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006864:	f7fb fab4 	bl	8001dd0 <HAL_GetTick>
 8006868:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0308 	and.w	r3, r3, #8
 8006874:	2b08      	cmp	r3, #8
 8006876:	d12e      	bne.n	80068d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006878:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006880:	2200      	movs	r2, #0
 8006882:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f88c 	bl	80069a4 <UART_WaitOnFlagUntilTimeout>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d021      	beq.n	80068d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689a:	e853 3f00 	ldrex	r3, [r3]
 800689e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	461a      	mov	r2, r3
 80068ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80068b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068b8:	e841 2300 	strex	r3, r2, [r1]
 80068bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1e6      	bne.n	8006892 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2220      	movs	r2, #32
 80068c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e062      	b.n	800699c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d149      	bne.n	8006978 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068ec:	2200      	movs	r2, #0
 80068ee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f856 	bl	80069a4 <UART_WaitOnFlagUntilTimeout>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d03c      	beq.n	8006978 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006906:	e853 3f00 	ldrex	r3, [r3]
 800690a:	623b      	str	r3, [r7, #32]
   return(result);
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	461a      	mov	r2, r3
 800691a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800691c:	633b      	str	r3, [r7, #48]	@ 0x30
 800691e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006924:	e841 2300 	strex	r3, r2, [r1]
 8006928:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800692a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e6      	bne.n	80068fe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3308      	adds	r3, #8
 8006936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 0301 	bic.w	r3, r3, #1
 8006946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3308      	adds	r3, #8
 800694e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006950:	61fa      	str	r2, [r7, #28]
 8006952:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	69b9      	ldr	r1, [r7, #24]
 8006956:	69fa      	ldr	r2, [r7, #28]
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	617b      	str	r3, [r7, #20]
   return(result);
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e5      	bne.n	8006930 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e011      	b.n	800699c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2220      	movs	r2, #32
 800697c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3758      	adds	r7, #88	@ 0x58
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	603b      	str	r3, [r7, #0]
 80069b0:	4613      	mov	r3, r2
 80069b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069b4:	e04f      	b.n	8006a56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069bc:	d04b      	beq.n	8006a56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069be:	f7fb fa07 	bl	8001dd0 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d302      	bcc.n	80069d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e04e      	b.n	8006a76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d037      	beq.n	8006a56 <UART_WaitOnFlagUntilTimeout+0xb2>
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b80      	cmp	r3, #128	@ 0x80
 80069ea:	d034      	beq.n	8006a56 <UART_WaitOnFlagUntilTimeout+0xb2>
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b40      	cmp	r3, #64	@ 0x40
 80069f0:	d031      	beq.n	8006a56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f003 0308 	and.w	r3, r3, #8
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d110      	bne.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2208      	movs	r2, #8
 8006a06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 f838 	bl	8006a7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2208      	movs	r2, #8
 8006a12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e029      	b.n	8006a76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a30:	d111      	bne.n	8006a56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f81e 	bl	8006a7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e00f      	b.n	8006a76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69da      	ldr	r2, [r3, #28]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	bf0c      	ite	eq
 8006a66:	2301      	moveq	r3, #1
 8006a68:	2300      	movne	r3, #0
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d0a0      	beq.n	80069b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b095      	sub	sp, #84	@ 0x54
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006aa6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006aaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e6      	bne.n	8006a86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3308      	adds	r3, #8
 8006abe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	f023 0301 	bic.w	r3, r3, #1
 8006ace:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ad8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ada:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e5      	bne.n	8006ab8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d118      	bne.n	8006b26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f023 0310 	bic.w	r3, r3, #16
 8006b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b12:	61bb      	str	r3, [r7, #24]
 8006b14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	6979      	ldr	r1, [r7, #20]
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	e841 2300 	strex	r3, r2, [r1]
 8006b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1e6      	bne.n	8006af4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006b3a:	bf00      	nop
 8006b3c:	3754      	adds	r7, #84	@ 0x54
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7ff fb05 	bl	8006174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b088      	sub	sp, #32
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	e853 3f00 	ldrex	r3, [r3]
 8006b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b8e:	61fb      	str	r3, [r7, #28]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	61bb      	str	r3, [r7, #24]
 8006b9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6979      	ldr	r1, [r7, #20]
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e6      	bne.n	8006b7a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff fad1 	bl	8006160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bbe:	bf00      	nop
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006bce:	bf00      	nop
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
	...

08006bdc <std>:
 8006bdc:	2300      	movs	r3, #0
 8006bde:	b510      	push	{r4, lr}
 8006be0:	4604      	mov	r4, r0
 8006be2:	e9c0 3300 	strd	r3, r3, [r0]
 8006be6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bea:	6083      	str	r3, [r0, #8]
 8006bec:	8181      	strh	r1, [r0, #12]
 8006bee:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bf0:	81c2      	strh	r2, [r0, #14]
 8006bf2:	6183      	str	r3, [r0, #24]
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	2208      	movs	r2, #8
 8006bf8:	305c      	adds	r0, #92	@ 0x5c
 8006bfa:	f000 f9f9 	bl	8006ff0 <memset>
 8006bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006c34 <std+0x58>)
 8006c00:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c02:	4b0d      	ldr	r3, [pc, #52]	@ (8006c38 <std+0x5c>)
 8006c04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c06:	4b0d      	ldr	r3, [pc, #52]	@ (8006c3c <std+0x60>)
 8006c08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c40 <std+0x64>)
 8006c0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c44 <std+0x68>)
 8006c10:	6224      	str	r4, [r4, #32]
 8006c12:	429c      	cmp	r4, r3
 8006c14:	d006      	beq.n	8006c24 <std+0x48>
 8006c16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c1a:	4294      	cmp	r4, r2
 8006c1c:	d002      	beq.n	8006c24 <std+0x48>
 8006c1e:	33d0      	adds	r3, #208	@ 0xd0
 8006c20:	429c      	cmp	r4, r3
 8006c22:	d105      	bne.n	8006c30 <std+0x54>
 8006c24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c2c:	f000 ba58 	b.w	80070e0 <__retarget_lock_init_recursive>
 8006c30:	bd10      	pop	{r4, pc}
 8006c32:	bf00      	nop
 8006c34:	08006e41 	.word	0x08006e41
 8006c38:	08006e63 	.word	0x08006e63
 8006c3c:	08006e9b 	.word	0x08006e9b
 8006c40:	08006ebf 	.word	0x08006ebf
 8006c44:	20000228 	.word	0x20000228

08006c48 <stdio_exit_handler>:
 8006c48:	4a02      	ldr	r2, [pc, #8]	@ (8006c54 <stdio_exit_handler+0xc>)
 8006c4a:	4903      	ldr	r1, [pc, #12]	@ (8006c58 <stdio_exit_handler+0x10>)
 8006c4c:	4803      	ldr	r0, [pc, #12]	@ (8006c5c <stdio_exit_handler+0x14>)
 8006c4e:	f000 b869 	b.w	8006d24 <_fwalk_sglue>
 8006c52:	bf00      	nop
 8006c54:	20000014 	.word	0x20000014
 8006c58:	0800797d 	.word	0x0800797d
 8006c5c:	20000024 	.word	0x20000024

08006c60 <cleanup_stdio>:
 8006c60:	6841      	ldr	r1, [r0, #4]
 8006c62:	4b0c      	ldr	r3, [pc, #48]	@ (8006c94 <cleanup_stdio+0x34>)
 8006c64:	4299      	cmp	r1, r3
 8006c66:	b510      	push	{r4, lr}
 8006c68:	4604      	mov	r4, r0
 8006c6a:	d001      	beq.n	8006c70 <cleanup_stdio+0x10>
 8006c6c:	f000 fe86 	bl	800797c <_fflush_r>
 8006c70:	68a1      	ldr	r1, [r4, #8]
 8006c72:	4b09      	ldr	r3, [pc, #36]	@ (8006c98 <cleanup_stdio+0x38>)
 8006c74:	4299      	cmp	r1, r3
 8006c76:	d002      	beq.n	8006c7e <cleanup_stdio+0x1e>
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f000 fe7f 	bl	800797c <_fflush_r>
 8006c7e:	68e1      	ldr	r1, [r4, #12]
 8006c80:	4b06      	ldr	r3, [pc, #24]	@ (8006c9c <cleanup_stdio+0x3c>)
 8006c82:	4299      	cmp	r1, r3
 8006c84:	d004      	beq.n	8006c90 <cleanup_stdio+0x30>
 8006c86:	4620      	mov	r0, r4
 8006c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c8c:	f000 be76 	b.w	800797c <_fflush_r>
 8006c90:	bd10      	pop	{r4, pc}
 8006c92:	bf00      	nop
 8006c94:	20000228 	.word	0x20000228
 8006c98:	20000290 	.word	0x20000290
 8006c9c:	200002f8 	.word	0x200002f8

08006ca0 <global_stdio_init.part.0>:
 8006ca0:	b510      	push	{r4, lr}
 8006ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd0 <global_stdio_init.part.0+0x30>)
 8006ca4:	4c0b      	ldr	r4, [pc, #44]	@ (8006cd4 <global_stdio_init.part.0+0x34>)
 8006ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8006cd8 <global_stdio_init.part.0+0x38>)
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	4620      	mov	r0, r4
 8006cac:	2200      	movs	r2, #0
 8006cae:	2104      	movs	r1, #4
 8006cb0:	f7ff ff94 	bl	8006bdc <std>
 8006cb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006cb8:	2201      	movs	r2, #1
 8006cba:	2109      	movs	r1, #9
 8006cbc:	f7ff ff8e 	bl	8006bdc <std>
 8006cc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cca:	2112      	movs	r1, #18
 8006ccc:	f7ff bf86 	b.w	8006bdc <std>
 8006cd0:	20000360 	.word	0x20000360
 8006cd4:	20000228 	.word	0x20000228
 8006cd8:	08006c49 	.word	0x08006c49

08006cdc <__sfp_lock_acquire>:
 8006cdc:	4801      	ldr	r0, [pc, #4]	@ (8006ce4 <__sfp_lock_acquire+0x8>)
 8006cde:	f000 ba00 	b.w	80070e2 <__retarget_lock_acquire_recursive>
 8006ce2:	bf00      	nop
 8006ce4:	20000369 	.word	0x20000369

08006ce8 <__sfp_lock_release>:
 8006ce8:	4801      	ldr	r0, [pc, #4]	@ (8006cf0 <__sfp_lock_release+0x8>)
 8006cea:	f000 b9fb 	b.w	80070e4 <__retarget_lock_release_recursive>
 8006cee:	bf00      	nop
 8006cf0:	20000369 	.word	0x20000369

08006cf4 <__sinit>:
 8006cf4:	b510      	push	{r4, lr}
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	f7ff fff0 	bl	8006cdc <__sfp_lock_acquire>
 8006cfc:	6a23      	ldr	r3, [r4, #32]
 8006cfe:	b11b      	cbz	r3, 8006d08 <__sinit+0x14>
 8006d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d04:	f7ff bff0 	b.w	8006ce8 <__sfp_lock_release>
 8006d08:	4b04      	ldr	r3, [pc, #16]	@ (8006d1c <__sinit+0x28>)
 8006d0a:	6223      	str	r3, [r4, #32]
 8006d0c:	4b04      	ldr	r3, [pc, #16]	@ (8006d20 <__sinit+0x2c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1f5      	bne.n	8006d00 <__sinit+0xc>
 8006d14:	f7ff ffc4 	bl	8006ca0 <global_stdio_init.part.0>
 8006d18:	e7f2      	b.n	8006d00 <__sinit+0xc>
 8006d1a:	bf00      	nop
 8006d1c:	08006c61 	.word	0x08006c61
 8006d20:	20000360 	.word	0x20000360

08006d24 <_fwalk_sglue>:
 8006d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d28:	4607      	mov	r7, r0
 8006d2a:	4688      	mov	r8, r1
 8006d2c:	4614      	mov	r4, r2
 8006d2e:	2600      	movs	r6, #0
 8006d30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d34:	f1b9 0901 	subs.w	r9, r9, #1
 8006d38:	d505      	bpl.n	8006d46 <_fwalk_sglue+0x22>
 8006d3a:	6824      	ldr	r4, [r4, #0]
 8006d3c:	2c00      	cmp	r4, #0
 8006d3e:	d1f7      	bne.n	8006d30 <_fwalk_sglue+0xc>
 8006d40:	4630      	mov	r0, r6
 8006d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d46:	89ab      	ldrh	r3, [r5, #12]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d907      	bls.n	8006d5c <_fwalk_sglue+0x38>
 8006d4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d50:	3301      	adds	r3, #1
 8006d52:	d003      	beq.n	8006d5c <_fwalk_sglue+0x38>
 8006d54:	4629      	mov	r1, r5
 8006d56:	4638      	mov	r0, r7
 8006d58:	47c0      	blx	r8
 8006d5a:	4306      	orrs	r6, r0
 8006d5c:	3568      	adds	r5, #104	@ 0x68
 8006d5e:	e7e9      	b.n	8006d34 <_fwalk_sglue+0x10>

08006d60 <iprintf>:
 8006d60:	b40f      	push	{r0, r1, r2, r3}
 8006d62:	b507      	push	{r0, r1, r2, lr}
 8006d64:	4906      	ldr	r1, [pc, #24]	@ (8006d80 <iprintf+0x20>)
 8006d66:	ab04      	add	r3, sp, #16
 8006d68:	6808      	ldr	r0, [r1, #0]
 8006d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d6e:	6881      	ldr	r1, [r0, #8]
 8006d70:	9301      	str	r3, [sp, #4]
 8006d72:	f000 fadb 	bl	800732c <_vfiprintf_r>
 8006d76:	b003      	add	sp, #12
 8006d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d7c:	b004      	add	sp, #16
 8006d7e:	4770      	bx	lr
 8006d80:	20000020 	.word	0x20000020

08006d84 <_puts_r>:
 8006d84:	6a03      	ldr	r3, [r0, #32]
 8006d86:	b570      	push	{r4, r5, r6, lr}
 8006d88:	6884      	ldr	r4, [r0, #8]
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	460e      	mov	r6, r1
 8006d8e:	b90b      	cbnz	r3, 8006d94 <_puts_r+0x10>
 8006d90:	f7ff ffb0 	bl	8006cf4 <__sinit>
 8006d94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d96:	07db      	lsls	r3, r3, #31
 8006d98:	d405      	bmi.n	8006da6 <_puts_r+0x22>
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	0598      	lsls	r0, r3, #22
 8006d9e:	d402      	bmi.n	8006da6 <_puts_r+0x22>
 8006da0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006da2:	f000 f99e 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	0719      	lsls	r1, r3, #28
 8006daa:	d502      	bpl.n	8006db2 <_puts_r+0x2e>
 8006dac:	6923      	ldr	r3, [r4, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d135      	bne.n	8006e1e <_puts_r+0x9a>
 8006db2:	4621      	mov	r1, r4
 8006db4:	4628      	mov	r0, r5
 8006db6:	f000 f8c5 	bl	8006f44 <__swsetup_r>
 8006dba:	b380      	cbz	r0, 8006e1e <_puts_r+0x9a>
 8006dbc:	f04f 35ff 	mov.w	r5, #4294967295
 8006dc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006dc2:	07da      	lsls	r2, r3, #31
 8006dc4:	d405      	bmi.n	8006dd2 <_puts_r+0x4e>
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	059b      	lsls	r3, r3, #22
 8006dca:	d402      	bmi.n	8006dd2 <_puts_r+0x4e>
 8006dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dce:	f000 f989 	bl	80070e4 <__retarget_lock_release_recursive>
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	bd70      	pop	{r4, r5, r6, pc}
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	da04      	bge.n	8006de4 <_puts_r+0x60>
 8006dda:	69a2      	ldr	r2, [r4, #24]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	dc17      	bgt.n	8006e10 <_puts_r+0x8c>
 8006de0:	290a      	cmp	r1, #10
 8006de2:	d015      	beq.n	8006e10 <_puts_r+0x8c>
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	6022      	str	r2, [r4, #0]
 8006dea:	7019      	strb	r1, [r3, #0]
 8006dec:	68a3      	ldr	r3, [r4, #8]
 8006dee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006df2:	3b01      	subs	r3, #1
 8006df4:	60a3      	str	r3, [r4, #8]
 8006df6:	2900      	cmp	r1, #0
 8006df8:	d1ed      	bne.n	8006dd6 <_puts_r+0x52>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	da11      	bge.n	8006e22 <_puts_r+0x9e>
 8006dfe:	4622      	mov	r2, r4
 8006e00:	210a      	movs	r1, #10
 8006e02:	4628      	mov	r0, r5
 8006e04:	f000 f85f 	bl	8006ec6 <__swbuf_r>
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d0d7      	beq.n	8006dbc <_puts_r+0x38>
 8006e0c:	250a      	movs	r5, #10
 8006e0e:	e7d7      	b.n	8006dc0 <_puts_r+0x3c>
 8006e10:	4622      	mov	r2, r4
 8006e12:	4628      	mov	r0, r5
 8006e14:	f000 f857 	bl	8006ec6 <__swbuf_r>
 8006e18:	3001      	adds	r0, #1
 8006e1a:	d1e7      	bne.n	8006dec <_puts_r+0x68>
 8006e1c:	e7ce      	b.n	8006dbc <_puts_r+0x38>
 8006e1e:	3e01      	subs	r6, #1
 8006e20:	e7e4      	b.n	8006dec <_puts_r+0x68>
 8006e22:	6823      	ldr	r3, [r4, #0]
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	6022      	str	r2, [r4, #0]
 8006e28:	220a      	movs	r2, #10
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	e7ee      	b.n	8006e0c <_puts_r+0x88>
	...

08006e30 <puts>:
 8006e30:	4b02      	ldr	r3, [pc, #8]	@ (8006e3c <puts+0xc>)
 8006e32:	4601      	mov	r1, r0
 8006e34:	6818      	ldr	r0, [r3, #0]
 8006e36:	f7ff bfa5 	b.w	8006d84 <_puts_r>
 8006e3a:	bf00      	nop
 8006e3c:	20000020 	.word	0x20000020

08006e40 <__sread>:
 8006e40:	b510      	push	{r4, lr}
 8006e42:	460c      	mov	r4, r1
 8006e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e48:	f000 f8fc 	bl	8007044 <_read_r>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	bfab      	itete	ge
 8006e50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e52:	89a3      	ldrhlt	r3, [r4, #12]
 8006e54:	181b      	addge	r3, r3, r0
 8006e56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e5a:	bfac      	ite	ge
 8006e5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e5e:	81a3      	strhlt	r3, [r4, #12]
 8006e60:	bd10      	pop	{r4, pc}

08006e62 <__swrite>:
 8006e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e66:	461f      	mov	r7, r3
 8006e68:	898b      	ldrh	r3, [r1, #12]
 8006e6a:	05db      	lsls	r3, r3, #23
 8006e6c:	4605      	mov	r5, r0
 8006e6e:	460c      	mov	r4, r1
 8006e70:	4616      	mov	r6, r2
 8006e72:	d505      	bpl.n	8006e80 <__swrite+0x1e>
 8006e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e78:	2302      	movs	r3, #2
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f000 f8d0 	bl	8007020 <_lseek_r>
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e8a:	81a3      	strh	r3, [r4, #12]
 8006e8c:	4632      	mov	r2, r6
 8006e8e:	463b      	mov	r3, r7
 8006e90:	4628      	mov	r0, r5
 8006e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e96:	f000 b8e7 	b.w	8007068 <_write_r>

08006e9a <__sseek>:
 8006e9a:	b510      	push	{r4, lr}
 8006e9c:	460c      	mov	r4, r1
 8006e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea2:	f000 f8bd 	bl	8007020 <_lseek_r>
 8006ea6:	1c43      	adds	r3, r0, #1
 8006ea8:	89a3      	ldrh	r3, [r4, #12]
 8006eaa:	bf15      	itete	ne
 8006eac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006eae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006eb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006eb6:	81a3      	strheq	r3, [r4, #12]
 8006eb8:	bf18      	it	ne
 8006eba:	81a3      	strhne	r3, [r4, #12]
 8006ebc:	bd10      	pop	{r4, pc}

08006ebe <__sclose>:
 8006ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ec2:	f000 b89d 	b.w	8007000 <_close_r>

08006ec6 <__swbuf_r>:
 8006ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec8:	460e      	mov	r6, r1
 8006eca:	4614      	mov	r4, r2
 8006ecc:	4605      	mov	r5, r0
 8006ece:	b118      	cbz	r0, 8006ed8 <__swbuf_r+0x12>
 8006ed0:	6a03      	ldr	r3, [r0, #32]
 8006ed2:	b90b      	cbnz	r3, 8006ed8 <__swbuf_r+0x12>
 8006ed4:	f7ff ff0e 	bl	8006cf4 <__sinit>
 8006ed8:	69a3      	ldr	r3, [r4, #24]
 8006eda:	60a3      	str	r3, [r4, #8]
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	071a      	lsls	r2, r3, #28
 8006ee0:	d501      	bpl.n	8006ee6 <__swbuf_r+0x20>
 8006ee2:	6923      	ldr	r3, [r4, #16]
 8006ee4:	b943      	cbnz	r3, 8006ef8 <__swbuf_r+0x32>
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f000 f82b 	bl	8006f44 <__swsetup_r>
 8006eee:	b118      	cbz	r0, 8006ef8 <__swbuf_r+0x32>
 8006ef0:	f04f 37ff 	mov.w	r7, #4294967295
 8006ef4:	4638      	mov	r0, r7
 8006ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	6922      	ldr	r2, [r4, #16]
 8006efc:	1a98      	subs	r0, r3, r2
 8006efe:	6963      	ldr	r3, [r4, #20]
 8006f00:	b2f6      	uxtb	r6, r6
 8006f02:	4283      	cmp	r3, r0
 8006f04:	4637      	mov	r7, r6
 8006f06:	dc05      	bgt.n	8006f14 <__swbuf_r+0x4e>
 8006f08:	4621      	mov	r1, r4
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f000 fd36 	bl	800797c <_fflush_r>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d1ed      	bne.n	8006ef0 <__swbuf_r+0x2a>
 8006f14:	68a3      	ldr	r3, [r4, #8]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	60a3      	str	r3, [r4, #8]
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	6022      	str	r2, [r4, #0]
 8006f20:	701e      	strb	r6, [r3, #0]
 8006f22:	6962      	ldr	r2, [r4, #20]
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d004      	beq.n	8006f34 <__swbuf_r+0x6e>
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	07db      	lsls	r3, r3, #31
 8006f2e:	d5e1      	bpl.n	8006ef4 <__swbuf_r+0x2e>
 8006f30:	2e0a      	cmp	r6, #10
 8006f32:	d1df      	bne.n	8006ef4 <__swbuf_r+0x2e>
 8006f34:	4621      	mov	r1, r4
 8006f36:	4628      	mov	r0, r5
 8006f38:	f000 fd20 	bl	800797c <_fflush_r>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d0d9      	beq.n	8006ef4 <__swbuf_r+0x2e>
 8006f40:	e7d6      	b.n	8006ef0 <__swbuf_r+0x2a>
	...

08006f44 <__swsetup_r>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	4b29      	ldr	r3, [pc, #164]	@ (8006fec <__swsetup_r+0xa8>)
 8006f48:	4605      	mov	r5, r0
 8006f4a:	6818      	ldr	r0, [r3, #0]
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	b118      	cbz	r0, 8006f58 <__swsetup_r+0x14>
 8006f50:	6a03      	ldr	r3, [r0, #32]
 8006f52:	b90b      	cbnz	r3, 8006f58 <__swsetup_r+0x14>
 8006f54:	f7ff fece 	bl	8006cf4 <__sinit>
 8006f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f5c:	0719      	lsls	r1, r3, #28
 8006f5e:	d422      	bmi.n	8006fa6 <__swsetup_r+0x62>
 8006f60:	06da      	lsls	r2, r3, #27
 8006f62:	d407      	bmi.n	8006f74 <__swsetup_r+0x30>
 8006f64:	2209      	movs	r2, #9
 8006f66:	602a      	str	r2, [r5, #0]
 8006f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f6c:	81a3      	strh	r3, [r4, #12]
 8006f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f72:	e033      	b.n	8006fdc <__swsetup_r+0x98>
 8006f74:	0758      	lsls	r0, r3, #29
 8006f76:	d512      	bpl.n	8006f9e <__swsetup_r+0x5a>
 8006f78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f7a:	b141      	cbz	r1, 8006f8e <__swsetup_r+0x4a>
 8006f7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f80:	4299      	cmp	r1, r3
 8006f82:	d002      	beq.n	8006f8a <__swsetup_r+0x46>
 8006f84:	4628      	mov	r0, r5
 8006f86:	f000 f8af 	bl	80070e8 <_free_r>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f8e:	89a3      	ldrh	r3, [r4, #12]
 8006f90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f94:	81a3      	strh	r3, [r4, #12]
 8006f96:	2300      	movs	r3, #0
 8006f98:	6063      	str	r3, [r4, #4]
 8006f9a:	6923      	ldr	r3, [r4, #16]
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	89a3      	ldrh	r3, [r4, #12]
 8006fa0:	f043 0308 	orr.w	r3, r3, #8
 8006fa4:	81a3      	strh	r3, [r4, #12]
 8006fa6:	6923      	ldr	r3, [r4, #16]
 8006fa8:	b94b      	cbnz	r3, 8006fbe <__swsetup_r+0x7a>
 8006faa:	89a3      	ldrh	r3, [r4, #12]
 8006fac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fb4:	d003      	beq.n	8006fbe <__swsetup_r+0x7a>
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	4628      	mov	r0, r5
 8006fba:	f000 fd2d 	bl	8007a18 <__smakebuf_r>
 8006fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fc2:	f013 0201 	ands.w	r2, r3, #1
 8006fc6:	d00a      	beq.n	8006fde <__swsetup_r+0x9a>
 8006fc8:	2200      	movs	r2, #0
 8006fca:	60a2      	str	r2, [r4, #8]
 8006fcc:	6962      	ldr	r2, [r4, #20]
 8006fce:	4252      	negs	r2, r2
 8006fd0:	61a2      	str	r2, [r4, #24]
 8006fd2:	6922      	ldr	r2, [r4, #16]
 8006fd4:	b942      	cbnz	r2, 8006fe8 <__swsetup_r+0xa4>
 8006fd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006fda:	d1c5      	bne.n	8006f68 <__swsetup_r+0x24>
 8006fdc:	bd38      	pop	{r3, r4, r5, pc}
 8006fde:	0799      	lsls	r1, r3, #30
 8006fe0:	bf58      	it	pl
 8006fe2:	6962      	ldrpl	r2, [r4, #20]
 8006fe4:	60a2      	str	r2, [r4, #8]
 8006fe6:	e7f4      	b.n	8006fd2 <__swsetup_r+0x8e>
 8006fe8:	2000      	movs	r0, #0
 8006fea:	e7f7      	b.n	8006fdc <__swsetup_r+0x98>
 8006fec:	20000020 	.word	0x20000020

08006ff0 <memset>:
 8006ff0:	4402      	add	r2, r0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d100      	bne.n	8006ffa <memset+0xa>
 8006ff8:	4770      	bx	lr
 8006ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8006ffe:	e7f9      	b.n	8006ff4 <memset+0x4>

08007000 <_close_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d06      	ldr	r5, [pc, #24]	@ (800701c <_close_r+0x1c>)
 8007004:	2300      	movs	r3, #0
 8007006:	4604      	mov	r4, r0
 8007008:	4608      	mov	r0, r1
 800700a:	602b      	str	r3, [r5, #0]
 800700c:	f7fa fdc9 	bl	8001ba2 <_close>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_close_r+0x1a>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_close_r+0x1a>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	20000364 	.word	0x20000364

08007020 <_lseek_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d07      	ldr	r5, [pc, #28]	@ (8007040 <_lseek_r+0x20>)
 8007024:	4604      	mov	r4, r0
 8007026:	4608      	mov	r0, r1
 8007028:	4611      	mov	r1, r2
 800702a:	2200      	movs	r2, #0
 800702c:	602a      	str	r2, [r5, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	f7fa fdde 	bl	8001bf0 <_lseek>
 8007034:	1c43      	adds	r3, r0, #1
 8007036:	d102      	bne.n	800703e <_lseek_r+0x1e>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	b103      	cbz	r3, 800703e <_lseek_r+0x1e>
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	bd38      	pop	{r3, r4, r5, pc}
 8007040:	20000364 	.word	0x20000364

08007044 <_read_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4d07      	ldr	r5, [pc, #28]	@ (8007064 <_read_r+0x20>)
 8007048:	4604      	mov	r4, r0
 800704a:	4608      	mov	r0, r1
 800704c:	4611      	mov	r1, r2
 800704e:	2200      	movs	r2, #0
 8007050:	602a      	str	r2, [r5, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	f7fa fd88 	bl	8001b68 <_read>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_read_r+0x1e>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_read_r+0x1e>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	20000364 	.word	0x20000364

08007068 <_write_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d07      	ldr	r5, [pc, #28]	@ (8007088 <_write_r+0x20>)
 800706c:	4604      	mov	r4, r0
 800706e:	4608      	mov	r0, r1
 8007070:	4611      	mov	r1, r2
 8007072:	2200      	movs	r2, #0
 8007074:	602a      	str	r2, [r5, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f7f9 ff4c 	bl	8000f14 <_write>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_write_r+0x1e>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_write_r+0x1e>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	20000364 	.word	0x20000364

0800708c <__errno>:
 800708c:	4b01      	ldr	r3, [pc, #4]	@ (8007094 <__errno+0x8>)
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20000020 	.word	0x20000020

08007098 <__libc_init_array>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	4d0d      	ldr	r5, [pc, #52]	@ (80070d0 <__libc_init_array+0x38>)
 800709c:	4c0d      	ldr	r4, [pc, #52]	@ (80070d4 <__libc_init_array+0x3c>)
 800709e:	1b64      	subs	r4, r4, r5
 80070a0:	10a4      	asrs	r4, r4, #2
 80070a2:	2600      	movs	r6, #0
 80070a4:	42a6      	cmp	r6, r4
 80070a6:	d109      	bne.n	80070bc <__libc_init_array+0x24>
 80070a8:	4d0b      	ldr	r5, [pc, #44]	@ (80070d8 <__libc_init_array+0x40>)
 80070aa:	4c0c      	ldr	r4, [pc, #48]	@ (80070dc <__libc_init_array+0x44>)
 80070ac:	f001 f890 	bl	80081d0 <_init>
 80070b0:	1b64      	subs	r4, r4, r5
 80070b2:	10a4      	asrs	r4, r4, #2
 80070b4:	2600      	movs	r6, #0
 80070b6:	42a6      	cmp	r6, r4
 80070b8:	d105      	bne.n	80070c6 <__libc_init_array+0x2e>
 80070ba:	bd70      	pop	{r4, r5, r6, pc}
 80070bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c0:	4798      	blx	r3
 80070c2:	3601      	adds	r6, #1
 80070c4:	e7ee      	b.n	80070a4 <__libc_init_array+0xc>
 80070c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ca:	4798      	blx	r3
 80070cc:	3601      	adds	r6, #1
 80070ce:	e7f2      	b.n	80070b6 <__libc_init_array+0x1e>
 80070d0:	08008430 	.word	0x08008430
 80070d4:	08008430 	.word	0x08008430
 80070d8:	08008430 	.word	0x08008430
 80070dc:	08008434 	.word	0x08008434

080070e0 <__retarget_lock_init_recursive>:
 80070e0:	4770      	bx	lr

080070e2 <__retarget_lock_acquire_recursive>:
 80070e2:	4770      	bx	lr

080070e4 <__retarget_lock_release_recursive>:
 80070e4:	4770      	bx	lr
	...

080070e8 <_free_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4605      	mov	r5, r0
 80070ec:	2900      	cmp	r1, #0
 80070ee:	d041      	beq.n	8007174 <_free_r+0x8c>
 80070f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070f4:	1f0c      	subs	r4, r1, #4
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bfb8      	it	lt
 80070fa:	18e4      	addlt	r4, r4, r3
 80070fc:	f000 f8e0 	bl	80072c0 <__malloc_lock>
 8007100:	4a1d      	ldr	r2, [pc, #116]	@ (8007178 <_free_r+0x90>)
 8007102:	6813      	ldr	r3, [r2, #0]
 8007104:	b933      	cbnz	r3, 8007114 <_free_r+0x2c>
 8007106:	6063      	str	r3, [r4, #4]
 8007108:	6014      	str	r4, [r2, #0]
 800710a:	4628      	mov	r0, r5
 800710c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007110:	f000 b8dc 	b.w	80072cc <__malloc_unlock>
 8007114:	42a3      	cmp	r3, r4
 8007116:	d908      	bls.n	800712a <_free_r+0x42>
 8007118:	6820      	ldr	r0, [r4, #0]
 800711a:	1821      	adds	r1, r4, r0
 800711c:	428b      	cmp	r3, r1
 800711e:	bf01      	itttt	eq
 8007120:	6819      	ldreq	r1, [r3, #0]
 8007122:	685b      	ldreq	r3, [r3, #4]
 8007124:	1809      	addeq	r1, r1, r0
 8007126:	6021      	streq	r1, [r4, #0]
 8007128:	e7ed      	b.n	8007106 <_free_r+0x1e>
 800712a:	461a      	mov	r2, r3
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	b10b      	cbz	r3, 8007134 <_free_r+0x4c>
 8007130:	42a3      	cmp	r3, r4
 8007132:	d9fa      	bls.n	800712a <_free_r+0x42>
 8007134:	6811      	ldr	r1, [r2, #0]
 8007136:	1850      	adds	r0, r2, r1
 8007138:	42a0      	cmp	r0, r4
 800713a:	d10b      	bne.n	8007154 <_free_r+0x6c>
 800713c:	6820      	ldr	r0, [r4, #0]
 800713e:	4401      	add	r1, r0
 8007140:	1850      	adds	r0, r2, r1
 8007142:	4283      	cmp	r3, r0
 8007144:	6011      	str	r1, [r2, #0]
 8007146:	d1e0      	bne.n	800710a <_free_r+0x22>
 8007148:	6818      	ldr	r0, [r3, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	6053      	str	r3, [r2, #4]
 800714e:	4408      	add	r0, r1
 8007150:	6010      	str	r0, [r2, #0]
 8007152:	e7da      	b.n	800710a <_free_r+0x22>
 8007154:	d902      	bls.n	800715c <_free_r+0x74>
 8007156:	230c      	movs	r3, #12
 8007158:	602b      	str	r3, [r5, #0]
 800715a:	e7d6      	b.n	800710a <_free_r+0x22>
 800715c:	6820      	ldr	r0, [r4, #0]
 800715e:	1821      	adds	r1, r4, r0
 8007160:	428b      	cmp	r3, r1
 8007162:	bf04      	itt	eq
 8007164:	6819      	ldreq	r1, [r3, #0]
 8007166:	685b      	ldreq	r3, [r3, #4]
 8007168:	6063      	str	r3, [r4, #4]
 800716a:	bf04      	itt	eq
 800716c:	1809      	addeq	r1, r1, r0
 800716e:	6021      	streq	r1, [r4, #0]
 8007170:	6054      	str	r4, [r2, #4]
 8007172:	e7ca      	b.n	800710a <_free_r+0x22>
 8007174:	bd38      	pop	{r3, r4, r5, pc}
 8007176:	bf00      	nop
 8007178:	20000370 	.word	0x20000370

0800717c <sbrk_aligned>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	4e0f      	ldr	r6, [pc, #60]	@ (80071bc <sbrk_aligned+0x40>)
 8007180:	460c      	mov	r4, r1
 8007182:	6831      	ldr	r1, [r6, #0]
 8007184:	4605      	mov	r5, r0
 8007186:	b911      	cbnz	r1, 800718e <sbrk_aligned+0x12>
 8007188:	f000 fca4 	bl	8007ad4 <_sbrk_r>
 800718c:	6030      	str	r0, [r6, #0]
 800718e:	4621      	mov	r1, r4
 8007190:	4628      	mov	r0, r5
 8007192:	f000 fc9f 	bl	8007ad4 <_sbrk_r>
 8007196:	1c43      	adds	r3, r0, #1
 8007198:	d103      	bne.n	80071a2 <sbrk_aligned+0x26>
 800719a:	f04f 34ff 	mov.w	r4, #4294967295
 800719e:	4620      	mov	r0, r4
 80071a0:	bd70      	pop	{r4, r5, r6, pc}
 80071a2:	1cc4      	adds	r4, r0, #3
 80071a4:	f024 0403 	bic.w	r4, r4, #3
 80071a8:	42a0      	cmp	r0, r4
 80071aa:	d0f8      	beq.n	800719e <sbrk_aligned+0x22>
 80071ac:	1a21      	subs	r1, r4, r0
 80071ae:	4628      	mov	r0, r5
 80071b0:	f000 fc90 	bl	8007ad4 <_sbrk_r>
 80071b4:	3001      	adds	r0, #1
 80071b6:	d1f2      	bne.n	800719e <sbrk_aligned+0x22>
 80071b8:	e7ef      	b.n	800719a <sbrk_aligned+0x1e>
 80071ba:	bf00      	nop
 80071bc:	2000036c 	.word	0x2000036c

080071c0 <_malloc_r>:
 80071c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c4:	1ccd      	adds	r5, r1, #3
 80071c6:	f025 0503 	bic.w	r5, r5, #3
 80071ca:	3508      	adds	r5, #8
 80071cc:	2d0c      	cmp	r5, #12
 80071ce:	bf38      	it	cc
 80071d0:	250c      	movcc	r5, #12
 80071d2:	2d00      	cmp	r5, #0
 80071d4:	4606      	mov	r6, r0
 80071d6:	db01      	blt.n	80071dc <_malloc_r+0x1c>
 80071d8:	42a9      	cmp	r1, r5
 80071da:	d904      	bls.n	80071e6 <_malloc_r+0x26>
 80071dc:	230c      	movs	r3, #12
 80071de:	6033      	str	r3, [r6, #0]
 80071e0:	2000      	movs	r0, #0
 80071e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072bc <_malloc_r+0xfc>
 80071ea:	f000 f869 	bl	80072c0 <__malloc_lock>
 80071ee:	f8d8 3000 	ldr.w	r3, [r8]
 80071f2:	461c      	mov	r4, r3
 80071f4:	bb44      	cbnz	r4, 8007248 <_malloc_r+0x88>
 80071f6:	4629      	mov	r1, r5
 80071f8:	4630      	mov	r0, r6
 80071fa:	f7ff ffbf 	bl	800717c <sbrk_aligned>
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	4604      	mov	r4, r0
 8007202:	d158      	bne.n	80072b6 <_malloc_r+0xf6>
 8007204:	f8d8 4000 	ldr.w	r4, [r8]
 8007208:	4627      	mov	r7, r4
 800720a:	2f00      	cmp	r7, #0
 800720c:	d143      	bne.n	8007296 <_malloc_r+0xd6>
 800720e:	2c00      	cmp	r4, #0
 8007210:	d04b      	beq.n	80072aa <_malloc_r+0xea>
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	4639      	mov	r1, r7
 8007216:	4630      	mov	r0, r6
 8007218:	eb04 0903 	add.w	r9, r4, r3
 800721c:	f000 fc5a 	bl	8007ad4 <_sbrk_r>
 8007220:	4581      	cmp	r9, r0
 8007222:	d142      	bne.n	80072aa <_malloc_r+0xea>
 8007224:	6821      	ldr	r1, [r4, #0]
 8007226:	1a6d      	subs	r5, r5, r1
 8007228:	4629      	mov	r1, r5
 800722a:	4630      	mov	r0, r6
 800722c:	f7ff ffa6 	bl	800717c <sbrk_aligned>
 8007230:	3001      	adds	r0, #1
 8007232:	d03a      	beq.n	80072aa <_malloc_r+0xea>
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	442b      	add	r3, r5
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	f8d8 3000 	ldr.w	r3, [r8]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	bb62      	cbnz	r2, 800729c <_malloc_r+0xdc>
 8007242:	f8c8 7000 	str.w	r7, [r8]
 8007246:	e00f      	b.n	8007268 <_malloc_r+0xa8>
 8007248:	6822      	ldr	r2, [r4, #0]
 800724a:	1b52      	subs	r2, r2, r5
 800724c:	d420      	bmi.n	8007290 <_malloc_r+0xd0>
 800724e:	2a0b      	cmp	r2, #11
 8007250:	d917      	bls.n	8007282 <_malloc_r+0xc2>
 8007252:	1961      	adds	r1, r4, r5
 8007254:	42a3      	cmp	r3, r4
 8007256:	6025      	str	r5, [r4, #0]
 8007258:	bf18      	it	ne
 800725a:	6059      	strne	r1, [r3, #4]
 800725c:	6863      	ldr	r3, [r4, #4]
 800725e:	bf08      	it	eq
 8007260:	f8c8 1000 	streq.w	r1, [r8]
 8007264:	5162      	str	r2, [r4, r5]
 8007266:	604b      	str	r3, [r1, #4]
 8007268:	4630      	mov	r0, r6
 800726a:	f000 f82f 	bl	80072cc <__malloc_unlock>
 800726e:	f104 000b 	add.w	r0, r4, #11
 8007272:	1d23      	adds	r3, r4, #4
 8007274:	f020 0007 	bic.w	r0, r0, #7
 8007278:	1ac2      	subs	r2, r0, r3
 800727a:	bf1c      	itt	ne
 800727c:	1a1b      	subne	r3, r3, r0
 800727e:	50a3      	strne	r3, [r4, r2]
 8007280:	e7af      	b.n	80071e2 <_malloc_r+0x22>
 8007282:	6862      	ldr	r2, [r4, #4]
 8007284:	42a3      	cmp	r3, r4
 8007286:	bf0c      	ite	eq
 8007288:	f8c8 2000 	streq.w	r2, [r8]
 800728c:	605a      	strne	r2, [r3, #4]
 800728e:	e7eb      	b.n	8007268 <_malloc_r+0xa8>
 8007290:	4623      	mov	r3, r4
 8007292:	6864      	ldr	r4, [r4, #4]
 8007294:	e7ae      	b.n	80071f4 <_malloc_r+0x34>
 8007296:	463c      	mov	r4, r7
 8007298:	687f      	ldr	r7, [r7, #4]
 800729a:	e7b6      	b.n	800720a <_malloc_r+0x4a>
 800729c:	461a      	mov	r2, r3
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	42a3      	cmp	r3, r4
 80072a2:	d1fb      	bne.n	800729c <_malloc_r+0xdc>
 80072a4:	2300      	movs	r3, #0
 80072a6:	6053      	str	r3, [r2, #4]
 80072a8:	e7de      	b.n	8007268 <_malloc_r+0xa8>
 80072aa:	230c      	movs	r3, #12
 80072ac:	6033      	str	r3, [r6, #0]
 80072ae:	4630      	mov	r0, r6
 80072b0:	f000 f80c 	bl	80072cc <__malloc_unlock>
 80072b4:	e794      	b.n	80071e0 <_malloc_r+0x20>
 80072b6:	6005      	str	r5, [r0, #0]
 80072b8:	e7d6      	b.n	8007268 <_malloc_r+0xa8>
 80072ba:	bf00      	nop
 80072bc:	20000370 	.word	0x20000370

080072c0 <__malloc_lock>:
 80072c0:	4801      	ldr	r0, [pc, #4]	@ (80072c8 <__malloc_lock+0x8>)
 80072c2:	f7ff bf0e 	b.w	80070e2 <__retarget_lock_acquire_recursive>
 80072c6:	bf00      	nop
 80072c8:	20000368 	.word	0x20000368

080072cc <__malloc_unlock>:
 80072cc:	4801      	ldr	r0, [pc, #4]	@ (80072d4 <__malloc_unlock+0x8>)
 80072ce:	f7ff bf09 	b.w	80070e4 <__retarget_lock_release_recursive>
 80072d2:	bf00      	nop
 80072d4:	20000368 	.word	0x20000368

080072d8 <__sfputc_r>:
 80072d8:	6893      	ldr	r3, [r2, #8]
 80072da:	3b01      	subs	r3, #1
 80072dc:	2b00      	cmp	r3, #0
 80072de:	b410      	push	{r4}
 80072e0:	6093      	str	r3, [r2, #8]
 80072e2:	da08      	bge.n	80072f6 <__sfputc_r+0x1e>
 80072e4:	6994      	ldr	r4, [r2, #24]
 80072e6:	42a3      	cmp	r3, r4
 80072e8:	db01      	blt.n	80072ee <__sfputc_r+0x16>
 80072ea:	290a      	cmp	r1, #10
 80072ec:	d103      	bne.n	80072f6 <__sfputc_r+0x1e>
 80072ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072f2:	f7ff bde8 	b.w	8006ec6 <__swbuf_r>
 80072f6:	6813      	ldr	r3, [r2, #0]
 80072f8:	1c58      	adds	r0, r3, #1
 80072fa:	6010      	str	r0, [r2, #0]
 80072fc:	7019      	strb	r1, [r3, #0]
 80072fe:	4608      	mov	r0, r1
 8007300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007304:	4770      	bx	lr

08007306 <__sfputs_r>:
 8007306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007308:	4606      	mov	r6, r0
 800730a:	460f      	mov	r7, r1
 800730c:	4614      	mov	r4, r2
 800730e:	18d5      	adds	r5, r2, r3
 8007310:	42ac      	cmp	r4, r5
 8007312:	d101      	bne.n	8007318 <__sfputs_r+0x12>
 8007314:	2000      	movs	r0, #0
 8007316:	e007      	b.n	8007328 <__sfputs_r+0x22>
 8007318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800731c:	463a      	mov	r2, r7
 800731e:	4630      	mov	r0, r6
 8007320:	f7ff ffda 	bl	80072d8 <__sfputc_r>
 8007324:	1c43      	adds	r3, r0, #1
 8007326:	d1f3      	bne.n	8007310 <__sfputs_r+0xa>
 8007328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800732c <_vfiprintf_r>:
 800732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	460d      	mov	r5, r1
 8007332:	b09d      	sub	sp, #116	@ 0x74
 8007334:	4614      	mov	r4, r2
 8007336:	4698      	mov	r8, r3
 8007338:	4606      	mov	r6, r0
 800733a:	b118      	cbz	r0, 8007344 <_vfiprintf_r+0x18>
 800733c:	6a03      	ldr	r3, [r0, #32]
 800733e:	b90b      	cbnz	r3, 8007344 <_vfiprintf_r+0x18>
 8007340:	f7ff fcd8 	bl	8006cf4 <__sinit>
 8007344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007346:	07d9      	lsls	r1, r3, #31
 8007348:	d405      	bmi.n	8007356 <_vfiprintf_r+0x2a>
 800734a:	89ab      	ldrh	r3, [r5, #12]
 800734c:	059a      	lsls	r2, r3, #22
 800734e:	d402      	bmi.n	8007356 <_vfiprintf_r+0x2a>
 8007350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007352:	f7ff fec6 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8007356:	89ab      	ldrh	r3, [r5, #12]
 8007358:	071b      	lsls	r3, r3, #28
 800735a:	d501      	bpl.n	8007360 <_vfiprintf_r+0x34>
 800735c:	692b      	ldr	r3, [r5, #16]
 800735e:	b99b      	cbnz	r3, 8007388 <_vfiprintf_r+0x5c>
 8007360:	4629      	mov	r1, r5
 8007362:	4630      	mov	r0, r6
 8007364:	f7ff fdee 	bl	8006f44 <__swsetup_r>
 8007368:	b170      	cbz	r0, 8007388 <_vfiprintf_r+0x5c>
 800736a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800736c:	07dc      	lsls	r4, r3, #31
 800736e:	d504      	bpl.n	800737a <_vfiprintf_r+0x4e>
 8007370:	f04f 30ff 	mov.w	r0, #4294967295
 8007374:	b01d      	add	sp, #116	@ 0x74
 8007376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737a:	89ab      	ldrh	r3, [r5, #12]
 800737c:	0598      	lsls	r0, r3, #22
 800737e:	d4f7      	bmi.n	8007370 <_vfiprintf_r+0x44>
 8007380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007382:	f7ff feaf 	bl	80070e4 <__retarget_lock_release_recursive>
 8007386:	e7f3      	b.n	8007370 <_vfiprintf_r+0x44>
 8007388:	2300      	movs	r3, #0
 800738a:	9309      	str	r3, [sp, #36]	@ 0x24
 800738c:	2320      	movs	r3, #32
 800738e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007392:	f8cd 800c 	str.w	r8, [sp, #12]
 8007396:	2330      	movs	r3, #48	@ 0x30
 8007398:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007548 <_vfiprintf_r+0x21c>
 800739c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073a0:	f04f 0901 	mov.w	r9, #1
 80073a4:	4623      	mov	r3, r4
 80073a6:	469a      	mov	sl, r3
 80073a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ac:	b10a      	cbz	r2, 80073b2 <_vfiprintf_r+0x86>
 80073ae:	2a25      	cmp	r2, #37	@ 0x25
 80073b0:	d1f9      	bne.n	80073a6 <_vfiprintf_r+0x7a>
 80073b2:	ebba 0b04 	subs.w	fp, sl, r4
 80073b6:	d00b      	beq.n	80073d0 <_vfiprintf_r+0xa4>
 80073b8:	465b      	mov	r3, fp
 80073ba:	4622      	mov	r2, r4
 80073bc:	4629      	mov	r1, r5
 80073be:	4630      	mov	r0, r6
 80073c0:	f7ff ffa1 	bl	8007306 <__sfputs_r>
 80073c4:	3001      	adds	r0, #1
 80073c6:	f000 80a7 	beq.w	8007518 <_vfiprintf_r+0x1ec>
 80073ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073cc:	445a      	add	r2, fp
 80073ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80073d0:	f89a 3000 	ldrb.w	r3, [sl]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 809f 	beq.w	8007518 <_vfiprintf_r+0x1ec>
 80073da:	2300      	movs	r3, #0
 80073dc:	f04f 32ff 	mov.w	r2, #4294967295
 80073e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073e4:	f10a 0a01 	add.w	sl, sl, #1
 80073e8:	9304      	str	r3, [sp, #16]
 80073ea:	9307      	str	r3, [sp, #28]
 80073ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80073f2:	4654      	mov	r4, sl
 80073f4:	2205      	movs	r2, #5
 80073f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073fa:	4853      	ldr	r0, [pc, #332]	@ (8007548 <_vfiprintf_r+0x21c>)
 80073fc:	f7f8 fee8 	bl	80001d0 <memchr>
 8007400:	9a04      	ldr	r2, [sp, #16]
 8007402:	b9d8      	cbnz	r0, 800743c <_vfiprintf_r+0x110>
 8007404:	06d1      	lsls	r1, r2, #27
 8007406:	bf44      	itt	mi
 8007408:	2320      	movmi	r3, #32
 800740a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800740e:	0713      	lsls	r3, r2, #28
 8007410:	bf44      	itt	mi
 8007412:	232b      	movmi	r3, #43	@ 0x2b
 8007414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007418:	f89a 3000 	ldrb.w	r3, [sl]
 800741c:	2b2a      	cmp	r3, #42	@ 0x2a
 800741e:	d015      	beq.n	800744c <_vfiprintf_r+0x120>
 8007420:	9a07      	ldr	r2, [sp, #28]
 8007422:	4654      	mov	r4, sl
 8007424:	2000      	movs	r0, #0
 8007426:	f04f 0c0a 	mov.w	ip, #10
 800742a:	4621      	mov	r1, r4
 800742c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007430:	3b30      	subs	r3, #48	@ 0x30
 8007432:	2b09      	cmp	r3, #9
 8007434:	d94b      	bls.n	80074ce <_vfiprintf_r+0x1a2>
 8007436:	b1b0      	cbz	r0, 8007466 <_vfiprintf_r+0x13a>
 8007438:	9207      	str	r2, [sp, #28]
 800743a:	e014      	b.n	8007466 <_vfiprintf_r+0x13a>
 800743c:	eba0 0308 	sub.w	r3, r0, r8
 8007440:	fa09 f303 	lsl.w	r3, r9, r3
 8007444:	4313      	orrs	r3, r2
 8007446:	9304      	str	r3, [sp, #16]
 8007448:	46a2      	mov	sl, r4
 800744a:	e7d2      	b.n	80073f2 <_vfiprintf_r+0xc6>
 800744c:	9b03      	ldr	r3, [sp, #12]
 800744e:	1d19      	adds	r1, r3, #4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	9103      	str	r1, [sp, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	bfbb      	ittet	lt
 8007458:	425b      	neglt	r3, r3
 800745a:	f042 0202 	orrlt.w	r2, r2, #2
 800745e:	9307      	strge	r3, [sp, #28]
 8007460:	9307      	strlt	r3, [sp, #28]
 8007462:	bfb8      	it	lt
 8007464:	9204      	strlt	r2, [sp, #16]
 8007466:	7823      	ldrb	r3, [r4, #0]
 8007468:	2b2e      	cmp	r3, #46	@ 0x2e
 800746a:	d10a      	bne.n	8007482 <_vfiprintf_r+0x156>
 800746c:	7863      	ldrb	r3, [r4, #1]
 800746e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007470:	d132      	bne.n	80074d8 <_vfiprintf_r+0x1ac>
 8007472:	9b03      	ldr	r3, [sp, #12]
 8007474:	1d1a      	adds	r2, r3, #4
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	9203      	str	r2, [sp, #12]
 800747a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800747e:	3402      	adds	r4, #2
 8007480:	9305      	str	r3, [sp, #20]
 8007482:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007558 <_vfiprintf_r+0x22c>
 8007486:	7821      	ldrb	r1, [r4, #0]
 8007488:	2203      	movs	r2, #3
 800748a:	4650      	mov	r0, sl
 800748c:	f7f8 fea0 	bl	80001d0 <memchr>
 8007490:	b138      	cbz	r0, 80074a2 <_vfiprintf_r+0x176>
 8007492:	9b04      	ldr	r3, [sp, #16]
 8007494:	eba0 000a 	sub.w	r0, r0, sl
 8007498:	2240      	movs	r2, #64	@ 0x40
 800749a:	4082      	lsls	r2, r0
 800749c:	4313      	orrs	r3, r2
 800749e:	3401      	adds	r4, #1
 80074a0:	9304      	str	r3, [sp, #16]
 80074a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a6:	4829      	ldr	r0, [pc, #164]	@ (800754c <_vfiprintf_r+0x220>)
 80074a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074ac:	2206      	movs	r2, #6
 80074ae:	f7f8 fe8f 	bl	80001d0 <memchr>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d03f      	beq.n	8007536 <_vfiprintf_r+0x20a>
 80074b6:	4b26      	ldr	r3, [pc, #152]	@ (8007550 <_vfiprintf_r+0x224>)
 80074b8:	bb1b      	cbnz	r3, 8007502 <_vfiprintf_r+0x1d6>
 80074ba:	9b03      	ldr	r3, [sp, #12]
 80074bc:	3307      	adds	r3, #7
 80074be:	f023 0307 	bic.w	r3, r3, #7
 80074c2:	3308      	adds	r3, #8
 80074c4:	9303      	str	r3, [sp, #12]
 80074c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074c8:	443b      	add	r3, r7
 80074ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80074cc:	e76a      	b.n	80073a4 <_vfiprintf_r+0x78>
 80074ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80074d2:	460c      	mov	r4, r1
 80074d4:	2001      	movs	r0, #1
 80074d6:	e7a8      	b.n	800742a <_vfiprintf_r+0xfe>
 80074d8:	2300      	movs	r3, #0
 80074da:	3401      	adds	r4, #1
 80074dc:	9305      	str	r3, [sp, #20]
 80074de:	4619      	mov	r1, r3
 80074e0:	f04f 0c0a 	mov.w	ip, #10
 80074e4:	4620      	mov	r0, r4
 80074e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074ea:	3a30      	subs	r2, #48	@ 0x30
 80074ec:	2a09      	cmp	r2, #9
 80074ee:	d903      	bls.n	80074f8 <_vfiprintf_r+0x1cc>
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d0c6      	beq.n	8007482 <_vfiprintf_r+0x156>
 80074f4:	9105      	str	r1, [sp, #20]
 80074f6:	e7c4      	b.n	8007482 <_vfiprintf_r+0x156>
 80074f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80074fc:	4604      	mov	r4, r0
 80074fe:	2301      	movs	r3, #1
 8007500:	e7f0      	b.n	80074e4 <_vfiprintf_r+0x1b8>
 8007502:	ab03      	add	r3, sp, #12
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	462a      	mov	r2, r5
 8007508:	4b12      	ldr	r3, [pc, #72]	@ (8007554 <_vfiprintf_r+0x228>)
 800750a:	a904      	add	r1, sp, #16
 800750c:	4630      	mov	r0, r6
 800750e:	f3af 8000 	nop.w
 8007512:	4607      	mov	r7, r0
 8007514:	1c78      	adds	r0, r7, #1
 8007516:	d1d6      	bne.n	80074c6 <_vfiprintf_r+0x19a>
 8007518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800751a:	07d9      	lsls	r1, r3, #31
 800751c:	d405      	bmi.n	800752a <_vfiprintf_r+0x1fe>
 800751e:	89ab      	ldrh	r3, [r5, #12]
 8007520:	059a      	lsls	r2, r3, #22
 8007522:	d402      	bmi.n	800752a <_vfiprintf_r+0x1fe>
 8007524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007526:	f7ff fddd 	bl	80070e4 <__retarget_lock_release_recursive>
 800752a:	89ab      	ldrh	r3, [r5, #12]
 800752c:	065b      	lsls	r3, r3, #25
 800752e:	f53f af1f 	bmi.w	8007370 <_vfiprintf_r+0x44>
 8007532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007534:	e71e      	b.n	8007374 <_vfiprintf_r+0x48>
 8007536:	ab03      	add	r3, sp, #12
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	462a      	mov	r2, r5
 800753c:	4b05      	ldr	r3, [pc, #20]	@ (8007554 <_vfiprintf_r+0x228>)
 800753e:	a904      	add	r1, sp, #16
 8007540:	4630      	mov	r0, r6
 8007542:	f000 f879 	bl	8007638 <_printf_i>
 8007546:	e7e4      	b.n	8007512 <_vfiprintf_r+0x1e6>
 8007548:	08008374 	.word	0x08008374
 800754c:	0800837e 	.word	0x0800837e
 8007550:	00000000 	.word	0x00000000
 8007554:	08007307 	.word	0x08007307
 8007558:	0800837a 	.word	0x0800837a

0800755c <_printf_common>:
 800755c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007560:	4616      	mov	r6, r2
 8007562:	4698      	mov	r8, r3
 8007564:	688a      	ldr	r2, [r1, #8]
 8007566:	690b      	ldr	r3, [r1, #16]
 8007568:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800756c:	4293      	cmp	r3, r2
 800756e:	bfb8      	it	lt
 8007570:	4613      	movlt	r3, r2
 8007572:	6033      	str	r3, [r6, #0]
 8007574:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007578:	4607      	mov	r7, r0
 800757a:	460c      	mov	r4, r1
 800757c:	b10a      	cbz	r2, 8007582 <_printf_common+0x26>
 800757e:	3301      	adds	r3, #1
 8007580:	6033      	str	r3, [r6, #0]
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	0699      	lsls	r1, r3, #26
 8007586:	bf42      	ittt	mi
 8007588:	6833      	ldrmi	r3, [r6, #0]
 800758a:	3302      	addmi	r3, #2
 800758c:	6033      	strmi	r3, [r6, #0]
 800758e:	6825      	ldr	r5, [r4, #0]
 8007590:	f015 0506 	ands.w	r5, r5, #6
 8007594:	d106      	bne.n	80075a4 <_printf_common+0x48>
 8007596:	f104 0a19 	add.w	sl, r4, #25
 800759a:	68e3      	ldr	r3, [r4, #12]
 800759c:	6832      	ldr	r2, [r6, #0]
 800759e:	1a9b      	subs	r3, r3, r2
 80075a0:	42ab      	cmp	r3, r5
 80075a2:	dc26      	bgt.n	80075f2 <_printf_common+0x96>
 80075a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075a8:	6822      	ldr	r2, [r4, #0]
 80075aa:	3b00      	subs	r3, #0
 80075ac:	bf18      	it	ne
 80075ae:	2301      	movne	r3, #1
 80075b0:	0692      	lsls	r2, r2, #26
 80075b2:	d42b      	bmi.n	800760c <_printf_common+0xb0>
 80075b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075b8:	4641      	mov	r1, r8
 80075ba:	4638      	mov	r0, r7
 80075bc:	47c8      	blx	r9
 80075be:	3001      	adds	r0, #1
 80075c0:	d01e      	beq.n	8007600 <_printf_common+0xa4>
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	6922      	ldr	r2, [r4, #16]
 80075c6:	f003 0306 	and.w	r3, r3, #6
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	bf02      	ittt	eq
 80075ce:	68e5      	ldreq	r5, [r4, #12]
 80075d0:	6833      	ldreq	r3, [r6, #0]
 80075d2:	1aed      	subeq	r5, r5, r3
 80075d4:	68a3      	ldr	r3, [r4, #8]
 80075d6:	bf0c      	ite	eq
 80075d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075dc:	2500      	movne	r5, #0
 80075de:	4293      	cmp	r3, r2
 80075e0:	bfc4      	itt	gt
 80075e2:	1a9b      	subgt	r3, r3, r2
 80075e4:	18ed      	addgt	r5, r5, r3
 80075e6:	2600      	movs	r6, #0
 80075e8:	341a      	adds	r4, #26
 80075ea:	42b5      	cmp	r5, r6
 80075ec:	d11a      	bne.n	8007624 <_printf_common+0xc8>
 80075ee:	2000      	movs	r0, #0
 80075f0:	e008      	b.n	8007604 <_printf_common+0xa8>
 80075f2:	2301      	movs	r3, #1
 80075f4:	4652      	mov	r2, sl
 80075f6:	4641      	mov	r1, r8
 80075f8:	4638      	mov	r0, r7
 80075fa:	47c8      	blx	r9
 80075fc:	3001      	adds	r0, #1
 80075fe:	d103      	bne.n	8007608 <_printf_common+0xac>
 8007600:	f04f 30ff 	mov.w	r0, #4294967295
 8007604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007608:	3501      	adds	r5, #1
 800760a:	e7c6      	b.n	800759a <_printf_common+0x3e>
 800760c:	18e1      	adds	r1, r4, r3
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	2030      	movs	r0, #48	@ 0x30
 8007612:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007616:	4422      	add	r2, r4
 8007618:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800761c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007620:	3302      	adds	r3, #2
 8007622:	e7c7      	b.n	80075b4 <_printf_common+0x58>
 8007624:	2301      	movs	r3, #1
 8007626:	4622      	mov	r2, r4
 8007628:	4641      	mov	r1, r8
 800762a:	4638      	mov	r0, r7
 800762c:	47c8      	blx	r9
 800762e:	3001      	adds	r0, #1
 8007630:	d0e6      	beq.n	8007600 <_printf_common+0xa4>
 8007632:	3601      	adds	r6, #1
 8007634:	e7d9      	b.n	80075ea <_printf_common+0x8e>
	...

08007638 <_printf_i>:
 8007638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800763c:	7e0f      	ldrb	r7, [r1, #24]
 800763e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007640:	2f78      	cmp	r7, #120	@ 0x78
 8007642:	4691      	mov	r9, r2
 8007644:	4680      	mov	r8, r0
 8007646:	460c      	mov	r4, r1
 8007648:	469a      	mov	sl, r3
 800764a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800764e:	d807      	bhi.n	8007660 <_printf_i+0x28>
 8007650:	2f62      	cmp	r7, #98	@ 0x62
 8007652:	d80a      	bhi.n	800766a <_printf_i+0x32>
 8007654:	2f00      	cmp	r7, #0
 8007656:	f000 80d1 	beq.w	80077fc <_printf_i+0x1c4>
 800765a:	2f58      	cmp	r7, #88	@ 0x58
 800765c:	f000 80b8 	beq.w	80077d0 <_printf_i+0x198>
 8007660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007664:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007668:	e03a      	b.n	80076e0 <_printf_i+0xa8>
 800766a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800766e:	2b15      	cmp	r3, #21
 8007670:	d8f6      	bhi.n	8007660 <_printf_i+0x28>
 8007672:	a101      	add	r1, pc, #4	@ (adr r1, 8007678 <_printf_i+0x40>)
 8007674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007678:	080076d1 	.word	0x080076d1
 800767c:	080076e5 	.word	0x080076e5
 8007680:	08007661 	.word	0x08007661
 8007684:	08007661 	.word	0x08007661
 8007688:	08007661 	.word	0x08007661
 800768c:	08007661 	.word	0x08007661
 8007690:	080076e5 	.word	0x080076e5
 8007694:	08007661 	.word	0x08007661
 8007698:	08007661 	.word	0x08007661
 800769c:	08007661 	.word	0x08007661
 80076a0:	08007661 	.word	0x08007661
 80076a4:	080077e3 	.word	0x080077e3
 80076a8:	0800770f 	.word	0x0800770f
 80076ac:	0800779d 	.word	0x0800779d
 80076b0:	08007661 	.word	0x08007661
 80076b4:	08007661 	.word	0x08007661
 80076b8:	08007805 	.word	0x08007805
 80076bc:	08007661 	.word	0x08007661
 80076c0:	0800770f 	.word	0x0800770f
 80076c4:	08007661 	.word	0x08007661
 80076c8:	08007661 	.word	0x08007661
 80076cc:	080077a5 	.word	0x080077a5
 80076d0:	6833      	ldr	r3, [r6, #0]
 80076d2:	1d1a      	adds	r2, r3, #4
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6032      	str	r2, [r6, #0]
 80076d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076e0:	2301      	movs	r3, #1
 80076e2:	e09c      	b.n	800781e <_printf_i+0x1e6>
 80076e4:	6833      	ldr	r3, [r6, #0]
 80076e6:	6820      	ldr	r0, [r4, #0]
 80076e8:	1d19      	adds	r1, r3, #4
 80076ea:	6031      	str	r1, [r6, #0]
 80076ec:	0606      	lsls	r6, r0, #24
 80076ee:	d501      	bpl.n	80076f4 <_printf_i+0xbc>
 80076f0:	681d      	ldr	r5, [r3, #0]
 80076f2:	e003      	b.n	80076fc <_printf_i+0xc4>
 80076f4:	0645      	lsls	r5, r0, #25
 80076f6:	d5fb      	bpl.n	80076f0 <_printf_i+0xb8>
 80076f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076fc:	2d00      	cmp	r5, #0
 80076fe:	da03      	bge.n	8007708 <_printf_i+0xd0>
 8007700:	232d      	movs	r3, #45	@ 0x2d
 8007702:	426d      	negs	r5, r5
 8007704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007708:	4858      	ldr	r0, [pc, #352]	@ (800786c <_printf_i+0x234>)
 800770a:	230a      	movs	r3, #10
 800770c:	e011      	b.n	8007732 <_printf_i+0xfa>
 800770e:	6821      	ldr	r1, [r4, #0]
 8007710:	6833      	ldr	r3, [r6, #0]
 8007712:	0608      	lsls	r0, r1, #24
 8007714:	f853 5b04 	ldr.w	r5, [r3], #4
 8007718:	d402      	bmi.n	8007720 <_printf_i+0xe8>
 800771a:	0649      	lsls	r1, r1, #25
 800771c:	bf48      	it	mi
 800771e:	b2ad      	uxthmi	r5, r5
 8007720:	2f6f      	cmp	r7, #111	@ 0x6f
 8007722:	4852      	ldr	r0, [pc, #328]	@ (800786c <_printf_i+0x234>)
 8007724:	6033      	str	r3, [r6, #0]
 8007726:	bf14      	ite	ne
 8007728:	230a      	movne	r3, #10
 800772a:	2308      	moveq	r3, #8
 800772c:	2100      	movs	r1, #0
 800772e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007732:	6866      	ldr	r6, [r4, #4]
 8007734:	60a6      	str	r6, [r4, #8]
 8007736:	2e00      	cmp	r6, #0
 8007738:	db05      	blt.n	8007746 <_printf_i+0x10e>
 800773a:	6821      	ldr	r1, [r4, #0]
 800773c:	432e      	orrs	r6, r5
 800773e:	f021 0104 	bic.w	r1, r1, #4
 8007742:	6021      	str	r1, [r4, #0]
 8007744:	d04b      	beq.n	80077de <_printf_i+0x1a6>
 8007746:	4616      	mov	r6, r2
 8007748:	fbb5 f1f3 	udiv	r1, r5, r3
 800774c:	fb03 5711 	mls	r7, r3, r1, r5
 8007750:	5dc7      	ldrb	r7, [r0, r7]
 8007752:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007756:	462f      	mov	r7, r5
 8007758:	42bb      	cmp	r3, r7
 800775a:	460d      	mov	r5, r1
 800775c:	d9f4      	bls.n	8007748 <_printf_i+0x110>
 800775e:	2b08      	cmp	r3, #8
 8007760:	d10b      	bne.n	800777a <_printf_i+0x142>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	07df      	lsls	r7, r3, #31
 8007766:	d508      	bpl.n	800777a <_printf_i+0x142>
 8007768:	6923      	ldr	r3, [r4, #16]
 800776a:	6861      	ldr	r1, [r4, #4]
 800776c:	4299      	cmp	r1, r3
 800776e:	bfde      	ittt	le
 8007770:	2330      	movle	r3, #48	@ 0x30
 8007772:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007776:	f106 36ff 	addle.w	r6, r6, #4294967295
 800777a:	1b92      	subs	r2, r2, r6
 800777c:	6122      	str	r2, [r4, #16]
 800777e:	f8cd a000 	str.w	sl, [sp]
 8007782:	464b      	mov	r3, r9
 8007784:	aa03      	add	r2, sp, #12
 8007786:	4621      	mov	r1, r4
 8007788:	4640      	mov	r0, r8
 800778a:	f7ff fee7 	bl	800755c <_printf_common>
 800778e:	3001      	adds	r0, #1
 8007790:	d14a      	bne.n	8007828 <_printf_i+0x1f0>
 8007792:	f04f 30ff 	mov.w	r0, #4294967295
 8007796:	b004      	add	sp, #16
 8007798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	f043 0320 	orr.w	r3, r3, #32
 80077a2:	6023      	str	r3, [r4, #0]
 80077a4:	4832      	ldr	r0, [pc, #200]	@ (8007870 <_printf_i+0x238>)
 80077a6:	2778      	movs	r7, #120	@ 0x78
 80077a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	6831      	ldr	r1, [r6, #0]
 80077b0:	061f      	lsls	r7, r3, #24
 80077b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80077b6:	d402      	bmi.n	80077be <_printf_i+0x186>
 80077b8:	065f      	lsls	r7, r3, #25
 80077ba:	bf48      	it	mi
 80077bc:	b2ad      	uxthmi	r5, r5
 80077be:	6031      	str	r1, [r6, #0]
 80077c0:	07d9      	lsls	r1, r3, #31
 80077c2:	bf44      	itt	mi
 80077c4:	f043 0320 	orrmi.w	r3, r3, #32
 80077c8:	6023      	strmi	r3, [r4, #0]
 80077ca:	b11d      	cbz	r5, 80077d4 <_printf_i+0x19c>
 80077cc:	2310      	movs	r3, #16
 80077ce:	e7ad      	b.n	800772c <_printf_i+0xf4>
 80077d0:	4826      	ldr	r0, [pc, #152]	@ (800786c <_printf_i+0x234>)
 80077d2:	e7e9      	b.n	80077a8 <_printf_i+0x170>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	f023 0320 	bic.w	r3, r3, #32
 80077da:	6023      	str	r3, [r4, #0]
 80077dc:	e7f6      	b.n	80077cc <_printf_i+0x194>
 80077de:	4616      	mov	r6, r2
 80077e0:	e7bd      	b.n	800775e <_printf_i+0x126>
 80077e2:	6833      	ldr	r3, [r6, #0]
 80077e4:	6825      	ldr	r5, [r4, #0]
 80077e6:	6961      	ldr	r1, [r4, #20]
 80077e8:	1d18      	adds	r0, r3, #4
 80077ea:	6030      	str	r0, [r6, #0]
 80077ec:	062e      	lsls	r6, r5, #24
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	d501      	bpl.n	80077f6 <_printf_i+0x1be>
 80077f2:	6019      	str	r1, [r3, #0]
 80077f4:	e002      	b.n	80077fc <_printf_i+0x1c4>
 80077f6:	0668      	lsls	r0, r5, #25
 80077f8:	d5fb      	bpl.n	80077f2 <_printf_i+0x1ba>
 80077fa:	8019      	strh	r1, [r3, #0]
 80077fc:	2300      	movs	r3, #0
 80077fe:	6123      	str	r3, [r4, #16]
 8007800:	4616      	mov	r6, r2
 8007802:	e7bc      	b.n	800777e <_printf_i+0x146>
 8007804:	6833      	ldr	r3, [r6, #0]
 8007806:	1d1a      	adds	r2, r3, #4
 8007808:	6032      	str	r2, [r6, #0]
 800780a:	681e      	ldr	r6, [r3, #0]
 800780c:	6862      	ldr	r2, [r4, #4]
 800780e:	2100      	movs	r1, #0
 8007810:	4630      	mov	r0, r6
 8007812:	f7f8 fcdd 	bl	80001d0 <memchr>
 8007816:	b108      	cbz	r0, 800781c <_printf_i+0x1e4>
 8007818:	1b80      	subs	r0, r0, r6
 800781a:	6060      	str	r0, [r4, #4]
 800781c:	6863      	ldr	r3, [r4, #4]
 800781e:	6123      	str	r3, [r4, #16]
 8007820:	2300      	movs	r3, #0
 8007822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007826:	e7aa      	b.n	800777e <_printf_i+0x146>
 8007828:	6923      	ldr	r3, [r4, #16]
 800782a:	4632      	mov	r2, r6
 800782c:	4649      	mov	r1, r9
 800782e:	4640      	mov	r0, r8
 8007830:	47d0      	blx	sl
 8007832:	3001      	adds	r0, #1
 8007834:	d0ad      	beq.n	8007792 <_printf_i+0x15a>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	079b      	lsls	r3, r3, #30
 800783a:	d413      	bmi.n	8007864 <_printf_i+0x22c>
 800783c:	68e0      	ldr	r0, [r4, #12]
 800783e:	9b03      	ldr	r3, [sp, #12]
 8007840:	4298      	cmp	r0, r3
 8007842:	bfb8      	it	lt
 8007844:	4618      	movlt	r0, r3
 8007846:	e7a6      	b.n	8007796 <_printf_i+0x15e>
 8007848:	2301      	movs	r3, #1
 800784a:	4632      	mov	r2, r6
 800784c:	4649      	mov	r1, r9
 800784e:	4640      	mov	r0, r8
 8007850:	47d0      	blx	sl
 8007852:	3001      	adds	r0, #1
 8007854:	d09d      	beq.n	8007792 <_printf_i+0x15a>
 8007856:	3501      	adds	r5, #1
 8007858:	68e3      	ldr	r3, [r4, #12]
 800785a:	9903      	ldr	r1, [sp, #12]
 800785c:	1a5b      	subs	r3, r3, r1
 800785e:	42ab      	cmp	r3, r5
 8007860:	dcf2      	bgt.n	8007848 <_printf_i+0x210>
 8007862:	e7eb      	b.n	800783c <_printf_i+0x204>
 8007864:	2500      	movs	r5, #0
 8007866:	f104 0619 	add.w	r6, r4, #25
 800786a:	e7f5      	b.n	8007858 <_printf_i+0x220>
 800786c:	08008385 	.word	0x08008385
 8007870:	08008396 	.word	0x08008396

08007874 <__sflush_r>:
 8007874:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800787c:	0716      	lsls	r6, r2, #28
 800787e:	4605      	mov	r5, r0
 8007880:	460c      	mov	r4, r1
 8007882:	d454      	bmi.n	800792e <__sflush_r+0xba>
 8007884:	684b      	ldr	r3, [r1, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	dc02      	bgt.n	8007890 <__sflush_r+0x1c>
 800788a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800788c:	2b00      	cmp	r3, #0
 800788e:	dd48      	ble.n	8007922 <__sflush_r+0xae>
 8007890:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007892:	2e00      	cmp	r6, #0
 8007894:	d045      	beq.n	8007922 <__sflush_r+0xae>
 8007896:	2300      	movs	r3, #0
 8007898:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800789c:	682f      	ldr	r7, [r5, #0]
 800789e:	6a21      	ldr	r1, [r4, #32]
 80078a0:	602b      	str	r3, [r5, #0]
 80078a2:	d030      	beq.n	8007906 <__sflush_r+0x92>
 80078a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078a6:	89a3      	ldrh	r3, [r4, #12]
 80078a8:	0759      	lsls	r1, r3, #29
 80078aa:	d505      	bpl.n	80078b8 <__sflush_r+0x44>
 80078ac:	6863      	ldr	r3, [r4, #4]
 80078ae:	1ad2      	subs	r2, r2, r3
 80078b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80078b2:	b10b      	cbz	r3, 80078b8 <__sflush_r+0x44>
 80078b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80078b6:	1ad2      	subs	r2, r2, r3
 80078b8:	2300      	movs	r3, #0
 80078ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078bc:	6a21      	ldr	r1, [r4, #32]
 80078be:	4628      	mov	r0, r5
 80078c0:	47b0      	blx	r6
 80078c2:	1c43      	adds	r3, r0, #1
 80078c4:	89a3      	ldrh	r3, [r4, #12]
 80078c6:	d106      	bne.n	80078d6 <__sflush_r+0x62>
 80078c8:	6829      	ldr	r1, [r5, #0]
 80078ca:	291d      	cmp	r1, #29
 80078cc:	d82b      	bhi.n	8007926 <__sflush_r+0xb2>
 80078ce:	4a2a      	ldr	r2, [pc, #168]	@ (8007978 <__sflush_r+0x104>)
 80078d0:	40ca      	lsrs	r2, r1
 80078d2:	07d6      	lsls	r6, r2, #31
 80078d4:	d527      	bpl.n	8007926 <__sflush_r+0xb2>
 80078d6:	2200      	movs	r2, #0
 80078d8:	6062      	str	r2, [r4, #4]
 80078da:	04d9      	lsls	r1, r3, #19
 80078dc:	6922      	ldr	r2, [r4, #16]
 80078de:	6022      	str	r2, [r4, #0]
 80078e0:	d504      	bpl.n	80078ec <__sflush_r+0x78>
 80078e2:	1c42      	adds	r2, r0, #1
 80078e4:	d101      	bne.n	80078ea <__sflush_r+0x76>
 80078e6:	682b      	ldr	r3, [r5, #0]
 80078e8:	b903      	cbnz	r3, 80078ec <__sflush_r+0x78>
 80078ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80078ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078ee:	602f      	str	r7, [r5, #0]
 80078f0:	b1b9      	cbz	r1, 8007922 <__sflush_r+0xae>
 80078f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078f6:	4299      	cmp	r1, r3
 80078f8:	d002      	beq.n	8007900 <__sflush_r+0x8c>
 80078fa:	4628      	mov	r0, r5
 80078fc:	f7ff fbf4 	bl	80070e8 <_free_r>
 8007900:	2300      	movs	r3, #0
 8007902:	6363      	str	r3, [r4, #52]	@ 0x34
 8007904:	e00d      	b.n	8007922 <__sflush_r+0xae>
 8007906:	2301      	movs	r3, #1
 8007908:	4628      	mov	r0, r5
 800790a:	47b0      	blx	r6
 800790c:	4602      	mov	r2, r0
 800790e:	1c50      	adds	r0, r2, #1
 8007910:	d1c9      	bne.n	80078a6 <__sflush_r+0x32>
 8007912:	682b      	ldr	r3, [r5, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d0c6      	beq.n	80078a6 <__sflush_r+0x32>
 8007918:	2b1d      	cmp	r3, #29
 800791a:	d001      	beq.n	8007920 <__sflush_r+0xac>
 800791c:	2b16      	cmp	r3, #22
 800791e:	d11e      	bne.n	800795e <__sflush_r+0xea>
 8007920:	602f      	str	r7, [r5, #0]
 8007922:	2000      	movs	r0, #0
 8007924:	e022      	b.n	800796c <__sflush_r+0xf8>
 8007926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800792a:	b21b      	sxth	r3, r3
 800792c:	e01b      	b.n	8007966 <__sflush_r+0xf2>
 800792e:	690f      	ldr	r7, [r1, #16]
 8007930:	2f00      	cmp	r7, #0
 8007932:	d0f6      	beq.n	8007922 <__sflush_r+0xae>
 8007934:	0793      	lsls	r3, r2, #30
 8007936:	680e      	ldr	r6, [r1, #0]
 8007938:	bf08      	it	eq
 800793a:	694b      	ldreq	r3, [r1, #20]
 800793c:	600f      	str	r7, [r1, #0]
 800793e:	bf18      	it	ne
 8007940:	2300      	movne	r3, #0
 8007942:	eba6 0807 	sub.w	r8, r6, r7
 8007946:	608b      	str	r3, [r1, #8]
 8007948:	f1b8 0f00 	cmp.w	r8, #0
 800794c:	dde9      	ble.n	8007922 <__sflush_r+0xae>
 800794e:	6a21      	ldr	r1, [r4, #32]
 8007950:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007952:	4643      	mov	r3, r8
 8007954:	463a      	mov	r2, r7
 8007956:	4628      	mov	r0, r5
 8007958:	47b0      	blx	r6
 800795a:	2800      	cmp	r0, #0
 800795c:	dc08      	bgt.n	8007970 <__sflush_r+0xfc>
 800795e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007966:	81a3      	strh	r3, [r4, #12]
 8007968:	f04f 30ff 	mov.w	r0, #4294967295
 800796c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007970:	4407      	add	r7, r0
 8007972:	eba8 0800 	sub.w	r8, r8, r0
 8007976:	e7e7      	b.n	8007948 <__sflush_r+0xd4>
 8007978:	20400001 	.word	0x20400001

0800797c <_fflush_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	690b      	ldr	r3, [r1, #16]
 8007980:	4605      	mov	r5, r0
 8007982:	460c      	mov	r4, r1
 8007984:	b913      	cbnz	r3, 800798c <_fflush_r+0x10>
 8007986:	2500      	movs	r5, #0
 8007988:	4628      	mov	r0, r5
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	b118      	cbz	r0, 8007996 <_fflush_r+0x1a>
 800798e:	6a03      	ldr	r3, [r0, #32]
 8007990:	b90b      	cbnz	r3, 8007996 <_fflush_r+0x1a>
 8007992:	f7ff f9af 	bl	8006cf4 <__sinit>
 8007996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0f3      	beq.n	8007986 <_fflush_r+0xa>
 800799e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079a0:	07d0      	lsls	r0, r2, #31
 80079a2:	d404      	bmi.n	80079ae <_fflush_r+0x32>
 80079a4:	0599      	lsls	r1, r3, #22
 80079a6:	d402      	bmi.n	80079ae <_fflush_r+0x32>
 80079a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079aa:	f7ff fb9a 	bl	80070e2 <__retarget_lock_acquire_recursive>
 80079ae:	4628      	mov	r0, r5
 80079b0:	4621      	mov	r1, r4
 80079b2:	f7ff ff5f 	bl	8007874 <__sflush_r>
 80079b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079b8:	07da      	lsls	r2, r3, #31
 80079ba:	4605      	mov	r5, r0
 80079bc:	d4e4      	bmi.n	8007988 <_fflush_r+0xc>
 80079be:	89a3      	ldrh	r3, [r4, #12]
 80079c0:	059b      	lsls	r3, r3, #22
 80079c2:	d4e1      	bmi.n	8007988 <_fflush_r+0xc>
 80079c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079c6:	f7ff fb8d 	bl	80070e4 <__retarget_lock_release_recursive>
 80079ca:	e7dd      	b.n	8007988 <_fflush_r+0xc>

080079cc <__swhatbuf_r>:
 80079cc:	b570      	push	{r4, r5, r6, lr}
 80079ce:	460c      	mov	r4, r1
 80079d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d4:	2900      	cmp	r1, #0
 80079d6:	b096      	sub	sp, #88	@ 0x58
 80079d8:	4615      	mov	r5, r2
 80079da:	461e      	mov	r6, r3
 80079dc:	da0d      	bge.n	80079fa <__swhatbuf_r+0x2e>
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80079e4:	f04f 0100 	mov.w	r1, #0
 80079e8:	bf14      	ite	ne
 80079ea:	2340      	movne	r3, #64	@ 0x40
 80079ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80079f0:	2000      	movs	r0, #0
 80079f2:	6031      	str	r1, [r6, #0]
 80079f4:	602b      	str	r3, [r5, #0]
 80079f6:	b016      	add	sp, #88	@ 0x58
 80079f8:	bd70      	pop	{r4, r5, r6, pc}
 80079fa:	466a      	mov	r2, sp
 80079fc:	f000 f848 	bl	8007a90 <_fstat_r>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	dbec      	blt.n	80079de <__swhatbuf_r+0x12>
 8007a04:	9901      	ldr	r1, [sp, #4]
 8007a06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a0e:	4259      	negs	r1, r3
 8007a10:	4159      	adcs	r1, r3
 8007a12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a16:	e7eb      	b.n	80079f0 <__swhatbuf_r+0x24>

08007a18 <__smakebuf_r>:
 8007a18:	898b      	ldrh	r3, [r1, #12]
 8007a1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a1c:	079d      	lsls	r5, r3, #30
 8007a1e:	4606      	mov	r6, r0
 8007a20:	460c      	mov	r4, r1
 8007a22:	d507      	bpl.n	8007a34 <__smakebuf_r+0x1c>
 8007a24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a28:	6023      	str	r3, [r4, #0]
 8007a2a:	6123      	str	r3, [r4, #16]
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	6163      	str	r3, [r4, #20]
 8007a30:	b003      	add	sp, #12
 8007a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a34:	ab01      	add	r3, sp, #4
 8007a36:	466a      	mov	r2, sp
 8007a38:	f7ff ffc8 	bl	80079cc <__swhatbuf_r>
 8007a3c:	9f00      	ldr	r7, [sp, #0]
 8007a3e:	4605      	mov	r5, r0
 8007a40:	4639      	mov	r1, r7
 8007a42:	4630      	mov	r0, r6
 8007a44:	f7ff fbbc 	bl	80071c0 <_malloc_r>
 8007a48:	b948      	cbnz	r0, 8007a5e <__smakebuf_r+0x46>
 8007a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a4e:	059a      	lsls	r2, r3, #22
 8007a50:	d4ee      	bmi.n	8007a30 <__smakebuf_r+0x18>
 8007a52:	f023 0303 	bic.w	r3, r3, #3
 8007a56:	f043 0302 	orr.w	r3, r3, #2
 8007a5a:	81a3      	strh	r3, [r4, #12]
 8007a5c:	e7e2      	b.n	8007a24 <__smakebuf_r+0xc>
 8007a5e:	89a3      	ldrh	r3, [r4, #12]
 8007a60:	6020      	str	r0, [r4, #0]
 8007a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a66:	81a3      	strh	r3, [r4, #12]
 8007a68:	9b01      	ldr	r3, [sp, #4]
 8007a6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a6e:	b15b      	cbz	r3, 8007a88 <__smakebuf_r+0x70>
 8007a70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a74:	4630      	mov	r0, r6
 8007a76:	f000 f81d 	bl	8007ab4 <_isatty_r>
 8007a7a:	b128      	cbz	r0, 8007a88 <__smakebuf_r+0x70>
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	f023 0303 	bic.w	r3, r3, #3
 8007a82:	f043 0301 	orr.w	r3, r3, #1
 8007a86:	81a3      	strh	r3, [r4, #12]
 8007a88:	89a3      	ldrh	r3, [r4, #12]
 8007a8a:	431d      	orrs	r5, r3
 8007a8c:	81a5      	strh	r5, [r4, #12]
 8007a8e:	e7cf      	b.n	8007a30 <__smakebuf_r+0x18>

08007a90 <_fstat_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4d07      	ldr	r5, [pc, #28]	@ (8007ab0 <_fstat_r+0x20>)
 8007a94:	2300      	movs	r3, #0
 8007a96:	4604      	mov	r4, r0
 8007a98:	4608      	mov	r0, r1
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	602b      	str	r3, [r5, #0]
 8007a9e:	f7fa f88c 	bl	8001bba <_fstat>
 8007aa2:	1c43      	adds	r3, r0, #1
 8007aa4:	d102      	bne.n	8007aac <_fstat_r+0x1c>
 8007aa6:	682b      	ldr	r3, [r5, #0]
 8007aa8:	b103      	cbz	r3, 8007aac <_fstat_r+0x1c>
 8007aaa:	6023      	str	r3, [r4, #0]
 8007aac:	bd38      	pop	{r3, r4, r5, pc}
 8007aae:	bf00      	nop
 8007ab0:	20000364 	.word	0x20000364

08007ab4 <_isatty_r>:
 8007ab4:	b538      	push	{r3, r4, r5, lr}
 8007ab6:	4d06      	ldr	r5, [pc, #24]	@ (8007ad0 <_isatty_r+0x1c>)
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4604      	mov	r4, r0
 8007abc:	4608      	mov	r0, r1
 8007abe:	602b      	str	r3, [r5, #0]
 8007ac0:	f7fa f88b 	bl	8001bda <_isatty>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_isatty_r+0x1a>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_isatty_r+0x1a>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	20000364 	.word	0x20000364

08007ad4 <_sbrk_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	4d06      	ldr	r5, [pc, #24]	@ (8007af0 <_sbrk_r+0x1c>)
 8007ad8:	2300      	movs	r3, #0
 8007ada:	4604      	mov	r4, r0
 8007adc:	4608      	mov	r0, r1
 8007ade:	602b      	str	r3, [r5, #0]
 8007ae0:	f7fa f894 	bl	8001c0c <_sbrk>
 8007ae4:	1c43      	adds	r3, r0, #1
 8007ae6:	d102      	bne.n	8007aee <_sbrk_r+0x1a>
 8007ae8:	682b      	ldr	r3, [r5, #0]
 8007aea:	b103      	cbz	r3, 8007aee <_sbrk_r+0x1a>
 8007aec:	6023      	str	r3, [r4, #0]
 8007aee:	bd38      	pop	{r3, r4, r5, pc}
 8007af0:	20000364 	.word	0x20000364

08007af4 <atan2>:
 8007af4:	f000 b904 	b.w	8007d00 <__ieee754_atan2>

08007af8 <sqrt>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	ed2d 8b02 	vpush	{d8}
 8007afe:	ec55 4b10 	vmov	r4, r5, d0
 8007b02:	f000 f825 	bl	8007b50 <__ieee754_sqrt>
 8007b06:	4622      	mov	r2, r4
 8007b08:	462b      	mov	r3, r5
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	eeb0 8a40 	vmov.f32	s16, s0
 8007b12:	eef0 8a60 	vmov.f32	s17, s1
 8007b16:	f7f9 f801 	bl	8000b1c <__aeabi_dcmpun>
 8007b1a:	b990      	cbnz	r0, 8007b42 <sqrt+0x4a>
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	2300      	movs	r3, #0
 8007b20:	4620      	mov	r0, r4
 8007b22:	4629      	mov	r1, r5
 8007b24:	f7f8 ffd2 	bl	8000acc <__aeabi_dcmplt>
 8007b28:	b158      	cbz	r0, 8007b42 <sqrt+0x4a>
 8007b2a:	f7ff faaf 	bl	800708c <__errno>
 8007b2e:	2321      	movs	r3, #33	@ 0x21
 8007b30:	6003      	str	r3, [r0, #0]
 8007b32:	2200      	movs	r2, #0
 8007b34:	2300      	movs	r3, #0
 8007b36:	4610      	mov	r0, r2
 8007b38:	4619      	mov	r1, r3
 8007b3a:	f7f8 fe7f 	bl	800083c <__aeabi_ddiv>
 8007b3e:	ec41 0b18 	vmov	d8, r0, r1
 8007b42:	eeb0 0a48 	vmov.f32	s0, s16
 8007b46:	eef0 0a68 	vmov.f32	s1, s17
 8007b4a:	ecbd 8b02 	vpop	{d8}
 8007b4e:	bd38      	pop	{r3, r4, r5, pc}

08007b50 <__ieee754_sqrt>:
 8007b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	4a66      	ldr	r2, [pc, #408]	@ (8007cf0 <__ieee754_sqrt+0x1a0>)
 8007b56:	ec55 4b10 	vmov	r4, r5, d0
 8007b5a:	43aa      	bics	r2, r5
 8007b5c:	462b      	mov	r3, r5
 8007b5e:	4621      	mov	r1, r4
 8007b60:	d110      	bne.n	8007b84 <__ieee754_sqrt+0x34>
 8007b62:	4622      	mov	r2, r4
 8007b64:	4620      	mov	r0, r4
 8007b66:	4629      	mov	r1, r5
 8007b68:	f7f8 fd3e 	bl	80005e8 <__aeabi_dmul>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4620      	mov	r0, r4
 8007b72:	4629      	mov	r1, r5
 8007b74:	f7f8 fb82 	bl	800027c <__adddf3>
 8007b78:	4604      	mov	r4, r0
 8007b7a:	460d      	mov	r5, r1
 8007b7c:	ec45 4b10 	vmov	d0, r4, r5
 8007b80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b84:	2d00      	cmp	r5, #0
 8007b86:	dc0e      	bgt.n	8007ba6 <__ieee754_sqrt+0x56>
 8007b88:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007b8c:	4322      	orrs	r2, r4
 8007b8e:	d0f5      	beq.n	8007b7c <__ieee754_sqrt+0x2c>
 8007b90:	b19d      	cbz	r5, 8007bba <__ieee754_sqrt+0x6a>
 8007b92:	4622      	mov	r2, r4
 8007b94:	4620      	mov	r0, r4
 8007b96:	4629      	mov	r1, r5
 8007b98:	f7f8 fb6e 	bl	8000278 <__aeabi_dsub>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	f7f8 fe4c 	bl	800083c <__aeabi_ddiv>
 8007ba4:	e7e8      	b.n	8007b78 <__ieee754_sqrt+0x28>
 8007ba6:	152a      	asrs	r2, r5, #20
 8007ba8:	d115      	bne.n	8007bd6 <__ieee754_sqrt+0x86>
 8007baa:	2000      	movs	r0, #0
 8007bac:	e009      	b.n	8007bc2 <__ieee754_sqrt+0x72>
 8007bae:	0acb      	lsrs	r3, r1, #11
 8007bb0:	3a15      	subs	r2, #21
 8007bb2:	0549      	lsls	r1, r1, #21
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d0fa      	beq.n	8007bae <__ieee754_sqrt+0x5e>
 8007bb8:	e7f7      	b.n	8007baa <__ieee754_sqrt+0x5a>
 8007bba:	462a      	mov	r2, r5
 8007bbc:	e7fa      	b.n	8007bb4 <__ieee754_sqrt+0x64>
 8007bbe:	005b      	lsls	r3, r3, #1
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	02dc      	lsls	r4, r3, #11
 8007bc4:	d5fb      	bpl.n	8007bbe <__ieee754_sqrt+0x6e>
 8007bc6:	1e44      	subs	r4, r0, #1
 8007bc8:	1b12      	subs	r2, r2, r4
 8007bca:	f1c0 0420 	rsb	r4, r0, #32
 8007bce:	fa21 f404 	lsr.w	r4, r1, r4
 8007bd2:	4323      	orrs	r3, r4
 8007bd4:	4081      	lsls	r1, r0
 8007bd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bda:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8007bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007be2:	07d2      	lsls	r2, r2, #31
 8007be4:	bf5c      	itt	pl
 8007be6:	005b      	lslpl	r3, r3, #1
 8007be8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007bf0:	bf58      	it	pl
 8007bf2:	0049      	lslpl	r1, r1, #1
 8007bf4:	2600      	movs	r6, #0
 8007bf6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007bfa:	107f      	asrs	r7, r7, #1
 8007bfc:	0049      	lsls	r1, r1, #1
 8007bfe:	2016      	movs	r0, #22
 8007c00:	4632      	mov	r2, r6
 8007c02:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007c06:	1915      	adds	r5, r2, r4
 8007c08:	429d      	cmp	r5, r3
 8007c0a:	bfde      	ittt	le
 8007c0c:	192a      	addle	r2, r5, r4
 8007c0e:	1b5b      	suble	r3, r3, r5
 8007c10:	1936      	addle	r6, r6, r4
 8007c12:	0fcd      	lsrs	r5, r1, #31
 8007c14:	3801      	subs	r0, #1
 8007c16:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8007c1a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007c1e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007c22:	d1f0      	bne.n	8007c06 <__ieee754_sqrt+0xb6>
 8007c24:	4605      	mov	r5, r0
 8007c26:	2420      	movs	r4, #32
 8007c28:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	eb0c 0e00 	add.w	lr, ip, r0
 8007c32:	dc02      	bgt.n	8007c3a <__ieee754_sqrt+0xea>
 8007c34:	d113      	bne.n	8007c5e <__ieee754_sqrt+0x10e>
 8007c36:	458e      	cmp	lr, r1
 8007c38:	d811      	bhi.n	8007c5e <__ieee754_sqrt+0x10e>
 8007c3a:	f1be 0f00 	cmp.w	lr, #0
 8007c3e:	eb0e 000c 	add.w	r0, lr, ip
 8007c42:	da3f      	bge.n	8007cc4 <__ieee754_sqrt+0x174>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	db3d      	blt.n	8007cc4 <__ieee754_sqrt+0x174>
 8007c48:	f102 0801 	add.w	r8, r2, #1
 8007c4c:	1a9b      	subs	r3, r3, r2
 8007c4e:	458e      	cmp	lr, r1
 8007c50:	bf88      	it	hi
 8007c52:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007c56:	eba1 010e 	sub.w	r1, r1, lr
 8007c5a:	4465      	add	r5, ip
 8007c5c:	4642      	mov	r2, r8
 8007c5e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007c62:	3c01      	subs	r4, #1
 8007c64:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007c68:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007c6c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007c70:	d1dc      	bne.n	8007c2c <__ieee754_sqrt+0xdc>
 8007c72:	4319      	orrs	r1, r3
 8007c74:	d01b      	beq.n	8007cae <__ieee754_sqrt+0x15e>
 8007c76:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8007cf4 <__ieee754_sqrt+0x1a4>
 8007c7a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8007cf8 <__ieee754_sqrt+0x1a8>
 8007c7e:	e9da 0100 	ldrd	r0, r1, [sl]
 8007c82:	e9db 2300 	ldrd	r2, r3, [fp]
 8007c86:	f7f8 faf7 	bl	8000278 <__aeabi_dsub>
 8007c8a:	e9da 8900 	ldrd	r8, r9, [sl]
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	4640      	mov	r0, r8
 8007c94:	4649      	mov	r1, r9
 8007c96:	f7f8 ff23 	bl	8000ae0 <__aeabi_dcmple>
 8007c9a:	b140      	cbz	r0, 8007cae <__ieee754_sqrt+0x15e>
 8007c9c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007ca0:	e9da 0100 	ldrd	r0, r1, [sl]
 8007ca4:	e9db 2300 	ldrd	r2, r3, [fp]
 8007ca8:	d10e      	bne.n	8007cc8 <__ieee754_sqrt+0x178>
 8007caa:	3601      	adds	r6, #1
 8007cac:	4625      	mov	r5, r4
 8007cae:	1073      	asrs	r3, r6, #1
 8007cb0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8007cb4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8007cb8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8007cbc:	086b      	lsrs	r3, r5, #1
 8007cbe:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8007cc2:	e759      	b.n	8007b78 <__ieee754_sqrt+0x28>
 8007cc4:	4690      	mov	r8, r2
 8007cc6:	e7c1      	b.n	8007c4c <__ieee754_sqrt+0xfc>
 8007cc8:	f7f8 fad8 	bl	800027c <__adddf3>
 8007ccc:	e9da 8900 	ldrd	r8, r9, [sl]
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4640      	mov	r0, r8
 8007cd6:	4649      	mov	r1, r9
 8007cd8:	f7f8 fef8 	bl	8000acc <__aeabi_dcmplt>
 8007cdc:	b120      	cbz	r0, 8007ce8 <__ieee754_sqrt+0x198>
 8007cde:	1cab      	adds	r3, r5, #2
 8007ce0:	bf08      	it	eq
 8007ce2:	3601      	addeq	r6, #1
 8007ce4:	3502      	adds	r5, #2
 8007ce6:	e7e2      	b.n	8007cae <__ieee754_sqrt+0x15e>
 8007ce8:	1c6b      	adds	r3, r5, #1
 8007cea:	f023 0501 	bic.w	r5, r3, #1
 8007cee:	e7de      	b.n	8007cae <__ieee754_sqrt+0x15e>
 8007cf0:	7ff00000 	.word	0x7ff00000
 8007cf4:	080083b0 	.word	0x080083b0
 8007cf8:	080083a8 	.word	0x080083a8
 8007cfc:	00000000 	.word	0x00000000

08007d00 <__ieee754_atan2>:
 8007d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d04:	ec57 6b11 	vmov	r6, r7, d1
 8007d08:	4273      	negs	r3, r6
 8007d0a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8007e88 <__ieee754_atan2+0x188>
 8007d0e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8007d12:	4333      	orrs	r3, r6
 8007d14:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007d18:	4543      	cmp	r3, r8
 8007d1a:	ec51 0b10 	vmov	r0, r1, d0
 8007d1e:	4635      	mov	r5, r6
 8007d20:	d809      	bhi.n	8007d36 <__ieee754_atan2+0x36>
 8007d22:	4244      	negs	r4, r0
 8007d24:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007d28:	4304      	orrs	r4, r0
 8007d2a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007d2e:	4544      	cmp	r4, r8
 8007d30:	468e      	mov	lr, r1
 8007d32:	4681      	mov	r9, r0
 8007d34:	d907      	bls.n	8007d46 <__ieee754_atan2+0x46>
 8007d36:	4632      	mov	r2, r6
 8007d38:	463b      	mov	r3, r7
 8007d3a:	f7f8 fa9f 	bl	800027c <__adddf3>
 8007d3e:	ec41 0b10 	vmov	d0, r0, r1
 8007d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d46:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8007d4a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8007d4e:	4334      	orrs	r4, r6
 8007d50:	d103      	bne.n	8007d5a <__ieee754_atan2+0x5a>
 8007d52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d56:	f000 b89b 	b.w	8007e90 <atan>
 8007d5a:	17bc      	asrs	r4, r7, #30
 8007d5c:	f004 0402 	and.w	r4, r4, #2
 8007d60:	ea53 0909 	orrs.w	r9, r3, r9
 8007d64:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007d68:	d107      	bne.n	8007d7a <__ieee754_atan2+0x7a>
 8007d6a:	2c02      	cmp	r4, #2
 8007d6c:	d05f      	beq.n	8007e2e <__ieee754_atan2+0x12e>
 8007d6e:	2c03      	cmp	r4, #3
 8007d70:	d1e5      	bne.n	8007d3e <__ieee754_atan2+0x3e>
 8007d72:	a143      	add	r1, pc, #268	@ (adr r1, 8007e80 <__ieee754_atan2+0x180>)
 8007d74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d78:	e7e1      	b.n	8007d3e <__ieee754_atan2+0x3e>
 8007d7a:	4315      	orrs	r5, r2
 8007d7c:	d106      	bne.n	8007d8c <__ieee754_atan2+0x8c>
 8007d7e:	f1be 0f00 	cmp.w	lr, #0
 8007d82:	db5f      	blt.n	8007e44 <__ieee754_atan2+0x144>
 8007d84:	a136      	add	r1, pc, #216	@ (adr r1, 8007e60 <__ieee754_atan2+0x160>)
 8007d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d8a:	e7d8      	b.n	8007d3e <__ieee754_atan2+0x3e>
 8007d8c:	4542      	cmp	r2, r8
 8007d8e:	d10f      	bne.n	8007db0 <__ieee754_atan2+0xb0>
 8007d90:	4293      	cmp	r3, r2
 8007d92:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d96:	d107      	bne.n	8007da8 <__ieee754_atan2+0xa8>
 8007d98:	2c02      	cmp	r4, #2
 8007d9a:	d84c      	bhi.n	8007e36 <__ieee754_atan2+0x136>
 8007d9c:	4b36      	ldr	r3, [pc, #216]	@ (8007e78 <__ieee754_atan2+0x178>)
 8007d9e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007da2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007da6:	e7ca      	b.n	8007d3e <__ieee754_atan2+0x3e>
 8007da8:	2c02      	cmp	r4, #2
 8007daa:	d848      	bhi.n	8007e3e <__ieee754_atan2+0x13e>
 8007dac:	4b33      	ldr	r3, [pc, #204]	@ (8007e7c <__ieee754_atan2+0x17c>)
 8007dae:	e7f6      	b.n	8007d9e <__ieee754_atan2+0x9e>
 8007db0:	4543      	cmp	r3, r8
 8007db2:	d0e4      	beq.n	8007d7e <__ieee754_atan2+0x7e>
 8007db4:	1a9b      	subs	r3, r3, r2
 8007db6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8007dba:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007dbe:	da1e      	bge.n	8007dfe <__ieee754_atan2+0xfe>
 8007dc0:	2f00      	cmp	r7, #0
 8007dc2:	da01      	bge.n	8007dc8 <__ieee754_atan2+0xc8>
 8007dc4:	323c      	adds	r2, #60	@ 0x3c
 8007dc6:	db1e      	blt.n	8007e06 <__ieee754_atan2+0x106>
 8007dc8:	4632      	mov	r2, r6
 8007dca:	463b      	mov	r3, r7
 8007dcc:	f7f8 fd36 	bl	800083c <__aeabi_ddiv>
 8007dd0:	ec41 0b10 	vmov	d0, r0, r1
 8007dd4:	f000 f9f4 	bl	80081c0 <fabs>
 8007dd8:	f000 f85a 	bl	8007e90 <atan>
 8007ddc:	ec51 0b10 	vmov	r0, r1, d0
 8007de0:	2c01      	cmp	r4, #1
 8007de2:	d013      	beq.n	8007e0c <__ieee754_atan2+0x10c>
 8007de4:	2c02      	cmp	r4, #2
 8007de6:	d015      	beq.n	8007e14 <__ieee754_atan2+0x114>
 8007de8:	2c00      	cmp	r4, #0
 8007dea:	d0a8      	beq.n	8007d3e <__ieee754_atan2+0x3e>
 8007dec:	a318      	add	r3, pc, #96	@ (adr r3, 8007e50 <__ieee754_atan2+0x150>)
 8007dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df2:	f7f8 fa41 	bl	8000278 <__aeabi_dsub>
 8007df6:	a318      	add	r3, pc, #96	@ (adr r3, 8007e58 <__ieee754_atan2+0x158>)
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	e014      	b.n	8007e28 <__ieee754_atan2+0x128>
 8007dfe:	a118      	add	r1, pc, #96	@ (adr r1, 8007e60 <__ieee754_atan2+0x160>)
 8007e00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e04:	e7ec      	b.n	8007de0 <__ieee754_atan2+0xe0>
 8007e06:	2000      	movs	r0, #0
 8007e08:	2100      	movs	r1, #0
 8007e0a:	e7e9      	b.n	8007de0 <__ieee754_atan2+0xe0>
 8007e0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e10:	4619      	mov	r1, r3
 8007e12:	e794      	b.n	8007d3e <__ieee754_atan2+0x3e>
 8007e14:	a30e      	add	r3, pc, #56	@ (adr r3, 8007e50 <__ieee754_atan2+0x150>)
 8007e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1a:	f7f8 fa2d 	bl	8000278 <__aeabi_dsub>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	a10d      	add	r1, pc, #52	@ (adr r1, 8007e58 <__ieee754_atan2+0x158>)
 8007e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e28:	f7f8 fa26 	bl	8000278 <__aeabi_dsub>
 8007e2c:	e787      	b.n	8007d3e <__ieee754_atan2+0x3e>
 8007e2e:	a10a      	add	r1, pc, #40	@ (adr r1, 8007e58 <__ieee754_atan2+0x158>)
 8007e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e34:	e783      	b.n	8007d3e <__ieee754_atan2+0x3e>
 8007e36:	a10c      	add	r1, pc, #48	@ (adr r1, 8007e68 <__ieee754_atan2+0x168>)
 8007e38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e3c:	e77f      	b.n	8007d3e <__ieee754_atan2+0x3e>
 8007e3e:	2000      	movs	r0, #0
 8007e40:	2100      	movs	r1, #0
 8007e42:	e77c      	b.n	8007d3e <__ieee754_atan2+0x3e>
 8007e44:	a10a      	add	r1, pc, #40	@ (adr r1, 8007e70 <__ieee754_atan2+0x170>)
 8007e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e4a:	e778      	b.n	8007d3e <__ieee754_atan2+0x3e>
 8007e4c:	f3af 8000 	nop.w
 8007e50:	33145c07 	.word	0x33145c07
 8007e54:	3ca1a626 	.word	0x3ca1a626
 8007e58:	54442d18 	.word	0x54442d18
 8007e5c:	400921fb 	.word	0x400921fb
 8007e60:	54442d18 	.word	0x54442d18
 8007e64:	3ff921fb 	.word	0x3ff921fb
 8007e68:	54442d18 	.word	0x54442d18
 8007e6c:	3fe921fb 	.word	0x3fe921fb
 8007e70:	54442d18 	.word	0x54442d18
 8007e74:	bff921fb 	.word	0xbff921fb
 8007e78:	080083d0 	.word	0x080083d0
 8007e7c:	080083b8 	.word	0x080083b8
 8007e80:	54442d18 	.word	0x54442d18
 8007e84:	c00921fb 	.word	0xc00921fb
 8007e88:	7ff00000 	.word	0x7ff00000
 8007e8c:	00000000 	.word	0x00000000

08007e90 <atan>:
 8007e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	ec55 4b10 	vmov	r4, r5, d0
 8007e98:	4bbf      	ldr	r3, [pc, #764]	@ (8008198 <atan+0x308>)
 8007e9a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007e9e:	429e      	cmp	r6, r3
 8007ea0:	46ab      	mov	fp, r5
 8007ea2:	d918      	bls.n	8007ed6 <atan+0x46>
 8007ea4:	4bbd      	ldr	r3, [pc, #756]	@ (800819c <atan+0x30c>)
 8007ea6:	429e      	cmp	r6, r3
 8007ea8:	d801      	bhi.n	8007eae <atan+0x1e>
 8007eaa:	d109      	bne.n	8007ec0 <atan+0x30>
 8007eac:	b144      	cbz	r4, 8007ec0 <atan+0x30>
 8007eae:	4622      	mov	r2, r4
 8007eb0:	462b      	mov	r3, r5
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	f7f8 f9e1 	bl	800027c <__adddf3>
 8007eba:	4604      	mov	r4, r0
 8007ebc:	460d      	mov	r5, r1
 8007ebe:	e006      	b.n	8007ece <atan+0x3e>
 8007ec0:	f1bb 0f00 	cmp.w	fp, #0
 8007ec4:	f340 812b 	ble.w	800811e <atan+0x28e>
 8007ec8:	a597      	add	r5, pc, #604	@ (adr r5, 8008128 <atan+0x298>)
 8007eca:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ece:	ec45 4b10 	vmov	d0, r4, r5
 8007ed2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed6:	4bb2      	ldr	r3, [pc, #712]	@ (80081a0 <atan+0x310>)
 8007ed8:	429e      	cmp	r6, r3
 8007eda:	d813      	bhi.n	8007f04 <atan+0x74>
 8007edc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007ee0:	429e      	cmp	r6, r3
 8007ee2:	d80c      	bhi.n	8007efe <atan+0x6e>
 8007ee4:	a392      	add	r3, pc, #584	@ (adr r3, 8008130 <atan+0x2a0>)
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	4620      	mov	r0, r4
 8007eec:	4629      	mov	r1, r5
 8007eee:	f7f8 f9c5 	bl	800027c <__adddf3>
 8007ef2:	4bac      	ldr	r3, [pc, #688]	@ (80081a4 <atan+0x314>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f7f8 fe07 	bl	8000b08 <__aeabi_dcmpgt>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	d1e7      	bne.n	8007ece <atan+0x3e>
 8007efe:	f04f 3aff 	mov.w	sl, #4294967295
 8007f02:	e029      	b.n	8007f58 <atan+0xc8>
 8007f04:	f000 f95c 	bl	80081c0 <fabs>
 8007f08:	4ba7      	ldr	r3, [pc, #668]	@ (80081a8 <atan+0x318>)
 8007f0a:	429e      	cmp	r6, r3
 8007f0c:	ec55 4b10 	vmov	r4, r5, d0
 8007f10:	f200 80bc 	bhi.w	800808c <atan+0x1fc>
 8007f14:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007f18:	429e      	cmp	r6, r3
 8007f1a:	f200 809e 	bhi.w	800805a <atan+0x1ca>
 8007f1e:	4622      	mov	r2, r4
 8007f20:	462b      	mov	r3, r5
 8007f22:	4620      	mov	r0, r4
 8007f24:	4629      	mov	r1, r5
 8007f26:	f7f8 f9a9 	bl	800027c <__adddf3>
 8007f2a:	4b9e      	ldr	r3, [pc, #632]	@ (80081a4 <atan+0x314>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f7f8 f9a3 	bl	8000278 <__aeabi_dsub>
 8007f32:	2200      	movs	r2, #0
 8007f34:	4606      	mov	r6, r0
 8007f36:	460f      	mov	r7, r1
 8007f38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	4629      	mov	r1, r5
 8007f40:	f7f8 f99c 	bl	800027c <__adddf3>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4630      	mov	r0, r6
 8007f4a:	4639      	mov	r1, r7
 8007f4c:	f7f8 fc76 	bl	800083c <__aeabi_ddiv>
 8007f50:	f04f 0a00 	mov.w	sl, #0
 8007f54:	4604      	mov	r4, r0
 8007f56:	460d      	mov	r5, r1
 8007f58:	4622      	mov	r2, r4
 8007f5a:	462b      	mov	r3, r5
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	4629      	mov	r1, r5
 8007f60:	f7f8 fb42 	bl	80005e8 <__aeabi_dmul>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	4680      	mov	r8, r0
 8007f6a:	4689      	mov	r9, r1
 8007f6c:	f7f8 fb3c 	bl	80005e8 <__aeabi_dmul>
 8007f70:	a371      	add	r3, pc, #452	@ (adr r3, 8008138 <atan+0x2a8>)
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	4606      	mov	r6, r0
 8007f78:	460f      	mov	r7, r1
 8007f7a:	f7f8 fb35 	bl	80005e8 <__aeabi_dmul>
 8007f7e:	a370      	add	r3, pc, #448	@ (adr r3, 8008140 <atan+0x2b0>)
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	f7f8 f97a 	bl	800027c <__adddf3>
 8007f88:	4632      	mov	r2, r6
 8007f8a:	463b      	mov	r3, r7
 8007f8c:	f7f8 fb2c 	bl	80005e8 <__aeabi_dmul>
 8007f90:	a36d      	add	r3, pc, #436	@ (adr r3, 8008148 <atan+0x2b8>)
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	f7f8 f971 	bl	800027c <__adddf3>
 8007f9a:	4632      	mov	r2, r6
 8007f9c:	463b      	mov	r3, r7
 8007f9e:	f7f8 fb23 	bl	80005e8 <__aeabi_dmul>
 8007fa2:	a36b      	add	r3, pc, #428	@ (adr r3, 8008150 <atan+0x2c0>)
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	f7f8 f968 	bl	800027c <__adddf3>
 8007fac:	4632      	mov	r2, r6
 8007fae:	463b      	mov	r3, r7
 8007fb0:	f7f8 fb1a 	bl	80005e8 <__aeabi_dmul>
 8007fb4:	a368      	add	r3, pc, #416	@ (adr r3, 8008158 <atan+0x2c8>)
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	f7f8 f95f 	bl	800027c <__adddf3>
 8007fbe:	4632      	mov	r2, r6
 8007fc0:	463b      	mov	r3, r7
 8007fc2:	f7f8 fb11 	bl	80005e8 <__aeabi_dmul>
 8007fc6:	a366      	add	r3, pc, #408	@ (adr r3, 8008160 <atan+0x2d0>)
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	f7f8 f956 	bl	800027c <__adddf3>
 8007fd0:	4642      	mov	r2, r8
 8007fd2:	464b      	mov	r3, r9
 8007fd4:	f7f8 fb08 	bl	80005e8 <__aeabi_dmul>
 8007fd8:	a363      	add	r3, pc, #396	@ (adr r3, 8008168 <atan+0x2d8>)
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	4680      	mov	r8, r0
 8007fe0:	4689      	mov	r9, r1
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	4639      	mov	r1, r7
 8007fe6:	f7f8 faff 	bl	80005e8 <__aeabi_dmul>
 8007fea:	a361      	add	r3, pc, #388	@ (adr r3, 8008170 <atan+0x2e0>)
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	f7f8 f942 	bl	8000278 <__aeabi_dsub>
 8007ff4:	4632      	mov	r2, r6
 8007ff6:	463b      	mov	r3, r7
 8007ff8:	f7f8 faf6 	bl	80005e8 <__aeabi_dmul>
 8007ffc:	a35e      	add	r3, pc, #376	@ (adr r3, 8008178 <atan+0x2e8>)
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	f7f8 f939 	bl	8000278 <__aeabi_dsub>
 8008006:	4632      	mov	r2, r6
 8008008:	463b      	mov	r3, r7
 800800a:	f7f8 faed 	bl	80005e8 <__aeabi_dmul>
 800800e:	a35c      	add	r3, pc, #368	@ (adr r3, 8008180 <atan+0x2f0>)
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f7f8 f930 	bl	8000278 <__aeabi_dsub>
 8008018:	4632      	mov	r2, r6
 800801a:	463b      	mov	r3, r7
 800801c:	f7f8 fae4 	bl	80005e8 <__aeabi_dmul>
 8008020:	a359      	add	r3, pc, #356	@ (adr r3, 8008188 <atan+0x2f8>)
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	f7f8 f927 	bl	8000278 <__aeabi_dsub>
 800802a:	4632      	mov	r2, r6
 800802c:	463b      	mov	r3, r7
 800802e:	f7f8 fadb 	bl	80005e8 <__aeabi_dmul>
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
 8008036:	4640      	mov	r0, r8
 8008038:	4649      	mov	r1, r9
 800803a:	f7f8 f91f 	bl	800027c <__adddf3>
 800803e:	4622      	mov	r2, r4
 8008040:	462b      	mov	r3, r5
 8008042:	f7f8 fad1 	bl	80005e8 <__aeabi_dmul>
 8008046:	f1ba 3fff 	cmp.w	sl, #4294967295
 800804a:	4602      	mov	r2, r0
 800804c:	460b      	mov	r3, r1
 800804e:	d148      	bne.n	80080e2 <atan+0x252>
 8008050:	4620      	mov	r0, r4
 8008052:	4629      	mov	r1, r5
 8008054:	f7f8 f910 	bl	8000278 <__aeabi_dsub>
 8008058:	e72f      	b.n	8007eba <atan+0x2a>
 800805a:	4b52      	ldr	r3, [pc, #328]	@ (80081a4 <atan+0x314>)
 800805c:	2200      	movs	r2, #0
 800805e:	4620      	mov	r0, r4
 8008060:	4629      	mov	r1, r5
 8008062:	f7f8 f909 	bl	8000278 <__aeabi_dsub>
 8008066:	4b4f      	ldr	r3, [pc, #316]	@ (80081a4 <atan+0x314>)
 8008068:	4606      	mov	r6, r0
 800806a:	460f      	mov	r7, r1
 800806c:	2200      	movs	r2, #0
 800806e:	4620      	mov	r0, r4
 8008070:	4629      	mov	r1, r5
 8008072:	f7f8 f903 	bl	800027c <__adddf3>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	4630      	mov	r0, r6
 800807c:	4639      	mov	r1, r7
 800807e:	f7f8 fbdd 	bl	800083c <__aeabi_ddiv>
 8008082:	f04f 0a01 	mov.w	sl, #1
 8008086:	4604      	mov	r4, r0
 8008088:	460d      	mov	r5, r1
 800808a:	e765      	b.n	8007f58 <atan+0xc8>
 800808c:	4b47      	ldr	r3, [pc, #284]	@ (80081ac <atan+0x31c>)
 800808e:	429e      	cmp	r6, r3
 8008090:	d21c      	bcs.n	80080cc <atan+0x23c>
 8008092:	4b47      	ldr	r3, [pc, #284]	@ (80081b0 <atan+0x320>)
 8008094:	2200      	movs	r2, #0
 8008096:	4620      	mov	r0, r4
 8008098:	4629      	mov	r1, r5
 800809a:	f7f8 f8ed 	bl	8000278 <__aeabi_dsub>
 800809e:	4b44      	ldr	r3, [pc, #272]	@ (80081b0 <atan+0x320>)
 80080a0:	4606      	mov	r6, r0
 80080a2:	460f      	mov	r7, r1
 80080a4:	2200      	movs	r2, #0
 80080a6:	4620      	mov	r0, r4
 80080a8:	4629      	mov	r1, r5
 80080aa:	f7f8 fa9d 	bl	80005e8 <__aeabi_dmul>
 80080ae:	4b3d      	ldr	r3, [pc, #244]	@ (80081a4 <atan+0x314>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	f7f8 f8e3 	bl	800027c <__adddf3>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4630      	mov	r0, r6
 80080bc:	4639      	mov	r1, r7
 80080be:	f7f8 fbbd 	bl	800083c <__aeabi_ddiv>
 80080c2:	f04f 0a02 	mov.w	sl, #2
 80080c6:	4604      	mov	r4, r0
 80080c8:	460d      	mov	r5, r1
 80080ca:	e745      	b.n	8007f58 <atan+0xc8>
 80080cc:	4622      	mov	r2, r4
 80080ce:	462b      	mov	r3, r5
 80080d0:	4938      	ldr	r1, [pc, #224]	@ (80081b4 <atan+0x324>)
 80080d2:	2000      	movs	r0, #0
 80080d4:	f7f8 fbb2 	bl	800083c <__aeabi_ddiv>
 80080d8:	f04f 0a03 	mov.w	sl, #3
 80080dc:	4604      	mov	r4, r0
 80080de:	460d      	mov	r5, r1
 80080e0:	e73a      	b.n	8007f58 <atan+0xc8>
 80080e2:	4b35      	ldr	r3, [pc, #212]	@ (80081b8 <atan+0x328>)
 80080e4:	4e35      	ldr	r6, [pc, #212]	@ (80081bc <atan+0x32c>)
 80080e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80080ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ee:	f7f8 f8c3 	bl	8000278 <__aeabi_dsub>
 80080f2:	4622      	mov	r2, r4
 80080f4:	462b      	mov	r3, r5
 80080f6:	f7f8 f8bf 	bl	8000278 <__aeabi_dsub>
 80080fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008106:	f7f8 f8b7 	bl	8000278 <__aeabi_dsub>
 800810a:	f1bb 0f00 	cmp.w	fp, #0
 800810e:	4604      	mov	r4, r0
 8008110:	460d      	mov	r5, r1
 8008112:	f6bf aedc 	bge.w	8007ece <atan+0x3e>
 8008116:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800811a:	461d      	mov	r5, r3
 800811c:	e6d7      	b.n	8007ece <atan+0x3e>
 800811e:	a51c      	add	r5, pc, #112	@ (adr r5, 8008190 <atan+0x300>)
 8008120:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008124:	e6d3      	b.n	8007ece <atan+0x3e>
 8008126:	bf00      	nop
 8008128:	54442d18 	.word	0x54442d18
 800812c:	3ff921fb 	.word	0x3ff921fb
 8008130:	8800759c 	.word	0x8800759c
 8008134:	7e37e43c 	.word	0x7e37e43c
 8008138:	e322da11 	.word	0xe322da11
 800813c:	3f90ad3a 	.word	0x3f90ad3a
 8008140:	24760deb 	.word	0x24760deb
 8008144:	3fa97b4b 	.word	0x3fa97b4b
 8008148:	a0d03d51 	.word	0xa0d03d51
 800814c:	3fb10d66 	.word	0x3fb10d66
 8008150:	c54c206e 	.word	0xc54c206e
 8008154:	3fb745cd 	.word	0x3fb745cd
 8008158:	920083ff 	.word	0x920083ff
 800815c:	3fc24924 	.word	0x3fc24924
 8008160:	5555550d 	.word	0x5555550d
 8008164:	3fd55555 	.word	0x3fd55555
 8008168:	2c6a6c2f 	.word	0x2c6a6c2f
 800816c:	bfa2b444 	.word	0xbfa2b444
 8008170:	52defd9a 	.word	0x52defd9a
 8008174:	3fadde2d 	.word	0x3fadde2d
 8008178:	af749a6d 	.word	0xaf749a6d
 800817c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008180:	fe231671 	.word	0xfe231671
 8008184:	3fbc71c6 	.word	0x3fbc71c6
 8008188:	9998ebc4 	.word	0x9998ebc4
 800818c:	3fc99999 	.word	0x3fc99999
 8008190:	54442d18 	.word	0x54442d18
 8008194:	bff921fb 	.word	0xbff921fb
 8008198:	440fffff 	.word	0x440fffff
 800819c:	7ff00000 	.word	0x7ff00000
 80081a0:	3fdbffff 	.word	0x3fdbffff
 80081a4:	3ff00000 	.word	0x3ff00000
 80081a8:	3ff2ffff 	.word	0x3ff2ffff
 80081ac:	40038000 	.word	0x40038000
 80081b0:	3ff80000 	.word	0x3ff80000
 80081b4:	bff00000 	.word	0xbff00000
 80081b8:	080083e8 	.word	0x080083e8
 80081bc:	08008408 	.word	0x08008408

080081c0 <fabs>:
 80081c0:	ec51 0b10 	vmov	r0, r1, d0
 80081c4:	4602      	mov	r2, r0
 80081c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80081ca:	ec43 2b10 	vmov	d0, r2, r3
 80081ce:	4770      	bx	lr

080081d0 <_init>:
 80081d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d2:	bf00      	nop
 80081d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d6:	bc08      	pop	{r3}
 80081d8:	469e      	mov	lr, r3
 80081da:	4770      	bx	lr

080081dc <_fini>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	bf00      	nop
 80081e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e2:	bc08      	pop	{r3}
 80081e4:	469e      	mov	lr, r3
 80081e6:	4770      	bx	lr
